<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>剑指offer</title>
    <link href="/2024/03/04/%E5%89%91%E6%8C%87offer/"/>
    <url>/2024/03/04/%E5%89%91%E6%8C%87offer/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fbdc7874d2fdf99bfe998b7baef83b2a91c297af342e5ba82dfcabd7f37e2cae"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码提示：圆周率的平方跟的自然对数的前六位</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派安装ubuntu笔记</title>
    <link href="/2024/02/26/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85ubuntu%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/02/26/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85ubuntu%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="02a119f1f7e903a8b3617a3099b16a75ec29848222130ca15761008824af92e9">a22b4d6ba16f62f5ce50bb41f728056211d95c9f470db3855a3af76b5bfe530297c5dfd49a0ac10ee3e637e562c31c19478514b4fd0b1f9d394582c8a5838a036fa0d3ec308cf21af0bcc22ddb968021525ec5379e5214116c0bc36ebeac970957c9f2314d6493c80460897bc751fc361a296e78814a8487cb6ff7333e48ffd4e165e0acfc8a9cd7501aa2fdefc15b08f131951cafe2e05c0273e3f8b2f88a3bfe6d3e4fe5e8eb19a9ee50926d92af4b5007a3ded9b9c156cba58c5dec95eaffab16ad077238d833f075ee80be6aadb120dffa9815bc7b5b52e557a1c2efc07c8a9493a9d451e0e527906a6ba3fe7f78ffbfcd0306bc0cc5eb5be66e8f66c4460222ef47462e6ab4a289ad97c1335b99fdc90f43407789cdeb309756b3670e8521086ed6db6525c722c4abcb4a1f6b2a0393f0112d556ae3ca987efae69f60271e48a0ef37043cadb7afaeab9c40efc0a32a27019cef490cd320779ce02e89ab8523ba123e7d395dca795eeda95cd8ea25945df4f26c438e24e23b0d465b60c1d0a6c749c2ccbc2d2dccaf9344c63a61b6a5a3c9dc8400eb35c10e5d2ed1517d61d3a46b4fdc4aec33cb9c134fe7cd38f61f526aa471779f4de11738b29fe4e7427772acd1f3694cb4530d1347cf254345a0cd00a47da93b92a101fdaa4f18be541e4ffafef4d598d5408f69c9bb4efe169bb24dc448df077cf216c521b02ac47dcd5cfe599eb435091b6985270ff0d452dbb3b5811ac0d04b9c9afb1f38070ed24cba32358842f52360deabd97ede8a3c66bebf0ae732f6d1c75bd2a198fda2c3c69e25718b458ec4489dde5f6377a094d8047f38e1f0020c51d27b9491fbcd3b80b6d916a2ac0c950b37bb94ea01a397f6b19930ba0fe06f8c3cff68c1091f14608623b3fa8978cdf4da2e0e356ecc046f77f079ede7121514ac74f8405cc08d523880ca1dda766dba3acb48c3a39b0e2b663355044454bb1ae31ab04146f8ba5055078dc66184a2b5de9f22e759b465f0683bc5355db2e53d99f3759b3826f056954d8ef2724d16b541bb2417a088e2be2b7a078ff89eb10a0a7c1ecf850f9a724ccaf8b8e13058e2530b916459d7e3666728ad78a5c6b294c50327f6375a319b2fc29c3b9e0bba86f9c1ce24b07efcbba9702c861821ec01210b58a636fca0080eda82fcc8dfdf6b4ce40d812b62553cbd3405490f254029a7d8084b5d420aff6cb0d2c43bcd4ec469e6b00b38cfb7d9ff567960e0c03d73956388115047159e648ff139d330454c259bbe2b51858a70d328df580de9f8a3f9689c3f9dede160d603b0d440328551d0713a6b3ee7806e5c550f3dd9fbbe485326111b3aca32ad5512a459ea11b608dc94bb8e2604fc1f1ab0b61c3a5b6ee88319cda75e50f4ba35f518f802ad0b2576a6dd9628978d93b2fc5bd0f9deafc28b093dae64f856fa48a1439d82d55d425a03599f7d027c8746f2c0a77e7f754af2452feb3f4b1b79cd2a760846b4603e33a98a6d08347147ee57aae47fe2e2e040dea6b5b02fad0b8bd4a539a29fb626e5b547c5da294dfa00faed9ef081dfccb716b6b821757ec9edc721800c6f4e4560022290946018cdcaeceac7622c66e772b972affb22317ea3f5324d97e3976d12c3da0e19a76eb235790be3c9e284f4eecaa0d468b42dfe2aa12dc5dfced6bf23d2a28dc7dce6c204603121900afd5e816318e55f59477a61c3c938b01e9f5fc1becf2cc4199a664f3d1625398ddc02156af3891b56c9db1d5973785ca9323b3f3301b5e63f327a8caca447ea2d5352aa0af17bf49197d3eabca604cbe04a4050822f8b27c6adc97c426a56e940d40254caea0aadf9ad781b44c8e2b98bdb60dd795866bc69b1211e14077e1e075fc2ccbddf5474ecfff5724c0037121df6cf00961a83b9ae0c96f4fe1eaec2d159a03d732c73693ba79c51f047cf1a426ad7f7192954eeb9b1ff462ba2c3a6b4944b4c60afefd8173ba4b0a8b54438ba99217d9f73a767f57872e14b9993229e1af7062362d013ab119dc89119bb976195c87dafa0a2cae5e6cdbb93d3cdac7950c2253c56bacbcf1caf8803145b96284fc9cc297cb1047f7c56dd03b914b98728caf7b8e67d6ef0a678dabc71e4faa75eec055b69b37410dac7fdf4ded0710ac825b2e66272b90f99fe1b189b96347eab2eea50658960441f9d31950076811feaa03725f838938a95f8e3839dc26f419232cdc40fc19618b6cbd981ec5c95e048761c180910d5881fb422a3810c0a184893ff1adb5027039e1c042659fac70558420a64c6e798b3be1895bc026971d83eed6a7f33add4aa9ff7f83b8bcadb366515884cb06992e9ec44a23226746834f59d901b6e76d0190c63212775e718a80a0793995eeb82a90c7c3e727c4009db351c921164165e09a44dab9b49a2ee000887c15009575f1f5e3cae87e579ec2d6b4e4793390ebfa19d3fbc994ee3692dc00403593737e5161f2323dc466e8ea2d1d76dbb92eaa26dd1718939c10cdc31616a2d874d97c8d7282b463df3f658a55e9a2d2679cf1f291a3728daace2a71f9ca38ebd64a946eb804a1d9012c295168407810be1bee256c5047024e603fefc7e85fa821aecc3673f08267ceaa4d032c4eeae4b35cf114ac2b898799f201bcad23dbcf6f463c2edaef8aa28f78a1a347a2d55cea30e7ac7fcb8968e58f024aa630e57a76064939e228e71ff0168c576255ecfe885a24ba1494817f0b75acedbb655499acc378062fc91080a13d4e53747dfa7ace7502b350deb8c0bb263146a9436234d7af28667f7776a8983282b0d18e34403a0a225eeedfcccdb117c023b94dbd8e8b924230d265f2dde915ed22f9bade79c6174fa21d059add985fa3bae6d94d0fb576bd69786ee5fb71d1377a685092e239b14389b2cc86ae1e38173e9e6248b508e333015caf02649dabf293ffba6c186bc0fb7d20fb1e07b28520715f5af55bb1b1d8cdb23d2ae2ca53bddc228fad1cb49a364b90e5f048c23c94821a14a16e64e5419e637a24ab8cb643b7ad0396c7450899c8cc51447243b6822129548e6edfcfa41764ecd16f94de9e4de1d7960f9984830802654b895622b0822225537161cd63198ae8531d1d619f814438aa36d69d3656a51e950031b05e6e37515411df75a121d541647cc1145767b5217bdffc9544c8069e989a452235355784e2fcffcf733c42c2850c3a33a6cf026dfff39ff9accb9e86283523c296526c84545dad3cc0b6a8c80423db2a5afb80d82e1178d6c2ff58fbeae92a4153dabef537e6bf4eeca568e59f2fff6bf456fcfcb01206613da29a3c0c3ca34d9dc65b23f20b2920034a323c142e6dfd2264c56a8f114d3d9cc3549151fa409d2a5392677660260d247c550463429360e18e9a8513d533e71f41d548056829951a31ea79efb0f601c4d99a0251ceb08dddc9ef878e07c8c2ce04051b01d0c62e3eb9ec25ff8808918b6b84d14e09f2d63ec0d9d97bfaf313a3ecd91fbefa0ed46a9e59c3fdc99b8e3d55b15d94c62a54343f0558d6724e22ed65f43c572dbb64d090b7f0a884676c8e8a99739f8ebec18a41a00854ef3a5e42c0a586d3012c745ba717ac31bc0ab96dfc1afae1183b8621559ef3b57148f59381295f8e056422e0165e7717b7b2e64000fb99666f23048c2fce6626901adacda5a7af65bd7529757da0dfe38bcb2e46769ac88e6d08b58cc101a9199cb86d89f81244eab217f4923ce0c3a9e155e7ed9cddbd6ee6a835902952105271179cd84e1500ac002c8fdfcb6a5ff7ae597f2436cecd4b3f19eabd784db139b377064a0efb0a93b225bfc6f3e7bd8acb4f2649a1a32d62c81609ebc87740cf26878e20f57fffe1e1ef2dc464a351cba9e750759b7dd7fcced5bde5dd2d5e4345c52e6ccaccf63ebb1e77ce832ef24d2fcb4875e8d0548f033fa77edae4b255f0163f634b5697911929219c2a2a792a90ebf64c1f8dd5de296ce33d4da089230cee8dcd9f47fd95936e9ae56d779271086353f49d70330d5672f5b85d9df39028c247a468d13ee3e02238313fc26d73f7e8f96f539e86dc4df213e41ab76cdb294b3950aa4e71881a29ac74755da57327e083a7caf66c94a53a8c78fee31e4631b3ce89d686cfc22c62854285de866ecd2895cb0d31aa18227a50a62437ebdcdcc006bbccf300a212d186d4d72753c750c1b3c87997df8698009c0df98a237e0a9ad6a47bd49d83a1d32f2755d0934f9d3711ab0f496fb32c3f0babfcec3a417c9136d9d39b6f66347302104869984ba8ad8b311246b39926c34f212a1134c85fef6d3a6e56213b793c3ad80dd9581e6cf1f2336c319c8465665bc555a92eeb1a16d7e01340ed645ffa5869ae2f24e7ebae3619c0a32ba0f8f3afa4abb315ec3dec500bc1d8744dfad69f438dfa862c5fb8741d5dd9683adb63275dbc8aa661636c846635e26fc78322ca5a5d4ad2051c643f33965580db25339a1051d3e167324230dfbfdef98ae4a34fa0dc3444e830d6532c616530b9388a4323c79bc22e537b95e9dd026841213f824b96c34414830a34093a70b25c449305886426860b64365a1bcdffb749d67c8a7cee3d603e08b7c69cb45f47cc41fa98ab7244b46d8798aa8e59dce84eedeac2b42a7d72bef17946be73b54fb1306d531190c141744c5e21c2311a2721f8c2267d497d1e395e5544f05a2013529599bc695ac7d4a63de17dffb1051c683ec7a74169605a67caa2892538125852a4d4036633b8271245605821e6eaca6618b3e615f80c7eed090e6281f34c4da486064619cbc8a9d17e564e5e636dbc80ed33fcf36ce7c5aa1d0b293284f5f1a868ea5f3fdf7cc4924873e07f6f5bf944df1524f24e786ce4bb65dadbc9d4401235405d03626c6c44269bec2cd35c803b5f5d0574779bf0df5b13b362dea2b4a45d9cbb70787fd8f66339613950aec0ba180947cda394318b62d23c9c7d5304d963b7032ea9427fb4e784cb6678e98939a39d50bae87ab47b459fe10319c249e6d1e50597bc2106de7d21e503a18b2c0816e0d1f948d82777c8a33757c83da16688a42f91e8105943b91f8249a1ea29fdab5ead7e0818d1c9489a91f8d042274f82b7cf086e5c0c3dfa6f42154cb6405786fe381b721f9ceaa8a92393e74ff9b4fdcb580686df9b3d884dacf89e7e97d0d0d8ba4e76cbe86aaa8d35b11672e407aa317203860284a8aa3c098b10ce6242d479ed5ff6d160310c7a03d8f742fdc52772b7a3f5a73dfbf20aba7c79c6c37de4afee3a5e1c900346e2f1390aac5ca29456821e9066e4cc13c2695087e1aae7f1539700a3deb49c42e7e121d5893ea461525f2eb4a7cdc5e93e2f208196fd98751ff1551d5a55686e160bfabd565a219ee3a14a384511110d0ce1c754a8a0bd0127d1dbb842bdcbe538142ae1e986b9ca78c07b7d00af719749bfe0185faee033c12406771161e48bc69325538192e34b815195c869e4ff5d162a3ab672f9011c78fb446960a8a11a5092b68005c8327ec947be6b72b44d3779dad09498bd44c1b1282b699aa616cc2513724a6faf5a8631147c0ef411556a45b67e553dd62c62e13628e5ba860db81336a4252e1d617510013d158e66da87f0ebceffc6e0cdf790a709b11d199e059713c794141f95f8c218932ebe9ad83b502b20d52fcb5211284b242dc529303fb81e80380819acbf007339de8412e495c1e7e74daed9caa41525453778d6e1c50db66a5ced4c2448d80a5f9bcab5497b20431249b6ae491d8ae653a7a37fb7e53d9f63f1791b391e3dcd366b709c5e3a90bf32511e0e4820f795949aebd631dd06a16433c5bb8d057285d445c0f8548dcb6a26e961bc37c647509edff801642d13e5511a6762fda35e1b6e137b084a3e87fb6697670cb8983f9e2c2610c48a05cc6424b3e6d285b3596414007c84f509cf14957f82af4e17e72d2cab7c73c824686d638d0ac83f9ca45c177c2dc8bed81b7441dbd6de6f6b4e67532b5d991778f2b8457924d9b05609fafec54d30ea2ade5b7a7a2542910b3041c19cf785ba2b1ebd7ba0c92a54c794116e612a2ad86bcf06dd7c882eb14eeaff52778362b25831ec8f6fb244b2651b908eaf4e7c57b565cd391f81e51b0c9b7efb6b9bf4ce1550c2cda47ca9bc5ff015923c46345045802184af114ceb70791bd5f9c534b5bcfae21b59c83a18f803afc8849237bb3c3938570d3646ed0057d3e8a61f8c15c972e805ec303a5fd3478e5043216116406d8a8b6fea2b5b3ac223addfbb48a4cf775dde4830df875ca15739090671283e86f8a1866843103b43b294bc053d188dd819a9fdee73fe27b133b1846d4c52f4ca9c615c42ddb81806ff1346d09513b84b727a39ac00d1e74ab19f89f26fde7a17e1062b15269ff0a0cb59328c011bd1aa8e08e92992434c0f365fad034dbb635387857b989b330c3d175b43c7aafd633b01338f762e4b0687051caa93ce92336d16a7b17244f6c6fcec98a4f9e4c392d9a331175dde5536058b14b69e2655ce1d90d98b8e61e531ed4e00e03629ab83807000c898780423d44e3e11f58adcef867aec1eb29fc53db06ff6403ce2ea8b18c3fbd8c9e0c544ba3c23b4b263a3a9488f03b45ddea4b93cb09e57f86ef33cd92b3c9c56ad2727d1893328c9ed54bd4daefdbdad04cde8cc7eff87dca0926f60202647b0634b3c0451159f72449ef9a6f92f8028d8586a85b40fffcf52c4d1a801daaf82820bc265013a6804c408c3681a711c9e6ffac2c21ebcfda00a9f4cb6114d6b00a7b4431263ed32126f28dc54dc99548d65b2c69c695d1277c7025f77d1d511a5065fb1e6eb2eefcb921bdac4354dc4ec54e1942344cfb89b26233664c4367e7ef077a81bcd78ba017c585c8f7fbc689b5457c31b452f419b8154d5db76956350ed844602f37d4e62c7f82412ca7d154cce4f03f74e7a0747ac04a2af01422f60d3e48a9697099e5e3f916c034ed2e72a595976050313347c6757d47a2be32bff5e14ff1ad271781929673d8807571021ab7b628c05be27d812437094bad59ee6ea7ee70e0f155af822bff045e217fcadbd2717c0154c39e22a6b0fcf58552ad147679543c819f6db822fce5d7f43e599316fc0bfdc8a69b78f9b1cbc1b82cb04dd12af68726ded4a4e352679e53cda34bfb0b9bf58bc187651ce90a51b0370a301501256b167bd69e54518905cb12917bb03cef40cb2b3bc81af6ccbeaa0661ae6dd31e6b70629a2a473d5f156e7d0ed7a033ef060fbc05acbbaea193bac073643b8301b3eedf7714c3722115baea0c71f1348a7918b3d038a22094773b2c7c791492d4d65f4d6d1773390baecebb2e5c1b13a8ccda25143864bc0b446794f95dcc0ef7866802c8a6ecfda254b3b59509f3619dbd29c2375ab709116643f9f14acdd656ef33fe978b035d34599b8466402b5ec08c48f438fe20df651dbe51abbafd91ccd807135b723563e12c6b7e5ff9f94bc56414c532758c190531c2f8958487a95bd5086ae05ff5976754d0a92ab0eb30de44b47ba81278b4f48d34953bcb3867af1d27daa9a9949e408505290972dad85aff55a0d187f00f668ae05b62edeccb48b2ef2d901d0f3d0c743fd9ff634ce0113e510dc68aa55c46ab9765dedb137f6b3953c02b3f81069070ef1cf36e0c65d9512e1ff775593e7848b678137e1f9b7adc1787db9c345e1e19c9bd312b8ffb3ff9781ae0126622c94e6662e1492983cfb81ea7120498d7318ad046806781eb8fc4c6f452fd54bf537aecb9be01a3135d0a6504e7259c85aa65d8fceead30e10f082cad3aa8fc702571a9b931c755ea1655000e88e8461ec023f810acb554d4c2484d1030fe68512d66c9c94c488a291cb0cb0ffdfa30d441229a812c2d5d272ce93106acff0976cd1bb9a21ac154da205caf2346c086bb627ceabc1a8b0bb136cf87f43f3ffb6381ac8e08abec2c21c11436f6d4fe71fd5ecb53e74a23a7e69b6bedb0db0a6a1d419a504c1f6ff4001a3dce6cb65f1a0f3b36378febd34d3da6040bcb2414b382e17aaf9e6198b5b78a73a0068d2ef57dfe5a56b4ff975dba723899c5215bc514d9a762e0445d3438edaab9c42caa2a79965c8b9354625f27447d6f5b30e55fca8b350600119b71acf7f5386b869f3415bbcf40b5a58ea6462e39b594b469737839aa873ae47dce53f5f4030365ce4a8286a57e2be822927a2b42f7fc0b84cbd12d6825f16ae47231b854d5daa4a4669183f29b0a3edd3d8083910128eeab50b565553b526ce9042a6e57b1b21e54be16e65b1aa1c802e3d41f0b07cd902bd6bed3909cc40d78fed05429414e55e16c0d0b5f59defad5e6dbde78836e35600960ff4a68a880d8b9625f5f15a5112a06fa6b427e78cf99cd1759c786be8069923f5c62d2c7a9e160ff663e9cd67efbf1b99b846a315ec18c117ec7266b5e21f8acb9d5ad35940a5a461efc0db93f15a390736f56e50f3060f818b68d054d18043436538aaa92447e812839ba5eb84a1c0a22cdde8efdfb1a75211fd90cb1987d048bc1ed40566249d5b72c1570566f2b069914aa54020c9de9d232201b0056a5933a1e6a0c52fa94143107b363ac975f32409b06d751fe52628a59d9bc58b29ce47c00aa7a884b8bf4ff4131c6d8efa9fdeec7838e173773f7bd071faf9de60948eaa14efbedc15e508625bebc0a5c5dd9b9294b923518bf9cf6575297c283a35c542d01484f12f87b2810023f9bacc3bbec56a92f0b87b4770903456050f23798fa0b2bd6c18de75e2bc16d622adadac07082d557f6e2caf0ebd63d408fdeabc2e797cd097f6235d0a9f4e5e7473b62ac99d20514c9cb8c667bd55d880f4a63d408e29aaad43baec9bc6c643bcb6d10973f2b4991c583d186e1bfd456fa6ff3913d2eda7e22edac868d1cbf8daf57b29d798725875dcf17a0634ef80347537eefd77c894b8efac932bb8bf23c29fdb934779513c9a48159af1912d9ffa374aeec22c1beb199dc2f6dc3bd4cc00e50e87a28961efc839e6eb17e2815b1ddf70b8618425ccc378a8c5a45f4dd84fd6692e75371cb73ac07fa3a900f83540dc9fd40a214b6d060fa0397b74e2118fd969f566bec584ae3726ffa99a49a1f6928cb1e09ee6feb55ad6077c97bd05ee2329faedecb0ad1727b3d58e4c05ca19ff12d61234986c8549354e086641b2de5c07f3ac6101056bb339a65c325cf56c5f5104d328488185b4ed89f2296d814bed12bad4b71e6e288e241b4ac89b4f98e7cac5ab5213d5018a62f297cbc4fbcff43c30847df30c88c46ea4dd54bac5468967bcc5b6631916bd35c53d55981d280e6af6437b3f5f962a4c7fbb5f99f1654c0d7926bedc1d215a38bb0978de8380a23c2d803579fd55a3bbc47d81a5d0f0a019d22ec7c2140fa6e14a16523e772c49c6ea800f4421f2403252de9f36aa9e1025dc3335219fa2018f0736a6e2a805649a621aa45c5cb9b4045e8c26464fdc2cdda9d9c87e5ff73c2ad3d8642978d41612ff5ac99a8e0d331c8f7b9f214be708513ec30371e76bff35cbd4308e1b1f95ea3d5727c4ebdcf9d7f6578ad081156bbd5862761bfd1d4217d9f535cb0b7bf07f384fdf5700b3a2c68e96ae2768bdbf5df741e57c0df3107568370a6af13045f196a98702e44c6caef17b0741a09706b271154d556e9626fdeaa1b145d830ceefc874a1475e581f9730a45f6daf1f50cfab54aef1ce1a2dd749795109d42741cc8622be55a0969ff090fd02f699bda5dfc54a430be85a308321c4eaeb2848693c7a7eea30b96508d6de59ea9938bb8aafc3ba589d0da95d82c1a27764956a9c687ef611d5f628fcf6c539587cf650892d35f95a0f5808427ca7df3c564ad419f60af10cd70fdfbebc47b4bc734c5ed8f6a9367285d29a0fa49b928be50c6388a3a35eac05aa7aa7278060c9340d8d64d7f6a56ac167ac086675dc728cd4f364c306d54d2484d7d74659af4e2de450cdbfc6cc117e19a76bd1deef341fcc7228c7339cf2d8a114f91bc2515813f86fa8250e80fcab12a16e16e080b6c89a1ed1a8bc7c074995b665659082308e0664863fa9c8f5b472d312a9158f81c04e12b3e92771bbdd3a5785c039b297847c952433e326ebae22efd4df74cb411ea56c7d10a28399a96c4733eff162fb4abd7c5df2421d5a460815219d6142b4f11d929bb0cff14cabebf029743124dc67f2f6772d95d96a962185f21c06365e006c3af01f20cef6dee8c78c9bac6ce6742c3fb03d6f4666f11cbd2d58d04da4129a46e6a3b20510539cc7a43ebb62c2223ed8a87e46ffea8dc6946922ff640efab690d3b5ef2e4f027712a857dc31dd6c7b3565f2449ad9004e5380ab18c3a9e6403845f690df1a0377be0a9b5aa8c516aa0a783e4046b9537207250a6580d9df997883bf0430301f5bda592fc5c7df93f0e35a3af66c616b697471400b3337676e59fddafda84f3e0b6b25e1268c49a2e900288ad7ca57b7ff2898249974f2c39bbe01a42a21f194d1a91573b5dd28f93db9d104c922635e877ad17cce637e5dc499777d306680eea18f7dd3c95ba3b81c98eaeab9eefa3198726527848ca1766bbad731620803c4a260dfb7e9e92d5cb8aa1499852ba66557de44456a160918e6c2e9b7a6a653c217497de27010ab6225297a0f281f394371201c7ddc0de0f726c84184f8676601749387f64caa4f1aaa8829f37ff6d0c961975d2feac6ef488ff1c60e19895df1a6bd71d78bc4f540196d7a75d8706fdc05a766a9eb3d3db5161eba4c83ea3d5e2d51ab871da32681df2febd504031ffbca3f5006fdc1ffbe2a8fecbcf5824338be963240016c54bed43945d6ddfab7bf1a1daa4a8557879b4e7743b0b04c3c64ce0ea7a536ad0a73de48d66a6ba730f0a23cfa2b0570b2fbe52292e45f691935c27ff7aa0953fe2e64921dcbc98cc55e9dfd5edd6683a7d5809f84aa4405d86a65470f5584738d3137511ad575006c1b9799b5536b56ab37e447e24591806939ac52c52890530bd554692ac66041d213112ef5688dd216df92f6a44a0fb812ce51d63b9e2fae56acb7a13410f1467c55f772d95b324f0432f48897403e312ebd1ca857fd7bd22e7f1893b14507a59aa36fcc1110f588bea026e2a44391868440bafc961ae83801733aa1dd2ac0906b756cb96f49c70fee3187a44c73b7e4a0a530a3da90247c1bbc04ebe3ec098bea6b299e4c93b98a3209aa2e577cd6b1818804408d6cfdec1bd6a7e73f75c13052796f2c1a0a2fa67470ac604f2fc95890b01921fea41686893d04104ffb1aaffcfd91dbf3bca04f6ec95c11067ccc3fb5c9588533cbc16613ba8b99d258c699b29a34dee75d1397574b912890bc7b512974280629b700afad175417395893746a6f019d4b47276e5eb2e5fffc2d54ad6980864ee4a0c49d24e66c8f2ed4b897859494cfdd7fd4176ae6a09e8934e151cdcf2c0eb0cfb36594432998b928a724e885e8f14455abf3aa131abb6a2f9779b81488ddd32c1c43b188277d8153670d701a37df7628a0d2f3f9f05746dde184d5730adab2c8b24b742434668e6ba21efaae44cde262d50419ccd3a7b258d9df59d652d8d9a914340ef00deecc5f82d97005fed3608e86071bdf8432a9bb0e5f7c234a5a2d6a87e0afaa342d6fd773a3f60b3286888a2774c4e7057a8094eb08d2fe067045772bad50efeb00553261633a658afe1be36b0daaebc54770626c862c40461191991719c45f91130dae0b9360e7edb084406fccb4d269b36ba37627b950566bb6fe694aaace241098e4fe55c928849bbc4d3a78703c296d1361526a5564f49f12cd233397f03b04ad067a791e999b595267af65c606a6409933f2cf8b4f5756582d761dbd9522d7d1f5c06f23b2f321aeac91ba475fbddbb32e9dd14d03e1a8beb160c4de8d2eb96ac46d5b02d1640ebe05fed5efc1485d3022b6605623b4a1e7a179997b985f859be9cf8fc660f3be8367cfbf4dfe16b25746ffdfe64325b5fffd23bc967654db05e090b513de31664167ae35d6e94973fdb032caa27291547d2b7dd97865097fdb365bc23dea3be27c7e56079bdcb21d7c5b58784f27ab9c3916cac853012ad9f0fe5883b49f53f6a1e5fa778cebad8a4c4dfb07df14e7fba1ddf05c8d231a7197c39906a42eda151c5dca555680e5ea4c594aa4251dd6984a29d0e573eda1e3273f827e375411bd3fa5ac49239f26b1d7f854f64bcf3cf0b38e3a0a61551acc89f8d5e0768dc6bc4ca7e1284c7d4d58d0cfd88f7adb0f30b725df305354a91bbe36076083f4d416de103c6b7950cfebaaf42fd477e37108f0fbe0d024c5e071b84da289c385583dfd4d67321dc6733f06ca9a09ea713bd5687d71bac629ec3b253062fb67366dd875074cf044cbfee9777c76cef8d70c6ab6b344feb7a2d7b217607f56dcd09d48ed5d02094acb3c8fd2713a10e01f44c0889d8efe8c8ab2d766008faddb6b1871339a33202c0f26972d971ff306edc6a05af1eee7a4e57f46b30bdf608c0260b2e96507b7520b0018ad6718b5c472198ed572a2118ce04d75ce34a7a851ea0399e1aa6d45fbd2687eb326130e771c1b792b31b4564c7a4a2bde6f9bcab2310d4a8d3e1256ffb5b8df8e7b8fab54af67430533600d2a5cda52c393fae7ebe97f009ce4db4aa617e6cfcefeffceb8ef931f3a2d573b5450a6bc5a333250dccb5787abc83df17e2661cbc10621563b1297121b9132ed9fe03efd9a3b0ff26f741f0e96d1ae1f90ed5ba3f67f1ed13145277e57c1e70b89ed4ae0a542f9e0d7ac4d35d0a09c726bb534ed4f86c3e0c319d84df3fb3490f0bb6714cf3499e3e03d93bf605361474ede88148391e49e7f938de4f6c2ed097bf98df3c367ea20a04572f19d482cc8f5db791ef6efae71c7dfc64df1d27234f321c874b94267b9986e809d799f5cabfd0901eb1c5455e85121c231d5e1423ebd9fdcf3709051cc91623c93106e39382454501ff6adae4d795471f731a2ddaa3533deb64cb56704868c31e6011eea690d5f2a61f218a96d53a3fed0021afad99a99d61a6eab791cc9657157713a71646c9fedaea1168df962c5caffafbf6ee5447fec210cc49b3511202943b12bcf627ea67faaa0320161a20bbbc576dd85abf75c737d34a3e06deca61e311ebad954b8521233f7499ac4346c607c39eea594eb3a3465b38b238ba9dacd843a49a165f91ea379959bb3be22d0938d3def58272b80d21807923aaa91e69ffb3466fd49eb9e4d69e36fa0e9e8c6310620149e4b5e43659ba32a5f8fab91bb65fa9de5a1d04b931ea65cfbc1f7c13a0fa7fdb5876204e988b26088e87147dc9ede27c280b6c940a03a1b9c58566f759438fb515a3a1af560ac76808e690f0b069f069d989c6d3972a84bf7a4da6bf4ee82c9eb7db8e28bc94ec34df63471a1cdf671e9c1fc64034c5cc966590875a60b49c0424c9c0583bfd96090b76de3c67c86c0b3527049d7eb16cec89e7eef086fc3e52f4e13bb836dc6554ce703dc159b0fed96ed4b8e004bdf3c37ab617e285fd579081267104692c45b00b514041efaafb8877b174781c4526701525f604971c8ffbe4d63050d70fa5cef000766dc2bac1f1308c7b747569d30a639acdd4b648f817c6b733a81ed55b07aa428db827cf80c7a4d3a47577792916099849af0869fdafb5583ed42c8265fafac330e2bd6b0dd9192bc7a2784046dc4e632e4a590c3ea3b9801a8ed14609cff26964044513b2fa2ee248ffa198ad36c5db5b620c990c03fb8207ab304d87d723e7904bbd10c7f5aaa550fe20809606503f9755fec764e0794ed9956c818095bdb5bc89326abe2b64fe3c38f0dafab22c3dbd8a220a19fac8ee2d5a69910284c4ab3b6b735fd7df133c962c05f1d04675b1dbcce3547f8d76a1e18c0fc8eb698ba3a6a2ab27c5e7d2cfb8232e273bd6749a4b17b426417f1e81ba0abc9651435c191c8efb653e4a4bed31dd93e33ea76e1ab903366791b5ab8a93c710df5db226e3243a26ee4b3e60239892031aa1335605ebfaa63cf24061a68b2f413b4655a177f4a8fc975ac2cbeed5f49cdb43320713b857259bbcc53112ad3da6ea738007435941a3acdadfa59080fdeea867dcbc00d80b9491baaa7340d0f07e7eae9157a2ab5175a5d5f845ad678f808648559e34c04978d743ae6a7abc69bff4e304462b26916470809e67e1e710ad2ec31c7e990a0052c63cbaf7aa83837ec7286212a69d3d7afd45c66d47c2efc218a1c7d4dbb4f88da96376e4714e71462e725199f2a9a4abbd85f4b86bebd24384a7d7d440ed8a95978b530551d88bd5a90b17ba75b1bdd1590ae120cca8a756b0113b53aac089a5eb61893ad769be590db612857f7a09708f038617461e54e6bf6269badd856b586b8850e25647a61d335f7a2f244a563fa82345f9130f6a7bd46002cb2e5e451ae523f04e3bfb3a061b6d6fdaeb8e4632396786dca1b0c1efbfc9d1e7b7d92643179cc7418fecfb2527ba54232692502e5fb98a8401db926015a84bfd8bf4a634f5b194dbd7589fc3ae617e9f79c38358a91c4c318874b6067ba28a2988b4df1d5070dfd23402b785f262df4f7ddde0daca3104f014e651c8ba1e39ad59935ff0241b76f201b6c75f6190daecfa61278471c64344bb1c8c440f3e5e8364da590d7d167061b1b25a0b9d9d81201093fb3909f5e5a911a2dabd5e9740171553a77e896322ff23aa25cbba9e53ed4af6d1b09e1cbff9484f9ee1fe2bed51a160833fd96b658c12bd3b453c92745e00541b5efc80b2bdc4ecf96860e66549187d4a3310200262ab90fe139882333f10f4b4ca3a5589645ba7171abac040fc3f5f30cefe0b5992213beb6ee814a77876585b33e5ce671cafedad3a22bcd5ff973fc0839f811415d0f7cc062b5a2ff2dd09473827a28e0cc3afedc6c6faa068c7da3979196b92dd2cca574d573b5a3748fc89956a029ab2e39959a6f01f97f0fc8e4c3c5df9d8caaed3c4854a23c9f02d517929e32b68d0d6cb1ca1eda6b99c0a0c10db5f252ed996ac2f1865b3d09c12804fa58e771d9628c0f50f411398f3075a0566abeb3baaedcb52041d230c203a1a7581f572b123ee32b16b5921e5528404e139ed9a9efcc5c0bb8318c31bdf13cffc42521a8e0b28beb5bc535ab64ad3bd58f065d234f285170b23774a765fda46f341a60c2a72b30dcb6fb1156c4b3e5d3e55393045102b0bbdbf868a57a58b55ab36760ff744be14d31459f9222e8439893fbe10edb67514b1bd491005029703a481d40388a76c2ac8e3105e7cb932bd6c45ce53a16dbfc04eaa0fe8e69b02559a5a3b823e759f332ba7813487bf3ba07eb13b5ecbb427548554439945c4c84a5ba70ca15e5a5ba54f60d398755569d8a5d889f1f5ad2e05fb3815df29f1ebf435fad959c56e7a40e3ea67b9da8f926b2677de9e6632c7fc8e8c1aa5ea8ecf6d88fac6037d8c567186675c8c606d2fcc018ed704e49401aae3c44b798084f227d397bf82ba7f840baef29508bbc1d172a544f239237d0f927907694ad601bb428ac5f1dfbd7be897354ffacf0fb444b1edc7e3d9f56b097605ef3f1f21f39722565375f7591f52e6bf11e59704de12a587e5e25b8dadd7076d3ba4d60bb12eedfae1eae707df4eb1b5314f836fc8eb33b311ec3144dd29f0d9b07962f81f90e73806b78c39535051fe83cedf5fa803afa97271af1fd35c04350352f6d57957d91741fe77467eb64da90e1c18a8e0ef38845a6b98ccb68834d9678f497c44b0bf1d51994c9058e86707709782c0ce4df41ab6f5ce925fb4019e94ee6f7a9ae05350a049ea56239041b47882efca4980aa8ad224393506c7b1885b931ad7a49f039e68b399a0533e46b7414a2e7b21a5d9a251bc1075a8cbf36d186d4e7dcfd28f92227fbfb8f36abd8fa6f3927912e9fa1f65a49e7e65c90233f3d4a7954f3640309f77a6e79ea4666df2bdf22cfadd79ffbf36b13330410bd7296d62e45bae0441e75a043a24f812f745c34dc907809b17c1996329977611e5bf8615b5a9e334a02a62ce03f5182ed165f4515f4b36e04d55f04a2823af71e11507e709d7b4d9320576d31e88ac405a0c6e776154864d410fd325c585e66a331ba55ade53cdfc9b87fb6b44d452f2be0cc8f11bf1ee187c46880c54ec4c83298aa42005b2917c85d632e67eb7168f5c9d323609028f2ddea91b710f117edc77fed2f4bfde8bb0cffa59688c4322d3d011ce83978463ab85ee11949b078636ee0b96a609632faddd3259888545862ab099a6764d90751b378bda96aa9c5b06b42c058cb89f116ccda2d0fe0607a78afa5d52203c1ad6b67c837421a29ebd059ccbfe6da5e5fd33889d5e26d45924d38b56548adde8732414a332956173f0466eccb4c597c295e2c33415b8bdab2c1386da175e6d7f4a0a8ae65c1e49b56a9b8f0a98ae7226f2aa169426332b2057d9bd3eb19b4fc230b1a9564ac6907800aa877472c7824496b7784426ba875f851cd8dc8f35ca34e0516885d32a33a7eb39b532b7f0efeda1b6b203ac2b54521292ae2b9f4656fcb90528e85b22e46385e98d0d2ffe6d255d3fdea5bf09ef4de3abfe55919d36870eb408b67dcfdb4ec56fa20603d358a75a181df0b55e98522bd8b02c6647cf0b44133322aa7b0ca9f9487e8361eb85e53121284b63b59fa2214fcb69560da5dd6c5c7c80dfdaa7311b875077b59c2d1853caf81c3b947d2cd31420450b92e6cfeef31efd18e1c95d8722545455343c7450bae763323d611063c8f4559cfd484d1493b65b431bec124259cde7121ac1c8eece133384330c3c4908a0baff7ef519956e0f7c78cc9d1edbe28989b6c5e8ba7e4a244728773d86db3df40a95da6f3aa80b3efb54b0fb335e55b09d948ff4e0ce347d0e4213b519a06f9beaa67bbe43cd6fa1a5f5c6ec432a19121afa6f13ae75d64a9d13ce74da19d5d738c381b32fa469b40486d14afa0de1a4169fa54f3b0342cd945bfbc4895e4d41f36357f0ca0ab5d42c0b6d2195393dc8e3f5f27b42a6b510855b1ba852020bf646f3cb110dace4fe74258bc4877d4794285db4e97e114715a792f0c95dfbd606d8faa4cb0eff60a8ea2803a8e4bb1de92b3b4cf8b8dd7a8b3c29ba09c0605ede03044fb64a03c07d6fac1a515d63145916e3375af7445fa757c69d4e6b9455719ae6a00851b1cf1de413b88d286b41b7ac52d43c3ff9d95c397713b18a8e594e7881d5b64ec6045228bdd8b93de1f6d2fda57eefe68865b2962d52b745349d24a892fb1cafecfea497767269c526f9a4201bef3af8b94169b805fd3980dc7b56cd7657e6d69fc74147c813e88e347a80dc9a1200f82f5129e54356dfc885896d97fdc6741f25ac0dd5444c8f0117940bcf3d15fc1b455e414aa1e35eb4239c94b3e9c700bb012f078e531ab723b3001a264c06d09d932496e63dbcfb801341652ef6f844b2a0ac5f0eb8f098b9b108a85905a3cfc39e950a07fd044b1d77b6955345bc2a8ecde15c504fe7dad89725b6f0859e806bd9121437acc6bacd9e997cd34ce26c578578fe6070956b9e2a3fc10ec625c40044d2fc28400c220d8d306fd3b5d03058bdf8dd579aeeceb54599e9aa4fcecc5f497fabe444746162a6387b9fcd8df61f962c97fd217d3472e1bd606ddcd7241433ccdfb635102de8bd5c58a1e7baadb6c3f16def818c28bfefadce03bb786a501616a75910c62778a23912021a3587c8c33eb300ef288c14d5df1ece99f2764c64c75c085c07c897359bd63a141810a8e7a9b108552a45f948405679bc16da30c602a7767fba591adec0c2da28053a86c41ce3fc51ca339812bff4ab39ae5629529a8cf0c199ed3970850bdfae51180791c47d20dc8597cc355f65d5d06017f9fe16ea3b66255f4af4d2949fd97c155e05a3071bbc7127180598c3dc5a2dff787a1d7cbd203b0b2501f3a1395b637d283b3c37598ebf651b8fb34d556f93db4a45f01ac08ab599b20c0ec9290fe8a7cb9d868d427795e891b29856e67a45d3b626fee262ff4c1a67073fde5c47204d5c37f7d38f9f502049f4156ee35e2081f50d2a60d7da666bca2ba68df9c501189f8c67f710a618c953b9e78c820795c43ec102f2dace071feb522911f15d7d407d483b89ccda3a871cde8acbbdf4ab0e351c55cab00fbce3be27068f54b2809b3273cfd05529319450df2692f245398a5c2d76eeed0995e9a5c3ab29f5266714a19c78ab50a31fd3d0fd8720d7dd8b3b1bab3c784dbbadc1607c4ed3582d2afd5e6cfd0790004cbb57f5d594336aebfd50df63597a90948d8e4bd841b61d66f1a400b687f9407687309e3d8b22d196082ebc68164c29d5cc0de010c6c9a2f1068fc6fac626fcc5160d1b2c783e610144491a80cc6539d750a9f165f406256c1fab61f9f147c9453d68cdec008ffc839f010fa3766b9d7cc044bf1cf4dffeb88840caebcdb2f98faf315a0e72a53640cc1a88e868cbe7a32394548fcf98a15eb19523f3ccbe64db8bff4d3700f0d44e98e967e180313b981f58c04de80e38fd5060076634fc644d67e5a5a8d01bd7fb1aa9888079d3d0d0335357931866a61c4bf01f3eb1936d73934e69965d81754643028508b6a9fd0df8f64a0a05c4fe5c1c5c9e3f02190f529975494f0f2d9eaba4de95e42579a7e548fa43740f26d543825cb6591c2155aae95fd58bd619af00ccab6d2a050ce670c9b1214754e3b0ab6082eca4cb792c7b15cc269c2e033c21e45b1d27d29eeee7ff2debef74d1ed66a739e830c7e6adbe02d184925b32f49fb77310f9bac58783c3c2e7397000f5746a0ee90458b844461963520774a590898dace48d3cd3a5655bd01a8061c70c1400417832395cebbaad56270325f1d6eb04bf4492f1af5481fbf6f000a4f1ec8c977b7d9e0fc7adcb16b572a196b2f404889a381257ad0a08f3a2f1c51611aa9f4065d7a2b2caf24fbc59815312149999060fc9122642644328016760038fe301ff66ccffbfc75ac71a5ad31edf5883dc2e25103bedf54b43ace9d3bba0732dac31cbcc30e2b26a31c0de120002d8c48f41b875c008d49370fdbb099115154a178f576f94f7f58023111c01d6b7047f10c7fbeb9170d79e72d2d7d78c6c2ed05fc441cc0f3603361d3c931a6fcd1c2ec3e507a6ef29f14fa22529f86de9c858a5db607bb114e23c7eea897e7d920e35990de48aeb5b5ce6dfe8f5492a787f4d954422cbfc70de271d2269165c4a87671fcd097158e92287eaaac27381c853f2284e7b2684e15a6908861446772f7c2fa26e8d4140e82f5c167f7c34405459af60e23a165ae8159bf972424d4380fb149d31d85bf27952bfef4541a1a3954d052a89d12bdf6df8db94910897a8dc9a99d7d61349c665f9cbf666a7a53f935008ab8ba57138d0fe8766dfb36431c965b184d8ead2d7113c27e1aeb43420adeadae7ae1843c183747f744f509344d2a4c26a5ed1a314ea6b1630beb1b3e45906d5f2ac692070c49b78b8e693de91dbdc77576b9f2814466607328c8dda8f4459a907ab8faa509c7db811112cbd51ad5fee5e95584cc4e128a92cff13f1a37c496e40449d225097b3615a4cc8e268a4d43f7ae5e17645c8f146e5eca87b11d4f6ab197ec25635062e3ae17f18d9c9ea6946928ed275d1a18400d20d43d4a43c224e72d0a79e182cda9f5fd355c233b2456ab7c995a44df3d58047a17440362841a83a84f95720327899f05d5e3e045643c7edeb9ee8ee7202a41606e3e608808fb3bb98a6d913f1100a345410d6dd78404a64ae4f5e03e1b0d44ee50584d9c852f503b57e9e7ecdcea75900617216efc59a7b794de41a9f9f091563d7503a1caf3e173c3d3c55294ac578e7359ee4f2183e75c51117640ce0fed1bf5c65e6fe9490839c6ec0937ddc00ae2a62e1947fb73f5acf34b7aa30a8947be4bad98bf3884696c63e8bdd744432fd4c438da4c1b5bc2df964a8e04b9e948fb3e958744e7da28afc56748d69cc11051410342119383913bf7b217005c1e84300fb9c653e6d7794dfec1eebdf87c74228c21a96ce0cb6c2c195e19866580ce5480adb3c567ac1b620916f864a3e09746ab134d85ed8b80c77cfaf417783823d2095064b69ed87603c6c78719cda9f8ba6fb6027dec39ca9844a7e79a5ae21a1a0de49367181cb4e2c65f8bb57a90b9fb9ab4e4523078d942d4b99fe87a4b7cf91ee0170adeee60a7b9440bc7782f759d088d595f09a8983cef04eadd4a247d52fb46815221139781d758b8e69789de4c23a9fe3704f3b93f0bb76cdb64c7a37c8be1f72bf5021610aecd72f5f674bcc67dedcda5f88ce7e683a8428e8a920000e85d5b30ee599b274dbced7b6e4efea30abecfa3c8ba5d4523a5c5469da27718929399ee26709ca30ea8a957827f02c1551f14a9bcc1ca39f4be09ec34c2bed8a7f054e19fbf22cbbb872c0b699c3b650386accdf88bd5bad212b9b3dee11fd06cf6efbd3c4a25608520320478990e1c951b29998fc8ae81f82ec6bfd72bef6b4f96e6eb6e40e36cc272023b0fc7886786d39cafb255e1d7110dc76fb6e8a880b4d2ce8fb3c3a3cee556372543e8c92c63b9ffcfe014645bb3f76730db1e8a885146f1e3acb6ecaf9438b39eec555f434c1a17f1ff163fddba96ee95c997660b4d0bf350eb7edcc13dc19079a9121c8e7869dd47308098b5f4f88415f33866fa005f78a653acc30b295516b8ec0658936ae9cddc98a6df4b07df04485f8b52f6f8a211609c17ceccdee9b2a6884d5f8fb98b148fb2e6380b7518ea4d230315cc2d866a1cf276605bb18bbf1c6cdd800fce8d68b7a110f3009bea5e0a21a1af9837140803dab4e32835e02675070f4b10b28c48fc31e0260fcc3294a2f2807ea763bdbd40ea898d8405ebc73f35bf0aa4f78925a3d45c8fb620b21447bba3f760d20dc185e710068a614efb30dd898c61fdec2a07e48072092dce2764f39ea59091020ba67ec22460bd655a46c3d9ec5cb5d5137d8ea6f4f6254058e163c68f3c8240d6e211225216c3be364efd7aa3fbc2c27f8996c653c526fffdeec40f4fee779084f8cc529f2c1ae4c236abef362e6bb92df4d2896f54cb181a06da60dba5a21ff13efc69f50e7608efa14cce664428ea301d00ed5249d63169699737640d9b57c4ab6617f50ae4a6dce3c1728cf3cdbca0fce7fd0003bc4785b14663790c92f768b1fe46e8f42b3b643c5130e49c839ce81a2ffed1f1c074f55cfbb7fb6ebef5492869d8a6445c727b69be073ac6bd54c661cd991c31bb2ba6ef07df2edc399194832fe2486538640a5bf5abacdd5c5786d9ee0354e47959becb6bfe486a968d47f4d3258665089a690b60ecccfdcd9447e70c05c11a06050279733cc4965e606873db202ac9c4c6c144fc1a86fe1284363fad61ae74cda6df56c4c74455fa8344712b344173d3bcd2f09335ff568001ed8c67b26f8d4759d3b124841f1831117a64cb74674ac5dd3d515a8265ecde9754687b87fb42e24db9b996d6043f102144d1bb0fe8322015527dc3a2f53ca84d1bf51859389d1112eb650e3f09a7a86710ae9354c58555f8674a55a72bee3efe6c13496fc13b3c7952fc073ef2eea0b17a102e9846a3f1c1710aa095dffa99c7fb2378206920330e1799e96c80ede81e5806fa457eb86bf6fe119b88409253e59f03030060597ab31102f618ea8eae04bc2711ef9174dcd9eb214543c125c9b277436674bec56ee64bc03aa4fb76f1a38e4e40a92ad872bf78960d38abd695a26f815f2a485c188d69c531b917e669e5fd77a227967dced5720745193d49e127d251d724d503c71c4e306c35ce5a7d2dde9c4bfe40343e3728d4d543607f81027dc94b2bbd6bd9ed4cf0b2394d7778f0df69318521974577b86a9fcbe338f42c62bdcd21a814995b0c01163b98e5a91be747e02c22004d44d798f186ccea695b349faa7acc793d6b121174bb468ae99d8e6ff5d622ba2404494966fb9c36ba951fd88c45b48231dcae0abfc393069d01abc83ff35bc3dcacaa64ad9e96ae83754b62d8cf5d2fd279dc97d9cc163636c0299e636fe3116dbccceaf07c2f835e84b406cf4fbe7e49b97cb750fc1fc40ff27b1f60026270075c837657997c385d6c5a7cfdb8c22dad91b1eadf43ff7a0651c8e97b46a38b2ac3d26b2c85ddffdc61135843f1a579ddfea0afebcb4921960d3aa705e37d63f467bb991949b6346ad0098e8e18de43f1131df11c54a5d57c4ce740375c34c2bccea75a39750ab3348277bb61a26fea239db8b269c674abe1892e22e33b06c9547680d0807471f1e8e8c1c8f83a179b68e77ea97648c4d72bb0534a40fdee09dc6f0b396d3b691db4b19aa9bce33f4210e1f671e170154395f6f3dec6668ff87c9b588f3f5979305f4721a0e3ecb911fde38526ae4d3aa92e904bd6539d7e1620eefda39095c36e9c7f95206451ddf59e2b5d6b06830614ed1ee7ee3897ba0109ffd0939752c9512f6195762218a54f7245aeab0a18ae5dd54a135cab37e269a1d53031f4934d9268adec6e9a2e58c3ce54d739b72885f53006812342245c4992ea528b6cfccb1835fe8f1c4d6e70a2d9d1a443020819ac3009c38db218e89fd97fe9be4e813ac5ed056fdaa652568845efa638bc93516ef7eebc5e42c79a2a61ca765daf3e6941f9e773f42e9fcd68e885cd420ac1e724571b70f04332ec925c6628510612c3a848d88934cf1db48d7e9a22787912ffed3bb6f83b5e9ead238ba76e893d7808202204cb15c7c889374fdb5497259bbfba291b3a60db9853808ebc4c57971302f05d1eed46c5fa6fbd59ec96c36b13f406d6eb2bcfce4fdfd15ddd1738f218b72f649b315bcb02610a2731384d33a930f09f759ab22193d5417e7836c8e2816f0e0f1262a828b1febe313a67dc2e4fe3b4ed4f1f4bae5879a52209f6d76d5cdd828b224341d63093513861f89c20bc3a4ff2b2d3fa2fdac3e3ee554eed9f1507352594bc80051a9e926b751bcb901208c1023242e029dc8e5f578768b46f169a3e7d62e9a67442cfbc18a43f37063622cfdeb2c19655e701ae6e069e7617865c9c77183d833484321cbe5cc95fe6f8df6395893df3ac87494d251ea7930644c088380506c412c9401e48150982260a68bffde00f6a957fb70d365b6409a62fad029106a66f321bb79896b7c858c73bc5de7a96fbd0a25730d4de4d511ea1566cc4508ba1b08f8ef44d48752f51081a61bec810ed9b973a13199031db0d4dab370726411db8cd5c59d20ba9cb6e9b504ee5fa66f2f0491fecfb7fd5bd0afb726209572517385525b77f982a7fc08ba13e2818299bd15e746fd8139266000f4858e03f40b2ceb8f57ab43bbed4e57a93cbca7e332c9987591715e61321b7ea6aa4db8d5b3dba0e272936838a3487a2ddaaa2366a3b8c393c2be4d0c6d6c96273779d0b26dec09619fe9dcce60e6ca671ed03446f93c8476c08fe19645a3d11707a689eed423d4f159762af74c6b01d97fd6d739fac469fa403582d9b53c39e182f646611d3888ac56f32ddf1d0f1e1ca3d181f393087c958d82752c54641bb856fc1d50a1666903000192aab14282032cf5e80bca0470f904f82113942034a3963f428b98429fee93b16c2b691598e5ecf29d7199fc76f6f2b96c2b66614f3747e54f95ef711e00a1ce9b53f2e855713ad9e61d244fd546ec3751c4ec3fa2ec7b2286161c928996338f637f1e3dfa92a1ef45242d8a30c804e5508f6370c1f5228c451672cd9f32eadac6adf15130847563a4cdf49954dbb70fe285c89bfa8ff4e399de08fc2616c3f633ffc72fe14377bb4f071708a774dd64837044656194b553273211129b6e4f9e143f8ab68738240e4eb3e51d9d35ddf0a1c0cdfb322e70a40b57fb8084e9d29aad13d57898ffbf8a7a7d23e93f3ee1910de0d1d1c4c982a105e7d606a709e5ef85df426821cc128547be9cf152a8ac167af8a102b0a1989c98e29ef3bda148ff3d8e82ad719e03660f4119563af12824a3cace61c8943b183f95e6d7292cce46aacecf4e51f632246d2adbf5efcccde64e7257a4864d62464bf0643840342831026e5463686a91080d148152bb8f0a84dad07720848a282ea746c702fb06369948429fc11ac09040176bc07c007a94a9f8fb91256c4fb0bbf0b91fc11697908e36f7bc1d651366be5cc380e2621dfdb6b27e4fd223b8fcd0ac5006cb8f5e1849cae78f402bd62da5fb49273a3dac8c3783815011de96358770f33903b5f55968a3556af1008585265d84758fa0d8c4bd4e739452c3238c38a8eae71c5307db58bbd1affb6ded9d11926748278abff23de7de1c0c14a8f4c5993165c23c7bf7f0f8deb63e242729cf3417ff7b517a80686e4c1533de23878281afcfd368cc8bcdc550a76cf27fe56fb2186ea5314fda7dbb42b5d5f83d5fd43b2b94f14f08fba6258c45de9d7f9d981c9c1397a59e942afaf87cb9066b6ce500e57261aa8988ded6cc4bfdf92ad05f9f184d62482d3a548f626527dcc31f9047a5ff7bdcb867fb8ac73df501d3816716985e5ad6d937001c823aa08676c429ef92b079de233bed85f20e34b11967cd8648fcb7acef8c83896a362b76ab7bab79fccf0652bd7c6b08ad7b336a5004aac360054ce07c0f1a41d9dec73f09e24534f96db6821b10fc390f785c4fa21c291b9729e406575cd5b0e590ca524df4f3d4f82a7911d1f6a9e1f1b49a2e61cb0c6a0c9e8e6381111b4baafc8719a73b538eadb2e81e0ec63902b1638cd668bd9dadf9b7bdf6c1a6c0969ce2415cd81434348498bed29f5da59bea737a21df1cdd04407ccadeb0d33f4434a9e4f386f8d8f291cc5be609ce5716f338f713d29618ba510f279cc7f8811eb7c20eebb8c5cadda238eb5877774e5358b9e7f806e264c26ea508c602001b80be20cdfc86a42e93354338dd74d712584e32ed4bc1b76937d59d247cd9b8bca457d6364b632a58276258cf697ca38e0ed90a3c592b3a3f68b302efbbd8d6e177b78a6cd6b33c5f22c6ac9b3e5fe5c91ab5b67f7a3c3d646c59c88ad67bc12a76c7969c9459668da4ca112be08eaf3ccf663951dc1492f11ea16739ac69d2bbcccd6268e634021a322d0e307fceee1c7d151529e1a490afe5c6459bbf8c68e2e9a5dace1078776b5f7a438c437209cda047d8b7f20cfe26d8e06aec76c98093abe2a8c6e8ef4052a8f2ab10cca26f7e02a1ef2e258017f8f872ce13d1e691f1efb1ec4dedbcefd0bd200e57b08f17fe0086c5e4ede186ef91fda9b648b637dc5abc0fe6cd7450fb63717dd6406a910ad7c75da0d0351b582b2c50bef5e3084e55f14c99a1e9d2f01aa107f7f136d4a76a9866d124e77af737942ed968663e0aa3a69cdedf2c821190373f699b324ab9a3b8e3a8cd9d13eb94cbb95e6a0f17fecd39ae0be1b6de4c9e5d36a59fabb87398ee4b35fecdb9cadd78d03802b648041585c8f703f9f5082527f58023c1493ddf20a3d706275f68172629fb4bc02ede7f47e38e71acbf7df63f24c031526202f7e3d6b7275eb88ab618331f4dcf24abab2d1187df58fad4d3b60480e5c06b35a4689959f6aeb2442589e522e05ea67b90aedd16f839e64da5b353a17ec563339ad4c3ae517044d35459ccc8974bbb0111d623ba606ae3374d065f8b3d922e16cbcd2f0501a4a502dae7a3b17d86885cd7389f1414962e9a28e7047ad2166601e6d6c0b12cf9bc866043bf381e2d8e18333c4f2c8e35b8fd04ed4432b8b89e7dd8735485387da4f0ecf41809e725f001b929c6f5a4b0344b9dddaf731297cb49395a19529c171b7e36351ab687b72572879bb719b4027d081b78634dbe37bbbe82ce4fcee1c7cbff2d3d57ccdafbb9ef7b9a207cba187cb93cafcfa551d82cab18ed9af7ec465b61856bbbb8621de9e032fe2a40448239a31c1cce4dfde71e64a6e04827a3be8ef3af0d1796219412d67fa93dbdb6fb1744373209c42a466c9b0b442c1cd6bab75265123f9717a87c739f2e417fc0d6638077c7ded35fd0673a40774747b84f141de0ef091c64e9445ab947495fc69105a231da2ebba515e8ba80307a9387af6080169d3e2ca823ecb06fb328457b2a02dff925ed52b8c572847e395ca497627a60b0732af2636257848140b350e85634b868e2168a31f2822b5c2570967bae123c9618137b5253bbcef8140745534463db47d25db11833190bdbce198a17bc295f7e3269a353d4c89b0ac942a20edb2b49ff3944e0e6416ca637d122e21db448fc44e13f428b76d552189643a2d0fb50c03371ab8318ed36d258c8a88dc909d43443cf674742273500d8db1221d905d1f50a658b76fa8bafa194e14331b86d88a086b9603c28e0bf064c0b509a9c55b366f892721bff6689465d699853e9758d6e0102ddf1feca7172c42d5f08351b27340a21930d4564452946236a11cfff5b59560d0abd272c20cab94d64aca21c0def2695aae9772a21956f0d8cd77245b2fb29729dcb013e269461f83175de5cee14957c90fa11517863dc21e5f95f9f676477c9b3e5a4a81151ab884307d5b9f76cf32e2c13c2f5afdb301dfde43e86cda05e5d3c6e5c7e91466c18eeb12767dc2601aa89b243dccc4fca5772dab4b1d3938611cd0b60f30ac427c018e9b5575952e8b2c0f9836e74a3001a0b0370c55ff28a32d117d1e8726aa21cc21adfbfa2acc35cd85740fc06ad06f8b0b22e0de775f3b3ac177c0728bc3d094e8f5e7348eb8f44a1231b6f8eedb35b321e3690d9ef99de1b85b57ede206246a0a406a88b9ae292f650a3566cd6413ad68de95652d53a48797700e9d73ff0102517f526c72f35acba8a88477ccd008e9b3c9739c015d959ddfc88239854ff36181f73c8d7aee05588f2f3300a35e252368df5992b06a71a293cd9e3e3870cd426f33c25586f0d23f6331c1715cdca83c114ab05a31ca0880b5e4b8ad7d9a14f5426858791209afcd11d9260c1630ea85e39251e5205afc55fd20ab5db0c92ece6290cf56ad5037a8ea847b75d9b345ea9e5372aae6f8c4416803ac00048d8e80b0fb55adcbd1176405b1a1c33405f6e050da328aab7bf2cc74ed90fbc678012d9d1cc73a7d68d604fc7b5b3794612f18ecfd55f1ae16e3eec75577503d2c60d46b35e97e29be9bbb0b3401d40efc639a28f8981d2073f9701fced6321106e1b2476eba125c7d4c0a79b8fa5b5583fe7ff88af5fae4ea10f122b2def72dac2c40aff27d1af78473a77aab96988363df405a2bee61ef23dbbcaa9a14d5e7a89618cb604359d61088697c3622049373f3f4ba17b62d2b98d78b2736501043342ca7f60016d06b4c71734af08a72ed26ada0b0aca91bec9cb34cf258c803ef0f50fb9b1c44cffb03f95ba100f32c77db28b45ea8d70f88ac99e02a58065110c7d4878f9a32e190df819d401da26d966ccefec89da11e39979dcde40c046cc48201f0b91e9b81bdf33917cf3c8b019c7a3d4b37b1f3d7c78d198ca533cb47ea8696cee3db2c15f7d620be02eb4c25c311367341c3542309bb4fde52c549709413a6e3de773bdcb1e8a22b7947ad3faea3dfbfef0d14a34815634947f81e40ff5122ee916f1252e4368eee26dc6b92f70b111e5a6279331639da8b1a1b5f2ee774af26e69ef56970aa2252109cc96baf3fc35eec70c572ff33bf44aff1ba77c66e7f012d4a38cf4146760bf16d8b6536a582ed9a782a009e3a1852d7361f0e56d89cd7a90210094d004aceba7932216321e09d574f4400c462e0cc6834bc97e1ea1c79ff00623fa354789ed547f02b4e4117ba787392d530d7b724ba02485c5ade410d773acdb4d342efb8754eff6e0c1ea1160e536c0c483cc87b27da41a1d56b47b77732a15d770da92053a0f2d0fccbf06bc7cfd077640e8f55b065fc3a6fe6f0b6be119e8097f6b4cf47957d97e76fb515a8859608264a25fcaa90b08a7c4ade75725b27dbe382cd9a6719e9218dac6db996588a4655f3d9969a97abb2e9f96733d8020aaf21ef1cd77d614b05555346b4d0cfc9ac56d1127d461189dab19a2709c0bd058cdbc95d740bf976971f9cdfbbcc66483d598a30775fff75b08e14b9ebff5e3649aed74ed7e6c9d469438028b9e5379345ee0e3faa454573cc8741c76d051d4f535a4a0d31a233f4e5fa7c2ee94e1058f4b7b4f2fbe000669a5552cfe3423f367957af4603ba1caa6f6f4fff0f68576f29037401ee8377b9ad4ebd33c4f56ed113958832654f11372a8764ddaf5a87905a4dd9ae984eed9a15a6ec5261180942093f574fee0da86d6b4ad3c913d0c36d4070620325fac4c4ca2aa42530b40a88d94fa50926c2048d2ede0c5017517b37a754e523c8a5f687ced22908a4a83aca35368eb822bf231a47769e353737edb2d7ce45128879e56c3acef3fb85dc7b031ac5e1b5eda608de5d49f00fd15009749b92ab4c0ea23a240a180b4d782599f3e0981922e7e58b9739322033dd00fbf76ae0053782f99793411fce817ac71d79ad6a706b575d9c353774118ffae236289521b568a7d567e4d5b3968adf985023ad82a01dcf312a2c670fe141a0453b5c00565fe282ba2da14bc264a2fb1e160508bfc2d83eb26f25a12298ed1c3959e73d18572757a8112cc3b281756e1eef6e9a6867a4d5613a8d8ae9f733b210516644a4f2e1453eda85443b29a090e5d00bf00faa00f5bcc1aebb409854bccc071f8701c2f1337845bd4c84f4a14a1f9064fca81cad7f8148984c5747885a7a9d26171358c86b1a34477be1551445628adcd377d801f46b4e34594c23de21a66d28f50a8ff5d8f58747adcfb9271e293e46608510a60d4e7afc4b294f966ef10a1cd4501c5361e293301ac3c5ec64886c8014b9e449109816a07368687194fc0a1753734592b1716469ee4bd8115ac3c31214848939e20249c9bbdbec218ac6994a00cda6fbf1e581902619e1a6a0830c00e457ff3c09a28d090f92ddf7dbb6ba6167ebec2a97afdab892cb5afc3d99a0394c770890baa380a80e8b8d38fadb109d5f07adcb8e0f24c0dfa6e62265be5157a484c80213154e74563dd647fd6a5ccc7bd4fb72cd2287d26a33e2d7e26d0fed6756eff724f3bf82b6f0d2214f524ed98cbd6dc83df55a88a0f52df1ae97f9050b165c959325d147a272c13becbcb243f24e909deee5e15c2567b95d27efbbf9e15a1ff3ef44369686f473f930e945e73cdc51593a9c91bde2dc8947f2ebe6205470d1ab856a6d2cca06f9ec871b368ddd3195ac571013d5fafbb29ecea694770a93b1400cfa3099257910276b95b10003f15fb9ef1429ed52baa4499d2ce57d2debd523b62d7ad41d277c214c49001c8f86a6e515738d5cc71d8fb13bc47b7f4cb98ef440ad01d29990140fe576605e36c20bf81de4db7992a34ce6ddf303bd4c6efeaafd5c6fe00837b632969ca5862481bdb2a958a2c71596e9bf75989be5c1f0057eb75c85dbeda28143a8fb56429d541aef34ffec93c4896d339c7754cf00c6d14d862182c9eebdabee69d1a3be3ed9029ac0a3b6334aefa107661e7b0ce5ee503cfe180f28fdbfa00ac3e0778c52c5b171e9876124a788b5260a2cf300c277035dd2467a8e20ba92f22d82565825e3eaf4ca49cbffa69a7e7fadc975721cf2ad697fca72e59477f24847273729416f28046660ef48a443887de457e64dbfa6268506ce94a5c457e04ecdd7194baa1805cdb640035d6a9b220b321f44fe6afecb7ee22f9c8f462e2a626ba15c4711a6835f142ebba183917589c6dfbe69fd0cd1e89171987c851ac44da7fe22ca1e752267efdaef1b8bdab9f4303544d55725fdf030ef8ed34528f94d6fe0f32f36d73497a8a7dd7bf2b25f0eca40130ca25b9aa48f92651d388389999bd86fc038f2f38e62dfae835754467afc82149c8eecffbcff9a79780b3ee750147db6fb2690ad5eacf96304cdd15281836a76d5ce01c5b806bb13865aab1eec45639f71cebb8179da8eed4614482529c8a51784035cc73079e7c6bfb2f237ab00d20b41d71a4de38e160a0118f1fabc75f2f1add3f740e51d50f51ea44bd3a81cc8a55ee906d6c253b301dbd8581b009501ef9b2fa643b1440ad39c88e52f7aecf0d5b8163c94cc5834f26fac9f622a4ebc07bf983aff8e6cfc2e1502d8aee88f411fd9e49835174b819a6331074ebc4394569ab4dea9527e3c5e2cb89dd507226723e19f50ea5e9b2d0713629a487f7715c887ea3bc6a0e688fff60259183e34b59043bd46e3a4e3015cecc91105fb23a663add6ff0d0f3c799d30f9398cde258ecaea29895bdf1c42d2ff807f6f835e5a2c7d61bd48d6a82307e32c0d302ebeabe71d69e24c576e0b782b04ffe149cd884b70109cd4b8e0882451171e2e448a7d55b0622b1d31998e3f3e9c2779876505509b9a68785e00dacab1e6013a2e13b3b4cbd3de47fade252f8c9dee9cf3d8ded54572068cd14a5b4651629324378fc3eabc8b37ffb505cc90a4cc72b4e5536772a5b59922256f18aa2677ad4990dd60ea2649e252368eba55a0da0b35877efd777376ee928ad11fb5241a1cc82af8a536bb0f737dcd40c5d0c9d84eaba842626bb2aa7d4ffc628f6399a2ad6150ca7f1c98988251c0168d0c8eeaa3e5f191d8c2d7149ec7e4a0c860497b707f5a0b63772e187b9fc4f1a1c1e261edd679cb6e4711bdf63a9e9349916c77ee50248fd8110a1d1475e120959c330eac93ba17d3e09ce9425ae9cc956830ababb6298f9474d3fab3adaa44c056d99949540f2e6653d2a83b6f12c2eac5939bfcc9040f36622c08af4d589f49191faf2daeb7e9494c07bf5a215534c441cab26c751db3fdbd05c1577256d4ff1c8dccac92b84b5d3c659b1935691e52bd561794f201e937177b308ba337c3ac2d2093e126fabde5450a06280016d510cc1e35a7303ae168b0650248ff3096198db15425627e18bec2d40c5f078732d7c4b77aa0c38ac758a1bb455cf5f85aa53b2f00f2724f8047ca2b7f42a552c9197bb37c0799a1e5005766278df1e18fc7721569fe96d9733c6af310cdf92b424d699da5bfc734cef85c99ebcaac0a5c3a1f6e66bca7a2a29d291c1543c295cece78834c00deb4e8a30aba84efa34da0850214e5257f156ab93b0b6b7b5097e563496d0aa480f15c49c050ac59e2d67309f50de13efd22f38826cbb491604a0ea54527a2de123a267ba8111d6e870002e5adcb58c34653d7a12ae42319b9a7bd384829629adf0ceb8938536ca72f91023642afce92a20ba08db07b4d937ba475883850dc8490511d63d0d1ce789786e978bfbf501a632a5adfc8dbd9683ac7b1c09b6a23a4787021729adadd29e17d76141b4c715c7639a4f31130d63dacdfa59baae3ce0549bc84818d79cf81a9386d0cc02d7e8e4e9f2f53dd1fa1ec57e1de13035f395e0c096db9853cc7fc6699553aac20045646125a8dbf891ab3d2ebe0eedf4e89d72a01869de1b7c25ab49cf2b87bef29cfbdad32cd4f008c99eccfb4ef0d1b050a671551420654cfe200f74faefcb802cd40254411ba6869fc1e64d254c24a0624c6969fb17d2ee69567bff22c353e7b9b4294b6695504c169d5a69d5e13c9e767abcd7275b4df9fe88e9157bcf7a22da7d3a9ea5a84b7b13a06608b8c468d4850d64390e825d2109125bc5367c4be8fb1d82ddd398293c134c4e9953227dc9ad3c3dfe07669ccae7f2b9855358cc3a5c5731a30c666a513268b2ed3f8cf4df04d7a7d1a989431b4beb6c07def9d0dbaeb12f1948d038dfcd80f6ac72bcec0382eb7f14dec1fe630ae1b346defa2daf58cafc6045d10611cfe0338d54b51217e792bbd12924244abbc3cc65aed2f6bbc192ced4f247e36d9822ab285dc61c177ffad6fad029f88c9edb88aea25fc7881d2eab5701b5efdf8031eb50b72a618fcb5562904f23e3f25cf710ab5dc302878eda614058b3dfe173699b03383ba1a14b50fc330d4c9e7126d9520714e87deacf1df751cfb41e65e5511895b86f9ec3cce80f12841b0a8240dac473b3ea67aac9349c50a3ae0b5d9603151ba7663fc43a60c696e152d82bba1411ff7dfc6aaa7d7de79bcab824e0a4861527a3139d4c2e3ccb8babb8d29e397821f41644a260f39a4ef5c4d4235f34682c88247e33d72afa5c4fd3d37d46466a0ab31712e42ce81e10efe488d78daa80e742db17452f0f8b2720bdb782117783000a41919c9a8b43519fd7e05feef611bbb1722f370278f4705ff0f3259b182b4aeac06a7365ca494e0b352e3530e3e920f6de575d53411864ad810aa27545f471e095687d3abb67293e989db318fc48071849cf59fb97a78d13e7d8ab1f6748a552934a9339932203dd2556e390c167e80ad8443726f3d3db53f3e83e69b811c8a5776171e229ef7784f3b24b8b7d59c20bfdee6d773fbffa909d4e9ee5904dbbdffbbddec144322ca88fd9ed69d896ae2ba38d9e6c44e4737a82118e65c77619ae45745dd2a93c3e2ef7980847a2ed4b142ab4b06bd1a3f3be6b0c7dc6a7397dd94197d249c5003c599938b92daa4d0be4b0d26d13b36a46c9e12599f704761d11c947b6a4661e3fb6640be279989ebf939520d9bbb816a6d486462497facd3409b9ed6a608ea956f82f4a1154a067710123fddc8383e9264b5f5eb7ec2c7a217e395bd923f8fe6e2d45d8d2ba392856dbaad62906c8f8a0f9f2928e60e1d78b6aa3258c6d7b1490289c707ec1ce35cb331f2b391e36d5fc5833416b1dbfdc37f2144409cba95f7d195568d64c418f29fb12f2adacab29f756c7e21b5e809e1eb69dd5822741ffaac71d5c4f1ef452719e588cb6eacf1d8b6e8c98c1dda2d062768a9b1e31adeedc65dd1e769cd25aeebedcfafc9f76c4483403cf4aae08c79f1d0b5001edd914a991a49fe726754f11094404b9858a914cc690bdd22f0307089c38e11e2f628ba1612c00fbf46930429b72957b9b2c4bce07b2918c064794697ee34f7687db3f7336a591477c764d8eda92db86f722a5d29efa5b8357fde4b11f34a225ff0142e11001c94efca8f561ca3d7b1292d57c71bbc9341032179ba991c36a7ca3f6709b0d7537c79115f54981c4f612fdc9d842190dcb1d68c5d8a6dc60c8c7a8b2e1782cf1caa72bb3a649be9664e6c17bba0ee84ed4cd48d00c5354ec6cec6a7d41e72b046af888d1fb11c1301e86953f094f7d3753119b0a4511aa076d602b512c57ca57f12101a8371105dd24f3d82e6500646f995ac2585e7892c729cd921f87ae76ee57222d3750dc55bff6f902917eda2e7c7c694ae2583aa70b78d71f4f5f9483df195b2385df5d4df8503e826603e8646855da10a2fff1f40b4a556646e6bfb44829148824241a0131b37bb65c74bfaa8c39e7394137157f1857c1868e3383644ccb0c13b9af1107dd3a7d10eea04772b72de839373367ebcd4b9400d267e1140f82852cc3390727c50606cdb48590bc2d2e2b8846c0a78e7b179c5d48b7eba026927338a1efae7ecf0b218bdab1f30862a4a07f27b756072ea8d3f362ccc93829970b480d21ef3ea59fe1fb157697261c328b3d70a0d74dbdfaa90fd2fdeef2e5675fe479a8057117d54dd4d366b3bf800a9a8c3b2fbce2067f496d4400f2fd26a24f647a59dbbd8a1f31476ddf5a42544e62de86d754df15378e70c704e7935a7f2d08150eb83d3772267972a92ae818e1fff92ee81c9115e7de7f5aa0860d8cf5a2f5063530cc0af20613a5303a36bce0157fe1fe79f664904765c5b876bec173f42e2f8eeafe34bf8b26270ea8dee9cef1a53c6c0224ea5ceb0e205bf77d34624986127f5f8f83faf98054e3d12faef3ac29e35b2225d47b0250170fb5cdf61defca38c2ca3c75580eed409d1fe20a3bdc2e0f5e998a152ad8d9ab3e73d631b7c8653c619ed09f4229609b76aef11f1c9f7f5dc01d516eaa08de08459ad74d2aa6e448d32845581ec0a82ee2c1f50397fe4823dfefee15e787019319558bdf3100c9fc5509396611604f402c922a2bdd06c40fa1e725e9b72bc9d801dd9999399849a24c4c4ff6af2be5aada3c965d24ddc9c3417a018237b4e7d85d97f95adc40e46463f8db3dc0c9356a0d9f2010390736c29203875d645ac6a4a827b8ce8b33712c132000680b865e73f677ebb87cb2aa8d6a048c8dd78a5f3c625fcd7cd595dda333a08278c4c79b76afde17090ec71d6267eb6b091732edc33628ba40b90e3d73029e9520c63d7488b6ec9946eba64d5ad42ac7c25cd41e3e99c5af40099246778aa8e8a8b325c7b79274cd9028eb7658420098601aadf37471ae32980e62b3d4a7a8afed54f215e101379de7a20ce636b492fb8a348d2aac8a96e5568752e47e9a2bf729b0820ab149a13ec62151e61670dea23246e5549a619c11b20b1f370a3c5780fa8add328a7b6b0fb8e959ea6d93da0ed5a6eb65973d9f471c3a9880f47b4e418597c5869ca8319002751394750b931dfd360a2e104108c46b34d146a10f0038370242d05a62b398e08585211e17dcf78224e8e7870a31fe721a9bb353766f3f66fd8f78e14f063d11b4cc28dc31ba2f9e13cff047f3ca860faa220432d7099dca64f1442bc77cd8a7ca6f2ae1dc8053c4c8d042cfe59f8b6a47758ee0b1f1be0a955b7372f4d991a284450fa6859ff48d15d8f1ddd153397ae71d24f81cece7fd5d84aee8d35fa2adcc1afc25f321b12024781282b1eb46238e4c7e6d1c0bad71cbd60cf3ce5fb94e6e603bf896d48ce2989f2643448c785ef629cfedcca009171ce4f3365412cca517f443b2306786495784dfa887db26c02175855278fd2bf592f521f0faf17f593797c7f97c1df192bd03ebed98f5eb519dcd427f6f77e241fd506d609f6dfeb64e5c4cbb7408b8e1790c1ea6adb13e846996b40bec1e7737f265d109789be892f0442b51e41d38f4d051381a12a7c038daceaa65b89a4b5c901768cb6ec0ff760950df705a8495ea2156f089bb7951e3be44b345daf343564941deea69b35e5f927b164577087d16de1a1f226aa90fe66c418ba7a49a98ef77f1b003e6474f0eea4a78d3912f35956e4061415b96875528fb1a3dbef15bafc221ab2b49455be9f96fab5d7c11e25cfff050c91122a7e54b80ddc22f144d350f336f19c8b2cbacdf1243ccaf8e2c88e84f53c032eac23501b848eef56e93359598ca5cdcd76d90e8d941775129f276eff01b47e2da37fe37b804d4ec29ba135c4f6ebc20b682754d9c3ec71c4466f91d95cc3bac0c54a7d4ddecc7c02f86508acaee88302a91a04e835bade1e98916ec628e5188e9869643471825837488e9f2ed815e2ce4cb0ee1bf3e4300776b1404660ef5b4f8e28227cdb92b5417d68dd356a81571c63cd0ef6eacda531994d7b51a83d1542bdff947b23b628b95074893852a87d545dade2e72e1c4a1891449c8c565439ca2763d2a344a9854a2e40a635ab62c16b7ca34464c29599e37b12d482a82707711f01857e71f0579bec4caa2fdde8f4999399fd344dd208a0df224d9e7d574054e664233f18a832aa8b9ea20c22abcdc0eb02b43275ced5b8e9daee6f933bff2210aac36fb9372e982e0200a0a8793eda8df85dacd70696bb029df16bc47222c99c63806dab90332396794594712613d351dabebade0cd70eb860c28592cb1aaded9bd31226e1ad0324f7b37ca0fcac819c57ce627118b7cfa84bd8e7b69625eaa4ee93f05940a43f71c2345b14c01b9c7cdb9b65fb1510a7ee1e868e4e0b0c0052ac2626634db0b038fecd64561efe5d95c9175cb9581bb9bdd86963a6ed7a1af927b7496b6964bddf0e6065a9c8aa7b5614a583c095df92944a41f94dacdb98a453bc9af9d939a61728f1b749e3121502e56ae3686d703f26d73c00b34ddaa27c844ef507c602296d168247f5b64c72a60af9d6036ba6626fabfde9438569659df968989042379a458f080a0487f8692c38ab936c6f2fb234bca6c54149ee723477e9e4b1fb114b2c6a8ab23c2d8f8023a4df4b37dcf9db5cb2d6329ad3b41a9af1bd48639e469786b67c09ecc4ffc07dfe3f6bb4dbe8e63af2366b1008921d2ddc9cf85fe925c387b59dc2535c5242e90b3f1165347e3a92632474632f9de4797010d12725b911be83561056b3142c8d7a20faadd028bf2a164a16d483e2b0c65fbbfb1f73a15170c0c1cf3d97d3ea368f6f14030dde0bacf83df1ed5af342fab1e82b46007bbbf595545ac042cb46e9d48c3f372dd50623e03f31cd3892dbd84ac6520a12b19f298082afce7905742d587c19005c048202166686270afcfe8ad2dd7fd68c5add3e247a2e9b6b51e7b84a39ef4a2bf9d7a920564b9c13d652147635e7c17c85be909ec1cfa2f01c67426a3d2394d028a425875854cf0286f29abd927487949316104ec034aa76a2b68b86bf10f984b261b6177003889ad610bf2eabf12c2eb510809ca074c16b2d1d4011f0e88a70d92e8b6edb98e3ca9dc2b6be8ca6cc5ffdf7e9739869c9f5cedda5f9a030ab793e7ce68fb0ca05c2c268af3203e4be6edca88c1794b7558ad293af1adb6bde22a8690e20d196af39fbb4749b95bea8a6f4c717e364007f050fd3a1d9107571d0feae05819694345de110ea374292cbec0fdba8601b3682641945fc967783f857208b6feaa0186e046d4b729515a4ff8e57505db3ee0542b93e9f2bd5973b7e71c0bbb1d1cac3e5190620e9fe5d285b982166b37198d777a7ab5ddd1701d307e6addebc2ff9a51d8addf3b1dcf13f6f74f9831857aa35395ecb32f6faf917f4e09db7c5295a325471c956d8f1c4ee93a01a443ec7b90591c5671259131cef1d1b00f3eaac11c9c3f357bbf113869a6e2fa0df4efb85e54a409e7993c12ace35c718ccb06d5f01bde0b5112ca29b75b974bed72e7504e6c29ec810fcc2aab24932fd115801c509e262cb6ea9be5492fee7463f5cb63cf1d516172a22db619398a0dbae35c30b8a142374724614f0d78d58469a2d2c4ada30be102dea3559b17ba08a5b0b733f9b6fbf75362c49b1fc1941ba0e498beadda33009c742af4b1e3bef5fadbf53db688e5824bf8205c7a4cb15af760eb7d44ac81ae91c960273bd9853e718db838e8e255db83482a25caa3dcf867b3434b0c33163c6bf388907c1388676a15515f364c76c18d792bd4c35644437e8631dbb788d0f8d87f0bd1388f1a19b5b90a2cc3335a5a09a8d99d0639675fdf1f48be2a155c705bc10669616fc71c2dd59b458836cac54e84cdb84bbb6f22d13f5ac0fdec730ab1ae6c8af99fd875ab7d4d15b8faec8c5872e7f8eb22124caaafe97668d67f7997582b8476d8b4c12269403fb9073c3dd004487963992b296c3d17c3dd8681e427811acdf32f9e5d7e7324ad83649d42e72500d02ea7466aa87752ab44f026e12b60ea2131d322331e69db9a558bb3c2965b882d23d42eba5efaca6f3a6338d8a8e6558cf8ca680eb88803d833db9d12c8f7365ab8ef97444978e31d07f8863d2503fbf87f544c7bc26ceb75ee16d02a2cb5defe71c8514469b9e3174d2d9ed14948dfc5f126ca1d0468fd09caa4f8d10f119913bcb1acb7d3fb14c7dfd13c931b84eb7f95f9bb15c5be95227da52cfcd4d342a82ea6dca236b33ee4aa9cc6dddef4db7bcd726f854806732ccf5364d7320ee993658edeb61b4b719bf92b6c076d9f0bc1aec5468cdc46c12b53bd1679cb8f106310f51da8997c46241b4419a3d4c4f2b4c58c779a5bfb50d5f725ddacb5506c9818479b51c45b84f56967094deb8e1e498ced3fb68aaca35f394524ca8576b7609000e080dca3c1284aa70e608078ecfb6bbc10669ae6e8e1ed3b3893bde1b0c45a5ee75904ddcf6563ad5df1c6820d3323511eac20b1900cffe66770186d92a2737932101611822cd490d72cb05ca1d55618acd3f974087a1ec62d913873259a9ce55c7d5a1bfac08274833f87f5244472a618e0652ac6bb65ac9f120f8ab1e4e1e3aaa15e3ffa55eb77671017b32ba3d979e9ba64a9234d1c7ac05b926d93fa44135021c152d7a9a5e4ca9f60901e2b907d7c2aee501daf229b3808863b810429d5f8aad4ca5e2d74926f7c525a4f5f47ad9d7a5b7833238bbb4038edf7864e0bef7aae4c3ef6701a169538b2d6df9bf0b0df828a3d98ca20b37c11a2d72c9e776d7e1c01af4934e3a3eca212fd653e40f67a22ba31c8f7ecff1245908c713cda5c80d7551d1c898890de3ad52cf1df9df6db7f246d52b6c90858a29836d5d694c35f647c1e567fcf373830821ca0a65a0a4c201819b45e8b7f27a033ffbeed08b9ee62ca0ecd44d7914c7d8d32d7ffc5f4306f072b6a7cfb645f14cf2eabd7d9ec62f2105af7d8113b9e4d9bece0d18174fb37458f53b4a6793e374b3cf8d1b6e6bd1141b3572ed527fd9498c29c0e62989ed063d470bba3eb14197d17b9c84ebc837b07125dea8101020c8bc1aa4e115f58ebf09023bda79515bdb146ff0e0fd74a39a1d64cde1f4d6bce7b784841c6e3bd46ec24257dc57c79ffcd179f45257e492afdb17cade9ece812126bea14c08a516cb5df0ee026df1030909aa4c9987b1911b14aaa8e9d366eff1e38b898988faf1dc3695e1e9f88646fdef94f5c71d831353f4af485b7e854db1cac4a32f172e8057bf3ddf78cce1040e196582b7b16cb7a933afbd4720a54d4c00b737ca99dd23e4ac222f81e67533a607125c1f4400490c40acf3f0ccb333847452d85dcd8ae0db94cb159a3ddabbd062791b8a1da6fc778f61908f962e264b7461e13ab3f05d2c678f29e272b40c367fcd64c00dc132cdf5164b6c56c47e1235d644b7654bcd047a68b4356fb6b931e09b24de02aabdaccf68d7c93da490ee5151af091f9275eb6b1e25d4a19943bd57d1d7a5febbed915736850ce982f18ad3d1a4cf607d67d412017da97af644dcce6cb23792bdc92d5544adb19a7e36ecabd092a53cc9853c8ef2cb6d62d366a8bf72af1fb4ce4356556bc55c5f18aa28baaed8726dc4a74d2ed3cf7e79196d5bfacf9388070d7043c1af3fe7603f73f7defca079820763c00ec202bbd3a6b19a612a609955fc2193c8944ab69e5f73021e784d2ce3cad3da7af37703fa17a7371344d9ec654edbde267f8b539fe7cedc0bc44f0d015d9afe109c53fe483df80c6489d3c4d785588adaf553920f938de95693a5eed87ec305422eac372df206023352270d35f3fc5965dbb2862b3ff3154f7707dfbe5112e87edd8507c3e921da47d2879aea7af861ee00ca7712ec234733f4e03f10f7b29989571bb145a56e108dd4ac90a6ba19250b18b7f5af3352355b5ba5220a2565178b4b22c2490f01471067cdf18669e9b47c93d6cd079a2a1a26d8801bc12879706e55e67783aaeb36e64b870ec2ac923c7c43b45550e3464757b63321e815f2cfb23e996dec494b450a09930485e13d4d589213a429c4f9be9164270c8a708c4a9bc2bbd00b9ef9ee750fb57eaac88094c41f7a35cd9df32526d55a938a27c8649ce66273e776110ca10b8ec54143afafcd1b00034454220757e5649db15a981dae2b75d011b94c3bb456377b592d88e1b42f452c9ac64203bb344a3892b7685e7e4a0d54de4096d28132d18d4e9cdb3211e7b34ab1891ec8f2f1b0aa59bd1dcf16c392a98c7c55d3848c3102cf4f7b8fe93193734ec3d3a2e175aa05e726fc3270c36ff4793c2d189d8ccbc55759b1dc7227f080876c51389551c090f20d39b4b96236521cc8e37c936f64b727db095165019bed6ed7666c76def3c3569e66a9da29c6cf5e1464be4f3d60a2b9dd4bfb7912c61e3f1267031e30b0d73687b7f282804f674d4c9d072b4534319497eda5488084985e6fc40c742ddba7661b260d46d469c98a1080fee72448373a6aa2aff71981905d460e7a11b4134a43246bb9ed03b353c1500bc06d5d253161d9e442bf09c3635af4fad81e9d1fdc3dcb0a7b5c8769eda4b5be95784661177512d1ce6b9e57782b2efd40318baab7d2d2daa8fe159041757cff138738b4b54f1050058b59d1e3c87f5c5c7a8f259ee4a0b744e03e4df01abc913d2e750face4964003f3cc5719458675b3f422330c4f2a57ee6d423ee4ddc2274a9784d05c807f30ed164e92fcfcea04bf76297e383b5e3b52d62fba617705653e27581d3ee9bdab771abd17fef412d89ebda441e053e891af2be5a63406b827a8060910720db694173d232b01fdebf88b6a128521b7adff2d93217a5c8743e6ad0e8409115c6eb2e2224726b4911bbe3bd3b5cb46b069a413a67a1f6f7b7b07678cc957c63d1a8545d0598d3cfb24c698f0b37cc4e57b21c6deae07d1074e68db2e18a19959039199a6bc2f81d4572ac1ebeb98cfb0e786d836a73c9e6774a8b51b6c0ded475f6028d022fe685ac88a6b4f8df554988a9dd22660608befdde986fa5fd7aa95779e376767c0a244cd2a6615cdcefceed0071f49ab25508e31c4adf299695665a2d0e5ca65b30ae21a34433c755899b6067abe985e8d6451b6929f4166d1ae5fb74645d94cc8db4d42f2555638c4c8631238da8b9cb886fc0215678e5d55262f678dda4c375b107c461958d51d0ce6272c68e89428ce26f5983a5eed6e22819978be0c6c5494050e019cc8813879540226a3f3f2388c5939739fe82f31400e309b1580e8f5e8ab75df0d1b4f418b0fd9afd876b7d3fe2819463ba09ba1a7b7d54e30d2659c05206303ec2276a8c9f130e299a6c23ae287d06c8c61ff3b2be9f9322a3ba01c2f00335c7e69a0a0a489417aaf009aac108ff09ac655e6561362fe9924ee76657e264d5ee163ff9a0433686de9727b4ec207fd6e323d14cf1e5602bb598b1511634ec4908e24fb983eaa9ecb786fb05d67fba56f24a7a3626c152551c65bb37387e758eeab708b82f30e2566a996874343de22f1081e6ab3051d24b68c9d30ce2fdaaee7317f8f9fc84306adc96a00491348609b1f930d3e84a36bdfd7c6f6b55657ff9f2dce5156cc063b837b89862b9cb9d705914831ab47b9094feb20d1655e37af143fe020aaf134a00c36a4b7fc969c2026a5e32c27619f7f5c4fd3d3937995ec64ae87f1660b4ebaaa16ef42b3e64b1d953121b33363adfd89fba72cdad22c4b45eea7add44e398f9b7f51097bfe0841c02b00921335baaca2058bf4619a35ea7b6360130d0c43f94c98767270659f50875afef4320591dcd0d56b8d59c3c286cee554d43aa5842fd775a971ce68fd7f5e4b4589c342e93bfeac27bf29d16dff98eaf61befd8f2b95ced5ea6baba62e65faa0b9e06dbd11d5779e6a87b8051e51abb9a21092fd928f2ede3e474e05f76c0748fbc6ebae96c66848f5b7a0f4eefa90a8db8110e472e22eecef8c57d3eb2e7d1e15ecaf6bc395055a965a89d09c710de3f7ffb72d79afcf69f5d7adf7be7e846c6db1f7509488a38963a024fc413d11edd2d0e0767941d9846c1cfab24520c02c15269c9e2388b8426b4aff172711469d6d238a6f3ecd09ca2aa5864f8eaa10d865dbebaf0dd805efc0a707e7e7d7f06a6a5e28dd94d58f1bdc0686e4eab3b802e6fee45cd8a43c693a51a9bb4bb157d871b02df0c7defcf4fc788f874cc37d282efea3c8557b19bd12f46c871e98ed72099dc9ca6fa188a64b94e482c16ff4c04661b7d94f8a8fe79b7da3f7f888d5a30fdcff33722339306a93677db10f7337f7f49f63b2097d4d4dfb9c25fae1f15dd0f996a87faf6241b70d281d16528a45d271eadaad15c940f88b3a68d3047288ef2d3f5e258cbfee1295aca4c832d4678d0f0d42735d91af860d3a3807f469fdb9083ed5a1b4f55e4b0e82dc44ca2e14114e8915aff65890f1f3b6fd4bb24fa57ada116a3f5aae4785ab883b35b6c291a3e898d6d699687f2014847a0fb3f8a66ae0e4ce1d660c37a661c98931f2ed2fd850da03f54552c5a8632302974a2b4b0b9684c78cec4de8c2bdc9d6dcb2eb5b6d9069a6a8da56b971df7151d0d35004cdf42f61f6a50444c77e4c5f976dcfc86a4d63802fa30543cb8b3359a82412291eed10217b7563ce57278aa9eff088d7e6dfa4998fb7440fd5aa1d04287eb5362e6a332ba480ed37345bbc1b4a7b363a6a8c430528afb17bb4a82e3fba525b3449ff67d9b1c4789bbc8a126e27d6a9cdce86535270425f6f455fa7b8a3d70255450eebd2b379432e47d3ac2e6fe2499d57c2719f511dc819d7ea2076e19c8b137fb9cd3dca8f9084986ce6e4fce0e24ce09575b112d6cf23513f56055701d3f6aff602ceb43146afe4c9be01a9bf199a8c7e64d866b1f7d3f94776299493b2a2bc7b3cddd8674846e6997c6df37605aedc05c44559114f6d7b549672f5610f8575832ba71d0783ceb147b858651624db214a7523c7ce4f8bc9b031e2319777cdf9c80ef5b5d0f1afc5d14443db66a2734e8a068920b8de0517832e97a32514f68e330060b3c871606e107c9f7890c496882c5d684d4367725bd3b3330bc699d26895f5ed16365fa71daf928e4e81fe84c280130420c67dd9ccbf29b0d92df451f1ea2dc87dcec0f5c9466b60b385ed67354afea1d48f89177c323268f175a0a7743af33180e1c891710be32009264c41a18e4df9957bf62fee7d7cf03bf3c0b15bddf22aed181e06bae8db371404dfc4fde0aa91ee3892f03479ab71de9bcb9435fa89904bfa91f3b8a036004becf60b4a79d5163ffb999444b4e005054d1d432b30e970d7b0b14ab23e0ca399cbd85866001c546ebd801a0fd3623ee6f15bfc9a985d387350116120eae733570074dd1e491c6b1f1bcf6a26714c8aa3b7e6cbe1758a6cade4ec4e18b8c7a65b61d133111cace70e5cbb68dffa015df007dd0601ad9626925ff97d1f7cec18dd33bf8f59a5624f981d7c49396b3c6f7cd628723da7c59ff997361d2f4d67b5fef81c73745d0a634557d63f9cb31e916915a10718f2fc164bbab045b03a2a9bb894416540b5c0050cc63f4dc4cff6ec30300b31f57f64a52bbc55e4d43f6ae668a9f3c2ed49b5379df89b0f1113500ecb74069efc0363927933664429e4db28b23a63987c740949415c8cde4100330b4087172d2726d466d319db9d64c0956a7ef28f612c6a50f05431614bf375340c7fdc55c09a57d5576ef515ad055133e9d1b86eb3b068cdaca2c826cd00bd791d23a2ab41f50c71a2fa882ca512339e082d78eb6a2f7f7d1d1c1db59b8bc11446447d97cb280b93f888704dc1bbafffb86c5d1af5b38e11db813dd35056840868872bbf554c363ec5ff452ddb860ac17e09c9af7fb953c110676d248daec5f09856d74827c0ff3af8b7e80c6cc81e89bded94cf896c68b31d290cc511dbb82e04cf9cb07799f7572bb014e6f427ecc697aed1d7c7368683350be4edc1e4169d014496f218827de6923a932526a8bdd67fe398d90801b9f298adc90e63daeef5a5cf006b1d216015a4c7f717bf10e151580364aa0172af238572a395597dd0e24695fea1925e60b2a45ae718e06ca30d3a13ebb605798bc353ed173cdcd5c3bd03fc1b210e2ba127762c8341a28a6125ec9be26255013c27ea058bb83c5866f664231e9be295e6e8f7a4c66b1e0dd7d718486a6f1738a473824c6a8835d7112ef339a70c763b4cffa63af3787967c96078b9726cf140e4cca038dc56a2f121a1da99662dd20797c421e5dad5a1db2a534d025140c4ff481dcceeed0522383e374ae1a92b3f10ba00ede8c14dd101b314d135154f13e868e1cc2ce73c22e2bcc3c3a1aa260e1d60fb6e96a26eff40c7c7c86965290a6040e8a6de1372d3aa2248620a3bf732b897c32a2075bded9423b043e005eb891e694e866a1350520f51fa9e140f10026536ebd9663f4f04b31aa217892cdd3283a564bcabc284e7d26f77f2b9fe98c574645b1a4ca421d895aa082aee5f944af1db45ec477d57a26998e89005adfead8a90cf0260e8bc22e43b41737c868e1667f669d55aa54b2c7b709ed8668711dc2cadc9b705ee6cb0f2bef686eec0b6379787d3daafb91c485d6f0b4507cd5540fa69b09cc06bdd8758c2ead286dd682f0d99ede8ef7af900eaba86ed64c3b868b2f35ccc19d2fc3d33eb00993b11bce0cdc7ebd732a31d55cfcf6407cdd7d7f8112162a101b23979d3113030a6d25245f8f54b39c5f696c551275bc6a221084c6215bc2c5c54a81966e5b30d9862b984d507c5c3687d669e15194c970284721543bef8b33e2e1b88d503ad50b472ffac64455820a1fb775755270d257ea4fd279d61366d3a6f5af644eca51a6bc1f552d0aacb28b7299976d73d9ef1b3436ed73f4ec630877fae97a943754b9aef3dbc9807c2642e101238bd82e1f9309bfce260e464a682ab05c0cb574b96881ecf702972291aacdbbe9f77302c0d5f735ae8b01f9173dabc5a4e943ce86fca4d6b6a8773ea28d82e3f53d22a6f97aeb181bacdd416199d8098a9080dfee61d8f79a678998db50fe1b4a49542670310527ac475564f27c8311c253141c6b817db9876e71197943012d2600fb2263e485a0224f0891f1d0af38e63384218034c5661a751341f1516f31a7bcde54f36a8b1ab147b02e9d4da825e4965a7a7f0c4bf86daf6b5d2f9928b74c641df9ed4cf983cd63673d698d5f98142d5818600f45aaa723562a8a8ea975ccff1c0aa4a77ed7ac37df00771ee434ca159a9869e7d56ebd39d434eee8570ffd723418cf8a5d8d999294ea62abe4fbe1a960d2596580007ec80c1af337a2a94f721f73d5e4d1193bcc583710105c5f297d64e092c923d72f1f8dff66aaf2e529adf80163ecc8ca5742465af9c0364e43f91cda3e2cb3ee2b36887c30c0e11fa97a5c0177119a8081ac1675f451643cfc7ed717b0036e7bdba9a09173533c3e446b6c898b931f0403a6cfcab2152b4252e59c56f962f3a686c9de8d355150b822f9a3269384ca0d3e4ee0e36dfb97237417ab0117abffd71e668bbf8e9ccb0aa2247fc84e09edf1e8a132428e09cff67b8ceeb3be9836150030d97b475757f334898ee77a886eff9e7d26de711190967bc78d2fc6dda7a5bba77e011f72428c24f97be5597b10672ad3f30f4dc875fd47b531d3b7a4df5c748213c8699c40f25edcfd18a2df0690e30b23116a0ad6a24a0e4640c26a0c147fffbc5ab75712f3280dda2d7e547ebeb35ae2afd1cce9ef8cb4006e80ca4f7a4592164aef9cdc07c13a6e47de8ca048e15fe56d340ece3f6557274caa03474b2a1c57ca327989492f31e45fc038cc2761fdd5446914eb684fb66a6e65079a538c6235157c9adab41a100f6da0506f76db0a37bab3d5807cb3196567e84e88978a9da5b42932a9a23ca70b0b26f2af04acab951511ae2d9ae30221cd4e655e6878d145dde73b729c4ac1ac81af401e395644cb30ac01d64636ada36dc2a1e2291c0eb77a3dfb84cf718aa827412715c9cb66aaf25a0aca919a1a972ae3757be3a4cfab88eb57dae7d2222a827bb4bc460a101660963f7a192e36b203e231e03146b541b2be800d4ea7fca5dda05868a4464f8015f68e56af064a10a68076f440f5f2dc58ffc7ad7838c78127f75c61844f96f23feba739021bfe71b9cbcf8844186a3ba346429dc7e47e06cd38333b218c9d46346c7131cff13fc3ff40136e816e5d2247cbe34b078315f8ad9ef9d4e7f771de877aaa02c6f95f9a900d55c012db51f76c5367d032e9035b28ab8c69084f78b25634801095ca285c032b8f53dc5e5bf9e448200c356a0a4de5b43da3a2d52c3204fe6856b34ee9cee0031be61d66bf895d7d4f9fd7f81465414ef33848e5c244c2cb8300d0d782c122988b5a138f9c1cc77836a7a44f4c289a07c05a2775212922cc8737fe720f157fa5d8e6a737ef56c88610c529bcfd5fb2e7a4eff196b3c12ceb794761ee13ff7fa4055f4390c103ae4118c5c15bf97f4e5ba7ed42c1f1ae47a76bb79e30f278352f6b3e442b44fac245eb0cacc86c5353cb48ca41c2141f35c82ef421c8fad3c7fc0c644aa35ebe42de20a9ae19aec2273ea8c2a55cb9037cfea40f7b7eef9dde76aa0c397c89df0c94f492412c41ff35aeebcc5c135bab1678df3c22f495e954dcf4d610af1d1618b7da8a99713e3197a8a47c9cef0b2c853203b04a0e804ffadce3756ebca0e1099f0bf15223e7d437cc4742b90558fb29fdfafe3e059c4ab7c04ceb996d5739eae0ca1af6a3eab9d20384254c422b9e5809dd9253749a8abfc86f5160a89aac1dc971c8d9a24eb371905eae635b8ef9f3a76b6162db9182419ff8a24f29e4301a0e2c7350ce22834f601924d5ba9fbb9a7c0428a493b29c04ad96f6a1941ee9f927847304ccb04ca5e4a070547e4a9edcd9143269a34047c55bcdfffbff2858af85996347ae1899435f63969f120cf10ee11c51f238006f62c9b19e7e2e2b6a159b10fcde157e49907060ccbfdb8e95c6e24e2006c89a4246a9a2a8d333e7310528338241289fe72956ddc245e758c1e78ae3ab31e6074a7953c6c37e57d0d6bd6dd83e1641384b538fb6f6572b299df84f10df47af210f7621f4aff47ff8b4dc61f2f7bef6bf251f2e7cd8f6a24e667c476c3083dc23d382a1a45c404a6d0ad31171546684d920045072193b3c484609a68736bbf7f9f27f132550d54d3ec1fad0bb0157644944126f7d33a9a6312bfe0c1767de7c68b532830ec17f92f74aa1c4acded74b278964707a8ad7d1ca9333ee9b55e2516a6d8f1ed529decbc392e26162da445b6a030e8d9d9d4a3bcde49e0e5f88822915d9538c94b4212ffde68acbc48a3ed8cecf348d3e5de5070cc52970a75abdc2510715d6ccb512c3fac3ae2889d753906196b46daf527ecbd71bcfbf4f2072ceab527313c02de7e8ccf58fb1ce8d15ad5b6aa437b94420ff69874aa8e9bc446b5412a1db95d7701cc0a9eadc39c844d00650c6f6542b32e8fcae2db61ce10f654c05385c1081182671fd62369c7be07a18b796741c39d8224a457440475e5cf1b693bb65f2cdaa963fe84eaef88cdd0e6eb29a00940cc227cae0453136cf4a45515a00935b1bd6409ca26561cedce9eaf8fe9216e592867b2bd911219c07013b45c9c62e3553764b612384acb05229aded2480aa18ae947a71afb4a4ab6b50ceb663142198a4b3246f986d8b727c8776809b6abf5e132ddc711b5c956d96a3ef9d733857bc311568850c00ec526c2f54ad6222d29b6c3472fa7dbf485a1620d50b4bda75168788416078e17e5f52491ddf97ff7d232c97027884e7bdebdc2560ac24cb1f28204c2ea64cf6d844ec17e739a771412976a9c8788ffd91367a36800992a7af987b6ab6b272520911cca8a7d1067debbd9d56013d25199f4e4e0618d60e9e4dfe9b22f807704f269c0bd2231428adcdf5f3224d53a93a9a1bf78ae0b7b5239f2e048c7dfd42a620f7f3669acac04089d527f53c9feecb98d82e3c560bf3056e89453fec65750df62d0085ba78bea8a3900d10c6a78412dc54e3ce1ce99f95b0c8e6ef6b5d1b09bcbbd1b25d4967f5f38b30f696bb86d30ab68d21fa7f3a63f34ebc0e6fd5d4293dadf9eae7c54b2ffd65b2087967ecaa35f746e639f9732a48babbcc0a28c589aca2097217a7496a0afd032b99bb0a633a0a1e86b55151b65af29ee2a0f069bf1d6abbfaeba5fb881c9cafc45fcc49e29aeec6be2dc0d81133cacdca8efebe45fece3d520265d22c372d2b52ad002973255cb76d31a90d29fb50281265fdccc6950bce91374b26472afa419f90434868c7ab999b4ced6f35ee88f2df0ac9fd300696f935bbedf84cc47967bb96474e8c40be2315b652caee48217c47d560460aa9236e7e3eba61908429e9124b6aca2e9bf7a64cb461819309f86205182ace0e40ae060e74d2da943158f33da82bc04203a06af924a5a9fa0abf69e8437e1a7084d32e8666e3aba3cbed4975fa6ce4edd23f5e7746ef2adbfe040bd3a5546f9a82994907c0e5074a9fd9186aec627154694bbb64b1c757c271010925b89c55774658972348f5a95a4887de92b2d4d279e971fb81ef1e07b527574836de4ff6f96eec5f5721dd2a3cae0f024a3673089dfdf00574ebbda743c7c9dda5aaa31d7425dee5b37c0c3bca44c598b67d6d351e45da72b6440bafd83a8f3041a326b3228676ff084325b34b0b3d069928dcd43f0d9e682a9cbbd5ec4c3508b81f25ca18d9dc731f261e88c00a540cceacc15b6a9e214798bd2512c899950b8a34ce3f434e47b10ce5c835a9eb511b251d737102eaea72d87b5ca801fd38d1e4adabb500eea03e9b56bc45b6bf289d111523d1417c59a14700da38fc6176a2f9136cf5b03381b3ab2b3fa0bd5af7125d2039038093c7d7c2fe8092c301b9043613f0b8ee4878f667109a5e0184c197eb00ca140365f5c8553a8b8f49a96d07cf3a42378b1a67e1e9d2e7691835f938c8a655f6b4dc1d919b7ce7910ffcf441cfa2046bb42d5119ae3b8d4a5e729bce95c54918c00517f111ccbda599ed62d33103b2dc8dd7e23d7d9a1ad5f56c64c1f396dcc918a7a73e207f1d51a9f1121c0c695ccb59fe4f42b61f220f1e9fff1275d2f5945f1618397871c6f7e32ab37a948ba15c43aa63b4985bfb8c6ea4176575039bccb09ac24ece93805b7f0e0eb1d331235622adf70b91b83237fd0787ade6899a4433f8caf8191b0866913d617998585b1da65eb104747d6573e3fa66e968439e57945eb15706176bafb84a23f6ea5ef0dd776fa01b3b0096a73d900c2130427acf01e05bf1c8857965073a927026518d9a4770fb75e3aac1794edf93b5631a659c2d453a815fa32ca403ad17a0a955493ac6e05e2031e834e5554b2519ab9222b060f0d8c02f7022eae8b19917f19dc9081b31f85f10ec17cdd02ecfd1ae7b06308cbc37c2cad66171943d8f5c6a5453984f616e25fc0d8adf22579d58511ec4948fa0e4e0cd9e2038ff7690d4de0f10efbe4f5fda46caba69d0f054c501b57151a04610067b79ecf74b8ca91553ddf127af7979b2633a2605e67a6bc9c313c6f48d137c61a48cdd19e2d8837b212745def5dfb5b63ad91e908ff0a4bccd8edbc441854aaabff301562606d526c5a77eb86ce8a465fca5c4a35480987c115acf722fe6125b0db368893237d51e69cd65991be25c9f79b6ad4da3c4ce02cf4fb2181651b437c2427f3e50b9d2780b3fe094bbd3401bdf13b132c8319cc15256cd6c5a4c28e7f25791f3c9dde3a2a04f347791c020601301724288fa7909ef46e168c9f63f52542d36685f6cd331d607d9a06d6da5b55af2d112476b8d9cd7618ef1825ebffe356ef8221cbec506746f1f2ee9b7776b58a03349e6a9ccdb10cf328686449219f668a11d69072630376d82e9b95775c861eab0035c70584366d60b72d74a5b19f2d0eab39b30acdde3998bc852556c326add5007f9c3ce92e631836d44a1b92c70a3fbc6fce25483a3b714962d8e0c0034f0435a8cdb3b839973999b8fc241d8b0ff848a947690e5bc014b61a426eaee76d65e32bd437949840f08fcbc64a413ee0c608c3b8f4a90f51f815bf5115b83218a595a92289ededc67fc708757c944ea8d4a4ed6e1ec15fc0d24cefb791067b63a3252d16bb15a4e9f29169edd34761a9ec47dbcbf7bcfd12ac69bc7da7688fa99d23148eede639e5dc267faab4e1e1ec0b289c09040ca1fd382ce39c347c7db21402bb00916b64b5be3f1aee46cba7f254da21413cd0aab9bf5869d550c2a6cc8560d58949287c6acc76832c50031551700672b4bb0d729d82d7b6d3b33fd1263ee868127fef11138f1376ab0a0be1a341abe16cd3fc7d723f72d04aba146cf987b38fcf84a1a1d4842c864622df1c521d82f15de2f8b95f44c4db4100db1cf998da20aa6d21894852c718ed5f30aff1ff243d957c6f87d95d7058307206aadd0bd46ef2e6486c557a096921edf7fbaef2220dfcf038ce232ce31f32f67b13d1b4b7a425b07aa48c186073658d4a9a41d0f751616c5b4af8aa78a76a064af7e8c04bef816c6a725edba4d15f94e5f21d3f75f10147eba777479534f94a563e53df03507c8789cd266a1d2af641e788f4d520d6ed1440ef5d46696910cce9b34cd532351c3beeae3f7d22e7716705fec0d365195455779c516c7a1dc5022a864f76d8a521680427ab84013e675f14b179020cfd00770985cb418101d7b4da9a2edea548dcd1056260bcd9bd28fbb256aaa13176d54c16f3cd8efd2ff12db4f7a04f021d6b57fabc1739211447a2e549309b09e000b93f0ea3b1e98dc5777ba05a5cff4dd30cd4145a96589094e4907656e5e592afdafef3b76a49af45fb62d5cdd2e59b3493d6ea5db5f92fa036f9660fff58d695329bd0c70a767847f2aed8fb916f2fa9a8810aced018c55a086a37ac1b0f1eab79bbd85e78d7273b693c57153aa23d4967383af957c68ed4c8be6ab9338b8ce659961923e0cd64aa087aabfa4bf7fe1a33dd1185f4c097d264378d5cdaaa4779c53d376d15a16875e0829dca7267e829d49c9092edd5bee74dae9aa2e5e6b9a5544a958ae80672a577e550af9b2649cfe4e6b6be0e72632160cdfede2662d4c29677fe2eb819a438b1ded1cd32fa7f16befe6bb7e85a3941ba2c6069a31743d62f0c00d354a2b19aa572543451ac919f86eb6329badf48a608c8436d61d4427de46e58595c306bacc8ec24a49493eb30f31742cf2a743cc1569b9c31e91cced48ae5a574b9de6795fd9825d96debfc2f7a1db6c63d4da98195b4a24859412425c8022982315667615e363f166069338977798e4b9904fc63bb7aacc76da9fded0f6c33d8975215c9eeaf81be703afea099bd2b92a2a49c6284045572f62e92fe2c55c7f36a0e4724c5ad38e95606ed8402426504172658a276d1973a23388b474be39430d366d948633da04f5fdd6f13518853c7bccd1596565bafa374e03c15340681ec307ee58b5c908cca97464af81642eca4988a5cebb5fd3a3a7e9bb328cb3579eb1ae6042d7919b4588098c504168bca557fad395963476febdb0802b2d8820a2b1b347456f50b35c35cba089e7d95ea610337391a90a130d291945a7859f5cf167f0d551521b7e77b4c32fbae1e2a271c4dd38b52dc00098a9df464521ad85b9e2bcf1359ab069b76aab5f7c7f479ed3d829266a3d401ca7a6afb26c71aeafd68133615513c93caf1874f35971a20488887fd92eecce135f9c90bdba3f36e2a10a4975fbf5c6de78157c0251c2f74b9b8333bc3cc540df54395b0630e4c7ad218cbb96d86359677b977d26e2754f49d61656daccce320ba33107a63e914824148edb54d38dafcfe25a4fa2ced67bed96388a41bfd1195f501edcd153fbf9ecb7fae5ae269e5885eaa457bd2c83fdc99222a1666e806a1f50fb0c38cca6774475709cd752c73376ad84b1dfa0ceb90c955fbe7b63beee8d1fa8606c80f4ab7f70cfdb4bf85cd0f7cc929bde528c1d8c157279f5c45d24b7e5803e2f114f5c0c2f736d9e458d4db3988acb1e7155006b2653007a861c5c3ec185a2c32169a6537a7f309e0c33ddafdaec9beb209e7b78c933821481b3eabd34e0d96ba30165225ec44e465cece9b630e5f75664afc3b8aa6b17bc9971ea6ed57158ef114786806ed4f14ecae772b11cb2b7ed0644182b4256e5533b1c04d7664eb7d3261b72b6a849bd45fb5b54df7b269d1765ed8bec08ef8401f41041e91310632bfb31704d7f29058f03353a3b2491f0511896bb8d4b0de71461af0e0fff3d471d6a0a3d1fe8e100356c3bb53a0eb4fbc641e994be68415acb8d3df0d42b3d59412e97fd8e147080ad4ca16f35ef40393ff00022429c71b289d84daf98d8521c05ac8eceb20c6df2a47a7852a1c50bce4c0b0aa60ef4ceb11fea24381f86f6a29db8567d7b96f8515f32e6d802ff00c471b40e8ee58619dfdeb8e836cf070c3c129de92aa35e01c4ff41ff1066246edae89fcd093b150d8828ce93bedaec9d129e89500d3123e0533e7cf33a7787358d60fa1e533913a7f89d42ee362378c062af922aa838d63b0a576d26db400b031e9186c807979a4847e733bd565cbc8935da160fc30535db5ba007e047d1e382d80ab0ee0e6b27330e939b15ef1c09dea927712e4c929881bb54e875acf314e438245ad93e240de249ed15e609fb6da1b069063bc88234de304ea91803d82c86942d7f58a82acdac458efee79f8e7f02155e5276b2d14e7615b74b8060c0fc0b8d9179113f347aae08f9922676192a45d791d727aa05d64f5263664b7e20066cb79883d6aa7828cfbd6d959f41b2886e936b52545a48ccc606979666157596a23a3e7f5d5d1f6237e88795940d4cfdd3c6abf466ce18c46d8853ed4ad5c6da98e17a95aa1338fb71ddabf69b348e9c841bfbe28a1bb8b169b54b9d24f3d7e450d1f5bb60a86128079b99a023b2556e852fb6de4410997742378332286c8f39cdb3f850f2a6bcb6c47f138636b305a7574fddc6a9a2f1ab863f9879d8ce9f0e21e78af844b167aa2e6f026407f154dc874a64f855779f8a2cc47d6d408363ea7f5e141c928a12ade69ef110792278019253e251827c68a47476db48958c4c1ab3bc7bdd010bfc80060af84a70034bfe76e9cbcc31b3538e808549d35bcd29a16275e0e06c19b40e989fe07ea539bd53834623ce066f737225d70a9f6ccc9003e3c3fd92a1caef951bc8a062f65f4a5d9b417cfd1fb6c03e354968261927d1190d7a11223d5d949037a5ede36d8d4907f9c53aac386dbd404bb089bef2e5d9c2c5cf7c5ea792a88acaf85b1b1f3b98fb7b4daced2b89b3c14000109ab7e59a25174706e65c9e677afc0d790201c189961d521151a0935851bab5a652b4c5ecd9575437003bb409a6aef9c2b037b084c1b38b64a212c4bf8c849c630b2e0eeb846fc5290a9309d66c8cca5fef90e7a565234f25b6f4c178ad45660f11eb998e23f46843613a56f6bb98eb76da4515a0001cb89e69df980cfae0f2e8e8562f3344233f0da522275a2947c957c8580467962dd0504102f9e9d98df7e2680b9e85095a3a886ef6af77907514a359ca0bb1ae89a6d51d017f8ec988c56195ced06bc4a7fdb72657cb8a02633a552807c8bbdd4d35a75347b9dbda4f50438837497093e9d9da31556c6fca9f6d5b16008fc7ba82f68a91d2689d09df21bd1f9862f0c13435ec1d99f737dbb6d05c00ff72eeea0c4448ed14f21415d2d99e3f65e2a00d78abc9187044a6f9ba30203767e11001d3940b6389d09716c86cb6b4e11e965fc2d07767323109ac9cabf5b1d40e1baeb7790269ec052efec8f5cbe4caddb15cd006a5cda0aca7fdf3af5cf4d98c07c9f5756969b12c11ca290907d1cdd74f4708a27a8d91b1b062693f5de0442410586f4916be47e4941483e8801cbea9229cc52cd4a56c409eb43f08fd2f914b2a3a1f9b423a55f3b39ba13941caf7819eb40a514d63555ebd37bda8559c8fb34410bcdb3ea82159df37f71b99dd0d1fbf27b9f01ece0f1415b856271fd7283eb9e9a8db5103cf2bf54d9c1ca405f3b460fe1c23af584a91d6c842543a03d8d664576f4ebd4ea0ce583c12fd16b4a79155ef783d255441105e08170a95c469e0abc491c29d5f32e0ba3a4d5652960dabb90536a2d25ef9aaf055f6e67c23514b11cca620e6a27d49d5f50e76dcffe145a2fa2cbf080caa8fcd9547eb7dcf48eab2326617503c511be5a12908e8bb35340d209495944c271836a563e5852ae427d0c8c48a3af46e75e397431ac591b9804aa452d02ebaa0cb737cf1b44b8f826cdba50078d204b35c896025a1490af420e73672b876ee6c310e40b83e7deec808079d0c4c4960543371a885b69c4325da9b279697a9f0ae7a69a42cc92eb488d424eb9811412236eba5acb40701449136290bd84d0a1c305fcb4e2523f1568b7b8e25cfa251eaa67eb24873367997fa53d2e749637f5e30cdcc0cb6ad06b429c4ca4f9b1d2e85142c129ec0a5598d81f2907eeff6242fcde13c554540ae0e5da1db6e4d6194c766ddd573e00d37bb4991356c4b2a3b8c278a50a01a3fd6eafc3e59cc2f4da0448aa110d8e65ae2dfdc8bec87cb7f83536a7f25c8a4e8287d9100293b894480169fa0e2092d417205d0b3bacd2b58c952b5bc3b45760f6866c26d4ebfaa0be379cf7143d5c008295b59555cb067180d66b43e53e4dc4e381a1114169b3710ff10877bc8964be7d7683151cc4676d9b83887691169dc99ebe7d2a8c0107e16441c314306f7bc3ffa038aeb9f5f46cd0cca79669b7bc0992b79f5bd4c44e1040ae7fcfdcb6f2a4f31a5be34bfdc35816debcfc4f2e385107333d957df5583c9f91719a54cc9a8e208aa6c555fc28548577b9a279068e38399e4c38ddb8ff584d44f381d1726bbe6fbfc668008282ea8eacd9e2c45ddc17e480ab6538836a993f4820943729740dc6e0df2ffc10994f9bce7f05b3635c114b7732cb59102f539cb7abce375d363f9f50dd504a2b1dddeee1f6563ef3ec66fe884abd93d30e11fab86a675ece14753474f9970d7824c9c8e3645fc04acd10b22611cc12a71bfd8d22357857122840c8000faaf834cedc3c28d94b55f68703445a3a977bfbf75afba2be0c743d31154b4e00ef313f89e189bc7ef69607c5f710510347d67a6e1c31c885cbb465d0d6127e841f475e838c40819caaa5abfcddbcbbf1c2233479a4eee00a2aaee76994e731f84b519940d34f7f7529f81ed922f5619a3464f3ae6d44837deb114f5ee1fcc78d58d9adf9d6d83f5ecfb3c9a1e08dce79513a74af0e4672996e1e59ed2e0fc3f1c289e29e2d6858beb2a62e6f9bc0b098daf57e20342423c63a4b218fa63032f46d054c00158d03513da188e09e3087b25b43784906fab14c210008bb1d548879d8dc90e2ef3e519861378c6c15c36117c6c678576b9448e79576c503d6e95d0b56fb3b7cf0765115a4b98447d1acc1f4282111595b9dfd0f232f541984361aff5502fb881cb63376af00e694962822db4403ef1beaf351203c03206f5f2b5a3cbf8d02db23c86c4e3187439bb345e9af1702ea1fe9ff9ba3fe2aff0767061d20b035532f294d2dd14d89f01ce05857091e45a44254458f37ddb99b80a48ab46782e6244de6abb8bf2a1b2d3acdad795648f177b9389be08b8ffec6e4875ba8fcccce9d31271eb8a603f312b902a95db63b1f3c27b51f60a329b5555a6e13123c8873f4e652f0be447ad039ee5752e0bde5577e384ecc6ee2030b179b74655f8b597a42fc23e88756ba20efeccf56323dd4721341930966ef4d3e9df343ef782264b50af6b10701118afe1127e6fa87f6e76b7eab335f9fc1d65ed687762b24f758c1c265f24d3948ecdcbb6a7766b334c03c2a94d9099c90c35a281bcedba8943e67e413d23cb8bff5ce4087ab82c296bd571894cd1d00a3906087c6929acc80c14e952c4cd6f5b5a25ba6a6c31a81632cc4aacd79da6c4a3f3e481c9c45d0121b36c6aa7f0db97fa011683b7fd6d01f0d5e91a39572bc9b9d98014e4f886a1d0cb43cbb2abd4ec538dd6cc3612a214efd3cdc2c41378213dd5fe153e334678edfd2d6e376c2713ec857d2cbc8868de6827a74d0df2312c43bce4ccfae3a5a53bb1de6692106a47e89363a894441eee1e8369d13d3150f6ad5431fc2d4b103fbb0ed2a613f6705ea2a8de07c461e2b55a490b94fa4b50c365d7394ac5e6edb440aefe2b133849a69f156467a8ab1a11971fb787c002d82bd42736654a7199d83b092bdea1be0fe2f70bd464c8e4ebd9eedc236678bb0d3dc998d384b28b4f724d9d5717136e3f729446b2487ca83db9ecf61c9e0552d3fada079b57f5c30a40494123f08b619b3affbef20dbc9acad93c4fa730ff27352a4c6534f83186eb70ece7712a959c49965bd8331ceb6dd447b757049b3274541ff8423e04912a83b4ba8fd1c72af0a55e80123036470d5aa27c24365b3aaad48da86a471fbcabde62881c9051b92975e4fe3200a5d5bf9a0628eaace2fd5eaf8ab49e72f60abec26632ffc5a6dc0934ac33c7e9d1e22d260bbebde4edea7c7ee76cbcb5373016d4fa098d4e7c21d9d2f34eddb55d7b50a687f7477c4d0baaa35ffa4776cbd7a4df6e839d2fd1186e6e255c78277ece6136261538077b13941d348b52d91585923e6146cff343241cddd9649be94d50acd84e03830ff54ef93034b02602a722c2dddeb97ee86a713e955cce65a922805de9452d3e48f90181883edb48572ec3ccd1c1feab86fb49d7407d8e53ca0033084b9f2428f4091a51e8402cf08ac7c91f226605029c3dfa793c048d7da0564a9b1a9d2ed66f80d432bae476b8130220e18f5f4dc3263219e62ed02651337abb25e5e04378936481ddba9f6267171295fd06d935495709d4dbe990996088f327ee8dee2a89d895cc54bbefd0fb35237d34d3667fa6f358d0d5d2d294fe8a809e74ac74995fb7b5ddd42fd8e195e70bfebe2865018c83fbb27a726a573495a8801169a3e07ae886ffaefcafed1b2ca2618272a7879385a8e56a19e04f37e72f2c1eaee044676d9eeba0713240edc72fcce432f13bbd79c87604c3804192a2eb32da0972249388f8545cbc2428c86c0082bbc8fb9bb058ec0ead191d135d4ff01a169aa844744b501e651e43090ff4a9c89828b95392b0c30e8ea2dec6e1f72263c28eb8d1a144e160e3cff769d2a7675ea2fff5cb9a8dde1fe6ae047d38fff936d4ef7cc4406259a1dbebb224c9d776d872548ccda7cfc6de8c74deeb1f7ab2a2b75207a5c9f020b2b27ec7dc536f2c6c2f087efe2d99f53005b1b3a7949723e346533a09e6c51e2513703e96e5071c761e7321031826d319a577ab222dcd2f490306e075dd5dbe7d174ebae48103c77079d2aab3143e5cf10df8e9345fdc4fe9157805eff29cf693128e3c6289e6020d0d990827ccc65d70184672c0f6adf364c2ec5333588b28551a9134f26eb8fb240ea95e1b7b8daf0a4631e4efc776f4351caff0eb92361364f2f26a71ef7ee142412e4f26e811c9fe8f4de0d89ebfa5846c9fdd3d78eec94107d7b01d5578e64007cbf768a20f8765a970d68d7e53d61aad590d1eec5f709f1b578eaed5d0f3fc01458a43fec04cccfde150b1b9513a6b05757b12185e54d047e98e9b8003ab89e3d21d814830d2dec9fd5fd749c85baeebe164a5fdff26742d80130e22b7474fd97e893db79afc144d56c182d9895cefd33c69c4856dc80231eb8f751a393981837d031de5a4a3c0e8f48df43ce610d1fac50d2c1f7f95385fae7287cc80d97f2220bbdcdd450d3650b80cd53c2cd4952cb5679e9623b9209f5e2d40735d00b48ec498923fcf4b5775fead1545c2f46317a667274da7ed0eb0bc0f7f2ce3228b90995f0bad17fde70514387da31c10db05c8fe1fc93211da0191250928a5390c7e3fce9f1e0971512d05f066512a4c37f62721915b607cf5f8c605e65796d589ca77a1abce89b0e62ee84c40bb9a80093702b824396863d7efc7bbae9ba984e7c2ff5c25a9a075eeea46fbab009511295c7567e95e09fb0f12cf80b34eb02740cf46ee92f184e9d76acdf3603ca2bb216a681fadbd238f2cbad4a7f5cabe82fdc81473e8a19f268fd7de31f65a23aed2e487fa66bf6f61405b9fbdbece6e9ea43a290c79d91f342c0a42b476dcdad0f5859724cf4943d918bd35315cea9fa32badbc5604da0c2ea6137381d09e86451f33057cdfc8508f9e64c4796bb7f98e3e7029a20a43ce104925effa01e39b494c04b696ae17534894f5c87ed714c6766051a89074a468f736e1d772266563a4b7e7a5f2029110eb79ef2ac7c61b33da6bb049cefec3375fdd595ba9ccfbf481e0284d148dc5e5706086b8fe6749977c8b7279e209a1098ed49050052f876efe7f65b302c9682d07afa3f9d4fa308f356cff0863b6709b559e76adb937c257a058bd6c15eddc2e6807a273eed5e3e996cf9683f40a9da934c40bd9a262ad984c2564151ebeed7289002c9f8cb9cef0d834f0d2dbc6e8102028a0b9ecc1559be0a81b52174b18cdd04017c7bcbf0a9edac0212aae1f0c049dfced662dda8825e3a365a9cdeb444432f8d26e417db7ecb3083f9c62b02aaaa534340b480dc00a34d1c3f6fadf71e3b03bd4d01ec9eb9c8f0ab68be9574d3e76b84a2b567248cd5823a9cd3a6cfe893c79203d176fb30b32bb22a96ca8cec954ff5592c337b051555fe0da58324d806f95d535fb9fc0f1b143b4e3b28d1066dc941f65f35d9bf52edb1d27731b130a38597e84e69d7a09af26aff8a235e4729734acc59308f4950fa720a6e2a0662f49fd0381388221e844fb8d158d0a90a708c5da39d232d5b5ca71706f856f6250c89b82b4f1b2ea9cf619fbb13b7aa3a3747a73fe2f76e1e5dbf4ad67e925b0c1431dceaf75ab5ec8581940d7611eda9cd82cc8ef4d65d4ee5257177bb0b15cd90cb141918e55273a33bf5d5dbbdc87ea146baef6a9bb18741987d25bb7060233337e0ed54b9af37a4b5795836cad6769613779e7d72ef4562a325d47b50cbe20d6c78bcb96c2d5bd7141d07b6127ed620776b316cd7225b47cd02175cbf0cc23691cf63d8c66755606af43d5a683ff58ae361dbbf03c6184abb30b68ced2edfc27350489f61fcca12782b79e4459dd3f56d60c715b059e3a6f1efe55e25311c2a92a6e6a37232d88a6aa6c19a713cff6eaf70dafa58d0e147c4f09fc823a14fcc7c6cc428c1660ebb748a9002d0ad83fb131776a49cd46f7480671f9dea9ebc523564dd57ee938fad514bb08b3b8469f8a2597855a62a3ff487cdde480807e24b4a2817b8efc1746f1ab3873b9ed955101a38d03f9131d82f60530162e22ee244c4f6a169eca2683ea9cf6ecdff374a28a640fc4f8656e63a9ce56201b782ab72925fd1909c6623f5b4d9bc4221fc87b7704ec629208f0e3cf80aaae15f272f00bab198a7a4063c2e02a842b04d83c165ee20b939e5c992f25e22dace1d57cb8a5d01c1b7c4d940a36301cbee2bb77f4f359d5cf528de2b1a69998526c73c668d55857beaaf4af91055d7eddc42175e48adc3736512533efb78231caa3483bbd533c6fd09d40176417b2b69926cd3be06dfcf8a6b5fa4897dbc1f06bbbb8d2f75f921c2cccc82c09586a4155e82d8a743f87e258327de3fe63f22b4ba0e9443e17f543540c94e59a6d7476dfe23e1aadd0376d7f5a6b5266a7101144963e6f900ffa125835daffcb94d974b4d114a289fe3fe6f8f685f448e05f680fc239e306e943fc5e65ca6aff75dbf9999281cbba0ec9a9ecc1ff060d6e4e1a8669a9d335506e8ff9b3c72da973f05f954922914c4d64e4c58e663497d6e805de10059926d70fbf107e9fb4b68a097bbe39766d66a72894a21308129e6f774bf334f7de57290b49f435301b2f66890577ced7a904f247d7b297934012ba51ea038e4d236e47cad1570c9ad6d80fab5653f5e4ffdd9660dc900b62e213b322fe1e25a67a4aedf485708107375522bb264afe19278f1372036b42b7679516e100d6ff6f1bf3e11afcf911a18c6427be15e96bad37586b318727b630e2ba645d217082a284762b101d63c9aeaac63c55068f6d98e9419495000c808c29cf656cfb7d715c97294b367c3f3f60d7a55563fd12f8f30460e1d54115873710b638778703060ced4139ff437540d67a76fa6e8454681041d761b993330abff447dff9c5f6f23a83264c2f1befbb6d043399908bd229354b05a8b0e9d4a5f285cee1ee5be5c050e2917e7be090b47ebc1e53a9730d69beded05715cc5df943a167bafb4da3768674a817781c9544768c6c5978f1fe14008bdba26b167e340f4a89fce1cceea091dbadeb21016d131a44e1da16205c7f1d98f57637f5230a10b2fe394cd23c784a80bb404001b535027adf63c7c9737f3e34a2853e0a01368f2be53581a489cdd94a3a090c848b1de88959b35191a0013bbf7cf926e57e7148913e85c683757fee25bafd46ecd2716f3540477a48b80078d339c28763a721b8f08c63269f5cb6be00ee68a5be9f8a19ed0a6f8b6ad65aa8e628d5781c24aadce0c286665bdfb7c304ad02542</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码提示：圆周率的平方跟的自然对数的前六位</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb笔记</title>
    <link href="/2024/02/26/JavaWeb%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/02/26/JavaWeb%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p>反射：将类的各个组成部分封装成其它对象</p><p>Java代码在计算机中经历的三个阶段：</p><ul><li><p>source源代码阶段：<code>.java</code>经过javac 编译成<code>.class字节码</code>文件 ，字节码文件包括java文件中的<code>成员变量</code>、<code>构造方法</code>、<code>成员方法</code></p></li><li><p>Class类对象阶段：通过类加载器【ClassLoader】将字节码文件加载到内存中，变成<code>Class类对象</code>，Class类对象中包含：成员变量Fields[ ]对象，构造方法Contructors[ ]对象，成员方法Methods[ ]对象</p></li><li><p>Runtime运行时阶段：通过Class类对象中的一些行为创建对象  <code>new 对象()</code></p></li></ul><p>反射的好处：</p><ul><li><p>可以在程序的运行过程中，操作<strong>Class类对象</strong>中的这些对象</p></li><li><p>可以接耦，提高程序的可扩展性</p></li></ul><h3 id="2、获取字节码Class类对象的三种方式"><a href="#2、获取字节码Class类对象的三种方式" class="headerlink" title="2、获取字节码Class类对象的三种方式"></a>2、获取字节码Class类对象的三种方式</h3><h4 id="2-1、在source阶段："><a href="#2-1、在source阶段：" class="headerlink" title="2.1、在source阶段："></a>2.1、在source阶段：</h4><p>此时Java代码只有字节码文件，并没有进内存，需要手动将字节码文件 加载进内存，生成Class类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;全类名&quot;</span>)  <span class="hljs-comment">// 将字节码文件加载进内存，生成Class对象 </span><br></code></pre></td></tr></table></figure><p><strong>多用于配置文件，将类名定义在配置文件中，读取文件，加载类</strong></p><h4 id="2-2、在Class类对象阶段："><a href="#2-2、在Class类对象阶段：" class="headerlink" title="2.2、在Class类对象阶段："></a>2.2、在Class类对象阶段：</h4><p>此时已经将字节码文件加载进内存了，直接获取Class类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">类名.class  <span class="hljs-comment">// 直接获取Class对象</span><br></code></pre></td></tr></table></figure><p><strong>多用于参数的传递</strong></p><h4 id="2-3、在Runtime运行时阶段："><a href="#2-3、在Runtime运行时阶段：" class="headerlink" title="2.3、在Runtime运行时阶段："></a>2.3、在Runtime运行时阶段：</h4><p>此时已经有类的对象了，可以通过对象的方法来获取Class类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">对象.getClass()  <span class="hljs-comment">// 通过对象来获取Class类对象</span><br></code></pre></td></tr></table></figure><p><strong>多用于对象的获取字节码的方式</strong></p><p><img src="/img/java_img/%E8%8E%B7%E5%8F%96%E5%AD%97%E8%8A%82%E7%A0%81Class%E7%B1%BB%E5%AF%B9%E8%B1%A1.png" alt="获取字节码Class类对象"></p><p><strong>结论：</strong></p><p>同一个字节码文件（.class）在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class类对象都是同一个</p><h3 id="3、Class类对象功能概述"><a href="#3、Class类对象功能概述" class="headerlink" title="3、Class类对象功能概述"></a>3、Class类对象功能概述</h3><p><strong>带Declared的 可以不考虑修饰符</strong></p><p><strong>如果想要获取private 修饰的成员，需要通过暴力反射<code>field/constructor/method.setAccessible(true)</code> 来忽略访问权限修饰符的安全检查</strong></p><ul><li><p>获取功能</p><ul><li><p>1、获取成员变量</p><ul><li><p><code>Field[] getFields()</code></p><ul><li>获取所有public修饰的成员变量</li></ul></li><li><p><code>Field getField(成员变量名)</code> </p><ul><li>获取指定名称的public修饰的成员变量</li></ul></li><li><p><code>Field[] getDeclaredFields()</code></p><ul><li>获取所有的成员变量（不考虑修饰符）</li></ul></li><li><p><code>Field getDeclaredField(成员变量名)</code></p><ul><li>获取指定名称的成员变量（不考虑修饰符）</li></ul></li></ul></li><li><p>2、获取构造方法</p><ul><li><p><code>Constructor&lt;?&gt;[] getConstructors()</code></p><ul><li>获取所有public修饰的构造方法</li></ul></li><li><p><code>Constructor&lt;?&gt; getConstructor(参数列表)</code> </p><ul><li>获取public修饰的指定的构造方法</li></ul></li><li><p><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></p><ul><li>获取所有的构造方法</li></ul></li><li><p><code>Constructor&lt;?&gt; getDeclaredConstructor(参数列表)</code></p><ul><li>获取指定的构造方法</li></ul></li></ul></li><li><p>3、获取成员方法</p><ul><li><p><code>Method[] getMethods()</code></p></li><li><p><code>Method getMethod(方法名,参数列表)</code></p></li><li><p><code>Method[] getDeclaredMethods()</code></p></li><li><p><code>Method getDeclaredMethod(方法名,参数列表)</code></p></li></ul></li><li><p>4、获取类名</p><ul><li><code>String getName()</code> 获取类名</li></ul></li></ul></li><li><p>对成员变量Field的操作：</p><ul><li>设置值        <code>void set(对象, 值)</code></li><li>获取值        <code>Object get(对象)</code></li></ul></li><li><p>对构造方法Constructor的操作：</p><ul><li>创建对象：    <code>constructor.newInstance(参数列表)</code><ul><li>如果使用空参数构造方法创建对象，操作可以简化：<code>Class对象.newInstance()</code></li></ul></li></ul></li><li><p>对成员方法Method的操作：</p><ul><li>执行方法：    <code>method.invoke(对象，参数列表)</code></li><li>获取方法名：<code>method.getName()</code></li></ul></li></ul><h3 id="4、案例"><a href="#4、案例" class="headerlink" title="4、案例"></a>4、案例</h3><p>写一个类，可以帮助我们创建任意类的对象，并且执行其中任意方法</p><p><strong>步骤：</strong></p><ul><li><p>1、将需要创建的对象的全类名和需要执行的方法定义在配置文件中</p><p><img src="/img/java_img/%E5%8F%8D%E5%B0%84%E6%A1%88%E4%BE%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="反射案例配置文件"></p></li><li><p>2、在程序中加载读取配置文件</p></li><li><p>3、使用反射技术来加载类文件进内存</p></li><li><p>4、创建对象</p></li><li><p>5、执行方法</p><p><img src="/img/java_img/%E5%8F%8D%E5%B0%84%E6%A1%88%E4%BE%8B%E4%BB%A3%E7%A0%81.png" alt="反射案例代码"></p></li></ul><hr><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="1、JDK-中预定义的一些注解"><a href="#1、JDK-中预定义的一些注解" class="headerlink" title="1、JDK 中预定义的一些注解"></a>1、JDK 中预定义的一些注解</h3><ul><li><p>@Override：用来检测被该注解标注的方法是否是继承自父类的</p></li><li><p>@Deprecated：表示该注解标注的内容，已过时</p></li><li><p>@SuppressWarnings：压制警告.  一般传递参数 all</p></li></ul><h3 id="2、自定义注解"><a href="#2、自定义注解" class="headerlink" title="2、自定义注解"></a>2、自定义注解</h3><ul><li><p>格式：</p><ul><li>元注解</li><li><code>public @interface 注解名称 &#123;&#125;</code></li></ul></li><li><p>本质：注解本质上就是一个接口，该接口继承<code>java.lang.annotation.Annotation</code></p></li><li><p><strong>属性：</strong>接口中的抽象方法</p><ul><li><p>要求：</p><ul><li><p>1、属性的返回值类型有下列5种</p><ul><li>1、基本数据类型</li><li>2、String</li><li>3、枚举</li><li>4、注解</li><li>5、以上类型组成的数组</li></ul></li><li><p>2、定义了属性，在使用时需要给属性赋值</p><ul><li><p>1、如果定义属性时，使用default关键字给属性默认初始化值，，则使用注解时，可以不给这个属性赋值</p></li><li><p>2、如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略</p></li><li><p>3、数组赋值时，值使用大括号 {} 包裹。如果数组中只有一个值，则 {} 可以省略</p></li></ul></li></ul></li></ul></li><li><p><strong>元注解：</strong>用于描述注解的注解</p><ul><li><p>@target：描述注解能够作用的位置</p><ul><li>类<code>ElementType.TYPE</code>、方法<code>ElementType.METHOD</code>、成员变量<code>ElementType.FIELD</code>、…</li></ul></li><li><p>@Retention：描述注解被保留的阶段  </p><ul><li><code>RetentionPolicy.SOURCE</code>   表示当前被描述的注解,不会保留到class字节码文件中</li><li><code>RetentionPolicy.CLASS</code> 表示当前被描述的注解，会保留到class字节码文件中，不会被JVM读取到</li><li><code>RetentionPolicy.RUNTIME</code> 表示当前被描述的注解，会保留到class字节码文件中，并被JVM读取到</li></ul></li><li><p>@Documented：描述注解是否被抽取到API文档中</p></li><li><p>@Inherited：描述注解是否被子类继承</p></li></ul></li></ul><h3 id="3、解析注解：获取注解中定义的属性值"><a href="#3、解析注解：获取注解中定义的属性值" class="headerlink" title="3、解析注解：获取注解中定义的属性值"></a>3、解析注解：获取注解中定义的属性值</h3><ul><li><p>1、获取注解定义位置的字节码对象（Class，Method，Field）</p></li><li><p>2、调用<code>.getAnnotation(注解.class)</code>获取注解对象</p></li><li><p>3、通过<code>注解对象.抽象方法名</code>得到属性值</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、解析注解</span><br><span class="hljs-comment">//1.1、获取该类的字节码文件对象</span><br>Class&lt;ReflectTest&gt; reflectTestClass = ReflectTest.class;<br><span class="hljs-comment">//1.2、获取注解对象</span><br><span class="hljs-type">Pro</span> <span class="hljs-variable">an</span> <span class="hljs-operator">=</span> reflectTestClass.getAnnotation(Pro.class); <span class="hljs-comment">// 其实就是在内存中生成了一个该注解接口的子类实现对象</span><br><span class="hljs-comment">//1.3、调用注解对象中定义的抽象方法来获取返回值</span><br><span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> an.className();<br><span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> an.methodName();<br></code></pre></td></tr></table></figure><h2 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h2><h3 id="1、Web相关概念"><a href="#1、Web相关概念" class="headerlink" title="1、Web相关概念"></a>1、Web相关概念</h3><h4 id="1-1、软件架构"><a href="#1-1、软件架构" class="headerlink" title="1.1、软件架构"></a>1.1、软件架构</h4><ul><li>C &#x2F; S        客户端&#x2F;服务器端</li><li>B &#x2F; S        浏览器&#x2F;服务器端</li></ul><h4 id="1-2、资源分类"><a href="#1-2、资源分类" class="headerlink" title="1.2、资源分类"></a>1.2、资源分类</h4><ul><li>静态资源：所有用户访问后，得到的结果都是一样的，称为静态资源，静态资源可以直接被浏览器解析</li><li>动态资源：每个用户访问相同资源后得到的结果可能不一样，称为动态资源，动态资源被访问后需要先转换为静态资源，再响应给浏览器<ul><li>servlet、jsp、php…</li></ul></li></ul><h4 id="1-3、网络通信三要素"><a href="#1-3、网络通信三要素" class="headerlink" title="1.3、网络通信三要素"></a>1.3、网络通信三要素</h4><ul><li>IP：电子设备（计算机）在网络中的唯一标识</li><li>端口：应用程序在计算机中的唯一标识 【0 ~ 65536】</li><li>传输协议：规定了数据传输的规则<ul><li>基础协议：<ul><li>TCP：可靠协议，三次握手，速度稍微慢</li><li>UDP：不可靠协议，速度快</li></ul></li></ul></li></ul><h4 id="1-4、web服务器软件"><a href="#1-4、web服务器软件" class="headerlink" title="1.4、web服务器软件"></a>1.4、web服务器软件</h4><ul><li>服务器：安装了服务器软件的计算机</li><li>服务器软件：接收用户的请求，处理请求，做出响应</li></ul><p>在web服务器软件中，可以部署项目，让用户通过浏览器来访问这些项目</p><ul><li>常见的java相关的web服务器软件：<ul><li>webLogic</li><li>webSphere</li><li>JBOSS</li><li>Tomcat</li></ul></li></ul><h3 id="2、Tomcat"><a href="#2、Tomcat" class="headerlink" title="2、Tomcat"></a>2、Tomcat</h3><p>Tomcat 目录结构</p><p><img src="/img/java_img/Tomcat%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="Tomcat目录结构"></p><h4 id="2-1、Tomcat-部署项目的方式"><a href="#2-1、Tomcat-部署项目的方式" class="headerlink" title="2.1、Tomcat 部署项目的方式"></a>2.1、Tomcat 部署项目的方式</h4><ul><li><p>方式1：直接将项目放到webapps 目录下</p><ul><li>将项目打成war 包，直接放到webapps 目录下，此时 war包会自动解压缩</li></ul></li><li><p>方式2：配置<code>conf/server.xml</code> </p><ul><li>在<code>&lt;Host&gt;&lt;/Host&gt;</code> 标签体中，配置<code>&lt;Context docBase=&quot;项目存放路径&quot; path=&quot;自定义url访问路径&quot; /&gt;</code></li></ul></li><li><p>方式3：在 <code>conf/Catalina/localhost</code> 下创建一个任意名称的xml 文件，在文件中编写 <code>&lt;Context docBase=&quot;项目存放路径&quot; /&gt;</code> ,此时url 访问路径就变成了这个xml 文件的名称</p><p><img src="/img/java_img/Tomcat%E7%83%AD%E9%83%A8%E7%BD%B2.png" alt="Tomcat热部署"></p><p><img src="/img/java_img/Tomcat%E7%83%AD%E9%83%A8%E7%BD%B2-%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84.png" alt="Tomcat热部署-文件路径"></p><p>此时在浏览器输入<code>localhost:8080/xml文件名称/项目文件名称</code>，就可以访问到热部署的项目了</p></li></ul><p><img src="/img/java_img/Tomcat%E7%83%AD%E9%83%A8%E7%BD%B2%E8%AE%BF%E9%97%AE.png" alt="Tomcat热部署访问"></p><h4 id="2-2、Java-动态项目的目录结构"><a href="#2-2、Java-动态项目的目录结构" class="headerlink" title="2.2、Java 动态项目的目录结构"></a>2.2、Java 动态项目的目录结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">项目的根目录<br>WEB-INF目录<br>web.xml文件  <span class="hljs-comment">//web 项目的核心配置文件</span><br>classes目录  <span class="hljs-comment">//放置字节码文件的目录</span><br>lib目录  <span class="hljs-comment">//放置依赖的jar 包</span><br></code></pre></td></tr></table></figure><h4 id="2-3、关于Tomcat-乱码问题"><a href="#2-3、关于Tomcat-乱码问题" class="headerlink" title="2.3、关于Tomcat 乱码问题"></a>2.3、关于Tomcat 乱码问题</h4><h5 id="1、Tomcat-日志乱码"><a href="#1、Tomcat-日志乱码" class="headerlink" title="1、Tomcat 日志乱码"></a>1、Tomcat 日志乱码</h5><p>在idea中 Help -&gt; Edit Custom VM Options 添加<code>-Dfile.encoding=UTF-8</code></p><h5 id="2、sout-打印乱码"><a href="#2、sout-打印乱码" class="headerlink" title="2、sout 打印乱码"></a>2、sout 打印乱码</h5><ul><li>参考链接：<a href="https://blog.csdn.net/qq_51073233/article/details/127087251">https://blog.csdn.net/qq_51073233/article/details/127087251</a></li></ul><h6 id="2-1、修改-File-settings-Editor-File-Encodings-下面都改成UTF-8"><a href="#2-1、修改-File-settings-Editor-File-Encodings-下面都改成UTF-8" class="headerlink" title="2.1、修改 File -&gt; settings -&gt; Editor -&gt; File Encodings 下面都改成UTF-8"></a>2.1、修改 File -&gt; settings -&gt; Editor -&gt; File Encodings 下面都改成UTF-8</h6><h6 id="2-2、apache-tomcat-8-5-82-—-conf-logging-properties"><a href="#2-2、apache-tomcat-8-5-82-—-conf-logging-properties" class="headerlink" title="2.2、apache-tomcat-8.5.82 —&gt; conf -&gt; logging.properties"></a>2.2、apache-tomcat-8.5.82 —&gt; conf -&gt; logging.properties</h6><p>将里面的GBK都改为UTF-8，目的是将tomcat启动之后的红色乱码提示信息改为正常的。</p><h6 id="2-3、apache-tomcat-8-5-82-—-bin-catalina-bat"><a href="#2-3、apache-tomcat-8-5-82-—-bin-catalina-bat" class="headerlink" title="2.3、apache-tomcat-8.5.82 —&gt; bin -&gt; catalina.bat"></a>2.3、apache-tomcat-8.5.82 —&gt; bin -&gt; catalina.bat</h6><p>打开文件，找到 <code>set &quot;JAVA_OPTS=%JAVA_OPTS% %JSSE_OPTS%&quot;</code>，在其中加上 -Dfile.encoding&#x3D;UTF-8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">set <span class="hljs-string">&quot;JAVA_OPTS=%JAVA_OPTS% %JSSE_OPTS% -Dfile.encoding=UTF-8&quot;</span> <br></code></pre></td></tr></table></figure><h3 id="3、Servlet-【server-applet】"><a href="#3、Servlet-【server-applet】" class="headerlink" title="3、Servlet  【server applet】"></a>3、Servlet  【server applet】</h3><h4 id="3-1、Servlet-概念"><a href="#3-1、Servlet-概念" class="headerlink" title="3.1、Servlet 概念"></a>3.1、Servlet 概念</h4><p>定义：运行在服务器端的小程序</p><p>Servlet 就是一个接口，定义了Java 类被浏览器访问到（tomcat识别）的规则</p><p>将来自定义一个类，实现Servlet 接口，复写方法</p><h4 id="3-2、Servlet-快速入门"><a href="#3-2、Servlet-快速入门" class="headerlink" title="3.2、Servlet 快速入门"></a>3.2、Servlet 快速入门</h4><p>在JavaEE 项目中，定义一个类，实现Servlet 接口，实现接口中的5个方法，</p><p><img src="/img/java_img/Servlet%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B1.png" alt="Servlet入门案例1"></p><p>然后在web.xml 中配置Servlet ，配置url 访问路径</p><p><img src="/img/java_img/Servlet%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B-%E9%85%8D%E7%BD%AEurl.png" alt="Servlet入门案例-配置url"></p><h4 id="3-3、Servlet-执行原理"><a href="#3-3、Servlet-执行原理" class="headerlink" title="3.3、Servlet 执行原理"></a>3.3、Servlet 执行原理</h4><ul><li><p>当服务器接收到客户端浏览器的请求后，会解析请求URL 路径，获取访问的Servlet 的资源路径</p></li><li><p>通过资源路径去web.xml 中找对应的 &lt;url-pattern&gt; 标签体内容 ，然后再找到&lt;servlet-class&gt; 全类名</p></li><li><p>tomcat 会将全类名对应的字节码文件加载进内存。 <code>Class.forName(全类名);</code></p></li><li><p>创建对象  <code>cls.newInstance();</code></p></li><li><p>调用service() 方法</p></li></ul><h4 id="3-4、Servlet-的生命周期"><a href="#3-4、Servlet-的生命周期" class="headerlink" title="3.4、Servlet 的生命周期"></a>3.4、Servlet 的生命周期</h4><ul><li><p>1、被创建：执行init 方法，只执行一次</p><ul><li><p>默认情况下，第一次被访问时创建Servlet</p></li><li><p>可以配置指定Servlet 的创建时机：在web.xml 中的&lt;servlet&gt; 标签中可以通过指定&lt;load-on-startup&gt; 的值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>demo2<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>cn.itcast.web.servlet.ServletDemo2<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--可以指定Servlet 的创建时机</span><br><span class="hljs-comment">               1、第一次被访问时创建Servlet ： &lt;load-on-startup&gt; 的值为负数</span><br><span class="hljs-comment">               2、在服务器启动时创建Servlet ： &lt;load-on-startup&gt; 的值为0或正数</span><br><span class="hljs-comment">       --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>-5<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>demo2<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/demo2<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Servlet 的init 方法只执行一次，说明一个Servlet 在内存中只存在一个对象，Servlet 是单例的</p><ul><li>多个用户同时访问时，可能存在线程安全问题<ul><li>解决：尽量不要在Servlet 中定义成员变量；即使定义了成员变量，也不要对其修改值</li></ul></li></ul></li></ul></li><li><p>2、提供服务：执行service 方法，执行多次</p><ul><li>每次访问Servlet 时，Service 方法都会被调用一次</li></ul></li><li><p>3、被销毁：执行destroy 方法，只执行一次</p><ul><li>Servlet 被销毁时执行。服务器正常关闭时，Servlet 被销毁。</li><li>只有服务器正常关闭时，才会执行destroy 方法</li><li>destroy 方法在Servlet 被销毁之前执行，一般用于释放资源</li></ul></li></ul><h4 id="3-5、Servlet-3-0注解配置"><a href="#3-5、Servlet-3-0注解配置" class="headerlink" title="3.5、Servlet 3.0注解配置"></a>3.5、Servlet 3.0注解配置</h4><p>步骤：</p><ul><li><p>1、定义一个类，实现Servlet 接口，复写方法</p></li><li><p>2、在类上使用@WebServlet 注解配置</p><p><img src="/img/java_img/Servlet3.0%E6%B3%A8%E8%A7%A3.png" alt="Servlet3.0注解"></p></li></ul><h4 id="3-6、IDEA-与Tomcat-的相关配置"><a href="#3-6、IDEA-与Tomcat-的相关配置" class="headerlink" title="3.6、IDEA 与Tomcat 的相关配置"></a>3.6、IDEA 与Tomcat 的相关配置</h4><p>1、IDEA 会为每一个Tomcat 部署的项目单独建立一份配置文件</p><p>2、<strong>工作空间项目</strong> 和 <strong>Tomcat部署的web项目</strong></p><ul><li>tomcat 真正访问的是“Tomcat部署的web项目”，“Tomcat部署的web项目” 对应着 “工作空间项目” 的web目录下的所有资源</li><li>WEB-INF 下的资源不能直接被浏览器访问</li></ul><h4 id="3-7、Servlet-体系结构"><a href="#3-7、Servlet-体系结构" class="headerlink" title="3.7、Servlet 体系结构"></a>3.7、Servlet 体系结构</h4><p>Servlet 接口   —–&gt;     GenericServlet 抽象类    —-&gt;    HttpServlet 抽象类</p><ul><li>GenericServlet 抽象类：将Servlet 接口中其它的方法做了默认空实现，只将service() 方法作为抽象</li><li>HttpServlet 抽象类：对http 协议的一种封装，简化操作</li></ul><h3 id="4、HTTP"><a href="#4、HTTP" class="headerlink" title="4、HTTP"></a>4、HTTP</h3><h4 id="4-1、HTTP-概念"><a href="#4-1、HTTP-概念" class="headerlink" title="4.1、HTTP 概念"></a>4.1、HTTP 概念</h4><p>HTTP：超文本传输协议</p><ul><li>传输协议：定义了客户端和服务器端通信时，发送数据的格式</li><li>HTTP 协议基于TCP&#x2F;IP 的高级协议</li><li>HTTP 的默认端口号是 80</li><li>HTTP 是基于请求&#x2F;响应模型的</li><li>HTTP 协议是无状态的：每次请求之间相互独立，不能交互数据</li></ul><h4 id="4-2、请求"><a href="#4-2、请求" class="headerlink" title="4.2、请求"></a>4.2、请求</h4><h5 id="4-2-1、请求消息的数据格式"><a href="#4-2-1、请求消息的数据格式" class="headerlink" title="4.2.1、请求消息的数据格式"></a>4.2.1、请求消息的数据格式</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">- 请求行<br>  - 请求方式  请求url  请求协议/版本<br>  - GET  /login.html  HTTP/1.1<br>- 请求头<br>  - 请求头名称：请求头值<br>- 请求空行 【分割POST请求的请求头和请求体】<br>  -                                                                                                           <br>- 请求体（正文）【封装POST请求消息的请求参数】<br>  - 请求参数名：请求参数值<br></code></pre></td></tr></table></figure><ul><li>Get 请求参数在请求行中【也就是url 中】；Post 请求参数在请求体中</li><li>Get 请求的url 长度有限制；Post请求的url 长度没有限制</li></ul><h5 id="4-2-2、常见的请求头"><a href="#4-2-2、常见的请求头" class="headerlink" title="4.2.2、常见的请求头"></a>4.2.2、常见的请求头</h5><ul><li>User-Agent：浏览器告诉服务器，当前请求访问你使用的浏览器版本信息</li><li>Referer：告诉服务器，当前请求从哪里来</li></ul><h4 id="4-3、响应"><a href="#4-3、响应" class="headerlink" title="4.3、响应"></a>4.3、响应</h4><h5 id="4-3-1、请求消息的数据格式"><a href="#4-3-1、请求消息的数据格式" class="headerlink" title="4.3.1、请求消息的数据格式"></a>4.3.1、请求消息的数据格式</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html">- 响应行<br>  - 请求协议/版本 状态码 状态码描述<br>  - HTTP/1.1 200 OK<br>- 响应头<br>  - 响应头名称：响应头值<br>  常见响应头：Content-Type：服务器告诉浏览器本次响应体的数据格式，以及编码<br>Content-Disposition：服务器告诉浏览器以什么格式打开响应体数据 【默认：in-line，在当前页面内打开                                             （attachment，以附件形式打开响应体）】<br>- 响应空行 <br>  -                                                                                                           <br>- 响应体（正文）传输的数据，比如html 页面<br>  <span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    hello<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5、Request"><a href="#5、Request" class="headerlink" title="5、Request"></a>5、Request</h3><p>实现Servlet 接口，浏览器发送请求流程</p><ul><li>1、Tomcat 服务器会根据请求url 中的资源路径，创建对应的对象</li><li>2、Tomcat 服务器会创建request 和response 对象，request 对象中封装请求消息数据。</li><li>3、Tomcat 服务器将request 和response 对象传递给service 方法，并调用service 方法</li><li>4、程序员可以通过request 对象获取请求消息数据，通过response 对象设置响应消息数据</li><li>5、Tomcat 服务器在给浏览器做出响应之前，会从service 方法中的response 对象中拿出设置的响应消息数据</li></ul><p><strong>request 对象和response 对象是由服务器创建的</strong></p><h4 id="5-1、request-功能"><a href="#5-1、request-功能" class="headerlink" title="5.1、request 功能"></a>5.1、request 功能</h4><h5 id="5-1-1、获取请求消息数据"><a href="#5-1-1、获取请求消息数据" class="headerlink" title="5.1.1、获取请求消息数据"></a>5.1.1、获取请求消息数据</h5><ul><li>获取请求行数据<ul><li>获取请求方式：<code>String getMethod();</code></li><li><strong>获取虚拟目录：<code>String getContextPath();</code></strong></li><li>获取Servlet 路径：<code>String getServletPath();</code></li><li>获取get方式的请求参数：<code>String getQueryString();</code></li><li><strong>获取请求的uri：<code>String getRequestURI();</code></strong></li><li><strong>获取请求的url：<code>StringBuffer getRequestURL();</code></strong></li><li>获取协议及版本：<code>String getProtocol();</code></li><li>获取客户机的IP地址：<code>String getRemoteAddr();</code></li></ul></li><li>获取请求头数据<ul><li><strong>通过请求头的名称获取请求头的值：<code>String getHeader(String 请求头名称);</code></strong></li><li>获取所有的请求头名称：<code>Enumeration&lt;String&gt; getHeaderNames();</code></li></ul></li><li>获取请求体数据<ul><li>获取流对象，再从流对象中拿数据</li><li>获取字符输入流【只能操作字符数据】：<code>BufferedReader getReader();</code></li><li>获取字节输入流【可以操作所有类型的数据】：<code>ServletInputStream getInputStream();</code></li></ul></li></ul><h5 id="5-1-2、其它功能"><a href="#5-1-2、其它功能" class="headerlink" title="5.1.2、其它功能"></a>5.1.2、其它功能</h5><ul><li><p>1、获取请求参数：</p><ul><li><strong>根据参数名称获取参数值：<code>String getParameter(String 参数名);</code></strong></li><li>根据参数名称获取参数值的数组：<code>String[] getParameterValues(String 参数名);</code></li><li>获取所有请求参数的参数名称：<code>Enumeration&lt;String&gt; getParameterNames();</code></li><li><strong>获取所有参数的Map集合：<code>Map&lt;String, String[]&gt; getParameterMap();</code></strong></li></ul><p><strong>中文乱码问题：</strong></p><p>​get请求不会乱码</p><p>​post请求乱码解决：在获取请求参数前，设置编码：<code>httpServletRequest.setCharacterEncoding(&quot;utf-8&quot;);</code></p></li><li><p>2、请求转发：【一种在服务器内部的资源跳转方式】</p><ul><li><strong>1、通过request 对象获取请求转发器对象：<code>RequestDispatcher getRequestDispatcher(String 路径)</code></strong></li><li><strong>2、使用RequestDispatcher 对象进行转发：<code>void forward(ServletRequest request, ServletResponse response)</code></strong></li></ul><p><strong>请求转发特点：</strong></p><p>​1、浏览器地址栏路径不发生变化</p><p>​2、只能转发到当前服务器内部资源中</p><p>​3、转发只会发送一次请求</p></li><li><p>3、共享数据：</p><ul><li>域对象：一个有作用范围的对象，可以在域范围内共享数据<ul><li>request 域：代表一次请求，一般用于请求转发的多个资源中共享数据</li></ul></li><li>方法：<ul><li>设置属性：<code>void setAttribute(String 属性名, Object 属性值);</code></li><li>获取属性：<code>Object getAttribute(String 属性名);</code></li><li>删除属性：<code>void removeAttribute(String 属性名);</code></li></ul></li></ul></li><li><p>4、获取ServletContext 对象：<code>ServletContext getServletContext()</code></p></li></ul><h3 id="6、Response"><a href="#6、Response" class="headerlink" title="6、Response"></a>6、Response</h3><h4 id="6-1、Response-功能"><a href="#6-1、Response-功能" class="headerlink" title="6.1、Response 功能"></a>6.1、Response 功能</h4><ul><li><p>设置相应行</p><ul><li>设置状态码：<code>setStatus(int 状态码)</code></li></ul></li><li><p>设置响应头：<code>setHeader(String name,String value)</code></p></li><li><p>设置响应体</p><ul><li><p>1、获取输出流</p><ul><li>字符输出流：<code>PrintWriter getWriter()</code></li></ul><p><strong>乱码问题解决：<code>response.setContentType(&quot;text/html;charset=utf-8&quot;)</code></strong></p><ul><li>字节输出流：<code>ServletOutputStream getOutputStream()</code></li></ul></li><li><p>2、使用输出流将数据输出到浏览器</p></li></ul></li><li><p>响应重定向：<code>void sendRedirect(String 重定向地址)</code></p><ul><li>特点：<ul><li>1、地址栏发生变化</li><li>2、可以访问其它服务器资源</li><li>3、两次请求</li></ul></li></ul></li></ul><h3 id="7、ServletContext-对象"><a href="#7、ServletContext-对象" class="headerlink" title="7、ServletContext 对象"></a>7、ServletContext 对象</h3><ul><li>代表整个Web 应用，可以和<em>程序的容器【服务器】</em>来通信</li></ul><p>7.1、功能：</p><ul><li>1、获取MIME 类型<ul><li>MIME类型介绍<ul><li>定义：在互联网通信过程中定义的一种文件数据类型</li><li>格式：大类型&#x2F;小类型     例如： text&#x2F;html     、    image&#x2F;jpeg</li></ul></li><li>获取：<code>String getMimeType(String 文件名)</code></li></ul></li><li>2、域对象：共享数据<ul><li>方法：<code>setAttribute、getAttribute、removeAttribute</code></li><li>ServletContext 域对象范围：所有用户所有请求的数据</li></ul></li><li>3、获取文件的<em>真实路径（服务器路径）</em><ul><li>方法：<code>getRealPath(String 路径)</code></li></ul></li></ul><p>7.2、获取ServletContext 对象：</p><ul><li>通过request 对象获取：<code>request.getServletContext();</code></li><li>通过HttpServlet 获取：<code>this.getServletContext();</code></li></ul><h3 id="8、会话技术"><a href="#8、会话技术" class="headerlink" title="8、会话技术"></a>8、会话技术</h3><ul><li>会话：一次会话中包含多次请求和响应<ul><li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到一方断开位置</li><li>会话的功能：在一次会话的范围内的多次请求间，共享数据</li></ul></li></ul><h4 id="8-1、Cookie-客户端会话技术"><a href="#8-1、Cookie-客户端会话技术" class="headerlink" title="8.1、Cookie 客户端会话技术"></a>8.1、Cookie 客户端会话技术</h4><h5 id="8-1-1、概念"><a href="#8-1-1、概念" class="headerlink" title="8.1.1、概念"></a>8.1.1、概念</h5><p>客户端会话技术，将数据保存到客户端</p><h5 id="8-1-2、使用步骤"><a href="#8-1-2、使用步骤" class="headerlink" title="8.1.2、使用步骤"></a>8.1.2、使用步骤</h5><ul><li><p>创建Cookie对象，绑定数据：<code>new Cookie(String cookie名,String cookie值)</code></p></li><li><p>发送Cookie对象：<code>response.addCookie(Cookie cookie)</code></p><p>服务器就会以：<code>【 Set-Cookie：cookie名=cookie值 】</code> 的形式在<strong>响应头</strong>中响应给浏览器</p><p><img src="/img/java_img/%E5%8F%91%E9%80%81Cookie%E5%93%8D%E5%BA%94.png" alt="发送Cookie响应"></p><p>设置完cookie 之后，在一次会话中浏览器再次发送请求时就会在<strong>请求头</strong>中带着cookie 发送给服务器<code>【 cookie：cookie名=cookie值 】</code></p><p><img src="/img/java_img/%E8%AF%B7%E6%B1%82%E6%90%BA%E5%B8%A6cookie.png" alt="请求携带cookie"></p></li><li><p>获取Cookie，拿到数据：<code>request.getCookies()</code></p></li></ul><h5 id="8-1-3、Cookie-的细节"><a href="#8-1-3、Cookie-的细节" class="headerlink" title="8.1.3、Cookie 的细节"></a>8.1.3、Cookie 的细节</h5><p>1、Cookie 在浏览器中的存活时间</p><ul><li>默认情况下，当浏览器关闭后，Cookie 数据被销毁</li><li>可以设置Cookie 的生命周期：<code>cookie.setMaxAge(int 秒数)</code><ul><li>正数：将Cookie 数据写到硬盘的文件中【也就是 持久化存储 】</li><li>负数：默认值</li><li>0：代表删除Cookie 信息</li></ul></li></ul><p>2、同一个服务器下，多个项目之间Cookie 的共享</p><ul><li>默认情况下，Cookie 不能共享</li><li>设置Cookie 的获取范围：<code>cookie.setPath(String 路径)</code> 【默认情况下，cookie 的path 是 当前的虚拟目录 】<ul><li>如果要共享，可以将path 设置为 <code>/</code></li></ul></li></ul><h5 id="8-1-4、Cookie-的特点和作用"><a href="#8-1-4、Cookie-的特点和作用" class="headerlink" title="8.1.4、Cookie 的特点和作用"></a>8.1.4、Cookie 的特点和作用</h5><ul><li>特点：<ul><li>Cookie 存储在客户端浏览器</li><li>浏览器对于单个Cookie 的大小有限制，对同一个域名下的总Cookie 数量也有限制</li></ul></li><li>作用：<ul><li>Cookie 一般用于存储少量的不太敏感的数据</li><li>在不登录的情况下，完成服务器对浏览器的身份识别</li></ul></li></ul><h4 id="8-2、Session：服务器端会话技术"><a href="#8-2、Session：服务器端会话技术" class="headerlink" title="8.2、Session：服务器端会话技术"></a>8.2、Session：服务器端会话技术</h4><h5 id="8-2-1、概念"><a href="#8-2-1、概念" class="headerlink" title="8.2.1、概念"></a>8.2.1、概念</h5><p>session：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession</p><h5 id="8-2-2、使用步骤"><a href="#8-2-2、使用步骤" class="headerlink" title="8.2.2、使用步骤"></a>8.2.2、使用步骤</h5><p>获取session 对象：<code>request.getSession();</code></p><p>HttpSession 对象的方法：<code>getAttribute(String name)</code>、<code>setAttribute(String name,String value)</code>、<code>removeAttribute(String name)</code></p><h5 id="8-2-3、原理"><a href="#8-2-3、原理" class="headerlink" title="8.2.3、原理"></a>8.2.3、原理</h5><p>当浏览器第一次向服务器端发送请求时，在服务器端内存中会生成一个session，服务器会在响应的时候把这个session 的id 通过<strong>Set-Cookie</strong> 传递给浏览器</p><p><img src="/img/java_img/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%93%8D%E5%BA%94sessionId.png" alt="服务器响应sessionId"></p><p>浏览器就会把这个JSESSIONID 存储到cookie 中,当再次发送请求时，会在cookie 中携带JSESSIONID 发送给服务器，服务器就会根据Cookie 中的JSESSIONID 去内存中查找对应的Session 对象</p><p><strong>session 的实现是依赖cookie 的</strong></p><h5 id="8-2-4、session-细节"><a href="#8-2-4、session-细节" class="headerlink" title="8.2.4、session 细节"></a>8.2.4、session 细节</h5><ul><li><p>当客户端关闭后，服务器不关闭，两次获取的session 不是同一个</p><ul><li><p>默认情况下不是同一个，</p></li><li><p>可以通过手动创建cookie 指定JSESSIONID 为session 的id，并设置cookie 的最大存活时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;JSESSIONID&quot;</span>, session.getId());<br>cookie.setMaxAge(<span class="hljs-number">60</span> * <span class="hljs-number">60</span>);<br>response.addCookie(cookie);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>客户端不关闭，服务器关闭后，两个获取的session 不是同一个</p><ul><li>session 不是同一个，但是要确保数据不丢失，就要用到session 的钝化<ul><li>session 的钝化：在服务器正常关闭之前，将session 对象序列化到硬盘上</li><li>session 的活化：在服务器启动后，将硬盘上的session 文件转化成内存中的session 对象</li></ul></li></ul></li><li><p>session 的被销毁</p><ul><li><p>1、服务器关闭</p></li><li><p>2、session 对象调用invalidate()</p></li><li><p>3、session 的默认失效时间是30分钟</p><ul><li><p>可以在 &#x2F;tomcat&#x2F;conf&#x2F;web.xml 中设置session 的失效时间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h5 id="8-2-5、session-特点"><a href="#8-2-5、session-特点" class="headerlink" title="8.2.5、session 特点"></a>8.2.5、session 特点</h5><ul><li>session 用于存储一次会话的多次请求的数据，存在服务器端</li><li>session 可以存储任意类型，任意大小的数据</li><li>session 与cookie 的区别：<ul><li>session 存储数据在服务器端，cookie 存储数据在客户端</li><li>session 没有数据大小限制，cookie 有</li><li>session 的数据安全，cookie 相对于不安全</li></ul></li></ul><h3 id="9、JSP"><a href="#9、JSP" class="headerlink" title="9、JSP"></a>9、JSP</h3><h4 id="9-1、概念"><a href="#9-1、概念" class="headerlink" title="9.1、概念"></a>9.1、概念</h4><ul><li>Java Server Page：Java服务器端页面</li><li>可以理解为：一个特殊的页面，其中既可以定义html 标签，又可以定义java 代码</li><li>用于简化书写</li></ul><h4 id="9-2、原理"><a href="#9-2、原理" class="headerlink" title="9.2、原理"></a>9.2、原理</h4><ul><li>JSP 本质上就是一个Servlet</li></ul><h4 id="9-3、JSP-的脚本"><a href="#9-3、JSP-的脚本" class="headerlink" title="9.3、JSP 的脚本"></a>9.3、JSP 的脚本</h4><p>JSP 定义Java 代码的方式：</p><ul><li>&lt;% Java 代码 %&gt;<ul><li>在service() 方法中定义的内容</li></ul></li><li>&lt;%!  Java 代码 %&gt;<ul><li>可以定义成员变量、成员方法</li></ul></li><li>&lt;%&#x3D;  Java 代码 %&gt;<ul><li>在service() 方法中的输出语句，将Java 代码输出到页面上</li></ul></li></ul><h4 id="9-4、JSP-内置对象"><a href="#9-4、JSP-内置对象" class="headerlink" title="9.4、JSP 内置对象"></a>9.4、JSP 内置对象</h4><ul><li>概念：在jsp 页面中不需要获取和创建，可以直接使用的对象，就是内置对象</li><li>jsp 一共有9个内置对象：<ul><li>1、pageContext。【PageContext】 当前页面共享数据，还可以获取其它8个内置对象</li><li>2、request。【HttpServletRequest】。一次请求访问的多个资源（请求转发）</li><li>3、session。【HttpSession】。一次会话的多次请求间</li><li>4、application。【ServletContext】。所有用户间共享数据</li><li>5、response。【HttpServletResponse】。响应对象</li><li>6、page。【Object】。当页面（Servlet）的对象this</li><li>7、out：字符输出流对象，可以将数据输出到页面上。【JspWriter】  输出对象，将数据输出到页面<ul><li>response.getWrite() 和out 的区别：<ul><li>在Tomcat 服务器给浏览器做出响应之前，会先找response 缓冲区数据，再找out 缓冲区数据</li><li>response.getWriter() 数据输出永远在out .write() 之前</li></ul></li></ul></li><li>8、config。【ServletConfig】。Servlet 的配置对象</li><li>9、exception。【Throwable】。异常对象</li></ul></li></ul><p>前4个为域对象</p><h4 id="9-5、JSP-指令"><a href="#9-5、JSP-指令" class="headerlink" title="9.5、JSP 指令"></a>9.5、JSP 指令</h4><ul><li>作用：用于配置JSP 页面，导入资源文件</li><li>格式：<code>&lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2 %&gt;</code></li><li>分类：<ul><li>page：用于配置JSP 页面<ul><li>contentType：等同于<code>resp.setContentType()</code><ul><li>可以设置响应体的mime 类型以及字符集</li></ul></li><li>language：只有java</li><li>buffer：缓冲区</li><li>import：导包</li><li>errorPage：当前页面发生异常后，会自动跳转到指定的错误页面</li><li>isErrorPage：标识当前页面是否是错误页面</li></ul></li><li>include：页面包含，导入页面的资源文件</li><li>taglib：导入资源</li></ul></li></ul><h4 id="9-6、JSP注释"><a href="#9-6、JSP注释" class="headerlink" title="9.6、JSP注释"></a>9.6、JSP注释</h4><ul><li>html 注释<ul><li><code>&lt;!-- --&gt;</code>  只能注释html</li></ul></li><li>jsp 注释<ul><li><code>&lt;%-- --%&gt;</code>  注释所有</li></ul></li></ul><h3 id="10、MVC-开发模式"><a href="#10、MVC-开发模式" class="headerlink" title="10、MVC 开发模式"></a>10、MVC 开发模式</h3><ul><li>M：Model，模型：处理具体的业务操作，如查询数据库、封装对象【JavaBean】</li><li>V：View，视图：展示数据 【Jsp】</li><li>C：Controller，控制器：获取请求参数；调用模型；将数据交给视图展示【Servlet】</li></ul><p>浏览器发送请求到服务器，在服务器中控制器进行处理，然后调用模型进行业务处理，模型处理完成之后发送给控制器，控制器再将数据发送给视图进行渲染，视图再返回给浏览器</p><h3 id="11、EL-表达式"><a href="#11、EL-表达式" class="headerlink" title="11、EL 表达式"></a>11、EL 表达式</h3><ul><li><p>EL：Expression Language 表达式语言</p></li><li><p>作用：可以替换和简化JSP 页面中Java 代码的编写</p></li><li><p>语法：<code>$&#123;表达式&#125;</code></p></li><li><p>注意：Jsp 默认支持el 表达式，</p><ul><li>如果要忽略el 表达式，可以配置<code>isELIgnored=&#39;true&#39;</code>，可以忽略当前页面中所有的el 表达式</li><li>也可以在el 表达式之前加上 <code>\</code> ，只忽略一个el 表达式</li></ul></li><li><p>作用：</p><ul><li>1、运算<ul><li>支持的运算符<ul><li>算术运算符：+、-、*、&#x2F;【div】、%【mod】</li><li>比较运算符：&gt;、&lt;、&#x3D;&#x3D;、&gt;&#x3D;、&lt;&#x3D;</li><li>逻辑运算符：&amp;&amp;【and】、||【or】、!【not】</li><li>空运算符：empty ,用于判断字符串、集合、数组的对象是否为null，并且长度是否为0<ul><li><code>$&#123;empty list&#125;</code>   判断是否为空</li><li><code>$&#123;not empty list\str&#125;</code>   判断是否不为空</li></ul></li></ul></li></ul></li><li>2、获取值<ul><li>el 表达式只能从域对象中获取值</li><li>语法：<ul><li><code>$&#123;域名称.键名&#125;</code><ul><li>pageScope —&gt; pageContext</li><li>RequestScope —&gt; request</li><li>sessionScope —&gt; session</li><li>applicationScope —&gt; application【ServletContext】</li></ul></li><li><code>$&#123;键名&#125;</code>：表示依次从最小的域中查找是否有对应的值，直到找到为止</li></ul></li></ul></li></ul></li><li><p>隐式对象：在el 表达式中可以直接使用的对象，就是隐式对象</p><ul><li>el 表达式中共有11个隐式对象</li><li>pageContext:<ul><li>获取其它8个内置对象</li></ul></li></ul></li></ul><h3 id="12、JSTL-标签"><a href="#12、JSTL-标签" class="headerlink" title="12、JSTL 标签"></a>12、JSTL 标签</h3><ul><li><p>概念：JavaServer Pages Tag Library，Jsp 标准标签库</p><ul><li>是由Apache 组织提供的开源的免费的Jsp 标签</li></ul></li><li><p>作用：用于简化和替换Jsp 页面上的Java 代码</p></li><li><p>使用：</p><ul><li>1、导入jstl 相关Jar 包</li><li>2、引入标签库：<code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code></li></ul></li><li><p>常用的JSTL 标签</p><ul><li><p>if：类似于Java 代码中的if</p><ul><li><pre><code class="jsp">&lt;c:if test=&quot;$&#123;not empty requestScope.list&#125;&quot;&gt;    &lt;h3&gt;list不为空&lt;/h3&gt;&lt;/c:if&gt;<figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><br>  - `&lt;<span class="hljs-keyword">c</span>:if&gt;` 标签没有else <br><br>- choose：类似于Java 代码中的<span class="hljs-keyword">switch</span><br><br>  - ```jsp<br>    &lt;<span class="hljs-keyword">c</span>:choose&gt;     &lt;<span class="hljs-variable">%--</span> <span class="hljs-keyword">switch</span>--%&gt;<br>        &lt;<span class="hljs-keyword">c</span>:when test<span class="hljs-operator">=</span><span class="hljs-string">&quot;$&#123;requestScope.number==2&#125;&quot;</span>&gt;   &lt;<span class="hljs-variable">%--</span> case --%&gt;<br>            星期二<br>        &lt;/<span class="hljs-keyword">c</span>:when&gt;<br>        &lt;<span class="hljs-keyword">c</span>:otherwise&gt;  &lt;<span class="hljs-variable">%--</span> <span class="hljs-keyword">default</span> --%&gt;<br>            其它<br>        &lt;/<span class="hljs-keyword">c</span>:otherwise&gt;<br>    &lt;/<span class="hljs-keyword">c</span>:choose&gt;<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>foreach：类似于Java 代码中的for 循环</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--<br>begin  开始<br>end  结束<br><span class="hljs-keyword">var</span>  临时变量<br>step  步长<br>varStatus：<br>index：容器中元素的索引，从<span class="hljs-number">0</span>开始<br>count：循环次数，从<span class="hljs-number">1</span>开始<br>--&gt;<br>&lt;c:forEach begin=<span class="hljs-string">&quot;1&quot;</span> end=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;i&quot;</span> step=<span class="hljs-string">&quot;1&quot;</span> varStatus=<span class="hljs-string">&quot;s&quot;</span>&gt;<br>    $&#123;i&#125;  $&#123;s.index&#125; $&#123;s.count&#125;&lt;br&gt;<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--<br>item：容器对象<br><span class="hljs-keyword">var</span>：容器中元素的临时变量<br>varStatus：<br>index：容器中元素的索引，从<span class="hljs-number">0</span>开始<br>count：循环次数，从<span class="hljs-number">1</span>开始<br>--&gt;<br>&lt;c:forEach items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span> varStatus=<span class="hljs-string">&quot;s&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;str&quot;</span>&gt;<br>    $&#123;s.index&#125; --&gt;$&#123;s.count&#125; --&gt;$&#123;str&#125;&lt;br&gt;<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="13、三层架构：软件设计架构"><a href="#13、三层架构：软件设计架构" class="headerlink" title="13、三层架构：软件设计架构"></a>13、三层架构：软件设计架构</h3><ul><li>界面层（表示层）：用户看到的界面</li><li>业务逻辑层：处理业务逻辑</li><li>数据访问层：操作数据库</li></ul><h3 id="14、Filter-过滤器"><a href="#14、Filter-过滤器" class="headerlink" title="14、Filter 过滤器"></a>14、Filter 过滤器</h3><ul><li>当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能</li><li>一般用于完成通用的操作。比如登录验证、统一编码处理、敏感字符的过滤…</li></ul><h4 id="1、快速入门"><a href="#1、快速入门" class="headerlink" title="1、快速入门"></a>1、快速入门</h4><h5 id="1-1、定义一个类，实现接口Filter"><a href="#1-1、定义一个类，实现接口Filter" class="headerlink" title="1.1、定义一个类，实现接口Filter"></a>1.1、定义一个类，实现接口Filter</h5><h5 id="1-2、复写方法"><a href="#1-2、复写方法" class="headerlink" title="1.2、复写方法"></a>1.2、复写方法</h5><h5 id="1-3、配置拦截路径"><a href="#1-3、配置拦截路径" class="headerlink" title="1.3、配置拦截路径"></a>1.3、配置拦截路径</h5><h6 id="1-3-1、配置方式：web-xml-、-注解"><a href="#1-3-1、配置方式：web-xml-、-注解" class="headerlink" title="1.3.1、配置方式：web.xml  、  注解"></a>1.3.1、配置方式：web.xml  、  注解</h6><p><strong>Demo（注解方式：<code>@WebFilter(过滤路径)</code>）:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebFilter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 过滤器快速入门</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span>  <span class="hljs-comment">//注解方式配置过滤器： 访问所有资源之前，都会执行该过滤器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterDemo1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;FilterDemo1 被执行了...&quot;</span>);<br><br>        <span class="hljs-comment">//*** 过滤完之后，一定要放行</span><br>        filterChain.doFilter(servletRequest, servletResponse);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、Filter过滤器的细节"><a href="#2、Filter过滤器的细节" class="headerlink" title="2、Filter过滤器的细节"></a>2、Filter过滤器的细节</h4><h5 id="2-1、web-xml-方式配置"><a href="#2-1、web-xml-方式配置" class="headerlink" title="2.1、web.xml 方式配置"></a>2.1、web.xml 方式配置</h5><p>1、定义类，实现Filter接口，复写方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-comment">// import javax.servlet.annotation.WebFilter;</span><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * web.xml 方式配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// @WebFilter(&quot;/*&quot;)  //*** 访问所有资源之前，都会执行该过滤器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterDemo1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;FilterDemo1 被执行了...&quot;</span>);<br>        <span class="hljs-comment">//*** 过滤完之后，一定要放行</span><br>        filterChain.doFilter(servletRequest, servletResponse);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、在web.xml 中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--web.xml 方式配置过滤器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>demo1<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>cn.itcast.web.filter.FilterDemo1<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>demo1<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-2、Filter-过滤器的执行流程"><a href="#2-2、Filter-过滤器的执行流程" class="headerlink" title="2.2、Filter 过滤器的执行流程"></a>2.2、Filter 过滤器的执行流程</h5><p>1、执行过滤器</p><p>2、执行放行后的资源</p><p>3、回来接着执行过滤器放行代码下边的代码</p><h5 id="2-3、Filter-过滤器的生命周期方法"><a href="#2-3、Filter-过滤器的生命周期方法" class="headerlink" title="2.3、Filter 过滤器的生命周期方法"></a>2.3、Filter 过滤器的生命周期方法</h5><p>1、<code>init()</code>方法： 在服务器启动后，会创建Filter对象，然后调用init方法。 一般用于加载资源， 只执行一次。</p><p>2、<code>doFilter()</code>方法：每一次请求被拦截时，都会执行。执行多次</p><p>3、<code>destroy()</code>方法：在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行destroy方法。用于释放资源， 只执行一次</p><h5 id="2-4、Filter-过滤器配置详解"><a href="#2-4、Filter-过滤器配置详解" class="headerlink" title="2.4、Filter 过滤器配置详解"></a>2.4、Filter 过滤器配置详解</h5><ul><li><p>拦截路径配置：</p><ul><li>1、具体的资源路径。比如 &#x2F;index.jsp    只有访问index.jsp资源时，过滤器才会被执行</li><li>2、具体的拦截目录。比如 &#x2F;user&#x2F;*   访问 &#x2F;user 下的所有资源时，过滤器都会被执行</li><li>3、后缀名。比如 *.jsp   访问所有的后缀名为jsp资源时，过滤器都会被执行</li><li>4、拦截所有资源。 &#x2F;*    访问所有资源时，过滤器都会被执行</li></ul></li><li><p>拦截方式配置:资源被访问的方式</p><ul><li><p>注解配置：</p><ul><li><p>设置dispatcherTypes属性：</p><ul><li>1、REQUEST：默认值。浏览器直接请求资源</li><li>2、FORWARD：转发访问资源</li><li>3、INCLUDE：包含访问资源</li><li>4、ERROR：错误跳转资源</li><li>5、ASYNC：异步访问资源</li></ul><p><strong>Demo:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//表示浏览器直接请求资源时，该过滤器会被执行</span><br><span class="hljs-meta">@WebFilter(value = &quot;/index.jsp&quot;, dispatcherTypes = DispatcherType.REQUEST)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterDemo5</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//表示转发访问index.jsp时，该过滤器才会被执行</span><br><span class="hljs-meta">@WebFilter(value = &quot;/index.jsp&quot;, dispatcherTypes = DispatcherType.FORWARD)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterDemo5</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//浏览器直接发送请求，或者转发访问，过滤器都会被执行</span><br><span class="hljs-meta">@WebFilter(value = &quot;/index.jsp&quot;, dispatcherTypes = &#123;DispatcherType.REQUEST,DispatcherType.FORWARD&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterDemo5</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>web.xml 配置：设置<code>&lt;dispatcher&gt;&lt;/dispatcher&gt;</code>标签</p><p><strong>Demo:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>demo1<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>cn.itcast.web.filter.FilterDemo1<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>demo1<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dispatcher</span>&gt;</span>REQUEST<span class="hljs-tag">&lt;/<span class="hljs-name">dispatcher</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h5 id="2-5、过滤器链（配置多个过滤器）"><a href="#2-5、过滤器链（配置多个过滤器）" class="headerlink" title="2.5、过滤器链（配置多个过滤器）"></a>2.5、过滤器链（配置多个过滤器）</h5><ul><li>执行顺序：如果有两个过滤器：过滤器1 和 过滤器2，顺序如下：<ul><li>请求 -&gt; 过滤器1  -&gt; 过滤器2   -&gt; 资源执行  -&gt; 过滤器2  -&gt; 过滤器1  -&gt;浏览器</li></ul></li><li>过滤器的先后顺序问题：<ul><li>1、注解配置：按照类名的字符串比较规则比较，值小的先执行<ul><li>如：AFilter  和  BFilter ，A比B小，所以AFilter先执行</li></ul></li><li>2、web.xml 配置：按照在web.xml 中定义的先后顺序，<code>&lt;filter-mapping&gt;</code>谁定义在上边，谁先执行</li></ul></li></ul><h4 id="3、增强对象的功能："><a href="#3、增强对象的功能：" class="headerlink" title="3、增强对象的功能："></a>3、增强对象的功能：</h4><h5 id="3-1、设计模式：一些通用的解决固定问题的方式"><a href="#3-1、设计模式：一些通用的解决固定问题的方式" class="headerlink" title="3.1、设计模式：一些通用的解决固定问题的方式"></a>3.1、设计模式：一些通用的解决固定问题的方式</h5><ul><li>1、装饰模式</li><li>2、代理模式：<ul><li>概念：<ul><li>1、真实对象：被代理的对象</li><li>2、代理对象：</li><li>3、代理模式：代理对象去代理真实对象，以达到增强真实对象功能的目的</li></ul></li><li>实现方式<ul><li>静态代理：有一个代理类文件描述代理模式</li><li>动态代理：在内存中形成代理类<ul><li>实现步骤：<ul><li>1、代理对象和真实对象实现相同的接口</li><li>2、获取代理对象 <code>代理对象 = Proxy.newProxyInstance();</code></li><li>3、使用代理对象调用方法，就可以增强方法了</li></ul></li><li>增强方式：<ul><li>1、增强参数列表</li><li>2、增强返回值类型</li><li>3、增强方法体执行逻辑</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="15、Listener-监听器"><a href="#15、Listener-监听器" class="headerlink" title="15、Listener 监听器"></a>15、Listener 监听器</h3><p><strong>Web的三大组件：Servlet、Filter、Listener</strong></p><p>时间的监听机制：</p><ul><li>事件：一件事件</li><li>事件源：事件发生的地方</li><li>监听器：一个对象</li><li>注册监听：将事件、事件源、监听器绑定在一起。当事件源上发生某个事件后，执行监听代码</li></ul><p>ServletContextListener 监听器对象：监听ServletContext 对象的创建和销毁</p><ul><li><p>两个方法：</p><ul><li><p>void contextDestroyed（ServletContextEvent sce）：ServletContext 对象被销毁之前会调用该方法</p></li><li><p>void contextInitialized（ServletContextEvent sce）：ServletContext 对象创建后会调用该方法</p></li></ul></li><li><p>实现监听器的步骤：</p><ul><li><p>1、定义一个类，实现ServletContextListener接口</p></li><li><p>2、复写方法</p></li><li><p>3、配置</p><ul><li><p>web.xml 方式配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletContextEvent;<br><span class="hljs-keyword">import</span> javax.servlet.ServletContextListener;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContextLoaderListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletContextListener</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听ServletContext 对象创建的</span><br><span class="hljs-comment">     * ServletContext 对象是在服务器启动后自动创建的</span><br><span class="hljs-comment">     * 在服务器启动后自动调用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> servletContextEvent</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextInitialized</span><span class="hljs-params">(ServletContextEvent servletContextEvent)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ContextLoaderListener.contextInitialized&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在服务器正常关闭后，ServletContext 对象被销毁，该方法被调用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> servletContextEvent</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextDestroyed</span><span class="hljs-params">(ServletContextEvent servletContextEvent)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ContextLoaderListener.contextDestroyed&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置监听器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>cn.itcast.web.listener.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>注解配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletContextEvent;<br><span class="hljs-keyword">import</span> javax.servlet.ServletContextListener;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebListener;<br><br><span class="hljs-meta">@WebListener</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContextLoaderListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletContextListener</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听ServletContext 对象创建的</span><br><span class="hljs-comment">     * ServletContext 对象是在服务器启动后自动创建的</span><br><span class="hljs-comment">     * 在服务器启动后自动调用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> servletContextEvent</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextInitialized</span><span class="hljs-params">(ServletContextEvent servletContextEvent)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ContextLoaderListener.contextInitialized&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在服务器正常关闭后，ServletContext 对象被销毁，该方法被调用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> servletContextEvent</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextDestroyed</span><span class="hljs-params">(ServletContextEvent servletContextEvent)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ContextLoaderListener.contextDestroyed&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建Hexo</title>
    <link href="/2024/02/26/%E6%90%AD%E5%BB%BAHexo/"/>
    <url>/2024/02/26/%E6%90%AD%E5%BB%BAHexo/</url>
    
    <content type="html"><![CDATA[<h3 id="1、安装nodejs"><a href="#1、安装nodejs" class="headerlink" title="1、安装nodejs"></a>1、安装nodejs</h3><h4 id="1-1、解压-node-v16-17-0-linux-arm64-tar-xz"><a href="#1-1、解压-node-v16-17-0-linux-arm64-tar-xz" class="headerlink" title="1.1、解压 node-v16.17.0-linux-arm64.tar.xz"></a>1.1、解压 node-v16.17.0-linux-arm64.tar.xz</h4><p>首先，先通过<code> xz -d XXX.tar.xz</code> 解压成 <code>XXX.tar</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">xz -d node-v16.17.0-linux-arm64.tar.xz<br></code></pre></td></tr></table></figure><p>然后通过<code>tar xvf XXX.tar  </code>来解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xvf node-v16.17.0-linux-arm64.tar<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv node-v16.17.0-linux-arm64 nodejs<br></code></pre></td></tr></table></figure><h4 id="1-2、建立软链接"><a href="#1-2、建立软链接" class="headerlink" title="1.2、建立软链接"></a>1.2、建立软链接</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s /usr/local/nodejs/bin/node /usr/local/bin<br>ln -s /usr/local/nodejs/bin/npm /usr/local/bin<br></code></pre></td></tr></table></figure><h4 id="1-3、安装完成后测试"><a href="#1-3、安装完成后测试" class="headerlink" title="1.3、安装完成后测试"></a>1.3、安装完成后测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -v<br>npm -v<br></code></pre></td></tr></table></figure><h3 id="2、安装git"><a href="#2、安装git" class="headerlink" title="2、安装git"></a>2、安装git</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install git<br></code></pre></td></tr></table></figure><h3 id="3、安装hexo"><a href="#3、安装hexo" class="headerlink" title="3、安装hexo"></a>3、安装hexo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建软连接</span><br>ln -s /usr/local/nodejs/bin/hexo /usr/local/bin<br><span class="hljs-meta prompt_"># </span><span class="language-bash">验证是否安装成功</span><br>hexo -v<br></code></pre></td></tr></table></figure><h3 id="4、建站"><a href="#4、建站" class="headerlink" title="4、建站"></a>4、建站</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init 文件名<br>cd 文件名<br>npm install<br></code></pre></td></tr></table></figure><h3 id="5、开启hexo指定端口"><a href="#5、开启hexo指定端口" class="headerlink" title="5、开启hexo指定端口"></a>5、开启hexo指定端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看防火墙状态</span><br>firewall-cmd --state<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启防火墙</span><br>systemctl start firewalld<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启指定端口--permanent 永久开启</span><br>firewall-cmd --zone=public --add-port=4000/tcp --permanent<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重新加载防火墙</span><br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><p><strong>补充命令:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看已开启的端口</span><br>firewall-cmd --list-ports<br><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭指定端口</span><br>firewall-cmd --zone=public --remove-port=端口号/tcp --permanent<br>systemctl restart firewalld<br>firewall-cmd --reload<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看端口被哪一个进程占用centos7默认没有安装net-tools工具，需要安装</span><br>yum install -y net-tools<br>netstat -lnpt|grep 端口号<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#</span></span> <br>lsof -i:端口号<br><span class="hljs-meta prompt_"># </span><span class="language-bash">临时关闭防火墙</span><br>systemctl stop firewalld<br><span class="hljs-meta prompt_"># </span><span class="language-bash">永久关闭防火墙</span><br>systemctl disable firewalld<br><br></code></pre></td></tr></table></figure><h3 id="6、本地启动hexo"><a href="#6、本地启动hexo" class="headerlink" title="6、本地启动hexo"></a>6、本地启动hexo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">清除缓存文件和已经生产的静态文件</span><br>hexo clean<br><span class="hljs-meta prompt_"># </span><span class="language-bash">生产静态文件</span><br>hexo g  / hexo generate<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>hexo s / hexo server<br></code></pre></td></tr></table></figure><h3 id="7、安装fluid主题"><a href="#7、安装fluid主题" class="headerlink" title="7、安装fluid主题"></a>7、安装fluid主题</h3><h4 id="7-1、安装主题"><a href="#7-1、安装主题" class="headerlink" title="7.1、安装主题"></a>7.1、安装主题</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd blog/<br>npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><h4 id="7-2、修改-config-yml配置文件"><a href="#7-2、修改-config-yml配置文件" class="headerlink" title="7.2、修改_config.yml配置文件"></a>7.2、修改<code>_config.yml</code>配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">language: zh-CN<br>theme: fluid<br></code></pre></td></tr></table></figure><h4 id="7-3、修改成功后重新生成静态文件"><a href="#7-3、修改成功后重新生成静态文件" class="headerlink" title="7.3、修改成功后重新生成静态文件"></a>7.3、修改成功后重新生成静态文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clena<br>hexo g<br></code></pre></td></tr></table></figure><h3 id="8、部署到gitee"><a href="#8、部署到gitee" class="headerlink" title="8、部署到gitee"></a>8、部署到gitee</h3><h4 id="8-1、生成ssh公钥"><a href="#8-1、生成ssh公钥" class="headerlink" title="8.1、生成ssh公钥"></a>8.1、生成ssh公钥</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;邮箱&quot;<br></code></pre></td></tr></table></figure><p><strong>之后就会在<code>~/.ssh/</code>下生成公钥和私钥</strong></p><p><img src="/img/hexo_img/%E5%85%AC%E9%92%A5%E7%9B%AE%E5%BD%95.jpg"></p><h4 id="8-2、通过cat-ssh-id-rsa-pub将生成的公钥添加到gitee"><a href="#8-2、通过cat-ssh-id-rsa-pub将生成的公钥添加到gitee" class="headerlink" title="8.2、通过cat ~/.ssh/id_rsa.pub将生成的公钥添加到gitee"></a>8.2、通过<code>cat ~/.ssh/id_rsa.pub</code>将生成的公钥添加到gitee</h4><p><img src="/img/hexo_img/%E6%B7%BB%E5%8A%A0ssh%E5%85%AC%E9%92%A5.jpg" alt="ssh公钥"></p><p><strong>之后通过<code>ssh -T git@gitee.com</code>，查看是否绑定成功</strong></p><p><img src="/img/hexo_img/%E9%AA%8C%E8%AF%81ssh.jpg"></p><h4 id="8-3、gitee新建仓库"><a href="#8-3、gitee新建仓库" class="headerlink" title="8.3、gitee新建仓库"></a>8.3、gitee新建仓库</h4><p>仓库名称随便起，路径遵循 <code>用户名.gitee.io</code>,设置初始模板，添加Readme文件，创建</p><h4 id="8-4、编辑hexo目录下的-config-yml文件"><a href="#8-4、编辑hexo目录下的-config-yml文件" class="headerlink" title="8.4、编辑hexo目录下的_config.yml文件"></a>8.4、编辑hexo目录下的<code>_config.yml</code>文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim _config.yml<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加</span><br>deploy:<br>  type: git<br>  repo: 仓库url<br>  branch: master<br></code></pre></td></tr></table></figure><p><strong>更改完成之后，重新生成静态文件，部署</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">清空原来的静态文件</span><br>hexo c<br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成静态文件</span><br>hexo g<br><span class="hljs-meta prompt_"># </span><span class="language-bash">部署</span><br>hexo d<br></code></pre></td></tr></table></figure><h3 id="9、在hexo中插入pdf"><a href="#9、在hexo中插入pdf" class="headerlink" title="9、在hexo中插入pdf"></a>9、在hexo中插入pdf</h3><h4 id="9-1、进入hexo的目录下安装插件"><a href="#9-1、进入hexo的目录下安装插件" class="headerlink" title="9.1、进入hexo的目录下安装插件"></a>9.1、进入hexo的目录下安装插件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save hexo-pdf<br></code></pre></td></tr></table></figure><h4 id="9-2、在文章中插入链接"><a href="#9-2、在文章中插入链接" class="headerlink" title="9.2、在文章中插入链接"></a>9.2、在文章中插入链接</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% pdf pdf路径 %&#125;<br></code></pre></td></tr></table></figure><p>pdf路径是在<code>source</code>文件夹下的，注意路径中不要有空格</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git笔记</title>
    <link href="/2024/02/26/git%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/02/26/git%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<ul><li><p>⭐笔记视频：【尚硅谷】 <a href="https://www.bilibili.com/video/BV1vy4y1s7k6">https://www.bilibili.com/video/BV1vy4y1s7k6</a></p></li><li><p>书籍</p><ul><li>猴子都能懂的 Git 入门 <a href="https://backlog.com/git-tutorial/cn/">https://backlog.com/git-tutorial/cn/</a></li><li>GitHub 漫游指南 <a href="https://github.phodal.com/">https://github.phodal.com/</a></li></ul></li><li><p>文档</p><ul><li>GitHub 官方文档：<a href="https://docs.github.com/cn">https://docs.github.com/cn</a></li></ul></li></ul><h2 id="1、常用命令"><a href="#1、常用命令" class="headerlink" title="1、常用命令"></a>1、常用命令</h2><ul><li>1、<code>git init</code>          初始化本地库</li><li>2、<code>git status</code>          查看本地库状态【不在暂存区的文件会显示红色；在暂存区的文件显示绿色】</li><li>3、<code>git add 文件名</code>           将文件添加到暂存区</li><li>4、<code>git rm --cached 文件名</code>          将暂存区的文件删除掉</li><li>5、<code>git commit -m &quot;提示信息&quot;  文件名</code>          将暂存区的文件提交到本地库</li><li>6、<code>git reflog</code>          查看精简版本信息</li><li>7、<code>git log</code>          查看版本详细信息</li><li>8、<code>git reset --hard 版本号</code>          版本穿梭</li></ul><p><strong><code>.git/HEAD</code>文件：说明当前是在哪个分支</strong></p><p><strong><code>.git/refs/heads/master</code>文件：记录着当前的版本号</strong></p><h2 id="2、分支操作"><a href="#2、分支操作" class="headerlink" title="2、分支操作"></a>2、分支操作</h2><ul><li>1、<code>git branch -v</code>          查看分支</li><li>2、<code>git branch 分支名</code>          创建分支</li><li>3、<code>git checkout 分支名</code>          切换分支</li><li>4、<code>git merge 分支名</code>          把指定的分支合并到当前分支上</li></ul><p><strong>冲突合并步骤：</strong></p><ul><li>1、首先手动打开发生冲突的文件，把所有不想要的部分统统删除</li><li>2、将发生冲突的文件修改完成后，添加到暂存区   ：<code>git add 文件名</code></li><li>3、执行提交（注意：此时使用git commit命令时不能带文件名）：<code>git commit -m &quot;注释&quot;</code></li><li><strong>合并冲突解决后，只会修改当前分支，待合并分支的内容仍然是合并之前的</strong></li></ul><h2 id="3、协作命令"><a href="#3、协作命令" class="headerlink" title="3、协作命令"></a>3、协作命令</h2><ul><li>1、<code>git remote -v</code>          查看当前所有远程地址别名</li><li>2、<code>git remote add 别名 远程地址</code>          给远程仓库起别名</li><li>3、<code>git push 别名 分支名</code>          将本地仓库的某个分支上的内容推送到远程仓库</li><li>4、<code>git pull 远程库地址别名 远程分支名</code>          将远程仓库的某个分支最新内容拉下来后与当前本地分支直接合并</li><li>5、<code>git clone 远程地址</code>          将远程仓库的内容克隆到本地<ul><li>clone 会做如下3件操作：<ul><li>1、拉取代码；</li><li>2、初始化本地仓库；</li><li>3、创建别名（注意：在clone自动给创建的别名统一叫：origin）</li></ul></li></ul></li></ul><p><strong>SSH免密登录Github远程仓库：</strong></p><ul><li><p>在终端输入以下命令，之后不用输入任何内容，遇到停顿就回车</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;远程仓库的邮箱&quot;<br></code></pre></td></tr></table></figure></li><li><p>之后就会在用户家目录下生成<code>.ssh</code> 文件夹，在文件夹中就有公钥和私钥</p></li><li><p>将公钥复制到Github 中的SSH keys 中</p></li><li><p>在终端中输入以下命令，就可以验证是否连接成功了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@github.com<br></code></pre></td></tr></table></figure></li></ul><p><strong>相关pdf：</strong></p><div class="row">    <embed src="/pdf/git/尚硅谷技术课程系列之Git.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>conda基本使用</title>
    <link href="/2024/02/26/conda%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/02/26/conda%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="一、linux安装miniconda"><a href="#一、linux安装miniconda" class="headerlink" title="一、linux安装miniconda"></a>一、linux安装miniconda</h1><h2 id="1、首先在Anaconda官网下载合适的miniconda，下载完成后上传到linux【树莓派只支持4-9以及以前的】"><a href="#1、首先在Anaconda官网下载合适的miniconda，下载完成后上传到linux【树莓派只支持4-9以及以前的】" class="headerlink" title="1、首先在Anaconda官网下载合适的miniconda，下载完成后上传到linux【树莓派只支持4.9以及以前的】"></a>1、首先在<a href="https://docs.conda.io/en/latest/miniconda.html#linux-installers">Anaconda官网</a>下载合适的miniconda，下载完成后上传到linux【树莓派只支持4.9以及以前的】</h2><h2 id="2、输入命令-bash-Miniconda3-py39-4-12-0-Linux-x86-64-sh-按照顺序进行安装"><a href="#2、输入命令-bash-Miniconda3-py39-4-12-0-Linux-x86-64-sh-按照顺序进行安装" class="headerlink" title="2、输入命令 bash Miniconda3-py39_4.12.0-Linux-x86_64.sh 按照顺序进行安装"></a>2、输入命令 <code>bash Miniconda3-py39_4.12.0-Linux-x86_64.sh</code> 按照顺序进行安装</h2><p><strong>脚本安装步骤中，修改安装路径：<code>/opt/miniconda3/</code></strong></p><p><strong>遇到在询问是否将conda加入环境变量的时候选择no</strong></p><h2 id="3、安装完成后，修改权限-加入环境变量到-etc-profile"><a href="#3、安装完成后，修改权限-加入环境变量到-etc-profile" class="headerlink" title="3、安装完成后，修改权限,加入环境变量到&#x2F;etc&#x2F;profile"></a>3、安装完成后，修改权限,加入环境变量到&#x2F;etc&#x2F;profile</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo chmod ugo+w -R /opt/miniconda3/<br>vim /etc/profile<br><span class="hljs-meta prompt_"># </span><span class="language-bash">最后添加</span><br>PATH=/opt/miniconda3/bin:$PATH<br><br></code></pre></td></tr></table></figure><h2 id="4、安装完成后，输入conda-version验证是否安装成功"><a href="#4、安装完成后，输入conda-version验证是否安装成功" class="headerlink" title="4、安装完成后，输入conda --version验证是否安装成功"></a>4、安装完成后，输入<code>conda --version</code>验证是否安装成功</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[localhost]~ conda --version<br>conda 4.12.0<br></code></pre></td></tr></table></figure><h2 id="5、设置默认不进入conda环境"><a href="#5、设置默认不进入conda环境" class="headerlink" title="5、设置默认不进入conda环境"></a>5、设置默认不进入conda环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">默认不进入conda环境</span><br>conda config --set auto_activate_base false<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">退出当前conda环境</span><br>conda deactivate<br></code></pre></td></tr></table></figure><p><strong>安装mamba拓展：<code>conda install -c conda-forge mamba</code>   【命令中可以使用mamba代替conda】</strong></p><h1 id="二、conda基本使用"><a href="#二、conda基本使用" class="headerlink" title="二、conda基本使用"></a>二、conda基本使用</h1><h2 id="1、创建虚拟环境"><a href="#1、创建虚拟环境" class="headerlink" title="1、创建虚拟环境"></a>1、创建虚拟环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">conda create --name 虚拟环境名 python版本</span><br>conda create --name py36 python=3.6<br></code></pre></td></tr></table></figure><h2 id="2、安装包"><a href="#2、安装包" class="headerlink" title="2、安装包"></a>2、安装包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda/pip/pip3 install 包名<br><span class="hljs-meta prompt_"># </span><span class="language-bash">也可以指定版本安装</span><br>conda install 包名=版本<br></code></pre></td></tr></table></figure><h2 id="3、删除包"><a href="#3、删除包" class="headerlink" title="3、删除包"></a>3、删除包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda uninstall 包名<br></code></pre></td></tr></table></figure><h2 id="4、切换虚拟环境"><a href="#4、切换虚拟环境" class="headerlink" title="4、切换虚拟环境"></a>4、切换虚拟环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda activate 环境名<br></code></pre></td></tr></table></figure><h2 id="5、删除虚拟环境"><a href="#5、删除虚拟环境" class="headerlink" title="5、删除虚拟环境"></a>5、删除虚拟环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda env remove -n 环境名<br></code></pre></td></tr></table></figure><h2 id="6、其他命令"><a href="#6、其他命令" class="headerlink" title="6、其他命令"></a>6、其他命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看所有环境</span><br>conda env list<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看活跃的环境【带*号的就是当前环境】</span><br>conda info --envs<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前环境下安装的包和版本</span><br>conda list<br></code></pre></td></tr></table></figure><p><strong>参考：<a href="https://blog.csdn.net/SARACH_WONG/article/details/89328307">https://blog.csdn.net/SARACH_WONG/article/details/89328307</a></strong></p><h1 id="三、安装配置jupyter"><a href="#三、安装配置jupyter" class="headerlink" title="三、安装配置jupyter"></a>三、安装配置jupyter</h1><h2 id="1、进入对应的conda环境"><a href="#1、进入对应的conda环境" class="headerlink" title="1、进入对应的conda环境"></a>1、进入对应的conda环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda activate py36<br></code></pre></td></tr></table></figure><h2 id="2、pip安装jupyter-lab"><a href="#2、pip安装jupyter-lab" class="headerlink" title="2、pip安装jupyter lab"></a>2、pip安装jupyter lab</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install jupyterlab<br></code></pre></td></tr></table></figure><h2 id="3、配置远程登录和密码"><a href="#3、配置远程登录和密码" class="headerlink" title="3、配置远程登录和密码"></a>3、配置远程登录和密码</h2><p>首先进入python环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3<br></code></pre></td></tr></table></figure><p>执行以下命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> jupyter_server.auth <span class="hljs-keyword">import</span> passwd<br><span class="hljs-meta">&gt;&gt;&gt; </span>passwd()<br>Enter password:<br>Verify password:<br><span class="hljs-string">&#x27;sha1:2ba1cfd96ec3:abedd88f3701f0d6f80f2fa6142bc2a2b1dc461b&#x27;</span><br><br></code></pre></td></tr></table></figure><p>退出python环境，使用jupyterlab生成配置文件,可以看到生成文件<code>~/.jupyter/jupyter_lab_config.py</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jupyter lab --generate-config<br></code></pre></td></tr></table></figure><p>编辑文件，修改一下配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将ip设置为*，意味允许任何IP访问</span><br>c.ServerApp.ip = &#x27;*&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">这里的密码就是上边我们生成的那一串</span><br>c.NotebookApp.password = &#x27;sha1:2ba1cfd96ec3:abedd88f3701f0d6f80f2fa6142bc2a2b1dc461b&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">服务器上并没有浏览器可以供Jupyter打开</span><br>c.ServerApp.open_browser = False<br><span class="hljs-meta prompt_"># </span><span class="language-bash">监听端口设置为8888或其他自己喜欢的端口</span><br>c.ServerApp.port = 8888<br><span class="hljs-meta prompt_"># </span><span class="language-bash">允许远程访问</span><br>c.Server.allow_remote_access = True<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">工作目录</span><br>c.ServerApp.root_dir = &quot;/home/taoao/Desktop&quot;<br><br></code></pre></td></tr></table></figure><h2 id="4、阿里云添加对应的端口号"><a href="#4、阿里云添加对应的端口号" class="headerlink" title="4、阿里云添加对应的端口号"></a>4、阿里云添加对应的端口号</h2><h2 id="5、配置成功，可以使用jupyter-lab或jupyter-lab启动了"><a href="#5、配置成功，可以使用jupyter-lab或jupyter-lab启动了" class="headerlink" title="5、配置成功，可以使用jupyter lab或jupyter-lab启动了"></a>5、配置成功，可以使用<code>jupyter lab</code>或<code>jupyter-lab</code>启动了</h2><p>参考：<a href="https://blog.csdn.net/qq_29427541/article/details/123390390">https://blog.csdn.net/qq_29427541/article/details/123390390</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>conda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django笔记</title>
    <link href="/2024/02/26/Django%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/02/26/Django%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p><em><strong><a href="https://www.bilibili.com/video/BV1vK4y1o7jH/?spm&vd_source=e710048bca758289bcc6b7e0e07eec72">视频连接</a></strong></em></p><p><strong>安装Django</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 安装Django<br>pip3 install django==版本号<br><br># 检查是否安装成功<br>pip3 <span class="hljs-keyword">freeze</span> | grep -i <span class="hljs-string">&#x27;Django&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>其他笔记：<a href="https://blog.csdn.net/weixin_45718715/article/details/118819640?spm=1001.2014.3001.5501">https://blog.csdn.net/weixin_45718715/article/details/118819640?spm=1001.2014.3001.5501</a></strong></p><h1 id="一、Django项目"><a href="#一、Django项目" class="headerlink" title="一、Django项目"></a>一、Django项目</h1><h2 id="1、创建、启动项目"><a href="#1、创建、启动项目" class="headerlink" title="1、创建、启动项目"></a>1、创建、启动项目</h2><h3 id="1-1、创建项目"><a href="#1-1、创建项目" class="headerlink" title="1.1、创建项目"></a>1.1、创建项目</h3><ul><li><p>成功安装Django后，终端会有 <code>django-admin</code> 命令</p></li><li><p>执行 <code>django-admin startproject 项目名</code>  即可创建出对应项目文件夹</p><p><img src="/img/django_img/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE.jpg" alt="创建项目"></p></li></ul><h3 id="1-2、启动服务【测试开发阶段】"><a href="#1-2、启动服务【测试开发阶段】" class="headerlink" title="1.2、启动服务【测试开发阶段】"></a>1.2、启动服务【测试开发阶段】</h3><ol><li>终端cd进入到项目文件夹</li></ol><p><img src="/img/django_img/%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE_1.jpg" alt="启动项目"></p><ol start="2"><li>进入到项目文件夹后，执行 <code>python3 manage.py runserver</code> 启动django服务【注：该启动方式下，Django在前台启动服务，默认监听8000端口】</li></ol><p><img src="/img/django_img/%E5%90%AF%E5%8A%A8Django_2.jpg" alt="启动项目2"></p><ol start="3"><li><p>浏览器访问 <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000</a> 可以看到django的启动页面</p><p><img src="/img/django_img/%E9%A1%B5%E9%9D%A2.jpg" alt="初始化页面"></p></li></ol><p>注：如果想更换端口，则可以用 <code>python3 manage.py runserver 端口号</code></p><h3 id="1-3、关闭服务"><a href="#1-3、关闭服务" class="headerlink" title="1.3、关闭服务"></a>1.3、关闭服务</h3><ul><li>方式1：在runserver启动终端下<ul><li>执行 <code>Ctrl+c</code> 可以关闭Django服务</li></ul></li><li>方式2:在其他终端下<ul><li>执行 <code>lsof -i:8000</code> 查询出Django的进程id</li><li>执行 <code>kill -9 Django进程id</code></li></ul></li></ul><h2 id="2、项目的基础结构"><a href="#2、项目的基础结构" class="headerlink" title="2、项目的基础结构"></a>2、项目的基础结构</h2><h3 id="2-1、manage-py"><a href="#2-1、manage-py" class="headerlink" title="2.1、manage.py"></a>2.1、manage.py</h3><p><strong>manage.py 包含项目管理的子命令，如：</strong></p><ul><li><code>python3 manage.py runserver</code> 启动服务</li><li><code>python3 manage.py startapp</code>       创建应用</li><li><code>python3 manage.py migrate</code>         数据库迁移</li></ul><p><strong>直接执行  <code>python3 manage.py </code>  可以列出所有的Django子命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs shell">(py36) taoaodeMacBook-Pro:mysite1 taoao$ python3 manage.py<br><br>Type &#x27;manage.py help &lt;subcommand&gt;&#x27; for help on a specific subcommand.<br><br>Available subcommands:<br><br>[auth]<br>    changepassword<br>    createsuperuser<br><br>[contenttypes]<br>    remove_stale_contenttypes<br><br>[django]<br>    check<br>    compilemessages<br>    createcachetable<br>    dbshell<br>    diffsettings<br>    dumpdata<br>    flush<br>    inspectdb<br>    loaddata<br>    makemessages<br>    makemigrations<br>    migrate<br>    sendtestemail<br>    shell<br>    showmigrations<br>    sqlflush<br>    sqlmigrate<br>    sqlsequencereset<br>    squashmigrations<br>    startapp<br>    startproject<br>    test<br>    testserver<br><br>[sessions]<br>    clearsessions<br><br>[staticfiles]<br>    collectstatic<br>    findstatic<br>    runserver<br>(py36) taoaodeMacBook-Pro:mysite1 taoao$ <br></code></pre></td></tr></table></figure><h3 id="2-2、项目同名文件夹-mysite1-mysite1"><a href="#2-2、项目同名文件夹-mysite1-mysite1" class="headerlink" title="2.2、项目同名文件夹 - mysite1&#x2F;mysite1"></a>2.2、项目同名文件夹 - mysite1&#x2F;mysite1</h3><ul><li>_<em>init_</em>.py：Python包的初始化文件</li><li>wsgi.py：     Web服务网关的配置文件  -  Django正式启动时，需要用到</li><li>urls.py：      项目的主路由配置  -  http请求进入Django时，优先调用该文件</li><li>settings.py：项目的配置文件  -  包含项目启动时需要的配置</li></ul><h3 id="2-3、settings-py配置文件"><a href="#2-3、settings-py配置文件" class="headerlink" title="2.3、settings.py配置文件"></a>2.3、settings.py配置文件</h3><ul><li><p>settings.py  包含了Django项目启动的所有配置项</p></li><li><p>配置项分为 <strong>公有配置</strong> 和 <strong>自定义配置</strong></p></li><li><p>配置项格式例： BASE_DIR&#x3D;’xxxx’    【名字必须是大写】</p></li><li><p>共有配置  -  Django官方提供的基础配置</p></li></ul><p><a href="https://docs.djangoproject.com/zh-hans/3.2/ref/settings/">https://docs.djangoproject.com/zh-hans/3.2/ref/settings/</a></p><h4 id="1、公有配置"><a href="#1、公有配置" class="headerlink" title="1、公有配置"></a>1、公有配置</h4><ul><li><p><strong>BASE_DIR</strong></p><ul><li>用于绑定当前项目的绝对路径（动态计算出来的），所有文件夹都可以依赖此路径</li></ul></li><li><p><strong>DEBUG</strong></p><ul><li>用于配置Django项目的启动模式，取值：<ul><li>True：表示开发环境中使用开发调试模式（用于开发中）</li><li>False：表示当前项目运行在生产环境中</li></ul></li></ul></li><li><p><strong>ALLOWED_HOSTS</strong></p><ul><li><p>设置允许访问到本项目的host头值</p><ul><li>[]  空列表，表示只有请求头中host为 127.0.0.1、localhost能访问本项目。-DEBUG &#x3D; True 时有效</li><li>[‘*’]  表示任何请求头的host都能访问到当前项目</li><li>[‘192.168.1.3’, ‘127.0.0.1’]  表示只有当前两个host头的值能访问当前项目</li></ul><p>示例：如果要在局域网其他主机也能访问此主机的Django服务，启动方式如下</p><ul><li><code>python3 manage.py runserver 0.0.0.0:端口号</code></li><li>指定网络设备，如果内网环境下其他主机想正常访问该站点，需加 <code>ALLOWED_HOSTS=[&#39;内网ip&#39;]</code></li></ul></li></ul></li><li><p><strong>INSTALLED_APPS</strong></p><ul><li>指定当前项目中安装的应用列表</li></ul></li><li><p><strong>MIDDLEWARE</strong></p><ul><li>用于注册中间件</li></ul></li><li><p><strong>TEMPLATES</strong></p><ul><li>用于指定模版的配置信息</li></ul></li><li><p><strong>DATBASES</strong></p><ul><li>用于指定数据库的配置信息</li></ul></li><li><p><strong>LANGUAGE_CODE</strong></p><ul><li>用于指定语言配置<ul><li>英文：”en-us”</li><li>中文：”zh-Hans”</li></ul></li></ul></li><li><p><strong>TIME_ZONE</strong></p><ul><li>用于指定当前服务器端时区<ul><li>世界标准时间：”UTC”</li><li>中国时区：”Asia&#x2F;Shanghai”</li></ul></li></ul></li><li><p><strong>ROOT_URLCONF</strong></p><ul><li>用于配置主url配置’ mystie1.urls’</li></ul></li></ul><h4 id="2、自定义配置"><a href="#2、自定义配置" class="headerlink" title="2、自定义配置"></a>2、自定义配置</h4><ul><li>settings.py 中也可以添加自定义的配置</li><li>配置建议：名字尽量个性化  -  以防覆盖掉公有配置</li></ul><p>settings.py 中的所有配置项，都可以按需在代码中引入</p><p>​引入方式： <code>from django.conf import settings</code></p><p><strong>settings.py文件内容:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Django settings for mysite1 project.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Generated by &#x27;django-admin startproject&#x27; using Django 3.2.16.</span><br><span class="hljs-string"></span><br><span class="hljs-string">For more information on this file, see</span><br><span class="hljs-string">https://docs.djangoproject.com/zh-hans/3.2/topics/settings/</span><br><span class="hljs-string"></span><br><span class="hljs-string">For the full list of settings and their values, see</span><br><span class="hljs-string">https://docs.djangoproject.com/zh-hans/3.2/ref/settings/</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><br><span class="hljs-comment"># Build paths inside the project like this: BASE_DIR / &#x27;subdir&#x27;.</span><br>BASE_DIR = Path(__file__).resolve().parent.parent  <span class="hljs-comment"># 【当前项目的绝对路径】</span><br><br><span class="hljs-comment"># Quick-start development settings - unsuitable for production</span><br><span class="hljs-comment"># See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/</span><br><br><span class="hljs-comment"># SECURITY WARNING: keep the secret key used in production secret!</span><br>SECRET_KEY = <span class="hljs-string">&#x27;django-insecure-a1$i)bimiqb)3(0sob_i28d7zih_w2or0%pr102+902ki1q1i4&#x27;</span><br><br><span class="hljs-comment"># SECURITY WARNING: don&#x27;t run with debug turned on in production!</span><br>DEBUG = <span class="hljs-literal">True</span><br><span class="hljs-comment"># DE<span class="hljs-doctag">BUG:</span> 启动模式</span><br><span class="hljs-comment"># 1、True  -  调试模式</span><br><span class="hljs-comment"># 1.1、自动检测代码改动后，立刻重启服务。【修改的代码立刻生效】</span><br><span class="hljs-comment"># 1.2、代码报错时，浏览器会显示详细报错信息</span><br><span class="hljs-comment"># 2、False  -  正式启动模式 / 上线模式</span><br><br><span class="hljs-comment"># 请求头中的 Host头   例子：ALLOWED_HOSTS = [&#x27;127.0.0.1&#x27;]</span><br>ALLOWED_HOSTS = []<br><br><span class="hljs-comment"># Application definition</span><br><br><span class="hljs-comment"># 配置Django的应用</span><br>INSTALLED_APPS = [<br>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br>]<br><br><span class="hljs-comment"># 中间件</span><br>MIDDLEWARE = [<br>    <span class="hljs-string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br>]<br><br><span class="hljs-comment"># 表明Django的主路由文件位置</span><br>ROOT_URLCONF = <span class="hljs-string">&#x27;mysite1.urls&#x27;</span><br><br><span class="hljs-comment"># 模版</span><br>TEMPLATES = [<br>    &#123;<br>        <span class="hljs-string">&#x27;BACKEND&#x27;</span>: <span class="hljs-string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,<br>        <span class="hljs-string">&#x27;DIRS&#x27;</span>: [],<br>        <span class="hljs-string">&#x27;APP_DIRS&#x27;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;context_processors&#x27;</span>: [<br>                <span class="hljs-string">&#x27;django.template.context_processors.debug&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.template.context_processors.request&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,<br>            ],<br>        &#125;,<br>    &#125;,<br>]<br><br><span class="hljs-comment"># 网关</span><br>WSGI_APPLICATION = <span class="hljs-string">&#x27;mysite1.wsgi.application&#x27;</span><br><br><span class="hljs-comment"># Database</span><br><span class="hljs-comment"># https://docs.djangoproject.com/en/3.2/ref/settings/#databases</span><br><span class="hljs-comment"># 数据库</span><br>DATABASES = &#123;<br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.sqlite3&#x27;</span>,<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: BASE_DIR / <span class="hljs-string">&#x27;db.sqlite3&#x27;</span>,<br>    &#125;<br>&#125;<br><br><span class="hljs-comment"># Password validation</span><br><span class="hljs-comment"># https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators</span><br><br>AUTH_PASSWORD_VALIDATORS = [<br>    &#123;<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;django.contrib.auth.password_validation.UserAttributeSimilarityValidator&#x27;</span>,<br>    &#125;,<br>    &#123;<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;django.contrib.auth.password_validation.MinimumLengthValidator&#x27;</span>,<br>    &#125;,<br>    &#123;<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;django.contrib.auth.password_validation.CommonPasswordValidator&#x27;</span>,<br>    &#125;,<br>    &#123;<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;django.contrib.auth.password_validation.NumericPasswordValidator&#x27;</span>,<br>    &#125;,<br>]<br><br><span class="hljs-comment"># Internationalization</span><br><span class="hljs-comment"># https://docs.djangoproject.com/en/3.2/topics/i18n/</span><br><br><span class="hljs-comment"># 语言信息配置    中文：&#x27;zh-Hans&#x27;</span><br><span class="hljs-comment"># LANGUAGE_CODE = &#x27;en-us&#x27;</span><br>LANGUAGE_CODE = <span class="hljs-string">&#x27;zh-Hans&#x27;</span><br><br><span class="hljs-comment"># 时区  东八区：&#x27;Asia/Shanghai&#x27;</span><br>TIME_ZONE = <span class="hljs-string">&#x27;UTC&#x27;</span><br><br>USE_I18N = <span class="hljs-literal">True</span><br><br>USE_L10N = <span class="hljs-literal">True</span><br><br>USE_TZ = <span class="hljs-literal">True</span><br><br><span class="hljs-comment"># Static files (CSS, JavaScript, Images)</span><br><span class="hljs-comment"># https://docs.djangoproject.com/en/3.2/howto/static-files/</span><br><br>STATIC_URL = <span class="hljs-string">&#x27;/static/&#x27;</span><br><br><span class="hljs-comment"># Default primary key field type</span><br><span class="hljs-comment"># https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field</span><br><br>DEFAULT_AUTO_FIELD = <span class="hljs-string">&#x27;django.db.models.BigAutoField&#x27;</span><br><br></code></pre></td></tr></table></figure><h2 id="3、URL和视图函数"><a href="#3、URL和视图函数" class="headerlink" title="3、URL和视图函数"></a>3、URL和视图函数</h2><h3 id="3-1、URL"><a href="#3-1、URL" class="headerlink" title="3.1、URL"></a>3.1、URL</h3><h4 id="URL结构"><a href="#URL结构" class="headerlink" title="URL结构"></a>URL结构</h4><ul><li><p>定义  -  即统一资源定位符  Uniform Resource Locator</p></li><li><p>作用  -  用来表示互联网上某个资源的地址</p></li><li><p>URL的一般语法格式为（注：[] 代表其中的内容可省略）</p><ul><li>protocol:&#x2F;&#x2F;hostname[:port]&#x2F; path [?query][#fragment]</li><li>协议:&#x2F;&#x2F;主机名[:端口] &#x2F; 路由 [?查询字符串][#锚点]</li><li><a href="https://docs.djangoproject.com/zh-hans/3.2/">https://docs.djangoproject.com/zh-hans/3.2/</a></li></ul></li><li><p><strong>protocol（协议）</strong> </p><ul><li>http 通过HTTP访问该资源。格式 http:&#x2F;&#x2F;</li><li>https 通过安全的HTTPS访问该资源。格式 https:&#x2F;&#x2F;</li><li>file 资源时本地计算机伤的文件。格式 file:&#x2F;&#x2F;&#x2F;</li></ul></li><li><p><strong>hostname（主机名）</strong></p><ul><li>是指存放资源的服务器的域名系统（DNS）主机名、域名 或 IP地址</li></ul></li><li><p><strong>port（端口号）</strong></p><ul><li>整数，可选，省略时使用方案的默认端口</li><li>各种传输协议都有默认的端口号，如http的默认端口为80</li></ul></li><li><p><strong>path（路由地址）</strong></p><ul><li>由零或多个”&#x2F;“ 符号隔开的字符串，一般用来表示主机上的一个目录或文件地址。</li><li>路由地址决定了服务器端如何处理这个请求。</li></ul></li><li><p><strong>query（查询）</strong></p><ul><li>可选，以? 开头，用于给动态网页传递参数。可有多个参数，，用&amp; 符号隔开，每个参数的名和值用&#x3D; 符号隔开</li></ul></li><li><p><strong>fragment（锚点）</strong></p><ul><li>字符串，用于指定网络资源中的片段。例如一个网页中有多个名次解释，可使用fragment直接定位到某一名词解释</li></ul></li></ul><p><strong>urls.py结构：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># file：&lt;项目同名文件夹下&gt;/urls.py</span><br>  <span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br>  <span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br>  <span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<span class="hljs-comment"># 视图函数文件路径</span><br><br>  <span class="hljs-comment"># 此处配置主路由 </span><br>  urlpatterns=[<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    <span class="hljs-comment"># http://127.0.0.1:8000/path路径</span><br>    path(<span class="hljs-string">&#x27;path路径&#x27;</span>,视图函数文件名.视图函数)<br>    ... <br>  ]<br></code></pre></td></tr></table></figure><h3 id="3-2、Django处理URL请求流程"><a href="#3-2、Django处理URL请求流程" class="headerlink" title="3.2、Django处理URL请求流程"></a>3.2、Django处理URL请求流程</h3><ul><li><p>浏览器 地址栏  -&gt; <a href="http://127.0.0.1:8000/page/2003/">http://127.0.0.1:8000/page/2003/</a> </p><p>1、Django 从settings.py配置文件中根据<strong>ROOT_URLCONF</strong>找到主路由文件【urls.py】；默认情况下，该文件在 项目同名目录下的urls；例如 mysite1&#x2F;mysite1&#x2F;urls.py</p><p>2、Django加载主路由文件中的urlpatterns变量[包含很多路由的数组]</p><p>3、依次匹配urlpatterns 中的URL，匹配到第一个合适的中断后续的匹配</p><p>4、匹配成功  -  调用对应的视图函数处理请求，返回响应</p><p>5、匹配失败  -  返回404响应</p></li></ul><h3 id="3-3、视图函数"><a href="#3-3、视图函数" class="headerlink" title="3.3、视图函数"></a>3.3、视图函数</h3><ul><li><p>视图函数是用于接收一个浏览器请求（HttpRequest对象）并通过HttpResponse对象返回响应的函数。</p></li><li><p>此函数可以接收浏览器请求并根据业务逻辑返回相应的响应内容给浏览器</p></li><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">xxx_view</span>(<span class="hljs-params">request [,其他参数...]</span>):<br>  <span class="hljs-keyword">return</span> HttpResponse对象<br></code></pre></td></tr></table></figure></li><li><p>样例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># file: &lt;项目同名文件夹下&gt;/views.py</span><br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<br>  <br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">page1_view</span>(<span class="hljs-params">request</span>):<br>    html=<span class="hljs-string">&quot;&lt;h1&gt;这是第一个页面&lt;/h1&gt;&quot;</span><br>    <span class="hljs-keyword">return</span> HttpResponse(html)<br></code></pre></td></tr></table></figure></li></ul><h2 id="4、路由配置"><a href="#4、路由配置" class="headerlink" title="4、路由配置"></a>4、路由配置</h2><h3 id="4-1、path"><a href="#4-1、path" class="headerlink" title="4.1、path"></a>4.1、path</h3><ul><li><p>path()函数</p><ul><li><p>导入  -  <code>from django.urls import path</code></p></li><li><p>语法  -  <code>path(route路由,views视图函数,name=None)</code></p></li><li><p>参数：</p><ul><li>1、route：字符串类型，匹配的请求路径</li><li>2、views：指定路径所对应的视图处理函数的名称  【函数名。注意：不能加括号】</li><li>3、name：为地址起别名，在模版中地址反向解析时使用</li></ul></li></ul></li><li><p>path转换器</p><ul><li>语法：&lt;转换器类型：自定义名&gt;</li><li>作用：若转换器类型匹配到对应类型的数据，则将数据按照关键字传参的方式传递给视图函数</li><li>例子：<code>path(&#39;page/\&lt;int:page&gt;&#39;,views.xxx)</code></li><li><strong>此时在urls.py中，xxx函数不光要传request参数。还要传转换器类型后面的自定义名</strong></li></ul></li></ul><p><img src="/img/django_img/path.jpg" alt="path转换器类型"></p><h3 id="4-2、re-path"><a href="#4-2、re-path" class="headerlink" title="4.2、re_path()"></a>4.2、re_path()</h3><ul><li>re_path()函数<ul><li>在url的匹配过程中可以使用正则表达式进行精确匹配</li><li>语法：<ul><li><code>re_path(reg，view，na me=xxx)</code></li><li>正则表达式为命名分组模式（?P&lt;name&gt;pattern）；匹配提取参数后用关键字传参方式传递给视图函数</li><li>正则命名分组：（?P&lt;name&gt;pattern）<ul><li>（）代表是分组</li><li>（?P&lt;参数名&gt;正则）</li></ul></li></ul></li></ul></li></ul><h2 id="5、HTTP协议的请求和响应"><a href="#5、HTTP协议的请求和响应" class="headerlink" title="5、HTTP协议的请求和响应"></a>5、HTTP协议的请求和响应</h2><h3 id="5-1、定义"><a href="#5-1、定义" class="headerlink" title="5.1、定义"></a>5.1、定义</h3><ul><li>请求是指浏览器端通过HTTP协议发送给服务器端的数据</li><li>响应是指服务器端接收到请求后做相应的处理后再回复给浏览器端的数据</li></ul><h3 id="5-2、请求"><a href="#5-2、请求" class="headerlink" title="5.2、请求"></a>5.2、请求</h3><p><img src="/img/django_img/%E8%AF%B7%E6%B1%82.jpg" alt="请求"></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">起始行<br><br>请求头headers<br><br>请求体<span class="hljs-keyword">body</span><br></code></pre></td></tr></table></figure><h4 id="5-2-1、请求中的方法"><a href="#5-2-1、请求中的方法" class="headerlink" title="5.2.1、请求中的方法"></a>5.2.1、请求中的方法</h4><ul><li>根据HTTP标准，HTTP请求可以使用多种请求方法</li><li>HTTP1.0定义了三种请求方法：get、post和head方法（get、post最常用）</li><li>HTTP1.1新增了五种请求方法：options、put、delete、trace和connect方法</li></ul><p><img src="/img/django_img/%E8%AF%B7%E6%B1%82%E7%9A%84%E6%96%B9%E6%B3%95.jpg" alt="请求中的方法"></p><p><img src="/img/django_img/%E8%AF%B7%E6%B1%82%E7%9A%84%E6%96%B9%E6%B3%952.jpg" alt="请求中的方法"></p><p>【 get请求：跟服务端要数据</p><p>head请求：跟get类似，但是只会拿到响应头</p><p>post请求：向服务端提交数据 </p><p>put请求：更新数据</p><p>delete请求：删除数据</p><p>connect请求：代理</p><p>options请求、trace请求：测试服务器】</p><h4 id="5-2-2、Django中的请求"><a href="#5-2-2、Django中的请求" class="headerlink" title="5.2.2、Django中的请求"></a>5.2.2、Django中的请求</h4><ul><li>请求在Django中就是 视图函数中的第一个参数，即HttpRequest对象</li><li>Django接收到http协议的请求后，会根据请求数据报文创建HttpRequest对象</li><li>HttpRequest对象 通过属性 描述了 请求的 所有相关信息</li><li>HttpRequest对象的属性和方法：<ul><li>path_info：URL字符串调用：【例如：<code>request.path_info</code>,其他方法类似】</li><li>method：字符串，表示HTTP请求的方法，常用值：‘GET’、‘POST’</li><li>GET：QueryDict查询字典的对象，包含get请求方式的所有数据</li><li>POST：QueryDict查询字典的对象，包含post请求方式的所有数据</li><li>FILES：类似于字典的对象，包含所有的上传文件信息</li><li>COKKIES：Python字典，包含所有的cookie，键和值都是字符串</li><li>session：类似于字典的对象，表示当前的会话</li><li>body：字符串，请求体的内容（POST或PUT）</li><li>scheme：请求协议（‘http’&#x2F;‘https’）</li><li>request.get_full_path()：请求的完整路径</li><li>request.META：请求中的元数据（消息头、请求头）<ul><li>request.META[‘REMOTE_ADDR’]：客户端IP地址</li></ul></li></ul></li></ul><h3 id="5-3、响应"><a href="#5-3、响应" class="headerlink" title="5.3、响应"></a>5.3、响应</h3><p><img src="/img/django_img/%E5%93%8D%E5%BA%94.jpg" alt="响应"></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">起始行<br><br>响应头headers<br><br>响应体<span class="hljs-keyword">body</span><br></code></pre></td></tr></table></figure><h4 id="5-3-1、响应状态码"><a href="#5-3-1、响应状态码" class="headerlink" title="5.3.1、响应状态码"></a>5.3.1、响应状态码</h4><p>常见的HTTP状态码  HTTP Status Code</p><pre><code class="hljs">- 200  -  请求成功- 301  -  永久重定向 - 资源（网页等）被永久转移到其它URL- 302  -  临时重定向- 404  -  请求的资源（网页等）不存在- 500  -  内部服务器错误</code></pre><p><img src="/img/django_img/%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81.jpg" alt="响应状态码"></p><h4 id="5-3-2、Django中的响应对象"><a href="#5-3-2、Django中的响应对象" class="headerlink" title="5.3.2、Django中的响应对象"></a>5.3.2、Django中的响应对象</h4><p>构造函数格式：<code>HttpResponse(conntent=响应体,content_type=响应体数据类型,status=状态码)</code></p><p>作用：向客户端浏览器返回响应，同时携带响应体内容</p><ul><li><p>参数</p><ul><li>content：表示返回的内容</li><li>content_type：指定返回数据的MIME类型（默认是“text&#x2F;html”）。浏览器会根据这个属性来显示数据。如果是text&#x2F;html，那么就会解析这个字符串；如果是text&#x2F;plain，那么就会显示一个纯文本</li><li>status：返回HTTP响应的状态码（默认是200）</li></ul></li><li><p>常见的Content-Type如下：</p><ul><li>‘text&#x2F;html’（默认的，html文件）</li><li>‘text&#x2F;plain’（纯文本）</li><li>‘text&#x2F;css’（css文件）</li><li>‘text&#x2F;javascript’（js文件）</li><li>‘multipart&#x2F;form-data’（文件提交）</li><li>‘application&#x2F;json’（json传输）</li><li>‘application&#x2F;xml’（xml文件）</li></ul></li></ul><p><img src="/img/django_img/HttpResponse%E5%AD%90%E7%B1%BB.jpg" alt="HttpResponse子类"></p><h2 id="6、GET请求和POST请求"><a href="#6、GET请求和POST请求" class="headerlink" title="6、GET请求和POST请求"></a>6、GET请求和POST请求</h2><ul><li><strong>无论是GET还是POST，统一都由视图函数接收请求，通过判断request.method区分具体的请求动作</strong></li></ul><h3 id="6-1、GET处理"><a href="#6-1、GET处理" class="headerlink" title="6.1、GET处理"></a>6.1、GET处理</h3><ul><li><p>GET请求动作，一般用于向服务器获取数据</p></li><li><p>能够产生GET请求的场景：</p><ul><li>浏览器地址栏中输入URL，回车后</li><li>&lt;a href&#x3D;”地址?参数&#x3D;值&amp;参数&#x3D;值”&gt;</li><li>form表单中的method为get</li></ul></li><li><p>GET请求方式中，如果有数据需要传递给服务器，通常会用查询字符串(QueryString)传递</p><ul><li>URL格式：xxx?参数名1&#x3D;值1&amp;参数名2&#x3D;值2…如：<a href="http://127.0.0.1/page1?a=100&b=200">http://127.0.0.1/page1?a=100&amp;b=200</a></li></ul></li><li><p>服务器端接收参数：获取客户端请求GET请求提交的数据</p><ul><li>方法示例：</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">request.GET[<span class="hljs-string">&#x27;参数名&#x27;</span>]<span class="hljs-comment"># 获取参数对应的值</span><br>request.GET.get(<span class="hljs-string">&#x27;参数名&#x27;</span>,<span class="hljs-string">&#x27;默认值&#x27;</span>)<span class="hljs-comment"># 获取参数对应的值，如果没有，可以设个默认值</span><br>request.GET.getlist(<span class="hljs-string">&#x27;参数名&#x27;</span>)<span class="hljs-comment"># 如果参数是多个值，必须使用getlist()</span><br></code></pre></td></tr></table></figure><h3 id="6-2、POST处理"><a href="#6-2、POST处理" class="headerlink" title="6.2、POST处理"></a>6.2、POST处理</h3><ul><li>POST请求动作，一般用于向服务器提交大量&#x2F;隐私数据</li><li>客户端通过表单等POST请求将数据传递给服务器端，如：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&#x27;post&#x27;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&#x27;/login&#x27;</span>&gt;</span><br>  姓名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;username&#x27;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;submit&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;登录&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>服务器端接收参数：通过request.method来判断是否为POST请求</p></li><li><p>使用POST方式接收客户端数据  与GET完全一致</p></li><li><p>取消csrf验证，否则Django将会拒绝客户端发来的POST请求，报403响应</p><ul><li><p>– 禁止掉settings.py中的MIDDLEWARE中的CsrfViewsMiddleWare的中间件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">MIDDLEWARE = [<br>  ...<br>  <span class="hljs-comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span><br>  ...<br>]<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="7、Django的设计模式及模版层"><a href="#7、Django的设计模式及模版层" class="headerlink" title="7、Django的设计模式及模版层"></a>7、Django的设计模式及模版层</h2><h3 id="7-1、MVC和MTV"><a href="#7-1、MVC和MTV" class="headerlink" title="7.1、MVC和MTV"></a>7.1、MVC和MTV</h3><h4 id="7-1-1、传统的MVC"><a href="#7-1-1、传统的MVC" class="headerlink" title="7.1.1、传统的MVC"></a>7.1.1、传统的MVC</h4><p><strong>MCV代表Model-View-Controller（模型-视图-控制层）模式</strong></p><ul><li>M 模型层（Model），主要用于对数据库层的封装</li><li>V 视图层（View），用于向用户展示结果</li><li>C 控制（Controller），用于处理请求、获取数据、返回结果</li></ul><p><strong>作用：降低模块间的耦合度（解耦）</strong></p><p><img src="/img/django_img/MVC.jpg" alt="MVC"></p><h4 id="7-1-2、Django的MTV模式"><a href="#7-1-2、Django的MTV模式" class="headerlink" title="7.1.2、Django的MTV模式"></a>7.1.2、Django的MTV模式</h4><p><strong>MTV代表Model-Template-View（模型-模版-视图）模式</strong></p><ul><li>M 模型层（Model），负责与数据库交互</li><li>T 模版层（Template），负责呈现内容到浏览器</li><li>V 视图层（View）是核心，负责接收请求、获取数据、返回结果</li></ul><p><strong>作用：降低模块间的耦合度（解耦）</strong></p><p><img src="/img/django_img/MTV.jpg" alt="MTV"></p><h3 id="7-2、模版层"><a href="#7-2、模版层" class="headerlink" title="7.2、模版层"></a>7.2、模版层</h3><p><strong>模版可以根据视图中传递的字典数据动态生成相应的html网页</strong></p><h4 id="7-2-1、模版配置"><a href="#7-2-1、模版配置" class="headerlink" title="7.2.1、模版配置"></a>7.2.1、模版配置</h4><ul><li><p>1、创建模版主文件夹 &lt;项目名&gt;&#x2F;templates</p></li><li><p>2、在settings.py中的TEMPLATES配置项配置</p><ul><li>1）BACKEND：指定模版的引擎</li><li>2）DIRS：模版的搜索目录（可以是一个或多个）</li><li>3）APP_DIRS：是否要在应用中的templates文件夹中搜索模版文件</li><li>4）OPTIONS：有关模版的选项</li></ul></li><li><p>3、配置项中需要修改的部分</p><ul><li>设置DIRS  -  <code>&#39;DIRS&#39;:[os.path.join(BASE_DIR,&#39;templates&#39;)],</code></li></ul></li></ul><h4 id="7-2-2、模版的加载方式"><a href="#7-2-2、模版的加载方式" class="headerlink" title="7.2.2、模版的加载方式"></a>7.2.2、模版的加载方式</h4><ul><li><p>方案1 - 通过loader获取模版，通过HttpResponse进行响应</p><p>在视图函数中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.template <span class="hljs-keyword">import</span> loader<br><br><span class="hljs-comment"># 1、通过loader加载模版</span><br>t = loader.get_template(<span class="hljs-string">&#x27;模版文件名&#x27;</span>)<br><span class="hljs-comment"># 2、将t转换成HTML字符串</span><br>html = t.render(字典数据)<br><span class="hljs-comment"># 3、用响应对象将转换的字符串内容返回给浏览器</span><br><span class="hljs-keyword">return</span> HttpResponse(html)<br></code></pre></td></tr></table></figure></li><li><p>方案2 - 使用render() 直接加载并响应模版</p><p>在视图函数中</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;模版文件名&#x27;</span>,字典数据)<br></code></pre></td></tr></table></figure></li></ul><h4 id="7-2-3、视图层与模版层之间的交互"><a href="#7-2-3、视图层与模版层之间的交互" class="headerlink" title="7.2.3、视图层与模版层之间的交互"></a>7.2.3、视图层与模版层之间的交互</h4><p>1、视图函数中可以将Python变量封装到字典中传递到模版</p><p>样例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">xxx_view</span>(<span class="hljs-params">request</span>):<br>  dic = &#123;<br>    <span class="hljs-string">&#x27;变量1&#x27;</span>:<span class="hljs-string">&#x27;值1&#x27;</span>,<br>    <span class="hljs-string">&#x27;变量2&#x27;</span>:<span class="hljs-string">&#x27;值2&#x27;</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;xxx.html&#x27;</span>,dic)<br></code></pre></td></tr></table></figure><p>2、模版中，可以用<code>&#123;&#123; 变量名 &#125;&#125;</code> 的语法 调用视图传进来的变量</p><h2 id="8、模版层"><a href="#8、模版层" class="headerlink" title="8、模版层"></a>8、模版层</h2><h3 id="8-1、模版的变量"><a href="#8-1、模版的变量" class="headerlink" title="8.1、模版的变量"></a>8.1、模版的变量</h3><ul><li><p>能传递到模版中的数据结构</p><ul><li>str - 字符串</li><li>int - 整型</li><li>list - 数组</li><li>tuple - 元组</li><li>dict - 字典</li><li>func - 方法</li><li>obj - 类实例化的对象</li></ul></li><li><p>在模版中使用变量语法</p><ul><li></li><li></li><li></li><li></li><li></li></ul></li></ul><h3 id="8-2、模版标签"><a href="#8-2、模版标签" class="headerlink" title="8.2、模版标签"></a>8.2、模版标签</h3><ul><li><p>作用：将一些服务器端的功能嵌入到模版中，例如流程控制等</p><ul><li><p>标签语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% 标签 %&#125;<br>...<br>&#123;% 结束标签 %&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="8-2-1、if标签"><a href="#8-2-1、if标签" class="headerlink" title="8.2.1、if标签"></a>8.2.1、if标签</h4><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">if</span> 条件表达式<span class="hljs-number">1</span> %&#125;<br>...<br>&#123;% <span class="hljs-keyword">elif</span> 条件表达式<span class="hljs-number">2</span> %&#125;<br>...<br>&#123;% <span class="hljs-keyword">elif</span> 条件表达式<span class="hljs-number">3</span> %&#125;<br>...<br>&#123;% <span class="hljs-keyword">else</span> %&#125;<br>...<br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure><p>官方文档：<a href="https://docs.djangoproject.com/zh-hans/3.2/ref/templates/builtins/#if">https://docs.djangoproject.com/zh-hans/3.2/ref/templates/builtins/#if</a></p><h4 id="8-2-2、for标签"><a href="#8-2-2、for标签" class="headerlink" title="8.2.2、for标签"></a>8.2.2、for标签</h4><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 可迭代对象 %&#125;<br>... 循环语句<br>&#123;% empty %&#125;<br>... 可迭代对象无数据时填充的语句<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><p>官方文档：<a href="https://docs.djangoproject.com/zh-hans/3.2/ref/templates/builtins/#for-empty">https://docs.djangoproject.com/zh-hans/3.2/ref/templates/builtins/#for-empty</a></p><p><strong>for标签内置变量 - forloop</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">在 &#123;% for %&#125; 标签里可以通过 &#123;&#123;forloop&#125;&#125; 变量获取循环序号。<br>- forloop.counter: 顺序获取循环序号，从 1 开始计算<br>- forloop.counter0: 顺序获取循环序号，从 0 开始计算<br>- forloop.revcounter: 倒序获取循环序号，结尾序号为 1<br>- forloop.revcounter0: 倒序获取循环序号，结尾序号为 0<br>- forloop.first（一般配合if标签使用）: 第一条数据返回 True，其他数据返回 False<br>- forloop.last（一般配合if标签使用）: 最后一条数据返回 True，其他数据返回 False<br>- For loop.parentloop: 当嵌套循环，parentloop表示外层循环<br></code></pre></td></tr></table></figure><h3 id="8-3、模版层过滤器"><a href="#8-3、模版层过滤器" class="headerlink" title="8.3、模版层过滤器"></a>8.3、模版层过滤器</h3><ul><li>定义：在变量输出时对变量的值进行处理</li><li>作用：可以通过使用 过滤器来改变变量的输出显示</li><li>语法：<code>&#123;&#123; 变量 | 过滤器1:'参数值1' ｜ 过滤器2:'参数值2' ... &#125;&#125;</code></li></ul><p>官方文档：<a href="https://docs.djangoproject.com/zh-hans/3.2/ref/templates/builtins/#built-in-template-tags-and-filters">https://docs.djangoproject.com/zh-hans/3.2/ref/templates/builtins/#built-in-template-tags-and-filters</a></p><p><img src="/img/django_img/filter.jpg" alt="常用过滤器"></p><h3 id="8-4、模版的继承"><a href="#8-4、模版的继承" class="headerlink" title="8.4、模版的继承"></a>8.4、模版的继承</h3><p>模版继承可以使父模版的内容重用，子模版直接继承父模版的全部内容并可以覆盖父模版中相应的块</p><p><strong>语法 - 父模版中：</strong></p><ul><li>定义父模版中的块 block 标签</li><li>标识出哪些在子模版中是允许被修改的</li><li>block标签：在父模版中定义，可以在子模版中覆盖</li></ul><p><strong>语法 - 子模版中：</strong></p><ul><li><p>继承模版extends标签（写在模版文件的第一行）</p><ul><li>例如 <code>&#123;% extends 'base.html'%&#125;</code></li></ul></li><li><p>子模版重写父模版中的内容块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% block block_name %&#125;<br>子模版块用来覆盖父模版中block_name块的内容<br>&#123;% endblock block_name %&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>重写的覆盖规则</strong></p><ul><li>不重写，将按照父模版的效果显示</li><li>重写，则按照重写效果显示</li></ul><p><strong>注意：模版继承时，服务器端的动态内容无法继承</strong></p><p>参考文档：<a href="https://docs.djangoproject.com/zh-hans/3.2/ref/templates/language/#template-inheritance">https://docs.djangoproject.com/zh-hans/3.2/ref/templates/language/#template-inheritance</a></p><h2 id="9、url反向解析"><a href="#9、url反向解析" class="headerlink" title="9、url反向解析"></a>9、url反向解析</h2><h3 id="9-1、代码中url出现位置"><a href="#9-1、代码中url出现位置" class="headerlink" title="9.1、代码中url出现位置"></a>9.1、代码中url出现位置</h3><ul><li><p>1、模版html中</p><ul><li><p>1、<code>&lt;a href=&#39;url&#39;&gt;超链接&lt;/a&gt;</code></p><p>点击后页面挑战至url</p></li><li><p>2、<code>&lt;form action=&#39;url&#39; method=&#39;post&#39;&gt;</code></p><p>form表单中的数据用post方法提交至url</p></li></ul></li><li><p>2、视图函数中 - 302挑战 <code>HttpResponseRedirect(&#39;url&#39;)</code></p><ul><li>将用户地址栏中的地址跳转到url</li></ul></li></ul><h3 id="9-2、代码中url书写规范"><a href="#9-2、代码中url书写规范" class="headerlink" title="9.2、代码中url书写规范"></a>9.2、代码中url书写规范</h3><ul><li><p>1、绝对地址</p><ul><li><a href="http://127.0.0.1:8000/page/1">http://127.0.0.1:8000/page/1</a></li></ul></li><li><p>2、相对地址</p><ul><li><p>1、’&#x2F;page&#x2F;1’ - ‘&#x2F;‘ 开头的相对地址，</p><ul><li><strong>浏览器会把当前地址栏里的协议、ip和端口加上这个地址，作为最终访问地址。</strong></li><li>即如果当前页面地址栏为<a href="http://127.0.0.1/page/3%EF%BC%8C%E5%BD%93%E5%89%8D%E7%9B%B8%E5%AF%B9%E5%9C%B0%E5%9D%80%E6%9C%80%E7%BB%88%E7%BB%93%E6%9E%9C%E4%B8%BAhttp://127.0.0.1:8000">http://127.0.0.1/page/3，当前相对地址最终结果为http://127.0.0.1:8000</a> + &#x2F;page&#x2F;3</li></ul></li><li><p>2、’page&#x2F;1’ - 没有’&#x2F;‘开头的相对地址</p><ul><li><strong>浏览器会根据当前url的最后一个 &#x2F; 之前的内容 加上 该相对地址，作为最终访问地址。</strong></li><li>例如当前地址栏为 <a href="http://127.0.0.1:8000/topic/detail,%E5%88%99%E8%AF%A5%E7%9B%B8%E5%AF%B9%E5%9C%B0%E5%9D%80%E6%9C%80%E7%BB%88%E7%BB%93%E6%9E%9C%E4%B8%BA">http://127.0.0.1:8000/topic/detail,则该相对地址最终结果为</a> <a href="http://127.0.0.1:8000/topic/">http://127.0.0.1:8000/topic/</a> + page&#x2F;1</li></ul></li></ul></li></ul><h3 id="9-3、url反向解析"><a href="#9-3、url反向解析" class="headerlink" title="9.3、url反向解析"></a>9.3、url反向解析</h3><p><strong>url反向解析是指在视图或模版中，用path定义的名称来 动态查找 或 计算出相应的路由</strong></p><p>1、path 函数的语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">path(route, views,name=<span class="hljs-string">&#x27;别名&#x27;</span>)<br>例子：path(<span class="hljs-string">&#x27;page&#x27;</span>, views.page_view,name=<span class="hljs-string">&#x27;page_url&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li><strong>根据path中的’name&#x3D;’关键字传参给 url确定了个唯一确定的名字，在模版或视图中，可以通过这个名字反向推断出此url信息</strong></li></ul><p>2、在模版中 - 通过 url标签 实现地址的反向解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% url <span class="hljs-string">&#x27;别名&#x27;</span> %&#125;<br>&#123;% url <span class="hljs-string">&#x27;别名&#x27;</span> <span class="hljs-string">&#x27;参数值1&#x27;</span> <span class="hljs-string">&#x27;参数值2&#x27;</span> %&#125;<br><span class="hljs-comment"># 例子</span><br>&#123;% url <span class="hljs-string">&#x27;person&#x27;</span> <span class="hljs-string">&#x27;400&#x27;</span> %&#125;<br>&#123;% url <span class="hljs-string">&#x27;person&#x27;</span> age=<span class="hljs-string">&#x27;18&#x27;</span> name=<span class="hljs-string">&#x27;zhangsan&#x27;</span> %&#125;<br></code></pre></td></tr></table></figure><p>3、在视图函数中 -&gt; 可调用django中的reverse()方法进行反向解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> reverse<br>reverse(<span class="hljs-string">&#x27;别名&#x27;</span>,args=[],kwargs=&#123;&#125;)<br><span class="hljs-comment"># 例子</span><br><span class="hljs-built_in">print</span>(reverse(<span class="hljs-string">&#x27;person&#x27;</span>,args=[<span class="hljs-number">300</span>],kwargs=&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;lisi&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">18</span>&#125;))<br></code></pre></td></tr></table></figure><h2 id="10、静态文件"><a href="#10、静态文件" class="headerlink" title="10、静态文件"></a>10、静态文件</h2><h3 id="10-1、静态文件配置"><a href="#10-1、静态文件配置" class="headerlink" title="10.1、静态文件配置"></a>10.1、静态文件配置</h3><ul><li><p>静态文件配置 - 在 settings.py 中</p><h4 id="10-1-1、配置静态文件的访问路径-STATIC-URL【该配置默认存在】"><a href="#10-1-1、配置静态文件的访问路径-STATIC-URL【该配置默认存在】" class="headerlink" title="10.1.1、配置静态文件的访问路径 STATIC_URL【该配置默认存在】"></a>10.1.1、配置静态文件的访问路径 STATIC_URL【该配置默认存在】</h4><ul><li>通过哪个url地址找静态文件</li><li>STATIC_URL &#x3D; ‘&#x2F;static&#x2F;‘</li><li>说明：<ul><li>指定访问静态文件时是需要通过 &#x2F;static&#x2F;xxx 或 <a href="http://127.0.0.1:8000/static/xxx">http://127.0.0.1:8000/static/xxx</a> </li><li>[xxx]表示具体的静态资源位置</li></ul></li></ul><h4 id="10-1-2、配置静态文件的存储路径-STATICFILES-DIRS"><a href="#10-1-2、配置静态文件的存储路径-STATICFILES-DIRS" class="headerlink" title="10.1.2、配置静态文件的存储路径 STATICFILES_DIRS"></a>10.1.2、配置静态文件的存储路径 STATICFILES_DIRS</h4><p><strong>STATICFILES_DIRS保存的是静态文件在服务器端的存储位置</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># file: settings.py</span><br>STATICFILES_DIRS = (<br>os.path.join(BASE_DIR,<span class="hljs-string">&#x27;static&#x27;</span>),  <span class="hljs-comment"># 元组 一定要有逗号 ,</span><br>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="10-2、静态文件访问"><a href="#10-2、静态文件访问" class="headerlink" title="10.2、静态文件访问"></a>10.2、静态文件访问</h3><h4 id="10-2-1、直接拼接访问路径"><a href="#10-2-1、直接拼接访问路径" class="headerlink" title="10.2.1、直接拼接访问路径"></a>10.2.1、直接拼接访问路径</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://127.0.0.1:8000/static/image/aae.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300px&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/image/aae.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;700px&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="10-2-2、通过标签访问静态文件"><a href="#10-2-2、通过标签访问静态文件" class="headerlink" title="10.2.2、通过标签访问静态文件"></a>10.2.2、通过标签访问静态文件</h4><ul><li><p>1、加载static  -  <code>&#123;% load static %&#125;</code></p></li><li><p>2、使用静态文件  -  <code>&#123;% static '静态资源路径' %&#125;</code></p></li><li><p>3、样例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% load static %&#125;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;image/aae.png&#x27; %&#125;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="二、Django-应用及分布式路由"><a href="#二、Django-应用及分布式路由" class="headerlink" title="二、Django 应用及分布式路由"></a>二、Django 应用及分布式路由</h1><p>应用在Django项目中是一个独立的业务模块，可以包含自己的路由、视图、模版、模型</p><h2 id="1、应用"><a href="#1、应用" class="headerlink" title="1、应用"></a>1、应用</h2><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><p>步骤1:用manage.py 中的字命令startapp创建应用文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 manage.py startapp 应用名<br></code></pre></td></tr></table></figure><p><img src="/img/django_img/%E5%BA%94%E7%94%A8.jpg" alt="应用"></p><p>步骤2:在settings.py 的 INSTALLED_APPS 列表中配置注册此应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py 配置样例</span><br>INSTALLED_APPS = [<br>  <span class="hljs-comment"># ....</span><br>  <span class="hljs-string">&#x27;user&#x27;</span>,  <span class="hljs-comment"># 用户信息模块</span><br>  <span class="hljs-string">&#x27;music&#x27;</span>,  <span class="hljs-comment"># 音乐模块</span><br>]<br></code></pre></td></tr></table></figure><h2 id="2、分布式路由"><a href="#2、分布式路由" class="headerlink" title="2、分布式路由"></a>2、分布式路由</h2><p>Django中，主路由配置文件（urls.py）可以不处理用户具体路由，主路由配置文件可以做请求的分发（分布式请求处理）。具体的请求可以由各自的应用来进行处理</p><p><img src="/img/django_img/%E5%88%86%E5%B8%83%E5%BC%8F%E8%B7%AF%E7%94%B1.jpg" alt="分布式路由"></p><h3 id="2-1、配置分布式路由"><a href="#2-1、配置分布式路由" class="headerlink" title="2.1、配置分布式路由"></a>2.1、配置分布式路由</h3><p><strong>步骤1 - 主路由中调用include函数</strong></p><p>语法：<code>path(&#39;url前缀&#39;, include(&#39;app名字.url模块名&#39;))</code></p><p>作用：用于将当前路由转到各个应用的路由配置文件的urlpatterns进行分布式处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, include<br><br>urlpatterns = [<br>  path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>  path(<span class="hljs-string">&#x27;music/&#x27;</span>,include(<span class="hljs-string">&#x27;music.urls&#x27;</span>))<br>]<br></code></pre></td></tr></table></figure><p><strong>步骤2  - 应用中新建配置urls.py</strong></p><ul><li>首先在应用下手动创建urls.py 文件，内容结构和主路由完全一样</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>  <span class="hljs-comment"># http://127.0.0.1:8000/music/index</span><br>  path(<span class="hljs-string">&#x27;index&#x27;</span>,views.index_view)<br>]<br></code></pre></td></tr></table></figure><h3 id="2-2、应用下的模版"><a href="#2-2、应用下的模版" class="headerlink" title="2.2、应用下的模版"></a>2.2、应用下的模版</h3><p><strong>应用内部可以配置模版目录</strong></p><ul><li>1、应用下手动创建templates文件夹</li><li>2、settings.py中开启 应用模版功能<ul><li>TEMPLATE配置项中 的 ‘APP_DIRS’ 值为True即可</li></ul></li></ul><p><strong>应用下templates 和 外层templates都存在时，django得查找模版规则</strong></p><ul><li>1、优先查找外层templates目录下的模版</li><li>2、按INSTALLED_APPS配置下的 应用顺序 逐层查找</li></ul><h2 id="3、模型层及ORM介绍"><a href="#3、模型层及ORM介绍" class="headerlink" title="3、模型层及ORM介绍"></a>3、模型层及ORM介绍</h2><h3 id="3-1、模型层"><a href="#3-1、模型层" class="headerlink" title="3.1、模型层"></a>3.1、模型层</h3><ul><li><strong>模型层 - 负责跟数据库之间进行通信</strong></li></ul><h4 id="3-1-1、Django配置MySQL"><a href="#3-1-1、Django配置MySQL" class="headerlink" title="3.1.1、Django配置MySQL"></a>3.1.1、Django配置MySQL</h4><ul><li>安装mysqlclient【版本mysqlclient 1.4以上】     <code>pip install mysqlclient</code></li></ul><p><strong>官方文档：<a href="https://docs.djangoproject.com/zh-hans/3.2/ref/databases/">https://docs.djangoproject.com/zh-hans/3.2/ref/databases/</a></strong></p><ul><li><p>步骤</p><ul><li><p>1、创建数据库</p></li><li><p>2、进入mysql数据库执行</p><ul><li><code>create database 数据库名 default charset utf8</code></li><li>通常数据库名跟项目名保持一致</li></ul></li><li><p>3、settings.py里进行数据库的配置</p><ul><li><p>修改DATABASES 配置项的内容，由sqlite3 变成 mysql</p></li><li><p>ENGINE - 指定数据库存储引擎</p><ul><li>‘django.db.backends.mysql’</li><li>‘django.db.backends.sqlite3’</li><li>‘django.db.backends.oracle’</li><li>‘django.db.backends.postgresql’</li></ul></li><li><p>NAME - 指定要连接的数据库的名称</p></li><li><p>USER - 指定登录到数据库的用户名</p></li><li><p>PASSWORD - 数据库的密码</p></li><li><p>HOST - 连接具体数据库的IP</p></li><li><p>PORT - 端口号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 模型层 连接数据库</span><br>DATABASES = &#123;<br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,<br>        <span class="hljs-string">&#x27;HOST&#x27;</span>: <span class="hljs-string">&#x27;123.56.95.151&#x27;</span>,<br>        <span class="hljs-string">&#x27;PORT&#x27;</span>: <span class="hljs-string">&#x27;3308&#x27;</span>,<br>        <span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>        <span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string">&#x27;139309641480&#x27;</span>,<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;mysite3&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="3-1-2、什么是模型"><a href="#3-1-2、什么是模型" class="headerlink" title="3.1.2、什么是模型"></a>3.1.2、什么是模型</h4><ul><li>模型是一个Python类，它是由django.db.models.Model 派生出的子类</li><li>一个模型类代表数据库中的一张数据表</li><li>模型类中的每一个类属性都代表数据库中的一个字段</li><li>模型是数据交互的借口，是表示和操作数据库的方法和方式</li></ul><h3 id="3-2、ORM框架"><a href="#3-2、ORM框架" class="headerlink" title="3.2、ORM框架"></a>3.2、ORM框架</h3><ul><li><p>定义：ORM（Object Relational Mapping）即对象关系映射，它是一种程序技术，它允许使用类和对象对数据库进行操作，从而避免通过SQL语句操作数据库</p></li><li><p>作用：</p><ul><li>1、建立模型类和表之间的对应关系，允许通过面向对象的方式来操作数据库</li><li>2、根据设计的模型类生成数据库中的表格</li><li>3、通过简单的配置就可以进行数据库的切换</li></ul></li><li><p>优点：</p><ul><li>只需要面向对象编程，不需要面向数据库编写代码<ul><li>对数据的操作都转化成对类属性和方法的操作</li><li>不用编写各种数据库的sql语句</li></ul></li><li>实现了数据模型和数据库的解耦，屏蔽了不同数据库操作上的差异<ul><li>不在关注用的是mysql、oracle…等数据库的内部细节</li><li>通过简单的配置就可以轻松更换数据库，而不需要修改代码</li></ul></li></ul></li><li><p>缺点：</p><ul><li>对于复杂业务，使用成本较高</li><li>根据对象的操作转换成SQL语句，根据查询的结果转换成对象，在映射过程中有性能损失</li></ul></li></ul><p><img src="/img/django_img/ORM%E6%98%A0%E5%B0%84.jpg" alt="ORM映射"></p><h3 id="3-3、数据库迁移"><a href="#3-3、数据库迁移" class="headerlink" title="3.3、数据库迁移"></a>3.3、数据库迁移</h3><ul><li>迁移是Django同步对模型所做更改（添加字段，删除模型等）到数据库模式的方式<ul><li>生产迁移文件 - 执行 <code>python3 manage.py makemigrations</code><ul><li>将应用下的models.py文件生成一个中间文件，并保存在migrations文件夹中</li></ul></li><li>执行迁移脚本程序 - 执行<code>python3 manage.py migrate</code><ul><li>执行迁移程序实现迁移。将每个应用下的migrations目录中的中间文件同步到数据库</li></ul></li></ul></li></ul><p>报错解决：<a href="https://blog.csdn.net/weixin_43996007/article/details/104065678">https://blog.csdn.net/weixin_43996007/article/details/104065678</a></p><h3 id="3-4、模型类-创建"><a href="#3-4、模型类-创建" class="headerlink" title="3.4、模型类 - 创建"></a>3.4、模型类 - 创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">模型类名</span>(models.Model):<br>  字段名 = models.字段类型(字段选项)<br></code></pre></td></tr></table></figure><h2 id="4、ORM"><a href="#4、ORM" class="headerlink" title="4、ORM"></a>4、ORM</h2><h3 id="4-1、创建模型类流程"><a href="#4-1、创建模型类流程" class="headerlink" title="4.1、创建模型类流程"></a>4.1、创建模型类流程</h3><ul><li>1、创建应用</li><li>2、在应用下的models.py中编写模型类</li><li>3、迁移同步  <code>makemigrations &amp; migrate</code></li></ul><p><strong>任何关于表结构的修改，务必在对应模型类上修改</strong></p><h3 id="4-2、基础字段及选项"><a href="#4-2、基础字段及选项" class="headerlink" title="4.2、基础字段及选项"></a>4.2、基础字段及选项</h3><h4 id="4-2-1、字段类型"><a href="#4-2-1、字段类型" class="headerlink" title="4.2.1、字段类型"></a>4.2.1、字段类型</h4><ul><li><p>1、BooleanField()</p><ul><li>数据库类型： tinyint(1)</li><li>Django中：使用True或False来表示值</li><li>在数据库中：使用1或0来表示具体的值</li></ul></li><li><p>2、CharField()</p><ul><li>数据库类型：varchar</li><li>注意：必须要指定max_length参数值</li></ul></li><li><p>3、DateField()</p><ul><li><p>数据库类型：date</p></li><li><p>作用：表示日期</p></li><li><p>参数：</p><ul><li><p>1、auto_now：每次保存对象时，自动设置该字段为当前时间（取值：True&#x2F;False）</p></li><li><p>2、auto_now_add：当对象第一次被创建时自动设置当前时间（取值：True&#x2F;False）</p></li><li><p>3、default：设置当前时间（取值：字符串格式时间，如：‘2019-6-1’）</p><p><strong>以上三个参数只能 多选一</strong></p></li></ul></li></ul></li><li><p>4、DateTimeField()</p><ul><li>数据库类型：datetime(6)</li><li>作用：表示日期和时间</li><li>参数同DateField</li></ul></li><li><p>5、FloatField()</p><ul><li>数据库类型：double</li><li>Django中和数据库中都使用小数表示值</li></ul></li><li><p>6、DecimalField()</p><ul><li>数据库类型：decimal(x,y)</li><li>Django中：使用小数表示该列的值</li><li>在数据库中：使用小数</li><li>参数：<ul><li>max_digits：位数总数，包括小数点后的位数。该值必须大于等于decimal_places</li><li>decimal_places：小数点后的数字数量</li></ul></li></ul></li><li><p>7、EmailField()   专门存邮箱</p><ul><li>数据库类型varchar</li><li>Django和数据库中使用字符串</li></ul></li><li><p>8、IntegerField()</p><ul><li>数据库类型：int</li><li>Django和数据库中使用整数</li></ul></li><li><p>9、ImageField()</p><ul><li>数据库类型：varchar(100)</li><li>作用：在数据库中为了保存图片的路径</li><li>Django和数据库中使用字符串</li></ul></li><li><p>10、TextField()</p><ul><li>数据库类型：longtext</li><li>作用：表示不定长的字符数据</li></ul></li></ul><p>官方文档：<a href="https://docs.djangoproject.com/zh-hans/3.2/ref/models/fields/#field-types">https://docs.djangoproject.com/zh-hans/3.2/ref/models/fields/#field-types</a></p><h4 id="4-2-2、字段选项"><a href="#4-2-2、字段选项" class="headerlink" title="4.2.2、字段选项"></a>4.2.2、字段选项</h4><ul><li><p>字段选项，指定创建的列的额外的信息</p></li><li><p>允许出现多个字段选项，多个选项之间使用 , 隔开</p></li><li><p>primary_key</p><ul><li>如果设置为True，表示该列的主键，如果指定一个字段为主键，则此数据库表不会自动创建id字段</li></ul></li><li><p>blank</p><ul><li>设置为True时，字段可以为空；设置为False时，字段必须填写</li></ul></li><li><p>null</p><ul><li>如果设置为True，表示该列值允许为空</li><li>默认是False，如果此选项为False，建议加入default选项来设置默认值</li></ul></li><li><p>default</p><ul><li>设置所在列的默认值，如果字段选项null&#x3D;False，建议添加此项</li></ul></li><li><p>db_index      普通索引</p><ul><li>如果设置为True，表示为该列增加索引</li></ul></li><li><p>unique          唯一索引</p><ul><li>如果设置为True，表示该字段在数据库中的值必须是唯一</li></ul></li><li><p>db_column</p><ul><li>指定列的名称，如果不指定的话，则采用属性名作为列名</li></ul></li><li><p>verbose_name</p><ul><li>设置此字段在admin界面上的显示名称</li></ul></li></ul><p>样例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个属性，表示拥护名称，长度30个字符，必须是唯一的，不能为空，添加索引</span><br>name = models.CharField(max_length = <span class="hljs-number">30</span>, unique = <span class="hljs-literal">True</span>, null = <span class="hljs-literal">False</span>, db_index = <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>官方文档：<a href="https://docs.djangoproject.com/zh-hans/3.2/ref/models/fields/#field-options">https://docs.djangoproject.com/zh-hans/3.2/ref/models/fields/#field-options</a></p><p><em><strong>修改过字段选项【添加或更改】 都要执行 makemigrations 和 migrate</strong></em></p><h4 id="4-2-3、模型类-Meta类"><a href="#4-2-3、模型类-Meta类" class="headerlink" title="4.2.3、模型类 - Meta类"></a>4.2.3、模型类 - Meta类</h4><p><strong>使用内部Meta类 来给模型赋予属性，Meta类下有很多内建的类属性，可以对模型类做一些控制</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-comment"># Create your models here.</span><br><span class="hljs-comment"># 创建模型类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>(models.Model):<br>    title = models.CharField(<span class="hljs-string">&#x27;书名&#x27;</span>, max_length=<span class="hljs-number">50</span>, default=<span class="hljs-string">&#x27;&#x27;</span>)<br>    price = models.DecimalField(<span class="hljs-string">&#x27;价格&#x27;</span>, max_digits=<span class="hljs-number">7</span>, decimal_places=<span class="hljs-number">2</span>)<br>    info = models.CharField(<span class="hljs-string">&#x27;描述&#x27;</span>, max_length=<span class="hljs-number">100</span>, default=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <br>    <span class="hljs-comment"># Meta类，可以设置表的属性</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&#x27;book&#x27;</span>  <span class="hljs-comment"># 可改变当前模型类对应的表名</span><br></code></pre></td></tr></table></figure><h3 id="4-3、常见问题"><a href="#4-3、常见问题" class="headerlink" title="4.3、常见问题"></a>4.3、常见问题</h3><p><strong>问题1:</strong></p><p><img src="/img/django_img/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%981.jpg" alt="常见问题1"></p><p>错误原因：在已经存在的表中新增非空字段时，没指定default默认值</p><p>解决：选2退出，在models.py中指定默认值default</p><p><strong>问题2：</strong></p><p><img src="/img/django_img/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%982.jpg" alt="常见问题2"></p><p><img src="/img/django_img/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%982_2.jpg" alt="常见问题2_2"></p><h3 id="4-4、创建数据"><a href="#4-4、创建数据" class="headerlink" title="4.4、创建数据"></a>4.4、创建数据</h3><p>基本操作包括增删改查操作，即（CRUD操作）</p><p>CRUD是指在做计算处理时的增加（Create）、读取查询（Read）、更新（Update）和删除（Delete）</p><p><strong>ORM CRUD核心 -&gt; 模型类.管理器对象</strong></p><h4 id="4-4-1、管理器对象-objects"><a href="#4-4-1、管理器对象-objects" class="headerlink" title="4.4.1、管理器对象  objects"></a>4.4.1、管理器对象  objects</h4><p>每个继承自models.Model的模型类，都会有一个objects对象被同样继承下来。这个对象叫管理器对象</p><p>数据库的增删改查可以通过模型的管理器实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyModel</span>(models.Model):<br>  ...<br>    <br>MyModel.objects.create(...)  <span class="hljs-comment"># objects 是管理器对象</span><br></code></pre></td></tr></table></figure><h4 id="4-4-2、创建数据"><a href="#4-4-2、创建数据" class="headerlink" title="4.4.2、创建数据"></a>4.4.2、创建数据</h4><p>Django ORM 使用一种直观的方式把数据库表中的数据表示成Python对象</p><p>创建数据中的每一条记录就是创建一个数据对象</p><p><strong>方案1:</strong>     <code>MyModel.objects.create(属性1 = 值1, 属性2 = 值2, ...)</code></p><ul><li>成功：返回创建好的实体对象</li><li>失败：抛出异常</li></ul><p><strong>方案2:</strong>  创建MyModel实例对象，并调用save()进行保存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">obj = MyModel(属性 = 值, 属性 = 值)<br>obj.属性 = 值<br>obj.save()  <span class="hljs-comment"># 只有执行了 .save() 才会存入数据库</span><br></code></pre></td></tr></table></figure><h3 id="4-5、Django-Shell-—-专门为了调试M层"><a href="#4-5、Django-Shell-—-专门为了调试M层" class="headerlink" title="4.5、Django Shell    —     专门为了调试M层"></a>4.5、Django Shell    —     专门为了调试M层</h3><p>在Django提供了一个交互式的操作项目叫 Django Shell 它能够在交互模式用项目工程的代码执行相应的操作</p><p>利用Django Shell 可以代替编写view的代码来进行直接操作</p><p><strong>注意：项目代码发生变化时，需要重新进入Django shell</strong></p><p>启动方式：  <code>python3 manage.py shell</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">In [1]: from bookstore.models import Book<br><br>In [2]: b1 = Book.objects.create(title=&#x27;Python&#x27;,pub=&#x27;清华大学出版社&#x27;,price=20,market_price=25)<br><br>In [3]: <br><br>In [3]: b1<br>Out[3]: &lt;Book: Book object (1)&gt;<br><br><br>In [5]: b2=Book(title=&#x27;Django&#x27;,pub=&#x27;清华大学出版社&#x27;,price=70,market_price=75)<br><br>In [6]: b2.save()<br></code></pre></td></tr></table></figure><h3 id="4-6、查询操作"><a href="#4-6、查询操作" class="headerlink" title="4.6、查询操作"></a>4.6、查询操作</h3><ul><li><p>数据库的查询需要使用管理器对象进行</p></li><li><p>通过 MyModel.objects 管理器方法调用查询方法</p><p><img src="/img/django_img/%E6%9F%A5%E8%AF%A2.jpg" alt="查询"></p></li></ul><h4 id="4-6-1、all-方法"><a href="#4-6-1、all-方法" class="headerlink" title="4.6.1、all()方法"></a>4.6.1、all()方法</h4><p>用法：<code>MyModel.objects.all()</code></p><p>作用：查询MyModel实体中的所有数据</p><p>等同于：<code>select * from table;</code></p><p>返回值：QuerySet容器对象【数组】，内部存放MyModel实例</p><p><img src="/img/django_img/%E6%9F%A5%E8%AF%A2%E5%B0%8F%E6%8A%80%E5%B7%A7.jpg" alt="查询小技巧"></p><p><img src="/img/django_img/%E8%B0%83%E6%95%B4%E6%89%93%E5%8D%B0%E6%95%88%E6%9E%9C.jpg" alt="调整打印效果"></p><p><img src="/img/django_img/%E6%95%88%E6%9E%9C.jpg" alt="效果"></p><h4 id="4-6-2、values-‘列1’-‘列2’-…-方法"><a href="#4-6-2、values-‘列1’-‘列2’-…-方法" class="headerlink" title="4.6.2、values(‘列1’, ‘列2’, …)方法"></a>4.6.2、values(‘列1’, ‘列2’, …)方法</h4><p>用法：<code>MyModel.objects.values(...)</code></p><p>作用：查询部分列的数据并返回</p><p>等同于：<code>select 列1, 列2 from table;</code></p><p>返回值: QuerySet容器对象，容器内存字典，每个字典代表一条数据</p><p>​格式为：<code>&#123;&#39;列1&#39; : &#39;值1&#39;, &#39;列2&#39; : &#39;值2&#39;&#125;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">In [4]: a2 = Book.objects.values(&#x27;title&#x27;,&#x27;pub&#x27;)<br><br>In [6]: for book in a2:<br>   ...:     print(book[&#x27;title&#x27;])<br>   ...: <br>Python<br>Django<br>JQuery<br>Linux<br>HTML5<br></code></pre></td></tr></table></figure><h4 id="4-6-3、values-list-‘列1’-‘列2’-…-方法"><a href="#4-6-3、values-list-‘列1’-‘列2’-…-方法" class="headerlink" title="4.6.3、values_list(‘列1’, ‘列2’, …)方法"></a>4.6.3、values_list(‘列1’, ‘列2’, …)方法</h4><p>用法：<code>MyModel.objects.values_list(...)</code></p><p>作用：返回元组形式的查询结果</p><p>等同于：<code>select 列1, 列2 from table;</code></p><p>返回值：QuerySet容器对象，内部存放 ‘元组’</p><ul><li>会将查询出来的数据封装到元组中，再封装到查询集合QuerySet中</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">In [7]: a3 = Book.objects.values_list(&#x27;title&#x27;,&#x27;pub&#x27;)<br><br>In [8]: for book in a3:<br>   ...:     print(book[0])<br>   ...: <br>Python<br>Django<br>JQuery<br>Linux<br>HTML5<br></code></pre></td></tr></table></figure><h4 id="4-6-4、order-by-方法"><a href="#4-6-4、order-by-方法" class="headerlink" title="4.6.4、order_by()方法"></a>4.6.4、order_by()方法</h4><p>用法：<code>MyModel.objects.order_by(&#39;-列1&#39;, &#39;列2&#39;, ...)</code></p><p>作用：与all() 方法不同，它会用SQL语句中的order by 字句对查询结果根据某个字段选择性的进行排序</p><p>说明：默认是按照升序排序，降序排序则需要在列前增加 ‘-‘ 表示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">In [9]: a4 = Book.objects.order_by(&#x27;-price&#x27;)<br><br>In [10]: a4<br>Out[10]: &lt;QuerySet [&lt;Book: JQuery_机械工业出版社_90.00_85.00&gt;, &lt;Book: HTML5_清华大学出版社_90.00_105.00&gt;, &lt;Book: Linux_机械工业出版社_80.00_65.00&gt;, &lt;Book: Django_清华大学出版社_70.00_75.00&gt;, &lt;Book: Python_清华大学出版社_20.00_25.00&gt;]&gt;<br><br>In [11]: a5=Book.objects.values(&#x27;title&#x27;).order_by(&#x27;-price&#x27;)<br><br>In [12]: a5<br>Out[12]: &lt;QuerySet [&#123;&#x27;title&#x27;: &#x27;JQuery&#x27;&#125;, &#123;&#x27;title&#x27;: &#x27;HTML5&#x27;&#125;, &#123;&#x27;title&#x27;: &#x27;Linux&#x27;&#125;, &#123;&#x27;title&#x27;: &#x27;Django&#x27;&#125;, &#123;&#x27;title&#x27;: &#x27;Python&#x27;&#125;]&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">可以通过QuerySet.query获取SQL语句</span><br>In [13]: print(a5.query)<br>SELECT `book`.`title` FROM `book` ORDER BY `book`.`price` DESC<br></code></pre></td></tr></table></figure><h4 id="4-6-5、filter-条件-方法"><a href="#4-6-5、filter-条件-方法" class="headerlink" title="4.6.5、filter(条件)方法"></a>4.6.5、filter(条件)方法</h4><p>语法：<code>MyModel.objects.filter(属性1=值1, 属性2=值2)</code></p><p>作用：返回包含此条件的全部的数据集</p><p>返回值：QuerySet容器对象，内部存放MyModel实例</p><p>说明：当多个属性在一起时为‘与’关系，即 and</p><h4 id="4-6-6、exclude-条件-方法"><a href="#4-6-6、exclude-条件-方法" class="headerlink" title="4.6.6、exclude(条件)方法"></a>4.6.6、exclude(条件)方法</h4><p>语法：<code>MyModel.objects.exclude(条件)</code></p><p>作用：返回不包含此 条件 的全部数据集</p><h4 id="4-6-7、get-条件-方法-【只返回一条数据】"><a href="#4-6-7、get-条件-方法-【只返回一条数据】" class="headerlink" title="4.6.7、get(条件)方法              【只返回一条数据】"></a>4.6.7、get(条件)方法              【只返回一条数据】</h4><p>语法：<code>MyModel.objects.get(条件)</code></p><p>作用：返回满足条件的唯一一条数据</p><p>说明：该方法只能返回一条数据，查询结果多于一条数据则抛出 <code>Model.MultipleObjectsReturned异常</code>,查询结果如果没有数据则抛出 <code>Model.DoesNotExist异常</code></p><h4 id="4-6-8、查询谓词"><a href="#4-6-8、查询谓词" class="headerlink" title="4.6.8、查询谓词"></a>4.6.8、查询谓词</h4><p>定义：做更<strong>灵活的条件查询</strong>时需要使用查询谓词</p><p>说明：每一个查询谓词是一个独立的查询功能</p><h5 id="1、-exact：等值匹配【-】"><a href="#1、-exact：等值匹配【-】" class="headerlink" title="1、__exact：等值匹配【 &#x3D; 】"></a>1、__exact：等值匹配【 &#x3D; 】</h5><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">In [12]: Book.objects.filter(id__exact=1)<br>Out[12]: &lt;QuerySet [&lt;Book: Python_清华大学出版社_20.00_25.00&gt;]&gt;<br></code></pre></td></tr></table></figure><h5 id="2、-contains：包含指定值xxx-【-模糊查询-xxx-】"><a href="#2、-contains：包含指定值xxx-【-模糊查询-xxx-】" class="headerlink" title="2、__contains：包含指定值xxx   【 模糊查询  %xxx% 】"></a>2、__contains：包含指定值xxx   【 模糊查询  <code>%xxx%</code> 】</h5><h5 id="3、-startswith：以xxx开始-【-模糊查询-xxx-】"><a href="#3、-startswith：以xxx开始-【-模糊查询-xxx-】" class="headerlink" title="3、__startswith：以xxx开始     【 模糊查询  xxx% 】"></a>3、__startswith：以xxx开始     【 模糊查询  <code>xxx%</code> 】</h5><h5 id="4、-endswith：以xxx结束-【-模糊查询-xxx-】"><a href="#4、-endswith：以xxx结束-【-模糊查询-xxx-】" class="headerlink" title="4、__endswith：以xxx结束     【 模糊查询  %xxx 】"></a>4、__endswith：以xxx结束     【 模糊查询  <code>%xxx</code> 】</h5><h5 id="5、-gt：大于指定值-【-】"><a href="#5、-gt：大于指定值-【-】" class="headerlink" title="5、__gt：大于指定值  【 &gt; 】"></a>5、__gt：大于指定值  【 &gt; 】</h5><h5 id="6、-gte：大于等于-【-】"><a href="#6、-gte：大于等于-【-】" class="headerlink" title="6、__gte：大于等于  【 &gt;&#x3D; 】"></a>6、__gte：大于等于  【 &gt;&#x3D; 】</h5><h5 id="7、-lt：小于-【-】"><a href="#7、-lt：小于-【-】" class="headerlink" title="7、__lt：小于  【 &lt; 】"></a>7、__lt：小于  【 &lt; 】</h5><h5 id="8、-lte：小于等于-【"><a href="#8、-lte：小于等于-【" class="headerlink" title="8、__lte：小于等于  【 &lt;&#x3D; 】"></a>8、__lte：小于等于  【 &lt;&#x3D; 】</h5><h5 id="9、-in：查找数据是否在指定范围内-【-in-后面跟数组-】"><a href="#9、-in：查找数据是否在指定范围内-【-in-后面跟数组-】" class="headerlink" title="9、__in：查找数据是否在指定范围内  【 in  后面跟数组  [] 】"></a>9、__in：查找数据是否在指定范围内  【 in  后面跟数组  <code>[]</code> 】</h5><h5 id="10、-range：查找数据是否在指定的区间范围内-【-between…and…-后面跟范围-a-b-】"><a href="#10、-range：查找数据是否在指定的区间范围内-【-between…and…-后面跟范围-a-b-】" class="headerlink" title="10、__range：查找数据是否在指定的区间范围内  【 between…and…  后面跟范围 (a,b) 】"></a>10、__range：查找数据是否在指定的区间范围内  【 between…and…  后面跟范围 <code>(a,b)</code> 】</h5><p>官方文档：<a href="https://docs.djangoproject.com/zh-hans/3.2/ref/models/querysets/#field-lookups">https://docs.djangoproject.com/zh-hans/3.2/ref/models/querysets/#field-lookups</a></p><h3 id="4-7、更新数据"><a href="#4-7、更新数据" class="headerlink" title="4.7、更新数据"></a>4.7、更新数据</h3><h4 id="4-7-1、更新单个数据"><a href="#4-7-1、更新单个数据" class="headerlink" title="4.7.1、更新单个数据"></a>4.7.1、更新单个数据</h4><ul><li>修改单个实体的某些字段值的步骤：<ul><li>1、查      - 通过 <code>.get()</code> 得到要修改的实体对象</li><li>2、改      - 通过 <code>对象.属性</code> 的方式修改数据</li><li>3、保存  - 通过 <code>对象.save()</code> 保存数据</li></ul></li></ul><h4 id="4-7-2、批量更新数据"><a href="#4-7-2、批量更新数据" class="headerlink" title="4.7.2、批量更新数据"></a>4.7.2、批量更新数据</h4><ul><li>直接调用QuerySet的 <code>update(属性 = 值)</code> 实现批量修改<ul><li>1、查      - 通过 <code>.filter(条件)</code> 得到要修改的实体对象</li><li>2、改      - 通过 <code>QuerySet.update(属性 = 值)</code> 的方式修改数据</li></ul></li></ul><h3 id="4-8、删除操作"><a href="#4-8、删除操作" class="headerlink" title="4.8、删除操作"></a>4.8、删除操作</h3><h4 id="4-8-1、单个数据删除"><a href="#4-8-1、单个数据删除" class="headerlink" title="4.8.1、单个数据删除"></a>4.8.1、单个数据删除</h4><ul><li>1、查找查询结果对应的一个数据对象</li><li>2、调用这个数据对象的delete()方法实现删除</li></ul><h4 id="4-8-2、批量删除"><a href="#4-8-2、批量删除" class="headerlink" title="4.8.2、批量删除"></a>4.8.2、批量删除</h4><ul><li>1、查找查询结果集中满足条件的全部QuerySet查询集合对象</li><li>2、调用查询集合对象的delete()方法实现删除</li></ul><h4 id="4-8-3、伪删除"><a href="#4-8-3、伪删除" class="headerlink" title="4.8.3、伪删除"></a>4.8.3、伪删除</h4><ul><li>通常不会轻易在业务里把数据真正删掉，取而代之的是做伪删除，即在表中添加一个布尔型字段（is_active），默认是True；执行删除时，将删除数据的is_active字段设置为False</li><li>注意：用伪删除时，确保显示数据的地方，均加了 is_active&#x3D;True的过滤查询</li></ul><h2 id="5、F对象和Q对象"><a href="#5、F对象和Q对象" class="headerlink" title="5、F对象和Q对象"></a>5、F对象和Q对象</h2><h3 id="5-1、F对象"><a href="#5-1、F对象" class="headerlink" title="5.1、F对象"></a>5.1、F对象</h3><ul><li><p>一个F对象代表数据库中某条记录的字段的信息</p></li><li><p>作用：</p><ul><li>通常是对数据库中的字段值在不获取的情况下进行操作</li><li>用于类属性（字段）之间的比较</li></ul></li><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> F<br>F(<span class="hljs-string">&#x27;列名&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-2、Q对象"><a href="#5-2、Q对象" class="headerlink" title="5.2、Q对象"></a>5.2、Q对象</h3><p>当在获取查询结果集 使用复杂的<code>逻辑或 ｜</code>、<code>逻辑非 ~</code> 等操作可以借助于Q对象进行操作</p><ul><li><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> Q<br><span class="hljs-keyword">from</span> bookstore.models <span class="hljs-keyword">import</span> Book<br><br><span class="hljs-comment"># 找出定价低于20 或 清华大学出版社 的全部书</span><br>Book.objects.<span class="hljs-built_in">filter</span>(Q(price_lt=<span class="hljs-number">20</span>)|Q(pub=<span class="hljs-string">&#x27;清华大学出版社&#x27;</span>))<br></code></pre></td></tr></table></figure></li><li><p>作用：在条件中用来实现除 and(&amp;) 以外的 or(|)、not(~)操作</p></li><li><p>运算符：</p><ul><li>&amp; 与操作</li><li>｜或操作</li><li>~ 非操作</li></ul></li></ul><h2 id="6、聚合查询和原生数据库操作"><a href="#6、聚合查询和原生数据库操作" class="headerlink" title="6、聚合查询和原生数据库操作"></a>6、聚合查询和原生数据库操作</h2><h3 id="6-1、聚合查询"><a href="#6-1、聚合查询" class="headerlink" title="6.1、聚合查询"></a>6.1、聚合查询</h3><p>聚合查询是指对一个数据表中的一个字段的数据进行部分或全部进行统计</p><p>聚合查询分为：整表聚合、分组聚合</p><h4 id="6-1-1、整表聚合"><a href="#6-1-1、整表聚合" class="headerlink" title="6.1.1、整表聚合"></a>6.1.1、整表聚合</h4><p>不带分组的聚合查询是指将全部数据进行集中统计查询</p><p>聚合函数[需要导入]:</p><pre><code class="hljs">- 导入方法：``from django.db.models import *``- 聚合函数：Sum、Avg、Count、Max、Min</code></pre><p>语法：<code>MyModel.objects.aggregate(自定义结果变量名 = 聚合函数(&#39;列&#39;))</code></p><ul><li>返回结果：结果变量名和值组成的字典<ul><li>格式为：<code>&#123;&#39;结果变量名&#39;:&#39;值&#39;&#125;</code></li></ul></li></ul><h4 id="6-1-2、分组聚合"><a href="#6-1-2、分组聚合" class="headerlink" title="6.1.2、分组聚合"></a>6.1.2、分组聚合</h4><p>分组聚合是指通过计算查询结果中每一个对象所关联的对象的集合，从而得出总计值（也可以是平均值或总和），即为查询集的每一项生成聚合</p><ul><li><p>语法：</p><ul><li><code>QuerySet.annotate(自定义结果变量名 = 聚合函数(&#39;列&#39;))</code></li></ul></li><li><p>返回值：QuerySet</p></li><li><p>步骤</p><ul><li>1、通过先用查询结果<code>MyModel.objects.values()</code> 查找查询要分组聚合的QuerySet<ul><li>MyModel.objects.values(‘列1’, ‘列2’)</li></ul></li><li>2、通过返回结果的QuerySet.annotate() 方法分组聚合得到分组结果<ul><li>QuerySet.annotate(名 &#x3D; 聚合函数(‘列’))</li></ul></li></ul></li></ul><h3 id="6-2、原生数据库操作"><a href="#6-2、原生数据库操作" class="headerlink" title="6.2、原生数据库操作"></a>6.2、原生数据库操作</h3><p>Django也支持直接用SQL语句的方式通信数据库</p><p>查询：使用<code>MyModel.objects.raw()</code>进行数据库查询操作查询</p><p>语法：<code>MyModel.objects.raw(SQL语句, 拼接参数)</code></p><p>返回值：RawQuerySet集合对象 【 只支持基础操作，比如循环 】</p><p>使用原生语句时小心SQL注入【用户通过数据上传，将恶意的SQL语句提交给服务器】</p><h4 id="cursor"><a href="#cursor" class="headerlink" title="cursor"></a>cursor</h4><p>完全跨过模型类操作数据库  -  查询&#x2F;更新&#x2F;删除</p><ul><li><p>1、导入cursor所在的包</p><ul><li><code>from django.db import connection</code></li></ul></li><li><p>2、用创建cursor类的构造函数创建cursor对象，再使用cursor对象，为保证在出现异常时能释放cursor资源，通常使用with语句进行创建操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> connection<br><br><span class="hljs-keyword">with</span> connection.cursor() <span class="hljs-keyword">as</span> cur:<br>  cur.execute(<span class="hljs-string">&#x27;执行SQL语句&#x27;</span>, <span class="hljs-string">&#x27;拼接参数&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><h1 id="三、admin管理后台"><a href="#三、admin管理后台" class="headerlink" title="三、admin管理后台"></a>三、admin管理后台</h1><h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><ul><li>django提供了比较完善的后台管理数据库的借口，可供开发过程中调用和测试使用</li><li>django会搜集所有已注册的模型类，为这些模型类提供数据管理界面</li></ul><h2 id="2、admin配置步骤"><a href="#2、admin配置步骤" class="headerlink" title="2、admin配置步骤"></a>2、admin配置步骤</h2><ul><li><p>1、创建后台管理账号 - 该账号为管理后台最高权限账号</p><ul><li><code>python3 manage.py createsuperuser</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">(py36) taoaodeMacBook-Pro:mysite3 taoao$ python3 manage.py createsuperuser<br>用户名 (leave blank to use &#x27;taoao&#x27;): taoao<br>电子邮件地址: 123456@163.com<br>Password: <br>Password (again): <br>Superuser created successfully.<br>(py36) taoaodeMacBook-Pro:mysite3 taoao$ <br></code></pre></td></tr></table></figure></li><li><p>2、输入<a href="http://127.0.0.1:8000/admin/%E8%BF%9B%E5%85%A5admin%E9%A1%B5%E9%9D%A2">http://127.0.0.1:8000/admin/进入admin页面</a></p><p><img src="/img/django_img/admin.jpg" alt="admin"></p><p><img src="/img/django_img/admin2.jpg" alt="admin2"></p></li></ul><h2 id="3、注册自定义模型类"><a href="#3、注册自定义模型类" class="headerlink" title="3、注册自定义模型类"></a>3、注册自定义模型类</h2><p>若要自己定义的模型类也能在 &#x2F;admin 后台管理界面中显示和管理，需要将自己的类注册到后台管理界面</p><ul><li><p>注册步骤</p><ul><li><p>1、在应用app 的admin.py 中导入要注册和管理的模型models类，如：<code>from .models import Book</code></p><ul><li>2、调用admin.site.register方法进行注册，如：<code>admin.site.register(自定义模型类)</code></li></ul></li></ul></li></ul><p><img src="/img/django_img/%E6%B3%A8%E5%86%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9E%8B%E7%B1%BB.jpg" alt="注册自定义模型类"></p><p><img src="/img/django_img/%E6%B3%A8%E5%86%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9E%8B%E7%B1%BB2.jpg" alt="注册自定义模型类2"></p><h3 id="3-1、修改自定义模型类的数据样式"><a href="#3-1、修改自定义模型类的数据样式" class="headerlink" title="3.1、修改自定义模型类的数据样式"></a>3.1、修改自定义模型类的数据样式</h3><ul><li>在admin后台管理数据库中对自定义的数据记录都展示为‘xxxx object’ 类型的记录，不便于阅读和判断</li><li>在用户自定义的模型类中可以重写 def _<em>str</em>_(self)：方法解决显示问题</li></ul><h3 id="3-2、模型管理器类"><a href="#3-2、模型管理器类" class="headerlink" title="3.2、模型管理器类"></a>3.2、模型管理器类</h3><p>作用：为后台管理界面添加便于操作的新功能</p><p>说明：后台管理器类须继承自 django.contrib.admin 里的ModelAdmin 类</p><p>使用方法：</p><ul><li><p>1、在&lt;应用app&gt;&#x2F;admin.py 里定义模型管理器类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">xxxManager</span>(admin.ModelAdmin):<br>  ...<br></code></pre></td></tr></table></figure></li><li><p>2、绑定注册模型管理器类和模型类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 绑定自定义模型类 与 管理器类xxxManager</span><br>admin.site.register(自定义模型类, 模型管理器类) <br></code></pre></td></tr></table></figure><p><img src="/img/django_img/%E6%A8%A1%E5%9E%8B%E7%AE%A1%E7%90%86%E5%99%A8%E7%B1%BB.jpg" alt="模型管理器类"></p><p><img src="/img/django_img/%E6%A8%A1%E5%9E%8B%E7%AE%A1%E7%90%86%E5%99%A8%E7%B1%BB2.jpg" alt="模型管理器类2"></p></li></ul><p><strong>其它功能：</strong></p><p><img src="/img/django_img/%E6%A8%A1%E5%9E%8B%E7%AE%A1%E7%90%86%E5%99%A8%E7%B1%BB%E5%85%B6%E5%AE%83%E5%8A%9F%E8%83%BD.jpg" alt="模型管理器类其它功能"></p><p><img src="/img/django_img/%E6%A8%A1%E5%9E%8B%E7%AE%A1%E7%90%86%E5%99%A8%E7%B1%BB%E5%85%B6%E5%AE%83%E5%8A%9F%E8%83%BD2.jpg" alt="模型管理器类其它功能2"></p><p>官方文档：<a href="https://docs.djangoproject.com/zh-hans/3.2/ref/contrib/admin/">https://docs.djangoproject.com/zh-hans/3.2/ref/contrib/admin/</a></p><h2 id="4、Meta内部类"><a href="#4、Meta内部类" class="headerlink" title="4、Meta内部类"></a>4、Meta内部类</h2><p>通过Meta内部类，定义模型类的属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>(models.Model):<br>title = CharField(...)<br>    <br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>      db_table = <span class="hljs-string">&#x27;数据库表名&#x27;</span>  <span class="hljs-comment"># 该模型所用的数据库表的名称</span><br>        verbose_name = <span class="hljs-string">&#x27;单数名&#x27;</span>  <span class="hljs-comment"># 给模型对象的一个易于理解的名称(单数)，用于显示在 /admin 管理界面中</span><br>        verbose_name_plural = <span class="hljs-string">&#x27;复数名&#x27;</span>  <span class="hljs-comment"># 该对象复数形式的名称(复数)，用于显示在 /admin 管理界面中</span><br></code></pre></td></tr></table></figure><h1 id="四、关系映射"><a href="#四、关系映射" class="headerlink" title="四、关系映射"></a>四、关系映射</h1><h2 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h2><p>在关系型数据库中，通常不会把所有的数据都放在同一张表中，不易于扩展，常见的关系映射有：</p><ul><li>一对一映射</li><li>一对多映射</li><li>多对多映射</li></ul><h2 id="2、一对一映射"><a href="#2、一对一映射" class="headerlink" title="2、一对一映射"></a>2、一对一映射</h2><h3 id="2-1、创建模型类"><a href="#2-1、创建模型类" class="headerlink" title="2.1、创建模型类"></a>2.1、创建模型类</h3><ul><li><p>语法：<code>OneToOneField(类名, on_delete = xxx)</code>【on_delete ： 级联删除的规则】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Author</span>(models.Model):<br>  ...<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Wife</span>(models.Model):<br>  属性 = models.OneToOneField(Author, on_delete = xxx)<br></code></pre></td></tr></table></figure></li><li><p>特殊字段选项【必须】</p><ul><li>on_delete   -    级联删除<ul><li>1、models.CASCADE   【 级联删除】Django模拟SQL约束<code> ON DELETE CASCADE</code>的行为，并删除包括ForeignKey的对象</li><li>2、models.PROTECT  【 删不了 】   抛出ProtectedError 以阻止被引用对象的删除，等同于MySQL默认的RESTRICT</li><li>3、SET_NULL  【 可以删 】  设置ForeignKey null，需要指定null&#x3D;True </li><li>4、SET_DEFAULT  【 可以删，将外键设置为默认值 】   将ForeignKey设置为默认值，必须制定ForeignKey的默认值</li></ul></li></ul></li></ul><h3 id="2-2、一对一中-添加数据"><a href="#2-2、一对一中-添加数据" class="headerlink" title="2.2、一对一中 添加数据"></a>2.2、一对一中 添加数据</h3><ul><li><p>1、无外建的模型类【Author】</p><ul><li><pre><code class="python">author1 = Author.objects.create(name = &#39;王老师&#39;)<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><br>- 2、有外建的模型类 【 Wife】<br><br>  - ```python<br>    <span class="hljs-comment"># 方式1   类属性名 = 实例化对象obj</span><br>    wife1 = Wife.objects.create<span class="hljs-params">(<span class="hljs-attr">name</span> = &#x27;王夫人&#x27;, <span class="hljs-attr">author</span> = author1)</span>  <span class="hljs-comment"># 关联王老师obj</span><br>    <span class="hljs-comment"># 方式2   外建字段名 = 具体的值</span><br>    wife1 = Wife.objects.create<span class="hljs-params">(<span class="hljs-attr">name</span> = &#x27;王夫人&#x27;, <span class="hljs-attr">author_id</span> = 1)</span>  <span class="hljs-comment"># 关联王老师对应的主键值</span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h3 id="2-3、一对一中-查询数据"><a href="#2-3、一对一中-查询数据" class="headerlink" title="2.3、一对一中 查询数据"></a>2.3、一对一中 查询数据</h3><ul><li><p>1、正向查询：直接通过外建属性查询，称为正向查询 </p><p><img src="/img/django_img/%E6%AD%A3%E5%90%91%E6%9F%A5%E8%AF%A2.jpg" alt="正向查询"></p></li><li><p>2、反向查询：没有外键属性的一方，可以调用反向属性查询到关联的另一方</p><ul><li>反向关联属性为：<code>实例对象.引用类名(小写)</code>，当反向引用不存在时，则会出发异常</li></ul><p><img src="/img/django_img/%E5%8F%8D%E5%90%91%E6%9F%A5%E8%AF%A2.jpg" alt="反向查询"></p></li></ul><h2 id="3、一对多映射"><a href="#3、一对多映射" class="headerlink" title="3、一对多映射"></a>3、一对多映射</h2><h3 id="3-1、创建模型类"><a href="#3-1、创建模型类" class="headerlink" title="3.1、创建模型类"></a>3.1、创建模型类</h3><ul><li><p>语法：当一个A类对象可以关联多个B类对象时.  【 ForeignKey 必须指定on_delete 模式 】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BanClass</span>(models.Model):  <span class="hljs-comment"># 一</span><br>  ...<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(models.Model):  <span class="hljs-comment"># 多</span><br>  属性 = models.ForeignKey(BanClass, on_delete=xxx)<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-2、一对多中-添加数据"><a href="#3-2、一对多中-添加数据" class="headerlink" title="3.2、一对多中 添加数据"></a>3.2、一对多中 添加数据</h3><p>和 一对一 一样</p><h3 id="3-3、一对多中-查询数据"><a href="#3-3、一对多中-查询数据" class="headerlink" title="3.3、一对多中 查询数据"></a>3.3、一对多中 查询数据</h3><ul><li><p>1、正向查询  跟 一对一 一样</p></li><li><p>2、反向查询  需要用到<strong>反向属性: <code>多对象的对象名_set</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">pub1 = Publisher.objects.get(name=<span class="hljs-string">&#x27;清华大学出版社&#x27;</span>)<br><span class="hljs-comment"># 方式1</span><br>books = pub1.book_set.<span class="hljs-built_in">all</span>()  <span class="hljs-comment"># 通过 book_set获取pub1 对应的多个Book数据对象</span><br><span class="hljs-comment"># 方式2</span><br><span class="hljs-comment"># books = Book.objects.filter(publisher=pub1)  # 也可以采用此方式获取</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="4、多对多映射"><a href="#4、多对多映射" class="headerlink" title="4、多对多映射"></a>4、多对多映射</h2><h3 id="4-1、创建模型类"><a href="#4-1、创建模型类" class="headerlink" title="4.1、创建模型类"></a>4.1、创建模型类</h3><p>语法：在关联的两个类中的任意一个类中，增加：<code>属性 = models.ManyToManyField(MyModel)</code></p><p>Django中无需手动创建第三张表，Django自动完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span>(models.Model):  <span class="hljs-comment"># 可以通过 teacher1.student_set.create新增学生 .add关联学生</span><br>  ...<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(models.Model):  <span class="hljs-comment"># 可以通过 student1.teachers.create新增老师 .add关联老师</span><br>  ...<br>  teachers = models.ManyToManyField(Teacher)<br></code></pre></td></tr></table></figure><h3 id="4-2、多对多中-添加数据"><a href="#4-2、多对多中-添加数据" class="headerlink" title="4.2、多对多中 添加数据"></a>4.2、多对多中 添加数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方案1  先创建Teacher，再关联Student  # 反向添加</span><br>In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">from</span> mtm.models <span class="hljs-keyword">import</span> *<br><br>In [<span class="hljs-number">2</span>]: t1 = Teacher.objects.create(name=<span class="hljs-string">&#x27;吕老师&#x27;</span>)<br><br>In [<span class="hljs-number">3</span>]: t2 = Teacher.objects.create(name=<span class="hljs-string">&#x27;王老师&#x27;</span>)<br><span class="hljs-comment"># 通过 已经创建好的老师 创建学生</span><br>In [<span class="hljs-number">4</span>]: s11 = t1.student_set.create(title=<span class="hljs-string">&#x27;Python&#x27;</span>)  <span class="hljs-comment"># 通过 student_set</span><br><span class="hljs-comment"># 通过 已经创建号的老师 关联学生</span><br>In [<span class="hljs-number">5</span>]: t2.student_set.add(book11)<br><br><span class="hljs-comment"># 方案2  先创建Student，再关联Teacher  # 正向添加</span><br>In [<span class="hljs-number">6</span>]: s1 = Student.objects.create(title=<span class="hljs-string">&#x27;林同学&#x27;</span>)<br><span class="hljs-comment"># ** obj1.属性.create()  # 通过学生 创建 老师 **</span><br>In [<span class="hljs-number">7</span>]: s1.teachers.create(name=<span class="hljs-string">&#x27;吕老师&#x27;</span>)  <br><span class="hljs-comment"># ** obj1.属性.add()  # 通过学生 关联 老师 **</span><br>In [<span class="hljs-number">8</span>]: s1.teachers.add(t11)<br></code></pre></td></tr></table></figure><h3 id="4-3、多对多中-查询数据"><a href="#4-3、多对多中-查询数据" class="headerlink" title="4.3、多对多中 查询数据"></a>4.3、多对多中 查询数据</h3><h4 id="4-3-1、正向查询。有多对多属性的对象-查-另一方"><a href="#4-3-1、正向查询。有多对多属性的对象-查-另一方" class="headerlink" title="4.3.1、正向查询。有多对多属性的对象 查 另一方"></a>4.3.1、正向查询。有多对多属性的对象 查 另一方</h4><h4 id="4-3-2、反向查询。没有多对多属性的对象-查-另一方"><a href="#4-3-2、反向查询。没有多对多属性的对象-查-另一方" class="headerlink" title="4.3.2、反向查询。没有多对多属性的对象 查 另一方"></a>4.3.2、反向查询。没有多对多属性的对象 查 另一方</h4><h1 id="五、cookies-和session"><a href="#五、cookies-和session" class="headerlink" title="五、cookies 和session"></a>五、cookies 和session</h1><h2 id="1、会话定义"><a href="#1、会话定义" class="headerlink" title="1、会话定义"></a>1、会话定义</h2><ul><li>从打开浏览器访问一个网站，到关闭浏览器结束此次访问，称之为一次会话</li><li>HTTP协议是无状态的，导致会话状态难以保持</li><li>Cookies 和Session 就是为了保持会话状态而诞生的两个存储技术</li></ul><h2 id="2、Cookies"><a href="#2、Cookies" class="headerlink" title="2、Cookies"></a>2、Cookies</h2><h3 id="2-1、定义"><a href="#2-1、定义" class="headerlink" title="2.1、定义"></a>2.1、定义</h3><p>cookies是保存在客户端浏览器上的存储空间</p><h3 id="2-2、Cookies特点"><a href="#2-2、Cookies特点" class="headerlink" title="2.2、Cookies特点"></a>2.2、Cookies特点</h3><ul><li><p><strong>cookies 在浏览器上是以键值对的形式进行存储的</strong>，键和值都是以ASCII字符串的形式存储（不能是中文字符串）</p></li><li><p>存储的数据带有生命周期</p></li><li><p>cookies 中的数据是按域存储隔离的，不同的域之间无法访问</p></li><li><p>cookies 的内部的数据会在每次访问此网址时都会携带到服务器端，如果cookies 过大会降低响应速度</p></li></ul><h3 id="2-3、Cookies的使用"><a href="#2-3、Cookies的使用" class="headerlink" title="2.3、Cookies的使用"></a>2.3、Cookies的使用</h3><h4 id="2-3-1、存储cookies"><a href="#2-3-1、存储cookies" class="headerlink" title="2.3.1、存储cookies"></a>2.3.1、存储cookies</h4><p>HttpResponse.set_cookie(key, value &#x3D; ‘’, max_age &#x3D; None, expires &#x3D; None)</p><ul><li>key：cookie的名字</li><li>value：cookie的值</li><li>max_age：cookie存活时间，单位是秒</li><li>expires：具体过期时间</li><li>当不指定max_age 和expires 时，关闭浏览器时此数据失效（二选一）</li></ul><p>示例：</p><p>在响应的时候设置：</p><p><img src="/img/django_img/set_cookies.jpg" alt="set_cookies"></p><p><img src="/img/django_img/cookies.jpg" alt="cookies"></p><p>在响应头中可以看到set-cookies的信息，<strong>用于把cookies存到本地浏览器</strong></p><p><img src="/img/django_img/set_cookies2.jpg" alt="set_cookies2"></p><h4 id="2-3-2、删除和获取cookies"><a href="#2-3-2、删除和获取cookies" class="headerlink" title="2.3.2、删除和获取cookies"></a>2.3.2、删除和获取cookies</h4><ul><li>删除Cookies<ul><li><code>HttpResponse.delete_cookie(key)</code></li><li>删除指定的key的Cookie。如果key 不存在则什么也不发生</li></ul></li><li>获取Cookies<ul><li>通过 <code>request.COOKIES</code> 绑定的字典（dict）获取客户端的COOKIES数据</li><li><code>value = request.COOKIES.get(&#39;cookies名&#39;, &#39;默认值&#39;)</code></li></ul></li></ul><p>在请求头中可以看到cookies的信息，<strong>浏览器会自动把cookie发到服务器</strong></p><p><img src="/img/django_img/get_cookies.jpg" alt="get_cookies"></p><h2 id="3、Session"><a href="#3、Session" class="headerlink" title="3、Session"></a>3、Session</h2><h3 id="3-1、定义"><a href="#3-1、定义" class="headerlink" title="3.1、定义"></a>3.1、定义</h3><p>session是在服务器上开辟一段空间用于保留浏览器和服务器交互时的重要数据</p><ul><li>实现方式<ul><li>使用session 需要在浏览器客户端启动cookie，并且在cookie中存储sessionid</li><li>每个客户端都可以在服务器端有一个独立的Session</li><li>注意：不同的请求者之间不会共享这个数据，session与请求者一一对应</li></ul></li></ul><h3 id="3-2、Session使用"><a href="#3-2、Session使用" class="headerlink" title="3.2、Session使用"></a>3.2、Session使用</h3><h4 id="3-2-1、session初始配置"><a href="#3-2-1、session初始配置" class="headerlink" title="3.2.1、session初始配置"></a>3.2.1、session初始配置</h4><ul><li><p>在settings.py中配置session</p><p>1、向INSTALLED_APPS 列表中添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED_APPS = [<br>  <span class="hljs-comment"># 启动 sessions 应用</span><br>  <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>]<br></code></pre></td></tr></table></figure><p>2、向MIDDLEWARE 列表中添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">MIDDLEWARE = [<br>  <span class="hljs-comment"># 启动 Session中间件</span><br>  <span class="hljs-string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span><br>]<br></code></pre></td></tr></table></figure></li></ul><p><img src="/img/django_img/session%E9%85%8D%E7%BD%AE.jpg" alt="session配置"></p><h4 id="3-2-2、Django中使用session"><a href="#3-2-2、Django中使用session" class="headerlink" title="3.2.2、Django中使用session"></a>3.2.2、Django中使用session</h4><p>session 对象是一个类似于字典的SessionStore 类型的对象，可以用类模拟于字典的方式进行操作</p><p>session能够存储如字符串、整型、字典、列表等</p><p>1、保存session 的值到服务器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">request.session[<span class="hljs-string">&#x27;key&#x27;</span>] = value<br></code></pre></td></tr></table></figure><p><img src="/img/django_img/set_session.jpg" alt="set_session"></p><p>2、获取session的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 两种方法</span><br>value = request.session[<span class="hljs-string">&#x27;key&#x27;</span>]<br>value = request.session.get(<span class="hljs-string">&#x27;key&#x27;</span>, <span class="hljs-string">&#x27;默认值&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/django_img/session.jpg" alt="session"></p><p><img src="/img/django_img/set_session.jpg" alt="set_session"></p><p>3、删除session</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">del</span> request.session[<span class="hljs-string">&#x27;key&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="3-2-3、settings-py-中的相关配置项"><a href="#3-2-3、settings-py-中的相关配置项" class="headerlink" title="3.2.3、settings.py 中的相关配置项"></a>3.2.3、settings.py 中的相关配置项</h4><ul><li>1、SESSION_COOKIE_AGE<ul><li>作用：指定sessionid 在cookies 中的保存时长（默认是2周），例如：</li><li><code>SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 *2</code></li></ul></li><li>2、SESSION_EXPIRE_AT_BROWSER_CLOSE <ul><li>设置只要浏览器关闭时，session就失效【 默认为False 】</li></ul></li></ul><p><strong>注意：Django中的session 数据存储在数据库中，所以使用session前需要确保已经执行过 migrate</strong></p><h3 id="3-3、Django-session的问题"><a href="#3-3、Django-session的问题" class="headerlink" title="3.3、Django session的问题"></a>3.3、Django session的问题</h3><ul><li><p>1、django_session 表是单表设计；且该表数据量持续增持【浏览器故意删掉sessionid 和 过期数据未删除】</p></li><li><p>2、可以每晚执行 <code>python3 manage.py clearsessions</code> 【 该命令可删除已经过期的session数据 】</p></li></ul><h1 id="六、缓存"><a href="#六、缓存" class="headerlink" title="六、缓存"></a>六、缓存</h1><h2 id="1、缓存的定义"><a href="#1、缓存的定义" class="headerlink" title="1、缓存的定义"></a>1、缓存的定义</h2><ul><li>定义：缓存是一类可以更快的读取数据的介质统称，也指其它可以加快数据读取的存储方式。一般用来存储临时数据，常用介质的是读取速度很快的内存</li><li>意义：视图渲染有一定成本，数据库的频繁查询过高；所以对于低频变动的页面可以考虑使用缓存技术，减少实际渲染次数；用户拿到响应的时间成本会更低</li></ul><h2 id="2、缓存配置"><a href="#2、缓存配置" class="headerlink" title="2、缓存配置"></a>2、缓存配置</h2><h3 id="2-1、数据库缓存"><a href="#2-1、数据库缓存" class="headerlink" title="2.1、数据库缓存"></a>2.1、数据库缓存</h3><p><strong>将缓存的数据存储在数据库中</strong></p><p>说明：尽管存储介质没有更换，但是当把一次负责查询的结果直接存储到表中，比如多个条件的过滤查询结果，可避免重复进行复杂查询，提升效率</p><p><strong>配置：在settings.py中</strong></p><p><code>缓存配置，这里设置为数据库缓存（需要手动执行创建表的命令【python3 manage.py createcachetable 】）</code></p><p><img src="/img/django_img/%E7%BC%93%E5%AD%981.jpg" alt="缓存1"></p><h3 id="2-2、本地内存缓存"><a href="#2-2、本地内存缓存" class="headerlink" title="2.2、本地内存缓存"></a>2.2、本地内存缓存</h3><p><strong>数据缓存到服务器内存中</strong></p><p><img src="/img/django_img/%E7%BC%93%E5%AD%982.jpg" alt="缓存2"></p><h3 id="2-3、文件系统缓存"><a href="#2-3、文件系统缓存" class="headerlink" title="2.3、文件系统缓存"></a>2.3、文件系统缓存</h3><p><strong>将缓存的数据存储到本地文件中</strong></p><p><img src="/img/django_img/%E7%BC%93%E5%AD%983.jpg" alt="缓存3"></p><h2 id="3、整体缓存策略"><a href="#3、整体缓存策略" class="headerlink" title="3、整体缓存策略"></a>3、整体缓存策略</h2><h3 id="3-1、Django中使用缓存-视图函数中"><a href="#3-1、Django中使用缓存-视图函数中" class="headerlink" title="3.1、Django中使用缓存 - 视图函数中"></a>3.1、Django中使用缓存 - 视图函数中</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> django.views.decorators.cache <span class="hljs-keyword">import</span> cache_page<br><br><span class="hljs-meta">@cache_page(<span class="hljs-params"><span class="hljs-number">30</span></span>)   </span><span class="hljs-comment"># 30 -&gt;单位 s</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_view</span>(<span class="hljs-params">request</span>):<br>  ...<br></code></pre></td></tr></table></figure><h3 id="3-2、Django中使用缓存-路由中"><a href="#3-2、Django中使用缓存-路由中" class="headerlink" title="3.2、Django中使用缓存 - 路由中"></a>3.2、Django中使用缓存 - 路由中</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.views.decorators.cache <span class="hljs-keyword">import</span> cache_page<br><br>urlpatterns = [<br>   path(<span class="hljs-string">&#x27;foo/&#x27;</span>, cache_page(<span class="hljs-number">60</span>)(my_view)),  <span class="hljs-comment"># cache_page(60)</span><br>]<br></code></pre></td></tr></table></figure><h2 id="4、局部缓存策略"><a href="#4、局部缓存策略" class="headerlink" title="4、局部缓存策略"></a>4、局部缓存策略</h2>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker搭建Postgres</title>
    <link href="/2024/02/26/Docker%E6%90%AD%E5%BB%BAPostgres/"/>
    <url>/2024/02/26/Docker%E6%90%AD%E5%BB%BAPostgres/</url>
    
    <content type="html"><![CDATA[<h1 id="一、搭建Postgres"><a href="#一、搭建Postgres" class="headerlink" title="一、搭建Postgres"></a>一、搭建Postgres</h1><h2 id="1、首先拉取镜像"><a href="#1、首先拉取镜像" class="headerlink" title="1、首先拉取镜像"></a>1、首先拉取镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ docker pull postgres  <br>Using default tag: latest<br>latest: Pulling from library/postgres<br>a2abf6c4d29d: Pull complete <br>e1769f49f910: Pull complete <br>33a59cfee47c: Pull complete <br>461b2090c345: Pull complete <br>8ed8ab6290ac: Pull complete <br>495e42c822a0: Pull complete <br>18e858c71c58: Pull complete <br>594792c80d5f: Pull complete <br>794976979956: Pull complete <br>eb5e1a73c3ca: Pull complete <br>6d6360292cba: Pull complete <br>131e916e1a28: Pull complete <br>757a73507e2e: Pull complete <br>Digest: sha256:f329d076a8806c0ce014ce5e554ca70f4ae9407a16bb03baa7fef287ee6371f1<br>Status: Downloaded newer image for postgres:latest<br>docker.io/library/postgres:latest<br></code></pre></td></tr></table></figure><h2 id="2、创建容器"><a href="#2、创建容器" class="headerlink" title="2、创建容器"></a>2、创建容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ docker run --name postgres -e postgres_password=postgres -p 54321:5432 -itd postgres:latest<br>0a2da817f9917979cfeb50bffeb0ae301f26afc6a5b37eb6bfa0aaa806df1cef<br></code></pre></td></tr></table></figure><h2 id="3、查看容器是否创建成功"><a href="#3、查看容器是否创建成功" class="headerlink" title="3、查看容器是否创建成功"></a>3、查看容器是否创建成功</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ docker ps<br>CONTAINER ID   IMAGE             COMMAND                  CREATED         STATUS         PORTS                                         NAMES<br>d55dc6eea87d   postgres:latest   &quot;docker-entrypoint.s…&quot;   4 seconds ago   Up 2 seconds   0.0.0.0:54321-&gt;5432/tcp, :::54321-&gt;5432/tcp   postgres<br></code></pre></td></tr></table></figure><h2 id="4、进入容器"><a href="#4、进入容器" class="headerlink" title="4、进入容器"></a>4、进入容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ docker exec -it postgres bash<br>root@d55dc6eea87d:/# <br></code></pre></td></tr></table></figure><h2 id="5、进入Postgres"><a href="#5、进入Postgres" class="headerlink" title="5、进入Postgres"></a>5、进入Postgres</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@d55dc6eea87d:/# psql -U postgres <br>psql (14.1 (Debian 14.1-1.pgdg110+1))<br>Type &quot;help&quot; for help.<br><br>postgres=# <br></code></pre></td></tr></table></figure><p><strong>Postgres搭建成功！</strong></p><h1 id="二、安装postgis扩展"><a href="#二、安装postgis扩展" class="headerlink" title="二、安装postgis扩展"></a>二、安装postgis扩展</h1><h2 id="1、首先进入Postgres容器内"><a href="#1、首先进入Postgres容器内" class="headerlink" title="1、首先进入Postgres容器内"></a>1、首先进入Postgres容器内</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ docker exec -it postgres bash<br>root@d55dc6eea87d:/# <br></code></pre></td></tr></table></figure><h2 id="2、准备工作"><a href="#2、准备工作" class="headerlink" title="2、准备工作"></a>2、准备工作</h2><h3 id="升级apt-get"><a href="#升级apt-get" class="headerlink" title="升级apt-get"></a>升级apt-get</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@d55dc6eea87d:/# apt-get update<br>Hit:1 http://security.debian.org/debian-security bullseye-security InRelease<br>Hit:2 http://apt.postgresql.org/pub/repos/apt bullseye-pgdg InRelease<br>Hit:3 http://deb.debian.org/debian bullseye InRelease<br>Hit:4 http://deb.debian.org/debian bullseye-updates InRelease<br>Reading package lists... Done<br></code></pre></td></tr></table></figure><h2 id="3、安装postgis"><a href="#3、安装postgis" class="headerlink" title="3、安装postgis"></a>3、安装postgis</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@d55dc6eea87d:/# apt-get install postgis<br>Reading package lists... Done<br>Building dependency tree... Done<br>Reading state information... Done<br>postgis is already the newest version (3.3.1+dfsg-1.pgdg110+1).<br>The following packages were automatically installed and are no longer required:<br>  postgresql-9.6 postgresql-9.6-postgis-3 postgresql-9.6-postgis-3-scripts postgresql-client-9.6 postgresql-contrib-9.6<br>Use &#x27;apt autoremove&#x27; to remove them.<br>0 upgraded, 0 newly installed, 0 to remove and 52 not upgraded.<br></code></pre></td></tr></table></figure><p><strong>查看Postgres的版本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@d55dc6eea87d:/# psql -U postgres<br>psql (14.1 (Debian 14.1-1.pgdg110+1))<br>Type &quot;help&quot; for help.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 显示版本为14</span></span><br></code></pre></td></tr></table></figure><p><strong>安装指定的版本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@d55dc6eea87d:/# apt-get install postgresql-14-postgis-3 postgresql-14-postgis-3-dbgsym postgresql-14-postgis-3-scripts<br></code></pre></td></tr></table></figure><h2 id="4、搜索下扩展是否安装"><a href="#4、搜索下扩展是否安装" class="headerlink" title="4、搜索下扩展是否安装"></a>4、搜索下扩展是否安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@d55dc6eea87d:/# find /usr -name postgis.control<br>/usr/share/postgresql/14/extension/postgis.control<br>/usr/share/postgresql/9.6/extension/postgis.control<br></code></pre></td></tr></table></figure><h2 id="5、连接Postgres，启用扩展"><a href="#5、连接Postgres，启用扩展" class="headerlink" title="5、连接Postgres，启用扩展"></a>5、连接Postgres，启用扩展</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@d55dc6eea87d:/# psql -U postgres<br>psql (14.1 (Debian 14.1-1.pgdg110+1))<br>Type &quot;help&quot; for help.<br><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">postgres<span class="hljs-operator">=</span># <span class="hljs-keyword">create</span> extension postgis;<br>ERROR:  extension &quot;postgis&quot; already <span class="hljs-keyword">exists</span><br></code></pre></td></tr></table></figure><h2 id="6、测试是否启用成功"><a href="#6、测试是否启用成功" class="headerlink" title="6、测试是否启用成功"></a>6、测试是否启用成功</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">postgres<span class="hljs-operator">=</span># <span class="hljs-keyword">select</span> postgis_full_version();<br>                                                                       postgis_full_version                                                               <br>         <br><span class="hljs-comment">-------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br> POSTGIS<span class="hljs-operator">=</span>&quot;3.3.1 3786b21&quot; [EXTENSION] PGSQL<span class="hljs-operator">=</span>&quot;140&quot; GEOS<span class="hljs-operator">=</span>&quot;3.9.0-CAPI-1.16.2&quot; PROJ<span class="hljs-operator">=</span>&quot;7.2.1&quot; LIBXML<span class="hljs-operator">=</span>&quot;2.9.10&quot; LIBJSON<span class="hljs-operator">=</span>&quot;0.15&quot; LIBPROTOBUF<span class="hljs-operator">=</span>&quot;1.3.3&quot; WAGYU<span class="hljs-operator">=</span>&quot;0.5.0 (Internal)&quot;<br>(<span class="hljs-number">1</span> <span class="hljs-type">row</span>)<br><br><br></code></pre></td></tr></table></figure><p><strong>启用postgis扩展成功</strong></p>]]></content>
    
    
    <categories>
      
      <category>安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Postgres</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL笔记汇总</title>
    <link href="/2024/02/26/MySQL%E7%AC%94%E8%AE%B0%E6%B1%87%E6%80%BB/"/>
    <url>/2024/02/26/MySQL%E7%AC%94%E8%AE%B0%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="一、SQL通用语法"><a href="#一、SQL通用语法" class="headerlink" title="一、SQL通用语法"></a>一、SQL通用语法</h2><h3 id="1、SQL通用语法"><a href="#1、SQL通用语法" class="headerlink" title="1、SQL通用语法"></a>1、SQL通用语法</h3><p>1、SQL语句可以单行或多行书写，以分号结尾</p><p>2、SQL语句可以使用空格&#x2F;缩进来增强语句的可读性</p><p>3、MySQL数据库的SQL语句不区分大小写，建议关键字使用大写</p><p>4、注释：</p><ul><li>单行注释：– 注释内容  或  # 注释内容（MySQL特有）</li><li>多行注释：&#x2F;* 注释内容 *&#x2F;</li></ul><h3 id="2、SQL分类"><a href="#2、SQL分类" class="headerlink" title="2、SQL分类"></a>2、SQL分类</h3><ol><li>DDL：数据定义语言，用来定义数据库对象（数据库、表、字段）</li><li>DML：数据操作语言，用来对数据库表中的数据进行增删改</li><li>DQL：数据查询语言，用来查询数据库中表的记录</li><li>DCL：数据控制语言，用来创建数据库用户、控制数据库的访问权限</li></ol><h3 id="3、DDL数据定义语言"><a href="#3、DDL数据定义语言" class="headerlink" title="3、DDL数据定义语言"></a>3、DDL数据定义语言</h3><h4 id="3-1、DDL-数据库操作"><a href="#3-1、DDL-数据库操作" class="headerlink" title="3.1、DDL-数据库操作"></a>3.1、DDL-数据库操作</h4><p>1、查询：</p><ul><li><p>查询所有数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases;<br></code></pre></td></tr></table></figure></li><li><p>查询当前数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> database();<br></code></pre></td></tr></table></figure></li></ul><p>2、创建：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 语法</span><br><span class="hljs-keyword">create</span> datebase [if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>] 数据库名 [<span class="hljs-keyword">default</span> charset 字符集] [<span class="hljs-keyword">collate</span> 排序规则];<br><br># 举例： 创建数据库并指定默认字符集为 utf8mb4<br><span class="hljs-keyword">create</span> database 数据库名 <span class="hljs-keyword">default</span> charset utf8mb4;<br></code></pre></td></tr></table></figure><p>3、删除：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> database [if <span class="hljs-keyword">exists</span>] 数据库名;<br></code></pre></td></tr></table></figure><p>4、使用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">use 数据库名;<br></code></pre></td></tr></table></figure><h4 id="3-2、DDL–表操作-查询"><a href="#3-2、DDL–表操作-查询" class="headerlink" title="3.2、DDL–表操作-查询"></a>3.2、DDL–表操作-查询</h4><p>1、查询当前数据库的所有表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> tables;<br></code></pre></td></tr></table></figure><p>2、查询表结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">desc</span> 表名;<br></code></pre></td></tr></table></figure><p>3、查询指定表的建表语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名;<br></code></pre></td></tr></table></figure><h4 id="3-3、DDL-表操作-创建"><a href="#3-3、DDL-表操作-创建" class="headerlink" title="3.3、DDL-表操作-创建"></a>3.3、DDL-表操作-创建</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span>  <span class="hljs-keyword">table</span>  表名(<br>    字段<span class="hljs-number">1</span>  字段<span class="hljs-number">1</span>类型[comment  字段<span class="hljs-number">1</span>注释],<br>    字段<span class="hljs-number">2</span>  字段<span class="hljs-number">2</span>类型[comment  字段<span class="hljs-number">2</span>注释],<br>    字段<span class="hljs-number">3</span>  字段<span class="hljs-number">3</span>类型[comment  字段<span class="hljs-number">3</span>注释],<br>    ...<br>    字段n  字段n类型[comment  字段n注释]<br>)[comment  表注释];<br></code></pre></td></tr></table></figure><h4 id="3-4、DDL-数据类型"><a href="#3-4、DDL-数据类型" class="headerlink" title="3.4、DDL-数据类型"></a>3.4、DDL-数据类型</h4><p>1、数值类型</p><table><thead><tr><th>类型</th><th>大小</th><th>有符号(SIGNED)范围</th><th>无符号(UNSIGNED)范围</th><th>描述</th></tr></thead><tbody><tr><td>TINYINT</td><td>1 byte</td><td>(-128，127)</td><td>(0，255)</td><td>小整数值</td></tr><tr><td>SMALLINT</td><td>2 bytes</td><td>(-32768，32767)</td><td>(0，65535)</td><td>大整数值</td></tr><tr><td>MEDIUMINT</td><td>3 bytes</td><td>(-8388608，8388607)</td><td>(0，16777215)</td><td>大整数值</td></tr><tr><td>INT或INTEGER</td><td>4 bytes</td><td>(-2147483648，2147483647)</td><td>(0，4294967295)</td><td>大整数值</td></tr><tr><td>BIGINT</td><td>8 bytes</td><td>(-2^63，2^63-1)</td><td>(0，2^64-1)</td><td>极大整数值</td></tr><tr><td>FLOAT</td><td>4 bytes</td><td>(-3.402823466 E+38，3.402823466351 E+38)</td><td>0 和 (1.175494351 E-38，3.402823466 E+38)</td><td>单精度浮点数值</td></tr><tr><td>DOUBLE</td><td>8 bytes</td><td>(-1.7976931348623157 E+308，1.7976931348623157 E+308)</td><td>0 和 (2.2250738585072014 E-308，1.7976931348623157 E+308)</td><td>双精度浮点数值</td></tr><tr><td>DECIMAL</td><td></td><td>依赖于M(精度)和D(标度)的值</td><td>依赖于M(精度)和D(标度)的值</td><td>小数值(精确定点数)</td></tr></tbody></table><p>2、字符串类型</p><table><thead><tr><th>类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255 bytes</td><td>定长字符串</td></tr><tr><td>VARCHAR</td><td>0-65535 bytes</td><td>变长字符串</td></tr><tr><td>TINYBLOB</td><td>0-255 bytes</td><td>不超过255个字符的二进制数据</td></tr><tr><td>TINYTEXT</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535 bytes</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16 777 215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16 777 215 bytes</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4 294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table><p>3、日期时间类型</p><table><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-01-01 至 9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>-838:59:59 至 838:59:59</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901 至 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00 至 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:01 至 2038-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><h4 id="3-5、DDL–表操作-修改"><a href="#3-5、DDL–表操作-修改" class="headerlink" title="3.5、DDL–表操作-修改"></a>3.5、DDL–表操作-修改</h4><p>1、表中新增字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> 字段名 类型(长度) [comment 注释] [约束];<br></code></pre></td></tr></table></figure><p>2、修改数据类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 modify 字段名 新数据类型(长度);<br></code></pre></td></tr></table></figure><p>3、修改字段名和字段类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 change 旧字段名 新字段名 类型[长度] [comment 注释] [约束];<br></code></pre></td></tr></table></figure><p>4、删除字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">drop</span> 字段名;<br></code></pre></td></tr></table></figure><p>5、修改表名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 rename <span class="hljs-keyword">to</span> 新表名;<br></code></pre></td></tr></table></figure><h4 id="3-6、DDL–表操作-删除"><a href="#3-6、DDL–表操作-删除" class="headerlink" title="3.6、DDL–表操作-删除"></a>3.6、DDL–表操作-删除</h4><p>1、删除表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> [if <span class="hljs-keyword">exists</span>] 表名;<br></code></pre></td></tr></table></figure><p>2、删除指定表，并重新创建该表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> 表名;<br></code></pre></td></tr></table></figure><h3 id="4、DML数据操作语言"><a href="#4、DML数据操作语言" class="headerlink" title="4、DML数据操作语言"></a>4、DML数据操作语言</h3><h4 id="4-1、DML-添加数据"><a href="#4-1、DML-添加数据" class="headerlink" title="4.1、DML-添加数据"></a>4.1、DML-添加数据</h4><p>1、给指定字段添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名(字段名<span class="hljs-number">1</span>，字段名<span class="hljs-number">2</span>,...) <span class="hljs-keyword">values</span>(值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>,...);<br></code></pre></td></tr></table></figure><p>2、全部字段添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名 <span class="hljs-keyword">values</span>(值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>,...);<br></code></pre></td></tr></table></figure><p>3、批量添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span>  表名(字段名<span class="hljs-number">1</span>，字段名<span class="hljs-number">2</span>,...)  <span class="hljs-keyword">values</span>(值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>,...),(值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>,...),(值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>,...),...;<br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span>  表名  <span class="hljs-keyword">values</span>(值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>,...),(值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>,...),...;<br></code></pre></td></tr></table></figure><h4 id="4-2、DML-修改数据"><a href="#4-2、DML-修改数据" class="headerlink" title="4.2、DML-修改数据"></a>4.2、DML-修改数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 字段名<span class="hljs-number">1</span><span class="hljs-operator">=</span>值<span class="hljs-number">1</span>，字段名<span class="hljs-number">2</span><span class="hljs-operator">=</span>值<span class="hljs-number">2</span>,... [<span class="hljs-keyword">where</span> 条件];<br></code></pre></td></tr></table></figure><h4 id="4-3、DML-删除数据"><a href="#4-3、DML-删除数据" class="headerlink" title="4.3、DML-删除数据"></a>4.3、DML-删除数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 [<span class="hljs-keyword">where</span> 条件];<br></code></pre></td></tr></table></figure><h3 id="5、DQL-数据查询语言"><a href="#5、DQL-数据查询语言" class="headerlink" title="5、DQL-数据查询语言"></a>5、DQL-数据查询语言</h3><h4 id="5-1、DQL-语法"><a href="#5-1、DQL-语法" class="headerlink" title="5.1、DQL-语法"></a>5.1、DQL-语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>    字段列表<br><span class="hljs-keyword">from</span><br>    表名<br><span class="hljs-keyword">where</span><br>    条件列表<br><span class="hljs-keyword">group</span>  <span class="hljs-keyword">by</span><br>    分组字段列表<br><span class="hljs-keyword">having</span><br>    分组后条件列表<br><span class="hljs-keyword">order</span>  <span class="hljs-keyword">by</span><br>    排序字段列表<br>limit<br>    分页参数<br></code></pre></td></tr></table></figure><h4 id="5-2、DQL-基本查询"><a href="#5-2、DQL-基本查询" class="headerlink" title="5.2、DQL-基本查询"></a>5.2、DQL-基本查询</h4><p>1、去重<code>distinct</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> 字段列表 <span class="hljs-keyword">from</span> 表名;<br></code></pre></td></tr></table></figure><p>2、条件运算符</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">&gt;大于<br>&lt;小于<br>&gt;=大于等于<br>&lt;= 小于等于<br><span class="hljs-section">=等于</span><br>&lt;&gt; 或 != 不等于<br>between...and...在某个范围之内（含最小、最大值）<br>in(...)在in之后的列表中的值，多选一<br>like  占位符模糊匹配（_ 匹配单个字符，% 匹配多个字符）<br>is  null 是null<br>and  或  &amp;&amp;并且<br>or  或  || 或者<br>not  或  ! 非<br></code></pre></td></tr></table></figure><h4 id="5-3、DQL-聚合查询"><a href="#5-3、DQL-聚合查询" class="headerlink" title="5.3、DQL-聚合查询"></a>5.3、DQL-聚合查询</h4><p>count()、max()、min()、avg()、sum()</p><h4 id="5-4、DQL-分组查询-group-by"><a href="#5-4、DQL-分组查询-group-by" class="headerlink" title="5.4、DQL-分组查询 group by"></a>5.4、DQL-分组查询 <code>group by</code></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表名 [<span class="hljs-keyword">where</span> 条件] <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组字段名 [<span class="hljs-keyword">having</span> 分组后过滤条件];<br></code></pre></td></tr></table></figure><ul><li><p>where 和 having 区别：</p></li><li><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件的不参与分组；而having是分组之后对结果进行过滤</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以</li></ul></li><li><p>执行顺序：where &gt; 聚合函数 &gt; having</p></li><li><p>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义。</p><h4 id="5-5、DQL-排序查询order-by"><a href="#5-5、DQL-排序查询order-by" class="headerlink" title="5.5、DQL-排序查询order by"></a>5.5、DQL-排序查询<code>order by</code></h4></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段<span class="hljs-number">1</span> 排序方式<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span> 排序方式<span class="hljs-number">2.</span>..;<br></code></pre></td></tr></table></figure><p>排序方式：</p><ul><li><p>asc升序（默认值）</p></li><li><p>desc              降序</p><h4 id="5-6、DQL-分页查询limit"><a href="#5-6、DQL-分页查询limit" class="headerlink" title="5.6、DQL-分页查询limit"></a>5.6、DQL-分页查询<code>limit</code></h4></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表名 limit 起始索引，查询记录数；<br></code></pre></td></tr></table></figure><ul><li>注意：</li><li><ul><li>起始索引从0开始，起始索引&#x3D;（查询页码 - 1）* 每页显示记录数</li><li>分页查询是数据库的方言，不同数据库有不同的实现，MySQL中是limit</li><li>如果查询的是第一页的数据，起始索引可以省略，直接简写为limit  10</li></ul></li></ul><h4 id="5-7、DQL-执行顺序"><a href="#5-7、DQL-执行顺序" class="headerlink" title="5.7、DQL-执行顺序"></a>5.7、DQL-执行顺序</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span>                   <span class="hljs-number">4</span><br>    字段列表<br><span class="hljs-keyword">from</span>                     <span class="hljs-number">1</span><br>    表名<br><span class="hljs-keyword">where</span>                    <span class="hljs-number">2</span><br>    条件列表<br><span class="hljs-keyword">group</span>  <span class="hljs-keyword">by</span>                <span class="hljs-number">3</span><br>    分组字段列表<br><span class="hljs-keyword">having</span>                    <br>    分组后条件列表<br><span class="hljs-keyword">order</span>  <span class="hljs-keyword">by</span>                <span class="hljs-number">5</span><br>    排序字段列表<br>limit                    <span class="hljs-number">6</span><br>    分页参数<br></code></pre></td></tr></table></figure><h3 id="6、数据控制语言"><a href="#6、数据控制语言" class="headerlink" title="6、数据控制语言"></a>6、数据控制语言</h3><h4 id="6-1、DCL-管理用户"><a href="#6-1、DCL-管理用户" class="headerlink" title="6.1、DCL-管理用户"></a>6.1、DCL-管理用户</h4><p>1、查询用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">use mysql;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure><p>2、创建用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;密码&#x27;</span>;<br></code></pre></td></tr></table></figure><p>3、修改用户密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span> identified <span class="hljs-keyword">with</span> mysql_native_password <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;新密码&#x27;</span>;<br></code></pre></td></tr></table></figure><p>4、删除用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>注意：主机名可以使用 % 通配，代表可以在任意主机访问本机的MySQL</strong></p><h4 id="6-2、DCL-权限控制"><a href="#6-2、DCL-权限控制" class="headerlink" title="6.2、DCL-权限控制"></a>6.2、DCL-权限控制</h4><h6 id="常用权限"><a href="#常用权限" class="headerlink" title="常用权限"></a>常用权限</h6><p>all、all  privileges   所有权限</p><p>select   查询数据</p><p>insert   插入数据</p><p>update  修改数据</p><p>delete删除数据</p><p>alter  修改表</p><p>drop  删除数据库&#x2F;表&#x2F;视图</p><p>create创建数据库&#x2F;表</p><p>1、查询权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br></code></pre></td></tr></table></figure><p>2、授予权限     </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> 权限列表 <span class="hljs-keyword">on</span> 数据库名.表名 <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br></code></pre></td></tr></table></figure><p>3、撤销权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">revoke</span> 权限列表 <span class="hljs-keyword">on</span> 数据库名.表名 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>注意：可以用<code>*.*</code>表示所有数据库.所有表</strong></p><h2 id="二、常用函数"><a href="#二、常用函数" class="headerlink" title="二、常用函数"></a>二、常用函数</h2><h3 id="1、字符串函数"><a href="#1、字符串函数" class="headerlink" title="1、字符串函数"></a>1、字符串函数</h3><ul><li>concat(s1,s2,…sn)字符串拼接</li><li>lower(str)将字符串str全部转为小写</li><li>upper(str)将字符串str全部转为大写</li><li>lpad(str,n,pad)左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</li><li>rpad(str,n,pad)右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</li><li>trim(str)去掉字符串头部和尾部的空格</li><li>substring(str,start,len)返回从字符串str到start位置起的len个长度的字符串</li><li>substring_index(str,分隔符,第几个)</li></ul><h3 id="2、数值函数"><a href="#2、数值函数" class="headerlink" title="2、数值函数"></a>2、数值函数</h3><ul><li>ceil(x)向上取整</li><li>floor(x)向下取整</li><li>mod(x,y)返回x&#x2F;y的模    (取余数)</li><li>rand()返回0～1的随机数</li><li>round(x,y)求参数x的四舍五入的值，保留y位小数</li></ul><p></p><h3 id="3、日期函数"><a href="#3、日期函数" class="headerlink" title="3、日期函数"></a>3、日期函数</h3><ul><li>curdate()返回当前日期</li><li>curtime()返回当前时间</li><li>now()返回当前日期和时间</li><li>year(date)获取指定date的年份</li><li>month(date)获取指定date的月份</li><li>day(date)获取指定date的日期</li><li>date_add(date,interval  expr  type)返回一个日期&#x2F;时间值加上一个时间间隔expr后的时间值</li><li>datediff(date1,date2)返回起始时间date1和结束时间date2之间的天数</li></ul><h3 id="4、流程函数"><a href="#4、流程函数" class="headerlink" title="4、流程函数"></a>4、流程函数</h3><ul><li>if(value,t,f)如果value为true，则返回t，否则返回f</li><li>ifnull(value1,value2)如果value1不为空，返回value1，否则返回value2</li><li>case  when  [val1]  then  [res1]  …else  [default]  end如果val1为True，返回res1，…否则返回default默认值</li><li>case  [expr]  when  [val1] then  [res1]  …else  [default]  end如果expr的值等于val1，返回res1，…否则返回default默认值</li></ul><h2 id="三、约束"><a href="#三、约束" class="headerlink" title="三、约束"></a>三、约束</h2><p><strong>约束是作用于表中字段上的规则，用于限制存储在表中的数据。</strong></p><p><strong>分类：</strong></p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>not  null</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一，不重复的</td><td>unique</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>primary  key</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>default</td></tr><tr><td>检查约束(8.0.16版本之后)</td><td>保证字段值满足某一个条件</td><td>check</td></tr><tr><td>外键约束</td><td>用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td><td>foreign  key</td></tr></tbody></table><p><strong>外键约束：</strong></p><h4 id="1、语法："><a href="#1、语法：" class="headerlink" title="1、语法："></a>1、语法：</h4><p>1、创建表的同时添加外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>  字段名 数据类型,<br>  ... <br>  [<span class="hljs-keyword">constraint</span>] [外键名称] <span class="hljs-keyword">foreign</span> key (外键字段名) <span class="hljs-keyword">references</span> 主表(主表列名)<br>);<br></code></pre></td></tr></table></figure><p>2、已经有表之后再添加外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> 外键名称 <span class="hljs-keyword">foreign</span> key (外键字段名) <span class="hljs-keyword">references</span> 主表(主表列名);<br></code></pre></td></tr></table></figure><p>3、删除外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">drop</span> <span class="hljs-keyword">foreign</span> key 外键名称;<br></code></pre></td></tr></table></figure><h4 id="2、删除-更新行为"><a href="#2、删除-更新行为" class="headerlink" title="2、删除&#x2F;更新行为"></a>2、删除&#x2F;更新行为</h4><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>no  action</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新。（与restrict一致）</td></tr><tr><td>restrict</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新。（与 no  action一致）</td></tr><tr><td>cascade</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除&#x2F;更新外键在子表中的记录。</td></tr><tr><td>set  null</td><td>当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键的值为null（这就要求该外键允许为null）</td></tr><tr><td>set  default</td><td>父表有变更时，子表将外键列设置成一个默认的值（Innodb不支持）</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> 外键名称 <span class="hljs-keyword">foreign</span> key (外键字段) <span class="hljs-keyword">references</span> 主表名(主表字段名) <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> cascade <span class="hljs-keyword">on</span> <span class="hljs-keyword">delete</span>  cascade; <br></code></pre></td></tr></table></figure><h2 id="四、多表查询"><a href="#四、多表查询" class="headerlink" title="四、多表查询"></a>四、多表查询</h2><h3 id="1、内连接-【求交集】"><a href="#1、内连接-【求交集】" class="headerlink" title="1、内连接  【求交集】"></a>1、内连接  【求交集】</h3><h4 id="1-1、隐式内连接："><a href="#1-1、隐式内连接：" class="headerlink" title="1.1、隐式内连接："></a>1.1、隐式内连接：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span>，表<span class="hljs-number">2</span> <span class="hljs-keyword">where</span> 条件;<br></code></pre></td></tr></table></figure><h4 id="1-2、显式内连接："><a href="#1-2、显式内连接：" class="headerlink" title="1.2、显式内连接："></a>1.2、显式内连接：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span> [<span class="hljs-keyword">inner</span>] <span class="hljs-keyword">join</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">on</span> 连接条件;<br></code></pre></td></tr></table></figure><h3 id="2、外连接"><a href="#2、外连接" class="headerlink" title="2、外连接"></a>2、外连接</h3><h4 id="2-1、左外连接查询左表的全部数据以及和右表交集的数据"><a href="#2-1、左外连接查询左表的全部数据以及和右表交集的数据" class="headerlink" title="2.1、左外连接查询左表的全部数据以及和右表交集的数据"></a>2.1、左外连接<code>查询左表的全部数据以及和右表交集的数据</code></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">left</span> [<span class="hljs-keyword">outer</span>] <span class="hljs-keyword">join</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">on</span> 连接条件;<br></code></pre></td></tr></table></figure><h4 id="2-2、右外连接查询右表的全部数据以及和左表交集的数据"><a href="#2-2、右外连接查询右表的全部数据以及和左表交集的数据" class="headerlink" title="2.2、右外连接查询右表的全部数据以及和左表交集的数据"></a>2.2、右外连接<code>查询右表的全部数据以及和左表交集的数据</code></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">right</span> [<span class="hljs-keyword">outer</span>] <span class="hljs-keyword">join</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">on</span> 连接条件;<br></code></pre></td></tr></table></figure><h3 id="3、自连接"><a href="#3、自连接" class="headerlink" title="3、自连接"></a>3、自连接</h3><p><strong>自连接查询，可以是内连接查询，也可以是外连接查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表A 别名<span class="hljs-number">1</span> [<span class="hljs-keyword">inner</span><span class="hljs-operator">/</span><span class="hljs-keyword">left</span><span class="hljs-operator">/</span><span class="hljs-keyword">right</span>] <span class="hljs-keyword">join</span> 表A 别名 <span class="hljs-keyword">on</span> 连接条件;<br></code></pre></td></tr></table></figure><h3 id="4、联合查询union、union-all"><a href="#4、联合查询union、union-all" class="headerlink" title="4、联合查询union、union all"></a>4、联合查询<code>union、union all</code></h3><p><strong>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表A...<br><span class="hljs-keyword">union</span> [<span class="hljs-keyword">all</span>]<br><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表B...<br></code></pre></td></tr></table></figure><ul><li>union all 会将全部的数据直接合并在一起，union会对合并后的数据去重</li><li>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致</li></ul><h3 id="5、子查询"><a href="#5、子查询" class="headerlink" title="5、子查询"></a>5、子查询</h3><p>SQL语句中嵌套select语句，称为<code>嵌套查询</code>,又叫<code>子查询</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">where</span> column1<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 表<span class="hljs-number">2.</span>..)<br></code></pre></td></tr></table></figure><p><strong>子查询外部的语句可以是 insert &#x2F; update &#x2F; delete &#x2F; select 中的任意一个</strong></p><ul><li>根据子查询结果不同，分为：<ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul></li><li>根据子查询位置不同，分为：where之后、from之后、select之后</li></ul><p>5.1、标量子查询</p><ul><li>常用的操作符：&#x3D;、!&#x3D;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;</li></ul><p>5.2、列子查询</p><ul><li>常用的操作符：in、not in、any、some、all</li></ul><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>in</td><td>在指定的集合范围之内，多选一</td></tr><tr><td>not  in</td><td>不在指定的集合范围之内</td></tr><tr><td>any</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>some</td><td>与any等同，使用some的地方都可以使用any</td></tr><tr><td>all</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><p>5.3、行子查询</p><ul><li>常用的操作符：&#x3D;、!&#x3D;、in、not in</li></ul><p>5.4、表子查询</p><ul><li>常用的操作符：in</li></ul><h2 id="五、事务"><a href="#五、事务" class="headerlink" title="五、事务"></a>五、事务</h2><p><strong>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，这些操作要么同时成功，要么同时失败</strong></p><h3 id="1、事务操作方式"><a href="#1、事务操作方式" class="headerlink" title="1、事务操作方式"></a>1、事务操作方式</h3><h4 id="1-1、方式1不常用"><a href="#1-1、方式1不常用" class="headerlink" title="1.1、方式1不常用"></a>1.1、方式1<code>不常用</code></h4><h5 id="1-1-1、查看-设置事务提交方式"><a href="#1-1-1、查看-设置事务提交方式" class="headerlink" title="1.1.1、查看&#x2F;设置事务提交方式"></a>1.1.1、查看&#x2F;设置事务提交方式</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-variable">@autocommit</span>;<br><span class="hljs-keyword">set</span> @<span class="hljs-variable">@autocommit</span><span class="hljs-operator">=</span><span class="hljs-number">0</span>;# <span class="hljs-number">0</span>:不自动提交事务<span class="hljs-number">1</span>:自动提交事务<br></code></pre></td></tr></table></figure><h5 id="1-1-2、提交事务"><a href="#1-1-2、提交事务" class="headerlink" title="1.1.2、提交事务"></a>1.1.2、提交事务</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></table></figure><h5 id="1-1-3、回滚事务"><a href="#1-1-3、回滚事务" class="headerlink" title="1.1.3、回滚事务"></a>1.1.3、回滚事务</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">rollback</span>;<br></code></pre></td></tr></table></figure><h4 id="1-2、方式2"><a href="#1-2、方式2" class="headerlink" title="1.2、方式2"></a>1.2、方式2</h4><h5 id="1-2-1、开启事务"><a href="#1-2-1、开启事务" class="headerlink" title="1.2.1、开启事务"></a>1.2.1、开启事务</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">start</span> transaction;<br>或<br><span class="hljs-keyword">begin</span>;<br></code></pre></td></tr></table></figure><h5 id="1-2-2、提交事务"><a href="#1-2-2、提交事务" class="headerlink" title="1.2.2、提交事务"></a>1.2.2、提交事务</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></table></figure><h5 id="1-2-3、回滚事务"><a href="#1-2-3、回滚事务" class="headerlink" title="1.2.3、回滚事务"></a>1.2.3、回滚事务</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">rollback</span>;<br></code></pre></td></tr></table></figure><h3 id="2、事务的四大特性："><a href="#2、事务的四大特性：" class="headerlink" title="2、事务的四大特性："></a>2、事务的四大特性：</h3><ul><li>原子性（Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li>一致性（Consistency）：事务完成时，必须使所有的数据都保持一直状态。</li><li>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><h3 id="3、并发事务问题："><a href="#3、并发事务问题：" class="headerlink" title="3、并发事务问题："></a>3、并发事务问题：</h3><table><thead><tr><th align="left">问题</th><th>描述</th></tr></thead><tbody><tr><td align="left">脏读</td><td>一个事务读到另外一个事务还没有提交的数据。</td></tr><tr><td align="left">不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同。称为不可重复读</td></tr><tr><td align="left">幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在</td></tr></tbody></table><h3 id="4、事务隔离级别"><a href="#4、事务隔离级别" class="headerlink" title="4、事务隔离级别"></a>4、事务隔离级别</h3><p><strong>√  代表会出现</strong></p><table><thead><tr><th><strong>隔离级别</strong></th><th><strong>脏读</strong></th><th><strong>不可重复读</strong></th><th><strong>幻读</strong></th></tr></thead><tbody><tr><td><strong>Read uncommitted</strong> <strong>读未提交</strong></td><td>√</td><td>√</td><td>√</td></tr><tr><td><strong>Read committed</strong> <strong>读已提交</strong></td><td>×</td><td>√</td><td>√</td></tr><tr><td><strong>Repeatable Read(默认)</strong> <strong>可重复读</strong></td><td>×</td><td>×</td><td>√</td></tr><tr><td><strong>Serializable</strong>  <strong>串行化</strong></td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h4 id="4-1、查看事务隔离级别"><a href="#4-1、查看事务隔离级别" class="headerlink" title="4.1、查看事务隔离级别"></a>4.1、查看事务隔离级别</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> @<span class="hljs-variable">@transaction_isolation</span>;<br></code></pre></td></tr></table></figure><h4 id="4-2、设置事务隔离级别"><a href="#4-2、设置事务隔离级别" class="headerlink" title="4.2、设置事务隔离级别"></a>4.2、设置事务隔离级别</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> [session<span class="hljs-operator">|</span><span class="hljs-keyword">global</span>] transaction isolation level &#123;read uncommitted<span class="hljs-operator">|</span>read committed<span class="hljs-operator">|</span>repeatable read<span class="hljs-operator">|</span>serializable&#125;；<br></code></pre></td></tr></table></figure><ul><li>session：代表只在当前会话窗口有效</li><li>global：所有客户端都有效</li></ul><p><strong>注意：事务隔离级别越高，数据越安全，但是性能越低</strong></p><hr><h2 id="六、存储引擎"><a href="#六、存储引擎" class="headerlink" title="六、存储引擎"></a>六、存储引擎</h2><p><strong>存储引擎就是存储数据、建立索引、更新&#x2F;查询数据等技术的实现方式 存储引擎是基于表的，而不是基于库的，所以存储引擎也可被称为表类型。</strong></p><p><strong>我们可以在创建表的时候，来指定选择的存储引擎，如果没有指定将自动选择默认的存储引擎。</strong></p><h3 id="1、建表时指定存储引擎"><a href="#1、建表时指定存储引擎" class="headerlink" title="1、建表时指定存储引擎"></a>1、建表时指定存储引擎</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名( <br>    字段<span class="hljs-number">1</span> 字段<span class="hljs-number">1</span>类型 [COMMENT 字段<span class="hljs-number">1</span>注释], <br>    ...<br>    字段n 字段n类型 [COMMENT 字段n注释] <br>) ENGINE <span class="hljs-operator">=</span> INNODB [COMMENT 表注释];<br></code></pre></td></tr></table></figure><h3 id="2、查询当前数据库支持的存储引擎"><a href="#2、查询当前数据库支持的存储引擎" class="headerlink" title="2、查询当前数据库支持的存储引擎"></a>2、查询当前数据库支持的存储引擎</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> engines;<br></code></pre></td></tr></table></figure><h3 id="3、InnoDB"><a href="#3、InnoDB" class="headerlink" title="3、InnoDB"></a>3、InnoDB</h3><p><strong>InnoDB是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB是默认MySQL 存储引擎。</strong></p><h4 id="3-1、特点："><a href="#3-1、特点：" class="headerlink" title="3.1、特点："></a>3.1、特点：</h4><ul><li><ul><li>DML操作遵循ACID模型，支持事务；</li><li>行级锁，提高并发访问性能；</li><li>支持外键FOREIGN KEY约束，保证数据的完整性和正确性；</li></ul></li></ul><h4 id="3-2、文件"><a href="#3-2、文件" class="headerlink" title="3.2、文件"></a>3.2、文件</h4><ul><li><ul><li><p>xxx.ibd：xxx代表的是表名，innoDB引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm-早期的 、sdi-新版的）、数据和索引。</p></li><li><p>参数：innodb_file_per_table</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;innodb_file_per_table&#x27;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3-3、结构："><a href="#3-3、结构：" class="headerlink" title="3.3、结构："></a>3.3、结构：</h4><ul><li><strong>表空间</strong> : InnoDB存储引擎逻辑结构的最高层，ibd文件其实就是表空间文件，在表空间中可以包含多个Segment段。</li><li><strong>段</strong> : 表空间是由各个段组成的， 常见的段有数据段、索引段、回滚段等。InnoDB中对于段的管理，都是引擎自身完成，不需要人为对其控制，一个段中包含多个区。</li><li><strong>区</strong> : 区是表空间的单元结构，每个区的大小为1M。 默认情况下， InnoDB存储引擎页大小为16K， 即一个区中一共有64个连续的页。</li><li><strong>页</strong> : 页是组成区的最小单元，<strong>页也是InnoDB 存储引擎磁盘管理的最小单元</strong>，每个页的大小默认为 16KB。为了保证页的连续性，InnoDB 存储引擎每次从磁盘申请 4-5 个区。</li><li><strong>行</strong> : InnoDB 存储引擎是面向行的，也就是说数据是按行进行存放的，在每一行中除了定义表时所指定的字段以外，还包含两个隐藏字段。</li></ul><h3 id="4、存储引擎选择"><a href="#4、存储引擎选择" class="headerlink" title="4、存储引擎选择"></a>4、存储引擎选择</h3><p><img src="/img/mysql_img/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E.jpg"></p><ul><li>InnoDB: 是Mysql的默认存储引擎，支持事务、外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。</li><li>MyISAM ： 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。</li><li>MEMORY：将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性。</li></ul><h2 id="七、索引"><a href="#七、索引" class="headerlink" title="七、索引"></a>七、索引</h2><p><strong>索引（index）是帮助MySQL高效获取数据的数据结构(有序)。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</strong></p><h3 id="1、索引的特点"><a href="#1、索引的特点" class="headerlink" title="1、索引的特点"></a>1、索引的特点</h3><table><thead><tr><th><strong>优势</strong></th><th><strong>劣势</strong></th></tr></thead><tbody><tr><td>提高数据检索的效率，降低数据库的IO成本</td><td>索引列也是要占用空间的。</td></tr><tr><td>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</td><td>索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE时，效率降低。</td></tr></tbody></table><h3 id="2、索引的结构：B-Tree"><a href="#2、索引的结构：B-Tree" class="headerlink" title="2、索引的结构：B+Tree"></a>2、索引的结构：<code>B+Tree</code></h3><ul><li>二叉树缺点：顺序插入时会形成一个链表，查询性能大大降低。大数据量的情况下，层级较深，检索速度慢。</li><li>B-Tree（多路平衡查找树）</li><li>Hash：哈希索引就是采用一定的hash算法将键值换算成新的hash值映射到对应的槽位上，存储在hash表中</li></ul><p><strong>为什么InnoDB存储引擎选择使用B+Tree索引结构？</strong></p><ul><li>1、 相对于二叉树，层级更少，搜索效率高；</li><li>2、 对于B-tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低；</li><li>3、 相对Hash索引，B+tree支持范围匹配及排序操作；</li></ul><h3 id="3、索引的分类"><a href="#3、索引的分类" class="headerlink" title="3、索引的分类"></a>3、索引的分类</h3><table><thead><tr><th><strong>分类</strong></th><th><strong>含义</strong></th><th><strong>特点</strong></th><th><strong>关键字</strong></th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建, 只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table><p><strong>在InnoDB存储引擎中，根据索引的存储形式，又可以分为以下两种：</strong></p><table><thead><tr><th><strong>分类</strong></th><th><strong>含义</strong></th><th><strong>特点</strong></th></tr></thead><tbody><tr><td>聚集索引(Clustered Index)</td><td>将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据</td><td>必须有,而且只有一个</td></tr><tr><td>二级索引(Secondary Index)</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><h4 id="聚集索引选取规则"><a href="#聚集索引选取规则" class="headerlink" title="聚集索引选取规则"></a>聚集索引选取规则</h4><ul><li>如果存在主键，主键索引就是聚集索引。</li><li>如果不存在主键，将使用第一个唯一（UNIQUE）索引作为聚集索引。</li><li>如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索引。</li></ul><h4 id="面试题：InnoDB主键索引的B-tree高度为多高呢"><a href="#面试题：InnoDB主键索引的B-tree高度为多高呢" class="headerlink" title="面试题：InnoDB主键索引的B+tree高度为多高呢?"></a>面试题：<strong>InnoDB主键索引的B+tree高度为多高呢?</strong></h4><p><img src="/img/mysql_img/%E7%B4%A2%E5%BC%95.jpg"></p><p><img src="/img/mysql_img/%E7%B4%A2%E5%BC%952.jpg"></p><h3 id="4、索引语法"><a href="#4、索引语法" class="headerlink" title="4、索引语法"></a>4、索引语法</h3><h4 id="4-1、创建索引"><a href="#4-1、创建索引" class="headerlink" title="4.1、创建索引"></a>4.1、创建索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> [<span class="hljs-keyword">unique</span><span class="hljs-operator">|</span>fulltext] index 索引名 <span class="hljs-keyword">on</span> (字段名,...);<br></code></pre></td></tr></table></figure><h4 id="4-2、查看索引"><a href="#4-2、查看索引" class="headerlink" title="4.2、查看索引"></a>4.2、查看索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> 表名;<br></code></pre></td></tr></table></figure><h4 id="4-3、删除索引"><a href="#4-3、删除索引" class="headerlink" title="4.3、删除索引"></a>4.3、删除索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> index 索引名 <span class="hljs-keyword">on</span> 表名;<br></code></pre></td></tr></table></figure><h3 id="5、SQL性能分析"><a href="#5、SQL性能分析" class="headerlink" title="5、SQL性能分析"></a>5、SQL性能分析</h3><h4 id="5-1、查看sql语句的执行频次"><a href="#5-1、查看sql语句的执行频次" class="headerlink" title="5.1、查看sql语句的执行频次"></a>5.1、查看sql语句的执行频次</h4><p>MySQL 客户端连接成功后，通过  <code>show [session|global] status  </code> 命令可以提供服务器状态信息。通过如下指令，可以查看当前数据库的INSERT、UPDATE、DELETE、SELECT的访问频次：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- session 是查看当前会话 ; </span><br><span class="hljs-comment">-- global 是查询全局数据 ; </span><br><span class="hljs-keyword">show</span> [session <span class="hljs-operator">|</span> <span class="hljs-keyword">global</span>] status <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;Com_______&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>Com_delete: 删除次数 </li><li>Com_insert: 插入次数</li><li>Com_select: 查询次数</li><li>Com_update: 更新次数</li></ul><h4 id="5-2、慢查询日志"><a href="#5-2、慢查询日志" class="headerlink" title="5.2、慢查询日志"></a>5.2、慢查询日志</h4><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位:秒，默认10秒）的所有SQL语句的日志。<br>MySQL的慢查询日志默认没有开启，我们可以查看一下系统变量 slow_query_log:<code>show variables like &#39;slow_query_log&#39;;</code><br>如果要开启慢查询日志，需要在MySQL的配置文件&#x2F;etc&#x2F;my.cnf中配置如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">开启MySQL慢日志查询开关</span> <br>slow_query_log=1 <br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置慢日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志</span> <br>long_query_time=2 <br></code></pre></td></tr></table></figure><p>配置完毕之后，通过以下指令重新启动MySQL服务器进行测试，查看慢日志文件中记录的信息<code>/var/lib/mysql/localhost-slow.log</code> ,   重启MySQL服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart mysqld <br></code></pre></td></tr></table></figure><p>然后，再次查看开关情况，慢查询日志就已经打开了。</p><h4 id="5-3、profile详情"><a href="#5-3、profile详情" class="headerlink" title="5.3、profile详情"></a>5.3、profile详情</h4><p>show profiles 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。通过have_profiling参数，能够看到当前MySQL是否支持profile操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> @<span class="hljs-variable">@have_profiling</span> ; <br></code></pre></td></tr></table></figure><p>当前MySQL是支持 profile操作的，但是开关是关闭的。可以通过set语句在session&#x2F;global级别开启profiling：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> profiling <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>开关已经打开了，接下来，我们所执行的SQL语句，都会被MySQL记录，并记录执行时间消耗到哪儿去了<br>执行一系列的业务SQL的操作，然后通过如下指令查看指令的执行耗时：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看每一条SQL的耗时基本情况 </span><br><span class="hljs-keyword">show</span> profiles; <br><span class="hljs-comment">-- 查看指定query_id的SQL语句各个阶段的耗时情况 </span><br><span class="hljs-keyword">show</span> profile <span class="hljs-keyword">for</span> query query_id; <br><span class="hljs-comment">-- 查看指定query_id的SQL语句CPU的使用情况 </span><br><span class="hljs-keyword">show</span> profile cpu <span class="hljs-keyword">for</span> query query_id;<br></code></pre></td></tr></table></figure><h4 id="5-4、explain执行计划"><a href="#5-4、explain执行计划" class="headerlink" title="5.4、explain执行计划"></a>5.4、explain执行计划</h4><p>explain 或者 desc命令获取MySQL如何执行select语句的信息，包括在select语句执行过程中表现如何连接和连接的顺序。</p><p><strong>1、语法:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 直接在<span class="hljs-keyword">select</span> 语句之前加上关键字 explain <span class="hljs-operator">/</span> <span class="hljs-keyword">desc</span><br>explain <span class="hljs-keyword">select</span>语句；<br></code></pre></td></tr></table></figure><p><strong>2、explain 执行计划中各个字段的含义:</strong></p><table><thead><tr><th><strong>字段</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号，表示查询中执行select子句或者是操作表的顺序(id相同，执行顺序从上到下；id不同，值越大，越先执行)。</td></tr><tr><td>select_type</td><td>表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（SELECT&#x2F;WHERE之后包含了子查询）等</td></tr><tr><td>type*</td><td>表示连接类型，性能由好到差的连接类型为NULL、system、const、eq_ref、ref、range、 index、all 。</td></tr><tr><td>possible_key*</td><td>显示可能应用在这张表上的索引，一个或多个。</td></tr><tr><td>key*</td><td>实际使用的索引，如果为NULL，则没有使用索引。</td></tr><tr><td>key_len*</td><td>表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下， 长越短越好 。</td></tr><tr><td>rows</td><td>MySQL认为必须要执行查询的行数，在innodb引擎的表中，是一个估计值，可能并不总是准确的。</td></tr><tr><td>filtered</td><td>表示返回结果的行数占需读取行数的百分比， filtered 的值越大越好。</td></tr><tr><td>extra*</td><td>其他</td></tr></tbody></table><p>type：<code>唯一索引或主键：const</code><code>非唯一索引:ref</code></p><h3 id="6、索引使用原则"><a href="#6、索引使用原则" class="headerlink" title="6、索引使用原则"></a>6、索引使用原则</h3><h4 id="6-1、验证索引效率"><a href="#6-1、验证索引效率" class="headerlink" title="6.1、验证索引效率"></a>6.1、验证索引效率</h4><ul><li><ul><li>在未建立索引之前，执行SQL语句  查看SQL的耗时。</li><li>针对字段创建索引</li><li>再执行相同的SQL语句，再次查看SQL的耗时</li></ul></li></ul><h4 id="6-2、最左前缀法则"><a href="#6-2、最左前缀法则" class="headerlink" title="6.2、最左前缀法则"></a>6.2、最左前缀法则</h4><ul><li><ul><li>如果索引了多列（联合索引），要遵守最左前缀法则。</li><li>最左前缀法则指的是查询<strong>从索引的最左列开始，并且不跳过索引中的列。</strong></li><li>如果跳过某一列，索引将部分失效（后面的字段索引失效）</li></ul></li></ul><h4 id="6-3、索引失效情况"><a href="#6-3、索引失效情况" class="headerlink" title="6.3、索引失效情况"></a>6.3、索引失效情况</h4><h5 id="6-3-1、范围查询"><a href="#6-3-1、范围查询" class="headerlink" title="6.3.1、范围查询"></a>6.3.1、范围查询</h5><p>联合索引中，出现范围查询(&gt;、&lt;)，范围查询右侧的列索引失效。<br>在使用联合索引时，如果需要使用范围查询，尽量带上&#x3D;号 （&gt;&#x3D;、&lt;&#x3D;）</p><h5 id="6-3-2、索引列运算"><a href="#6-3-2、索引列运算" class="headerlink" title="6.3.2、索引列运算"></a>6.3.2、索引列运算</h5><p>在索引列上进行运算操作，索引将失效</p><h5 id="6-3-3、字符串不加引号"><a href="#6-3-3、字符串不加引号" class="headerlink" title="6.3.3、字符串不加引号"></a>6.3.3、字符串不加引号</h5><p>字符串类型字段使用时，不加引号，索引将失效</p><h5 id="6-3-4、模糊查询"><a href="#6-3-4、模糊查询" class="headerlink" title="6.3.4、模糊查询"></a>6.3.4、模糊查询</h5><p>如果仅仅是尾部模糊匹配，索引不会失效；<br>如果是头部模糊匹配，索引失效</p><h5 id="6-3-5、or-连接的条件"><a href="#6-3-5、or-连接的条件" class="headerlink" title="6.3.5、or 连接的条件"></a>6.3.5、or 连接的条件</h5><p>用 or 分隔开的条件，如果 or 前的条件中的列有索引，而后面的列中没有索引，那么设计的索引都不会被用到。</p><h5 id="6-3-6、数据分布影响"><a href="#6-3-6、数据分布影响" class="headerlink" title="6.3.6、数据分布影响"></a>6.3.6、数据分布影响</h5><p>如果MySQL评估使用索引会比全表更慢，则不使用索引。</p><h4 id="6-4、SQL提示："><a href="#6-4、SQL提示：" class="headerlink" title="6.4、SQL提示："></a>6.4、SQL提示：</h4><p>SQL提示是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的<br>有三个：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- use index使用哪个索引</span><br>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 表名 use index(索引名) <span class="hljs-keyword">where</span>条件;<br><span class="hljs-comment">-- ignore index;不使用哪个索引</span><br>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 表名 ignore index(索引名) <span class="hljs-keyword">where</span>条件;<br><span class="hljs-comment">-- force index;  必须使用哪个索引</span><br>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 表名 force index(索引名) <span class="hljs-keyword">where</span>条件;<br></code></pre></td></tr></table></figure><h4 id="6-5、覆盖索引-回表查询"><a href="#6-5、覆盖索引-回表查询" class="headerlink" title="6.5、覆盖索引 回表查询"></a>6.5、覆盖索引 回表查询</h4><p>尽量使用覆盖索引，减少使用 select  *。<code>可以避免回表查询</code><br>覆盖索引：查询使用了索引，并且需要返回的列，在该索引中已经全部能都找到</p><table><thead><tr><th><strong>Extra</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>Using where; Using Index</td><td>查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据</td></tr><tr><td>Using index condition</td><td>查找使用了索引，但是需要回表查询数据</td></tr></tbody></table><h4 id="6-6、前缀索引"><a href="#6-6、前缀索引" class="headerlink" title="6.6、前缀索引"></a>6.6、前缀索引</h4><p>当字段类型为字符串（varchar，text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO， 影响查询效率。此时可以只将字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。<br><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> index 索引名 <span class="hljs-keyword">on</span> 表名(列名(n));<br></code></pre></td></tr></table></figure><p>前缀的长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高， 唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span> 字段名)<span class="hljs-operator">/</span><span class="hljs-built_in">count</span>(字段名) <span class="hljs-keyword">from</span> 表名;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span> <span class="hljs-built_in">substring</span>(字段名,第几个字符,截取几位))<span class="hljs-operator">/</span><span class="hljs-built_in">count</span>(字段名) <span class="hljs-keyword">from</span> 表名;<br></code></pre></td></tr></table></figure><h4 id="6-7、单列索引和联合索引"><a href="#6-7、单列索引和联合索引" class="headerlink" title="6.7、单列索引和联合索引"></a>6.7、单列索引和联合索引</h4><p>推荐使用联合索引（多列索引）</p><h3 id="7、索引设计原则"><a href="#7、索引设计原则" class="headerlink" title="7、索引设计原则"></a>7、索引设计原则</h3><ul><li>1). 针对于数据量较大，且查询比较频繁的表建立索引。</li><li>2). 针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引。</li><li>3). 尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。</li><li>4). 如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。</li><li>5). 尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。</li><li>6). 要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。</li><li>7). 如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询。</li></ul><h2 id="八、SQL优化"><a href="#八、SQL优化" class="headerlink" title="八、SQL优化"></a>八、SQL优化</h2><h3 id="1、插入数据"><a href="#1、插入数据" class="headerlink" title="1、插入数据"></a>1、插入数据</h3><h4 id="1-1、insert优化"><a href="#1-1、insert优化" class="headerlink" title="1.1、insert优化"></a>1.1、insert优化</h4><ul><li><ul><li>1、批量插入–（500-1000条）</li><li>2、手动提交事务</li><li>3、主键顺序插入</li></ul></li></ul><h4 id="1-2、如果一次性需要插入大批量数据-比如-几百万的记录-，使用insert语句插入性能较低，此时使用MySQL数据库的load指令进行插入。"><a href="#1-2、如果一次性需要插入大批量数据-比如-几百万的记录-，使用insert语句插入性能较低，此时使用MySQL数据库的load指令进行插入。" class="headerlink" title="1.2、如果一次性需要插入大批量数据(比如: 几百万的记录)，使用insert语句插入性能较低，此时使用MySQL数据库的load指令进行插入。"></a>1.2、如果一次性需要插入大批量数据(比如: 几百万的记录)，使用insert语句插入性能较低，此时使用MySQL数据库的<code>load</code>指令进行插入。</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">客户端连接服务端时，加上参数 -–local-infile</span> <br>mysql –-local-infile -uroot -p密码 <br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关 </span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> local_infile <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <br><br><span class="hljs-comment">-- 执行load指令将准备好的数据，加载到表结构中 </span><br>load data <span class="hljs-keyword">local</span> infile <span class="hljs-string">&#x27;本地文件路径&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> 表名 fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;,&#x27;</span> lines terminate <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\n&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>fields terminated by 后面跟字段之间的分隔符</li><li>lines terminated by 后面跟行之间的分隔符</li></ul><p>主键顺序插入性能高于乱序插入</p><h3 id="2、主键优化"><a href="#2、主键优化" class="headerlink" title="2、主键优化"></a>2、主键优化</h3><ul><li>数据组织方式</li></ul><p>在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表(index organized table IOT)。</p><ul><li>页分裂</li><li><ul><li><ul><li>页可以为空，也可以填充一半，也可以填充100%。每个页包含了2-N行数据(如果一行数据过大，会行溢出)，根据主键排列。</li><li>主键乱序插入</li></ul></li></ul></li><li>页合并</li><li><ul><li><ul><li>当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。</li><li>当页中删除的记录达到 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前或后）看看是否可以将两个页合并以优化空间使用。</li><li>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或者创建索引时指定。</li></ul></li></ul></li><li>索引设计原则：</li><li><ul><li>满足业务需求的情况下，<strong>尽量降低主键的长度</strong>。</li><li>插入数据时，<strong>尽量选择顺序插入</strong>，选择使用AUTO_INCREMENT自增主键。</li><li><strong>尽量不要使用UUID做主键或者是其他自然主键</strong>，如身份证号。</li><li>业务操作时，<strong>避免对主键的修改</strong>。</li></ul></li></ul><h3 id="3、order-by-优化"><a href="#3、order-by-优化" class="headerlink" title="3、order by 优化"></a>3、order by 优化</h3><ul><li>MySQL的排序，有两种方式：</li><li><ul><li>Using filesort : 通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区sortbuffer中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。</li><li>Using index : 通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高。</li></ul></li></ul><p>对于以上的两种排序方式，Using index的性能高，而Using filesort的性能低，我们在优化排序操作时，尽量要优化为 Using index。</p><ul><li><strong>order by优化原则:</strong></li><li><ul><li>A. 根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则。</li><li>B. 尽量使用覆盖索引。</li><li>C. 多字段排序, 一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC&#x2F;DESC）。</li><li>D. 如果不可避免的出现filesort，大数据量排序时，可以适当增大排序缓冲区大小sort_buffer_size(默认256k)。</li></ul></li></ul><h3 id="4、group-by-优化"><a href="#4、group-by-优化" class="headerlink" title="4、group by 优化"></a>4、group by 优化</h3><ul><li>A. 在分组操作时，可以通过索引来提高效率。</li><li>B. 分组操作时，索引的使用也是满足<strong>最左前缀法则</strong>的。</li></ul><h3 id="5、limit-优化"><a href="#5、limit-优化" class="headerlink" title="5、limit 优化"></a>5、limit 优化</h3><ul><li>通过 <strong>覆盖索引 + 子查询</strong> 的方式进行优化</li></ul><h3 id="6、count-优化"><a href="#6、count-优化" class="headerlink" title="6、count 优化"></a>6、count 优化</h3><ul><li>按照效率排序的话，**<code>count(字段) &lt; count(主键  id) &lt; count(1) ≈ count(*)</code>*<em>，所以尽量使用 count(</em>)。</li></ul><h3 id="7、update-优化"><a href="#7、update-优化" class="headerlink" title="7、update 优化"></a>7、update 优化</h3><ul><li>InnoDB的行锁是针对索引加的锁，不是针对记录加的锁 ,并且该索引不能失效，否则会从行锁升级为表锁 。</li><li>总结：<strong>尽量根据索引的字段设置条件，这样只是行锁</strong>。如果不是索引字段，就会升级为表锁。</li></ul><h2 id="九、-视图、存储过程、触发器"><a href="#九、-视图、存储过程、触发器" class="headerlink" title="九、 视图、存储过程、触发器"></a>九、 视图、存储过程、触发器</h2><h3 id="1、视图"><a href="#1、视图" class="headerlink" title="1、视图"></a>1、视图</h3><h4 id="1-1、视图的定义"><a href="#1-1、视图的定义" class="headerlink" title="1.1、视图的定义"></a>1.1、视图的定义</h4><ul><li>视图（View）是一种虚拟存在的表。视图中的数据并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。</li><li>通俗的讲，视图只保存了查询的SQL逻辑，不保存查询结果。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。</li></ul><h4 id="1-2、语法"><a href="#1-2、语法" class="headerlink" title="1.2、语法"></a>1.2、语法</h4><h5 id="1-2-1、创建视图"><a href="#1-2-1、创建视图" class="headerlink" title="1.2.1、创建视图"></a>1.2.1、创建视图</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> [<span class="hljs-keyword">or</span> replace] <span class="hljs-keyword">view</span> 视图名称[(列名)] <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span>语句 [<span class="hljs-keyword">with</span> [<span class="hljs-keyword">cascaded</span><span class="hljs-operator">|</span><span class="hljs-keyword">local</span>] <span class="hljs-keyword">check</span> option]<br></code></pre></td></tr></table></figure><h5 id="1-2-2、查询视图"><a href="#1-2-2、查询视图" class="headerlink" title="1.2.2、查询视图"></a>1.2.2、查询视图</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看创建视图语句</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> 视图名称;<br><br><span class="hljs-comment">-- 查看视图数据</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 视图名称...;<br></code></pre></td></tr></table></figure><h5 id="1-2-3、修改视图"><a href="#1-2-3、修改视图" class="headerlink" title="1.2.3、修改视图"></a>1.2.3、修改视图</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> [<span class="hljs-keyword">or</span> replace] <span class="hljs-keyword">view</span> 视图名称[(列名)] <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span>语句 [<span class="hljs-keyword">with</span> [<span class="hljs-keyword">cascaded</span><span class="hljs-operator">|</span><span class="hljs-keyword">local</span>] <span class="hljs-keyword">check</span> option];<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">view</span> 视图名称[(列名)] <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span>语句 [<span class="hljs-keyword">with</span> [<span class="hljs-keyword">cascaded</span><span class="hljs-operator">|</span><span class="hljs-keyword">local</span>] <span class="hljs-keyword">check</span> option]<br></code></pre></td></tr></table></figure><h5 id="1-2-4、删除视图"><a href="#1-2-4、删除视图" class="headerlink" title="1.2.4、删除视图"></a>1.2.4、删除视图</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> [if <span class="hljs-keyword">exists</span>] 视图名称,[视图名称]...;<br></code></pre></td></tr></table></figure><h4 id="1-3、视图的检查选项"><a href="#1-3、视图的检查选项" class="headerlink" title="1.3、视图的检查选项"></a>1.3、视图的检查选项</h4><p>当使用with check option子句创建视图时，MySQL会通过视图检查正在更改的每个行，例如 插入，更新，删除，以使其符合视图的定义。 MySQL允许基于另一个视图创建视图，它还会检查依赖视图中的规则以保持一致性。为了确定检查的范围，mysql提供了两个选项： cascaded 和 local，默认值为 cascaded 。</p><h4 id="1-4、视图更新的条件"><a href="#1-4、视图更新的条件" class="headerlink" title="1.4、视图更新的条件"></a>1.4、视图更新的条件</h4><p>要使视图可更新，视图中的行与基础表中的行之间必须存在<strong>一对一</strong>的关系。如果视图包含以下任何一项，则该视图不可更新：</p><ul><li><ul><li>A. 聚合函数或窗口函数（sum()、 min()、 max()、 count()等）</li><li>B. distinct</li><li>C. group by</li><li>D. having</li><li>E. union 或者 union all</li></ul></li></ul><h4 id="1-5、视图的作用"><a href="#1-5、视图的作用" class="headerlink" title="1.5、视图的作用"></a>1.5、视图的作用</h4><p>1、简单</p><p>视图不仅可以简化用户对数据的理解，也可以简化他们的操作。那些被经常使用的查询可以被定义为视图，从而使得用户不必为以后的操作每次指定全部的条件。</p><p>2、安全</p><p>数据库可以授权，但不能授权到数据库特定行和特定的列上。通过视图用户只能查询和修改他们所能见到的数据</p><p>3、数据独立</p><p>视图可帮助用户屏蔽真实表结构变化带来的影响。</p><h3 id="2、存储过程"><a href="#2、存储过程" class="headerlink" title="2、存储过程"></a>2、存储过程</h3><h4 id="2-1、介绍"><a href="#2-1、介绍" class="headerlink" title="2.1、介绍"></a>2.1、介绍</h4><p>存储过程是事先经过编译并存储在数据库中的一段 SQL 语句的集合，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。</p><p>存储过程思想上很简单，就是数据库 SQL 语言层面的代码封装与重用。</p><h4 id="2-2、特点"><a href="#2-2、特点" class="headerlink" title="2.2、特点"></a>2.2、特点</h4><ul><li>封装，复用 ———————–&gt; 可以把某一业务SQL封装在存储过程中，需要用到的时候直接调用即可。</li><li>可以接收参数，也可以返回数据 ——–&gt; 再存储过程中，可以传递参数，也可以接收返回值。</li><li>减少网络交互，效率提升 ————-&gt; 如果涉及到多条SQL，每执行一次都是一次网络传输。 而如果封装在存储过程中，我们只需要网络交互一次可能就可以了。</li></ul><h4 id="2-3、语法"><a href="#2-3、语法" class="headerlink" title="2.3、语法"></a>2.3、语法</h4><h5 id="2-3-1、创建存储过程"><a href="#2-3-1、创建存储过程" class="headerlink" title="2.3.1、创建存储过程"></a>2.3.1、创建存储过程</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> 存储过程名称（[参数列表]）<br><span class="hljs-keyword">begin</span><br>    <span class="hljs-comment">-- SQL 语句</span><br><span class="hljs-keyword">end</span>;<br></code></pre></td></tr></table></figure><h5 id="2-3-2、调用"><a href="#2-3-2、调用" class="headerlink" title="2.3.2、调用"></a>2.3.2、调用</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">call</span> 存储过程名称([参数]);<br></code></pre></td></tr></table></figure><h5 id="2-3-3、查看"><a href="#2-3-3、查看" class="headerlink" title="2.3.3、查看"></a>2.3.3、查看</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询指定数据库的存储过程及状态信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> information_schema.routines <span class="hljs-keyword">where</span> routine_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库名称&#x27;</span>;<br><br><span class="hljs-comment">-- 查询某个存储过程的定义</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> 存储过程名称;<br></code></pre></td></tr></table></figure><h5 id="2-3-4、删除存储过程"><a href="#2-3-4、删除存储过程" class="headerlink" title="2.3.4、删除存储过程"></a>2.3.4、删除存储过程</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">procedure</span> [if <span class="hljs-keyword">exists</span>] 存储过程名称;<br></code></pre></td></tr></table></figure><p><strong>注意：在命令行种，执行创建存储过程的SQL时，需要通过关键字delimiter指定SQL语句的结束符</strong></p><h4 id="2-4、变量"><a href="#2-4、变量" class="headerlink" title="2.4、变量"></a>2.4、变量</h4><p>在MySQL中变量分为三种类型: 系统变量、用户定义变量、局部变量。</p><h5 id="2-4-1、系统变量"><a href="#2-4-1、系统变量" class="headerlink" title="2.4.1、系统变量"></a>2.4.1、系统变量</h5><p>系统变量 是MySQL服务器提供，不是用户定义的，属于服务器层面。分为全局变量（GLOBAL）、会话变量（SESSION）。</p><p>1、查看系统变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看所有系统变量</span><br><span class="hljs-keyword">show</span> [session<span class="hljs-operator">|</span><span class="hljs-keyword">global</span>] variables;<br><br><span class="hljs-comment">-- 可以通过like模糊匹配方式查找变量</span><br><span class="hljs-keyword">show</span> [session<span class="hljs-operator">|</span><span class="hljs-keyword">global</span>] variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;...&#x27;</span>;<br><br><span class="hljs-comment">-- 查看指定变量的值</span><br><span class="hljs-keyword">select</span> @@[session<span class="hljs-operator">|</span><span class="hljs-keyword">global</span>] 系统变量名;<br></code></pre></td></tr></table></figure><p>2、设置系统变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> [session<span class="hljs-operator">|</span><span class="hljs-keyword">global</span>] 系统变量名<span class="hljs-operator">=</span>值;<br><span class="hljs-keyword">set</span> @@[session<span class="hljs-operator">|</span><span class="hljs-keyword">global</span>] 系统变量名<span class="hljs-operator">=</span>值;<br></code></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li>如果没有指定SESSION&#x2F;GLOBAL，默认是SESSION，会话变量</li><li><ul><li>mysql服务重新启动之后，所设置的全局参数会失效，要想不失效，可以在 &#x2F;etc&#x2F;my.cnf 中配置</li></ul></li><li>A. 全局变量(GLOBAL): 全局变量针对于所有的会话。</li><li>B. 会话变量(SESSION): 会话变量针对于单个会话，在另外一个会话窗口就不生效了。</li></ul><h5 id="2-4-2、用户自定义变量"><a href="#2-4-2、用户自定义变量" class="headerlink" title="2.4.2、用户自定义变量"></a>2.4.2、用户自定义变量</h5><p><strong>用户定义变量</strong> 是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用 <code>@变量名</code> 使用就可以。其作用域为当前连接。</p><p>1、赋值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> @变量名<span class="hljs-operator">=</span>值[,@变量名<span class="hljs-operator">=</span>值]...;<br><span class="hljs-keyword">set</span> @变量名:<span class="hljs-operator">=</span>值[,@变量名:<span class="hljs-operator">=</span>值]...;<br><span class="hljs-keyword">select</span> @变量名:<span class="hljs-operator">=</span>值[,@变量名:<span class="hljs-operator">=</span>值]...;<br><span class="hljs-keyword">select</span> 字段名 <span class="hljs-keyword">into</span> @变量名 <span class="hljs-keyword">from</span> 表名;<br></code></pre></td></tr></table></figure><p>2、使用</p><ul><li><strong>注意: 用户定义的变量无需对其进行声明或初始化，只不过获取到的值为NULL。</strong></li></ul><h5 id="2-4-3、局部变量"><a href="#2-4-3、局部变量" class="headerlink" title="2.4.3、局部变量"></a>2.4.3、局部变量</h5><p>​局部变量 是根据需要定义的在局部生效的变量，<strong>访问之前，需要 <code>declare</code> 声明</strong>。可用作存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的BEGIN … END块。</p><p>1、声明</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">declare</span> 局部变量名 变量类型[<span class="hljs-keyword">default</span> ...];<br></code></pre></td></tr></table></figure><p>2、赋值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> 变量名:<span class="hljs-operator">=</span>值;<br><span class="hljs-keyword">set</span> 变量名<span class="hljs-operator">=</span>值;<br><span class="hljs-keyword">select</span> 字段名 <span class="hljs-keyword">into</span> 变量名 <span class="hljs-keyword">from</span> 表名 ...;<br></code></pre></td></tr></table></figure><h4 id="2-5、if-判断"><a href="#2-5、if-判断" class="headerlink" title="2.5、if 判断"></a>2.5、if 判断</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">if 条件<span class="hljs-number">1</span> <span class="hljs-keyword">then</span><br>...<br>elseif 条件<span class="hljs-number">2</span> <span class="hljs-keyword">then</span><br>...<br><span class="hljs-keyword">else</span><br>...<br><span class="hljs-keyword">end</span> if;<br></code></pre></td></tr></table></figure><h4 id="2-6、参数"><a href="#2-6、参数" class="headerlink" title="2.6、参数"></a>2.6、参数</h4><p>参数的类型，主要分为以下三种：IN、OUT、INOUT。 具体的含义如下：</p><table><thead><tr><th><strong>类型</strong></th><th><strong>含义</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>in</td><td>该类参数作为输入，也就是需要调用时传入值</td><td>默认</td></tr><tr><td>out</td><td>该类参数作为输出，也就是该参数可以作为返回值</td><td></td></tr><tr><td>inout</td><td>既可以作为输入参数，也可以作为输出参数</td><td></td></tr></tbody></table><p><strong>用法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> 存储过程名称([<span class="hljs-keyword">in</span><span class="hljs-operator">/</span><span class="hljs-keyword">out</span><span class="hljs-operator">/</span><span class="hljs-keyword">inout</span> 参数名 参数类型])<br><span class="hljs-keyword">begin</span><br><span class="hljs-comment">-- SQL语句</span><br><span class="hljs-keyword">end</span>;<br></code></pre></td></tr></table></figure><h4 id="2-7、case-判断"><a href="#2-7、case-判断" class="headerlink" title="2.7、case 判断"></a>2.7、case 判断</h4><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">case</span>  case_value<br>    <span class="hljs-keyword">when</span>  when_value1  <span class="hljs-keyword">then</span>  statement_list1<br>    [<span class="hljs-keyword">when</span>  when_value2  <span class="hljs-keyword">then</span>  statement_list2]...<br>    [<span class="hljs-keyword">else</span>  statement_list]<br><span class="hljs-keyword">end</span>  <span class="hljs-keyword">case</span>;<br><span class="hljs-comment">-- 或</span><br><span class="hljs-keyword">case</span><br>    <span class="hljs-keyword">when</span>  search_condition1  <span class="hljs-keyword">then</span>  statement_list1<br>    [<span class="hljs-keyword">when</span>  search_condition2  <span class="hljs-keyword">then</span>  statement_list2]...<br>    [<span class="hljs-keyword">else</span>  statement_list]<br><span class="hljs-keyword">end</span>  <span class="hljs-keyword">case</span>; <br></code></pre></td></tr></table></figure><h4 id="2-8、while-循环"><a href="#2-8、while-循环" class="headerlink" title="2.8、while 循环"></a>2.8、while 循环</h4><p>while 循环是有条件的循环控制语句。满足条件后，再执行循环体中的SQL语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 先判断条件，如果条件为<span class="hljs-literal">true</span>，则执行逻辑，否则，不执行逻辑<br>while 条件 do<br>    <span class="hljs-keyword">SQL</span>逻辑<br><span class="hljs-keyword">end</span>  while;<br></code></pre></td></tr></table></figure><h4 id="2-9、repeat-循环"><a href="#2-9、repeat-循环" class="headerlink" title="2.9、repeat 循环"></a>2.9、repeat 循环</h4><p>repeat是有条件的循环控制语句，当满足条件的时候退出循环。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 先执行一次逻辑，然后判断逻辑是否满足，如果满足则退出；如果不满足则继续下一次循环<br>repeat <br>    <span class="hljs-keyword">SQL</span>逻辑...<br>    until 条件<br><span class="hljs-keyword">end</span> repeat;<br></code></pre></td></tr></table></figure><h4 id="2-10、loop-循环"><a href="#2-10、loop-循环" class="headerlink" title="2.10、loop 循环"></a>2.10、loop 循环</h4><p>loop实现简单的循环，如果不在SQL逻辑中增加退出循环的条件，可以用来实现简单的死循环。loop可以配合一下两个语句使用：</p><ul><li>leave：  配合循环使用，退出循环</li><li>iterate：必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">[loop名:] loop<br>    <span class="hljs-keyword">SQL</span>逻辑...<br><span class="hljs-keyword">end</span> loop [loop名];<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">leave loop名;  <span class="hljs-comment">-- 退出指定标记的循环体</span><br>iterate loop名;  <span class="hljs-comment">-- 直接进入下一次循环</span><br></code></pre></td></tr></table></figure><h4 id="2-11、游标-cursor"><a href="#2-11、游标-cursor" class="headerlink" title="2.11、游标 cursor"></a>2.11、游标 <code>cursor</code></h4><p>游标（cursor）是用来存储查询结果集的数据类型，在存储过程和函数中可以使用游标对结果集进行循环的处理。游标的使用包括游标的声明、open、fetch和close。</p><p>1、声明游标</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">declare</span> 游标名称 <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span> 查询语句;<br></code></pre></td></tr></table></figure><p>2、打开游标</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">open</span> 游标名称;<br></code></pre></td></tr></table></figure><p>3、获取游标记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">fetch</span> 游标名称 <span class="hljs-keyword">into</span> 变量[,变量];<br></code></pre></td></tr></table></figure><p>4、关闭游标</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">close</span> 游标名称;<br></code></pre></td></tr></table></figure><h4 id="2-12、条件处理程序"><a href="#2-12、条件处理程序" class="headerlink" title="2.12、条件处理程序"></a>2.12、条件处理程序</h4><p>条件处理程序（Handler）可以用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">declare</span> handler_action条件处理程序类型 handler <span class="hljs-keyword">for</span> condition_value条件[,condition_value]...  statement;<br><br>handler_action:<br>    continue：继续执行当前程序<br>    exit：终止执行当前程序<br>condition_value：<br>    <span class="hljs-keyword">sqlstate</span>： sqlstate_value：状态码，如 <span class="hljs-number">02000</span><br>    <span class="hljs-keyword">sqlwarning</span>：所有以<span class="hljs-number">01</span>开头的<span class="hljs-keyword">sqlstate</span>代码的简写<br>    <span class="hljs-keyword">not</span> found：所有以<span class="hljs-number">02</span>开头的<span class="hljs-keyword">sqlstate</span>代码的简写<br>    <span class="hljs-keyword">sqlexception</span>：所有没有被<span class="hljs-keyword">sqlwarning</span>或<span class="hljs-keyword">not</span> found捕获的<span class="hljs-keyword">sqlstate</span>代码的简写<br></code></pre></td></tr></table></figure><h3 id="3、存储函数"><a href="#3、存储函数" class="headerlink" title="3、存储函数"></a>3、存储函数</h3><p>存储函数是有返回值的存储过程，存储函数的参数只能是in类型的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> 存储函数名称([参数列表])<br><span class="hljs-keyword">returns</span> type [characteristic ...]<br><span class="hljs-keyword">begin</span><br>    <span class="hljs-comment">-- sql语句</span><br>    <span class="hljs-keyword">return</span> ...;<br><span class="hljs-keyword">end</span>；<br><br>characteristic说明：<br><span class="hljs-operator">-</span> <span class="hljs-keyword">deterministic</span>：相同的输入参数总是产生相同的结果<br><span class="hljs-operator">-</span> <span class="hljs-keyword">no</span> <span class="hljs-keyword">sql</span>：不包含<span class="hljs-keyword">sql</span>语句<br><span class="hljs-operator">-</span> <span class="hljs-keyword">reads</span> <span class="hljs-keyword">sql</span> data：包含读取数据的语句，但不包含写入数据的语句<br></code></pre></td></tr></table></figure><h3 id="4、触发器"><a href="#4、触发器" class="headerlink" title="4、触发器"></a>4、触发器</h3><ul><li>触发器是与表有关的数据库对象，指在insert&#x2F;update&#x2F;delete之前面(before)或之后(after)，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性, 日志记录 , 数据校验等操作 。</li><li>使用别名 old 和 new 来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发，不支持语句级触发。</li></ul><table><thead><tr><th><strong>触发器类型</strong></th><th><strong>NEW 和 OLD</strong></th></tr></thead><tbody><tr><td>INSERT 型触发器</td><td>NEW 表示将要或者已经新增的数据</td></tr><tr><td>UPDATE 型触发器</td><td>OLD 表示修改之前的数据 , NEW 表示将要或已经修改后的数据</td></tr><tr><td>DELETE 型触发器</td><td>OLD 表示将要或者已经删除的数据</td></tr></tbody></table><p><strong>语法：</strong></p><p>1、创建触发器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> 触发器名<br>before<span class="hljs-operator">/</span>after <span class="hljs-keyword">insert</span><span class="hljs-operator">/</span><span class="hljs-keyword">update</span><span class="hljs-operator">/</span><span class="hljs-keyword">delete</span><br><span class="hljs-keyword">on</span> 表名 <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-type">row</span>  <span class="hljs-comment">-- 行级触发器</span><br><span class="hljs-keyword">begin</span><br>    触发器语句；<br><span class="hljs-keyword">end</span>;<br></code></pre></td></tr></table></figure><p>2、查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> triggers;<br></code></pre></td></tr></table></figure><p>3、删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">trigger</span> [数据库名称] 触发器名称;<br></code></pre></td></tr></table></figure><h2 id="十、锁"><a href="#十、锁" class="headerlink" title="十、锁"></a>十、锁</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p>锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源（CPU、RAM、I&#x2F;O）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p><p>MySQL中的锁，按照锁的粒度分，分为以下三类：</p><ul><li>全局锁：锁定数据库中的所有表。</li><li>表级锁：每次操作锁住整张表。</li><li>行级锁：每次操作锁住对应的行数据。</li></ul><h3 id="2、全局锁"><a href="#2、全局锁" class="headerlink" title="2、全局锁"></a>2、全局锁</h3><p>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语句，已经更新操作的事务提交语句都将被阻塞。</p><p>其典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 加上全局锁</span><br>flush tables <span class="hljs-keyword">with</span> read lock;<br><br><span class="hljs-comment">-- 数据备份</span><br>mysqldump <span class="hljs-operator">-</span>h主机地址 <span class="hljs-operator">-</span>u账号 <span class="hljs-operator">-</span>p密码 数据库名 <span class="hljs-operator">&gt;</span> 存储路径<br><br><span class="hljs-comment">-- 释放锁</span><br>unlock tables;<br></code></pre></td></tr></table></figure><h4 id="全局锁的特点："><a href="#全局锁的特点：" class="headerlink" title="全局锁的特点："></a>全局锁的特点：</h4><p><strong>数据库中加全局锁，是一个比较重的操作，存在以下问题：</strong></p><ul><li>1、如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆。</li><li>2、如果在从库上备份，那么在备份期间从库不能执行主库同步过来的二进制日志（binlog），会导致主从延迟。</li></ul><p>在InnoDB引擎中，我们可以在备份时加上参数 –single-transaction 参数来完成不加锁的一致性数据备份。</p><p><code>mysqldump --single-transaction -u账号 –p密码 数据库名 &gt; 存储路径</code></p><h3 id="3、表级锁"><a href="#3、表级锁" class="headerlink" title="3、表级锁"></a>3、表级锁</h3><p>表级锁，每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。</p><p>对于表级锁，主要分为以下三类：</p><ul><li>表锁</li><li>元数据锁（meta data lock，MDL）</li><li>意向锁</li></ul><h4 id="3-1、表锁"><a href="#3-1、表锁" class="headerlink" title="3.1、表锁"></a>3.1、表锁</h4><p>对于表锁，分为两类：</p><ul><li>表共享读锁（read lock）  读锁</li><li>表独占写锁（write lock） 写锁</li></ul><h5 id="3-1-1、语法："><a href="#3-1-1、语法：" class="headerlink" title="3.1.1、语法："></a>3.1.1、语法：</h5><ul><li>加锁：<code>lock tables 表名... read/write;</code></li><li>释放锁：<code>unlock tables;</code>  &#x2F;  <code>客户端断开连接</code></li></ul><p><strong>读锁</strong>：加了读锁之后，所有客户端只能读，不能写</p><p><strong>写锁</strong>：加了写锁之后，当前客户端可以读写，其他客户端不能读、不能写</p><p><strong>结论: 读锁不会阻塞其他客户端的读，但是会阻塞写。写锁既会阻塞其他客户端的读，又会阻塞其他客户端的写。</strong></p><h4 id="3-2、元数据锁"><a href="#3-2、元数据锁" class="headerlink" title="3 .2、元数据锁"></a>3 .2、元数据锁</h4><p>meta data lock , 元数据锁，简写MDL。</p><p>MDL加锁过程是系统自动控制，无需显式使用，在访问一张表的时候会自动加上。MDL锁主要作用是维护表元数据的数据一致性，在表上有活动事务的时候，不可以对元数据进行写入操作。<strong>为了避免DML与DDL冲突，保证读写的正确性。</strong></p><p>这里的元数据，大家可以简单理解为就是一张表的表结构。 也就是说，某一张表涉及到未提交的事务时，是不能够修改这张表的表结构的。</p><p>在MySQL5.5中引入了MDL，**当对一张表进行增删改查的时候，加MDL读锁(共享)<strong>；</strong>当对表结构进行变更操作的时候，加MDL写锁(排他)**。</p><p><strong>常见的SQL操作时，所添加的元数据锁：</strong></p><table><thead><tr><th><strong>对应SQL</strong></th><th><strong>锁类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>lock tables xxx read &#x2F; write</td><td>SHARED_READ_ONLY &#x2F;SHARED_NO_READ_WRITE</td><td></td></tr><tr><td>select语句 、select … lock in share mode（共享锁）</td><td>SHARED_READ</td><td>与SHARED_READ、SHARED_WRITE兼容，与EXCLUSIVE互斥</td></tr><tr><td>insert 、update、delete、select … for  update</td><td>SHARED_WRITE</td><td>与SHARED_READ、SHARED_WRITE兼容，与EXCLUSIVE互斥</td></tr><tr><td>alter table …</td><td>exclusive（排他）</td><td>与其他的MDL都互斥</td></tr></tbody></table><p><strong>查看元数据锁</strong> <code>select object_type,object_schema,object_name,lock_type,lock_duration from performance_schema.metadata_locks;</code></p><h4 id="3-3、意向锁"><a href="#3-3、意向锁" class="headerlink" title="3.3、意向锁"></a>3.3、意向锁</h4><p>为了避免DML在执行时，加的行锁与表锁的冲突，在InnoDB中引入了意向锁，使得表锁不用检查每行数据是否加锁，使用意向锁来减少表锁的检查</p><p><strong>意向锁的分类</strong></p><ul><li>意向共享锁(IS): 由语句select … lock in share mode添加 。 <strong>与表锁共享锁(read)兼容，与表锁排他锁(write)互斥</strong></li><li>意向排他锁(IX): 由insert、update、delete、select…for update添加 。<strong>与表锁共享锁(read)及排他锁(write)都互斥，意向锁之间不会互斥</strong></li></ul><p>一旦事务提交了，意向共享锁、意向排他锁，都会自动释放。</p><p><strong>查看意向锁及行锁的加锁情况：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> object_schema,object_name,index_name,lock_type,lock_mode,lock_data <span class="hljs-keyword">from</span> performance_schema.data_locks; <br></code></pre></td></tr></table></figure><h3 id="4、行级锁"><a href="#4、行级锁" class="headerlink" title="4、行级锁"></a>4、行级锁</h3><p>行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。应用在InnoDB存储引擎中。</p><p>InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的锁。对于行级锁，主要分为以下三类：</p><ul><li>行锁（Record Lock）：锁定单个行记录的锁，防止其他事务对此行进行update和delete。在RC、RR隔离级别下都支持。</li><li><ul><li>RC： read  commit<ul><li>RR:repeatable read</li></ul></li></ul></li><li>间隙锁（Gap Lock）：锁定索引记录间隙（不含该记录），确保索引记录间隙不变，防止其他事务在这个间隙进行insert，产生幻读。在RR隔离级别下都支持。</li><li>临键锁（Next-Key Lock）：行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap。在RR隔离级别下支持。</li></ul><h4 id="4-1、行锁"><a href="#4-1、行锁" class="headerlink" title="4.1、行锁"></a>4.1、行锁</h4><p>InnoDB实现了以下两种类型的行锁：</p><ul><li>共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排它锁。</li><li>排他锁（X）：允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁。</li></ul><p>两种行锁的兼容情况</p><table><thead><tr><th>当前锁类型 ｜请求锁类型–&gt;</th><th>S（共享锁）</th><th>X（排他锁）</th></tr></thead><tbody><tr><td>S（共享锁）</td><td>兼容</td><td>冲突</td></tr><tr><td>X（排他锁）</td><td>冲突</td><td>冲突</td></tr></tbody></table><table><thead><tr><th><strong>SQL</strong></th><th><strong>行锁类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>INSERT …</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>UPDATE …</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>DELETE …</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>SELECT（正常）</td><td>不加任何锁</td><td></td></tr><tr><td>SELECT … LOCK IN SHAREMODE</td><td>共享锁</td><td>需要手动在SELECT之后加LOCK IN SHARE MODE</td></tr><tr><td>SELECT … FOR UPDATE</td><td>排他锁</td><td>需要手动在SELECT之后加FOR UPDATE</td></tr></tbody></table><p>默认情况下，InnoDB在 REPEATABLE READ事务隔离级别运行，InnoDB使用 next-key 锁进行搜索和索引扫描，以防止幻读。</p><ul><li>1、针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁。</li><li>2、InnoDB的行锁是针对于索引加的锁，如果不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，此时 就会升级为表锁。</li></ul><h4 id="4-2、间隙锁-临键锁"><a href="#4-2、间隙锁-临键锁" class="headerlink" title="4.2、间隙锁&amp;临键锁"></a>4.2、间隙锁&amp;临键锁</h4><p>默认情况下，InnoDB在 REPEATABLE READ事务隔离级别运行，InnoDB使用 next-key 锁进行搜索和索引扫描，以防止幻读。</p><ul><li>1、索引上的等值查询(唯一索引)，给不存在的记录加锁时, 优化为间隙锁</li><li>2、索引上的等值查询(非唯一普通索引)，向右遍历时最后一个值不满足查询需求时，next-key锁 退化为间隙锁。</li><li>3、索引上的范围查询(唯一索引)–会访问到不满足条件的第一个值为止。</li></ul><p><strong>注意：间隙锁唯一目的是防止其他事务插入间隙。间隙锁可以共存，一个事务采用的间隙锁不会阻止另一个事务在同一间隙上采用间隙锁。</strong></p><h2 id="十一、InnoDB引擎"><a href="#十一、InnoDB引擎" class="headerlink" title="十一、InnoDB引擎"></a>十一、InnoDB引擎</h2><h3 id="1、逻辑存储结构"><a href="#1、逻辑存储结构" class="headerlink" title="1、逻辑存储结构"></a>1、逻辑存储结构</h3><h4 id="1-1、表空间-tablespace"><a href="#1-1、表空间-tablespace" class="headerlink" title="1.1、表空间 tablespace"></a>1.1、表空间 tablespace</h4><ul><li>每张表都有一个表空间【.ibd文件】，用于存储记录、索引等数据</li><li>一个 表空间 有多个 段</li></ul><h4 id="1-2、段-segment"><a href="#1-2、段-segment" class="headerlink" title="1.2、段 segment"></a>1.2、段 segment</h4><ul><li>段分为数据段、索引段、回滚段</li><li>InnoDB是索引组织表，数据段就是B+树的叶子节点；索引段就是B+树的非叶子节点</li><li>一个短中有多个区</li></ul><h4 id="1-3、区-extent-1M"><a href="#1-3、区-extent-1M" class="headerlink" title="1.3、区 extent  1M"></a>1.3、区 extent  1M</h4><ul><li>区是表空间中的单元结构，每个区的大小为1M</li><li>一个区中有多个页</li><li>默认情况下，InnoDB存储引擎页的大小为16K，所以一个区中共有连续64个连续的页</li></ul><h4 id="1-4、页-page-16K"><a href="#1-4、页-page-16K" class="headerlink" title="1.4、页 page  16K"></a>1.4、页 page  16K</h4><ul><li>页是InnoDB存储引擎磁盘管理的最小单元</li><li>每个页的大小默认为16KB，为了保证页的连续性，InnoDB存储引擎每次从磁盘申请4-5个区</li></ul><h4 id="1-5、行-row"><a href="#1-5、行-row" class="headerlink" title="1.5、行 row"></a>1.5、行 row</h4><ul><li>行，InnoDB存储引擎数据是按行进行存放的</li><li>在行中，默认有两个隐藏字段：</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud笔记</title>
    <link href="/2024/02/26/SpringCloud%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/02/26/SpringCloud%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、微服务技术栈导学"><a href="#一、微服务技术栈导学" class="headerlink" title="一、微服务技术栈导学"></a>一、微服务技术栈导学</h1><h2 id="1、组件介绍"><a href="#1、组件介绍" class="headerlink" title="1、组件介绍"></a>1、组件介绍</h2><ul><li>注册中心：记录微服务中每一个服务的IP、端口、功能</li><li>配置中心：统一管理配置</li><li>服务网关：方便对用户身份做校验</li><li>分布式缓存</li><li>分布式搜索</li><li>消息队列</li><li>分布式日志服务</li><li>系统监控链路追踪</li></ul><h2 id="2、分类"><a href="#2、分类" class="headerlink" title="2、分类"></a>2、分类</h2><ul><li>微服务治理</li><li>异步通信技术</li><li>缓存技术</li><li>搜索技术</li><li>持续集成技术</li></ul><h1 id="二、认识微服务"><a href="#二、认识微服务" class="headerlink" title="二、认识微服务"></a>二、认识微服务</h1><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>微服务是一种经过良好架构设计的分布式架构方案，微服务架构特征：</p><ul><li>单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责，避免重复业务开发 </li><li>面向服务：微服务对外暴露业务接口</li><li>自治：团队独立、技术独立、数据独立、部署独立</li><li>隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题</li></ul><p><img src="/img/springcloud_img/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E5%AF%B9%E6%AF%94.png" alt="微服务技术对比"></p><h2 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h2><p>SpringCloud 集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验：</p><p><img src="/img/springcloud_img/SpringCloud%E4%BB%8B%E7%BB%8D.png" alt="SpringCloud介绍"></p><h1 id="三、服务拆分及远程调用"><a href="#三、服务拆分及远程调用" class="headerlink" title="三、服务拆分及远程调用"></a>三、服务拆分及远程调用</h1><h2 id="1、服务拆分注意事项"><a href="#1、服务拆分注意事项" class="headerlink" title="1、服务拆分注意事项"></a>1、服务拆分注意事项</h2><p>1、不同微服务，不要重复开发相同业务</p><p>2、微服务数据独立，不要访问其他微服务的数据库</p><p>3、微服务可以将自己的业务暴露为接口，供其它微服务调用</p><h2 id="2、远程调用接口"><a href="#2、远程调用接口" class="headerlink" title="2、远程调用接口"></a>2、远程调用接口</h2><p><strong>基于RestTemplate发起的http请求实现远程调用</strong></p><p><strong>http请求做远程调用是与语言无关的调用，只要知道对方的ip、端口、接口路径、请求参数即可</strong></p><h3 id="2-1、远程调用步骤"><a href="#2-1、远程调用步骤" class="headerlink" title="2.1、远程调用步骤"></a>2.1、远程调用步骤</h3><h4 id="2-1-1、在消费者注册-RestTemplate"><a href="#2-1-1、在消费者注册-RestTemplate" class="headerlink" title="2.1.1、在消费者注册 RestTemplate"></a>2.1.1、在消费者注册 RestTemplate</h4><p>启动类Application.java 中注册RestTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OrderApplication.class, args);<br>    &#125;<br><br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建RestTemplate，并注入Spring容器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1-2、使用RestTemplate远程调用接口"><a href="#2-1-2、使用RestTemplate远程调用接口" class="headerlink" title="2.1.2、使用RestTemplate远程调用接口"></a>2.1.2、使用RestTemplate远程调用接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br><br>  <span class="hljs-comment">// 注入RestTemplate</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-keyword">public</span> Order <span class="hljs-title function_">queryOrderById</span><span class="hljs-params">(Long orderId)</span> &#123;<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orderMapper.findById(orderId);<br>      <br>        <span class="hljs-comment">//调用:   利用RestTemplate发送http请求 get用getForObject；post用postForObject</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://127.0.0.1:8081/user/&quot;</span> + order.getUserId(), User.class);<br>      <br>        order.setUser(user);<br>        <span class="hljs-keyword">return</span> order;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2、提供者与消费者"><a href="#2-2、提供者与消费者" class="headerlink" title="2.2、提供者与消费者"></a>2.2、提供者与消费者</h3><ul><li>服务提供者：一次业务中，被其它微服务调用的服务。（提供接口给其它微服务）</li><li>服务消费者：一次业务中，调用其它微服务的服务。（调用其它微服务提供的接口）</li></ul><h1 id="四、Eureka-注册中心"><a href="#四、Eureka-注册中心" class="headerlink" title="四、Eureka 注册中心"></a>四、Eureka 注册中心</h1><h2 id="1、Eureka-原理分析"><a href="#1、Eureka-原理分析" class="headerlink" title="1、Eureka 原理分析"></a>1、Eureka 原理分析</h2><h3 id="1-1、Eureka-的作用"><a href="#1-1、Eureka-的作用" class="headerlink" title="1.1、Eureka 的作用"></a>1.1、Eureka 的作用</h3><ul><li>1、消费者如何获取服务提供者具体信息？<ul><li>1、服务提供者启动时向Eureka注册自己的信息</li><li>2、Eureka保存这些信息</li><li>3、消费者根据服务名称向Eureka拉取提供者信息</li></ul></li><li>2、如果有多个服务提供者，消费者如何选择？<ul><li>服务消费者利用负载均衡算法，从服务列表中挑选一个</li></ul></li><li>3、消费者如何感知服务提供者健康状态？<ul><li>1、服务提供者会每隔30秒向EurekaServer发送心跳请求，报告健康状态</li><li>2、Eureka会更新记录服务列表信息，心跳不正常会被剔除</li><li>3、消费者就可以拉取到最新的信息</li></ul></li></ul><h3 id="1-2、总结："><a href="#1-2、总结：" class="headerlink" title="1.2、总结："></a>1.2、总结：</h3><p>在Eureka架构中，微服务角色有两类：</p><ul><li>EurekaServer：服务端，注册中心<ul><li>记录服务信息</li><li>心跳监控</li></ul></li><li>EurekaClient：客户端<ul><li>Provider：服务提供者<ul><li>注册自己的信息到EurekaServer</li><li>每隔30秒向EurekaServer发送心跳</li></ul></li><li>Consumer：服务消费者<ul><li>根据服务名称从EurekaServer拉取服务列表</li><li>基于服务列表做负载均衡，选中一个微服务后发起远程调用</li></ul></li></ul></li></ul><h2 id="2、搭建Eureka-服务"><a href="#2、搭建Eureka-服务" class="headerlink" title="2、搭建Eureka 服务"></a>2、搭建Eureka 服务</h2><h3 id="2-1、搭建EurekaServer"><a href="#2-1、搭建EurekaServer" class="headerlink" title="2.1、搭建EurekaServer"></a>2.1、搭建EurekaServer</h3><p>1、创建项目，引入<code>spring-cloud-starter-netflix-eureka-server</code>的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、在启动类中Application.java中加入<code>@EnableEurekaServer</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、在application.yml配置文件中注册Eureka</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10086</span>  <span class="hljs-comment"># 服务端口</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eurekaserver</span>  <span class="hljs-comment"># eureka的服务名称</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span>  <span class="hljs-comment"># eureka的地址信息</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:10086/eureka</span><br></code></pre></td></tr></table></figure><p>4、启动项目，在浏览器输入<code>localhost:10086</code></p><p><img src="/img/springcloud_img/Eureka%E5%90%AF%E5%8A%9F%E9%A1%B5%E9%9D%A2.png" alt="Eureka启功页面"></p><h3 id="2-2、将其它服务注册到EurekaServer-下"><a href="#2-2、将其它服务注册到EurekaServer-下" class="headerlink" title="2.2、将其它服务注册到EurekaServer 下"></a>2.2、将其它服务注册到EurekaServer 下</h3><p>1、在 <strong>提供者</strong> 服务下引入<code>spring-cloud-starter-netflix-eureka-client</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、在application.yml 配置文件下注册eureka</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">userservice</span>  <span class="hljs-comment"># eureka的服务名称</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span>  <span class="hljs-comment"># eureka的地址信息</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:10086/eureka</span><br></code></pre></td></tr></table></figure><p>此时，就可以在 Eureka 中看到新注册的服务了</p><p><img src="/img/springcloud_img/Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C.png" alt="Eureka服务注册"></p><h3 id="2-3、补充：一个服务启动两个实例"><a href="#2-3、补充：一个服务启动两个实例" class="headerlink" title="2.3、补充：一个服务启动两个实例"></a>2.3、补充：一个服务启动两个实例</h3><p>首先点击最下面的<code>Services</code>，右击服务，选择 <code>Copy Configuration</code></p><p><img src="/img/springcloud_img/%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E4%B8%A4%E4%B8%AA%E5%AE%9E%E4%BE%8B.png" alt="一个服务启动两个实例"></p><p>然后点击<code>Modify options</code> ，选择 <code>Add VM options</code></p><p><img src="/img/springcloud_img/%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E4%B8%A4%E4%B8%AA%E5%AE%9E%E4%BE%8B2.png" alt="一个服务启动两个实例2"></p><p>之后就会多出一个 <code>VM options</code> 的文本框</p><p><img src="/img/springcloud_img/%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E4%B8%A4%E4%B8%AA%E5%AE%9E%E4%BE%8B3.png" alt="一个服务启动两个实例3"></p><p>添加参数 <code>-Dserver.port=8082</code>，修改配置名称，点击ok</p><p><img src="/img/springcloud_img/%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E4%B8%A4%E4%B8%AA%E5%AE%9E%E4%BE%8B4.png" alt="一个服务启动两个实例4"></p><p>最后在<code>Services</code> 下就可以看到新添加的实例</p><p><img src="/img/springcloud_img/%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E4%B8%A4%E4%B8%AA%E5%AE%9E%E4%BE%8B5.png" alt="一个服务启动两个实例5"></p><p>启动项目，就可以在Eureka 中看到两个实例了</p><p><img src="/img/springcloud_img/%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E4%B8%A4%E4%B8%AA%E5%AE%9E%E4%BE%8B6.png" alt="一个服务启动两个实例6"></p><h3 id="2-4、服务拉取"><a href="#2-4、服务拉取" class="headerlink" title="2.4、服务拉取"></a>2.4、服务拉取</h3><p>服务拉取是基于服务名称获取服务列表，然后再对服务列表做负载均衡</p><p>1、在 <strong>消费者</strong> 服务项目的启动类Application.java 中的RestTemplate添加负载均衡注解<code>@LoadBalanced</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@LoadBalanced</span><br><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>2、调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://服务名称/接口名/&quot;</span><br> <br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> restTemplate.getForObject(url,User.class)<br></code></pre></td></tr></table></figure><p><img src="/img/springcloud_img/Eureka%E6%80%BB%E7%BB%93.png" alt="Eureka总结"></p><h1 id="五、Ribbon-负载均衡"><a href="#五、Ribbon-负载均衡" class="headerlink" title="五、Ribbon 负载均衡"></a>五、Ribbon 负载均衡</h1><h2 id="1、负载均衡原理"><a href="#1、负载均衡原理" class="headerlink" title="1、负载均衡原理"></a>1、负载均衡原理</h2><p><img src="/img/springcloud_img/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%81%E7%A8%8B.png" alt="Ribbon负载均衡流程"></p><p><strong>源码跟踪：</strong></p><p>为什么只输入了 service 名称就可以访问了？为什么不需要获取ip和端口，这显然有人帮我们根据 service 名称，获取到了服务实例的ip和端口。它就是<code>LoadBalancerInterceptor</code>，这个类会在对 RestTemplate 的请求进行拦截，然后从 Eureka 根据服务 id 获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务 id。</p><p><img src="/img/springcloud_img/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png" alt="Ribbon负载均衡"></p><p><img src="/img/springcloud_img/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%81%E7%A8%8B2.png" alt="Ribbon负载均衡流程2"></p><h2 id="2、负载均衡策略"><a href="#2、负载均衡策略" class="headerlink" title="2、负载均衡策略"></a>2、负载均衡策略</h2><h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><p>Ribbon 的负载均衡规则是一个叫做 IRule 的接口来定义的，每一个子接口都是一种规则：</p><p><img src="/img/springcloud_img/IRule%E6%8E%A5%E5%8F%A3.png" alt="IRule接口"></p><p><img src="/img/springcloud_img/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5.png" alt="Ribbon负载均衡策略"></p><p>通过定义IRule 实现可以修改负载均衡规则，有两种方式：</p><p>方式1、代码方式：在<strong>消费者</strong> 的启动类中，定义一个新的IRule  【全局配置】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> IRule <span class="hljs-title function_">randomRule</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomRule</span>(); # 可以返回不同的规则实现<br>&#125;<br></code></pre></td></tr></table></figure><p>方式2、配置文件方式：在<strong>消费者</strong> 的application.yml 配置文件中，添加新的配置也可以修改规则  【针对某个服务而言】</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 配置负载均衡规则</span><br><span class="hljs-attr">userservice:</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.netflix.loadbalancer.RandomRule</span>  <span class="hljs-comment"># 负载均衡规则</span><br></code></pre></td></tr></table></figure><h2 id="3、饥饿加载"><a href="#3、饥饿加载" class="headerlink" title="3、饥饿加载"></a>3、饥饿加载</h2><p>Ribbon 默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 默认懒加载，切换成饥饿加载  -即项目启动的时候就加载指定服务</span><br><span class="hljs-attr">ribbon:</span><br>  <span class="hljs-attr">eager-load:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 开启饥饿加载</span><br>    <span class="hljs-attr">clients:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-string">userservice</span>  <span class="hljs-comment"># 指定对 userservice 这个服务进行饥饿加载</span><br></code></pre></td></tr></table></figure><h2 id="Ribbon-负载均衡-总结："><a href="#Ribbon-负载均衡-总结：" class="headerlink" title="Ribbon 负载均衡 总结："></a>Ribbon 负载均衡 总结：</h2><p><img src="/img/springcloud_img/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%80%BB%E7%BB%93.png" alt="Ribbon负载均衡总结"></p><h1 id="六、Nacos-注册中心"><a href="#六、Nacos-注册中心" class="headerlink" title="六、Nacos 注册中心"></a>六、Nacos 注册中心</h1><h2 id="1、安装Nacos"><a href="#1、安装Nacos" class="headerlink" title="1、安装Nacos"></a>1、安装Nacos</h2><p>进入<a href="https://github.com/alibaba/nacos/releases">GitHub的Release下载页</a>， <a href="https://pan.baidu.com/s/1mAKnFmJNkD6JLvt-wPN3dQ?pwd=rbx3">下载<code>.zip</code>压缩文件</a>，下载完成之后解压，解压完成之后进入bin目录，Windows下的启动命令是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">startup.cmd -m standalone<br></code></pre></td></tr></table></figure><p># -m 模式   standalone：单机启动</p><p><img src="/img/springcloud_img/Nacos%E5%90%AF%E5%8A%A8.png" alt="Nacos启动"></p><p>启动完成之后就可以输入url：<code>http://192.168.0.104:8848/nacos/index.html</code>登录了，默认的账号密码都是<code>nacos</code> </p><p><img src="/img/springcloud_img/nacos%E9%A6%96%E9%A1%B5.png" alt="nacos首页"></p><h2 id="2、快速入门"><a href="#2、快速入门" class="headerlink" title="2、快速入门"></a>2、快速入门</h2><p>1、在父工程中引入<code>spring-cloud-alibaba-dependencies</code> nacos的管理依赖【管理版本】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--springCloudAlibaba--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、在服务中引入nacos依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--nacos依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、在application.yml 配置文件中配置nacos</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span> <br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span>  <span class="hljs-comment"># nacos服务地址</span><br></code></pre></td></tr></table></figure><p>启动项目，就可以在nacos的管理页面看到注册的服务了</p><p><img src="/img/springcloud_img/nacos%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.png" alt="nacos快速入门"></p><h2 id="3、Nacos-服务分级存储模型"><a href="#3、Nacos-服务分级存储模型" class="headerlink" title="3、Nacos 服务分级存储模型"></a>3、Nacos 服务分级存储模型</h2><h3 id="3-1、服务集群属性"><a href="#3-1、服务集群属性" class="headerlink" title="3.1、服务集群属性"></a>3.1、服务集群属性</h3><h4 id="提供者"><a href="#提供者" class="headerlink" title="提供者"></a>提供者</h4><p>1、修改application.yml ，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span> <br>  <span class="hljs-attr">cloud:</span> <br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span>  <span class="hljs-comment"># nacos 服务端地址</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">HZ</span>  <span class="hljs-comment"># 配置集群名称，也就是机房位置，例如：HZ，杭州</span><br></code></pre></td></tr></table></figure><p>2、在Nacos 控制台可以看到集群变化：</p><p><img src="/img/springcloud_img/Nacos%E9%9B%86%E7%BE%A4.png" alt="# Nacos集群"></p><p><img src="/img/springcloud_img/Nacos%E9%9B%86%E7%BE%A4%E6%80%BB%E7%BB%93.png" alt="Nacos集群总结"></p><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span> <br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span>  <span class="hljs-comment"># nacos服务地址</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">HZ</span> <span class="hljs-comment"># 集群名称</span><br></code></pre></td></tr></table></figure><h3 id="3-2、NacosRule-负载均衡"><a href="#3-2、NacosRule-负载均衡" class="headerlink" title="3.2、NacosRule 负载均衡"></a>3.2、NacosRule 负载均衡</h3><h4 id="根据集群负载均衡："><a href="#根据集群负载均衡：" class="headerlink" title="根据集群负载均衡："></a>根据集群负载均衡：</h4><p>在<strong>消费者</strong>中设置负载均衡的IRule为NacosRule，这个规则会优先寻找与自己同集群的服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 配置负载均衡规则</span><br><span class="hljs-attr">userservice:</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.alibaba.cloud.nacos.ribbon.NacosRule</span>  <span class="hljs-comment"># 负载均衡规则</span><br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>NacosRule 负载均衡规则：<ul><li>1、优先选择同集群服务实例列表</li><li>2、本地集群找不到提供者，才会去其它集群寻找，并且会报警告</li><li>3、确定了可用实例列表后，再采用随机负载均衡挑选实例</li></ul></li></ul><h4 id="根据权重负载均衡"><a href="#根据权重负载均衡" class="headerlink" title="根据权重负载均衡"></a>根据权重负载均衡</h4><p>实际部署中会出现这样的场景：</p><ul><li>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能号的机器承担更多的用户请求</li></ul><p>Nacos 提供了权重配置来控制访问频率，权重越大则访问频率越高</p><p>1、在Nacos控制台可以设置实例的权重值，首先选中实例后面的编辑按钮：</p><p><img src="/img/springcloud_img/Nacos%E6%A0%B9%E6%8D%AE%E6%9D%83%E9%87%8D%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A11.png" alt="Nacos根据权重负载均衡1"></p><p>2、在这里就可以设置权重了</p><p><img src="/img/springcloud_img/Nacos%E6%A0%B9%E6%8D%AE%E6%9D%83%E9%87%8D%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A12.png" alt="Nacos根据权重负载均衡2"></p><p><strong>总结：</strong></p><ul><li>实例的权重控制<ul><li>Nacos 控制台可以设置实例的权重值，0~1 之间</li><li>同集群内的多个实例，权重越高被访问的频率越高</li><li>权重设置为0 则完全不会被访问</li></ul></li></ul><h2 id="4、Nacos-环境隔离namespace"><a href="#4、Nacos-环境隔离namespace" class="headerlink" title="4、Nacos 环境隔离namespace"></a>4、Nacos 环境隔离namespace</h2><p>Nacos 中服务存储和数据存储的最外层都是一个名为namespace 的东西，用来做最外层隔离</p><p><img src="/img/springcloud_img/Nacos%E7%8E%AF%E5%A2%83%E9%9A%94%E7%A6%BBnamespace.png" alt="Nacos环境隔离namespace"></p><p>默认只会有public 一个命名空间，可以手动在Nacos 页面中新建命名空间，ID可填可不填，如果不填会自动生成</p><p><img src="/img/springcloud_img/Nacos%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B42.png" alt="Nacos命名空间2"></p><p><img src="/img/springcloud_img/Nacos%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B43.png" alt="Nacos命名空间3"></p><p><strong>修改服务的命名空间：</strong></p><p>在application.yml 中添加namespace：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span> <br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span>  <span class="hljs-comment"># nacos服务地址</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">HZ</span> <span class="hljs-comment"># 集群名称</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">1af3800d-f0b5-4ddf-88f3-cc09aa367d0f</span>  <span class="hljs-comment"># 命名空间  填命名空间ID</span><br></code></pre></td></tr></table></figure><p>修改完成之后，在Nacos页面中就会在对应的命名空间下显示服务了</p><p><img src="/img/springcloud_img/Nacos%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B44.png" alt="Nacos命名空间4"></p><p>此时再去发请求就会报错，因为它们不在同一个命名空间下</p><p><img src="/img/springcloud_img/Nacos%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B45.png" alt="Nacos命名空间5"></p><p><img src="/img/springcloud_img/Nacos%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B46.png" alt="Nacos命名空间6"></p><p><strong>总结：</strong></p><ul><li>Nacos 环境隔离：<ul><li>namespace 用来做环境隔离</li><li>每个namespace 都有唯一id</li><li>不同namespace 下的服务不可见</li></ul></li></ul><h2 id="5、Nacos-注册中心原理"><a href="#5、Nacos-注册中心原理" class="headerlink" title="5、Nacos 注册中心原理"></a>5、Nacos 注册中心原理</h2><h3 id="5-1、Nacos-注册中心细节分析"><a href="#5-1、Nacos-注册中心细节分析" class="headerlink" title="5.1、Nacos 注册中心细节分析"></a>5.1、Nacos 注册中心细节分析</h3><p><img src="/img/springcloud_img/Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%BB%86%E8%8A%82.png" alt="Nacos注册中心细节"></p><p><strong>服务注册消费步骤：</strong></p><ul><li><p>服务提供者在 注册中心 中 注册服务信息</p></li><li><p>服务消费者定时去 注册中心中 拉取服务</p><ul><li>消费者不是每次请求都进行拉取</li><li>消费者会将拉取到的服务列表 缓存起来</li></ul></li><li><p>服务消费者拿到服务列表之后，通过负载均衡 发起远程调用</p><p><img src="/img/springcloud_img/Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%BB%86%E8%8A%822.png" alt="Nacos注册中心细节2"></p></li><li><p>服务提供者：</p><ul><li>Nacos 会把服务提供者划分成 临时实例 和 非临时实例。默认情况下，所有的实例都是临时实例</li><li>临时实例在Nacos 中做检查时，采用的是心跳检测【提供者每隔一段时间，发一个请求到Nacos 中。当服务提供者不再发送请求到Nacos 中 ，Nacos 就会把这个提供者直接剔除】</li><li>非临时实例是由 Nacos主动发请求询问服务提供者 【Nacos 不会把非临时实例从列表中剔除，只是会标记为不健康】</li></ul></li><li><p>服务消费者：</p><ul><li>Eureka 采取定时拉取服务【pull】</li><li>Nacos 采取定时拉取服务 和 主动推送服务变更消息 【pull + push 两者结合】，如果Nacos发现有服务挂了，Nacos会立即发起推送给消费者</li></ul></li></ul><h3 id="5-2、临时实例和非临时实例"><a href="#5-2、临时实例和非临时实例" class="headerlink" title="5.2、临时实例和非临时实例"></a>5.2、临时实例和非临时实例</h3><p>服务注册到Nacos 时，可以选择注册为临时实例 或 非临时实例，通过下面的配置来设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span> <br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span>  <span class="hljs-comment"># nacos服务地址</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">HZ</span> <span class="hljs-comment"># 集群名称</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">1af3800d-f0b5-4ddf-88f3-cc09aa367d0f</span>  <span class="hljs-comment"># 命名空间  填命名空间ID</span><br>        <span class="hljs-attr">ephemeral:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 注册到Nacos时，注册为非临时实例</span><br></code></pre></td></tr></table></figure><p>非临时实例主动检测会增加服务器压力</p><p>Nacos 集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP模式</p><h1 id="七、Nacos-配置管理"><a href="#七、Nacos-配置管理" class="headerlink" title="七、Nacos 配置管理"></a>七、Nacos 配置管理</h1><h2 id="1、统一配置管理"><a href="#1、统一配置管理" class="headerlink" title="1、统一配置管理"></a>1、统一配置管理</h2><ul><li>作用：配置更改热更新</li></ul><p>增加配置步骤：</p><p><img src="/img/springcloud_img/Nacos%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E6%B7%BB%E5%8A%A0%E9%85%8D%E7%BD%AE1.png" alt="Nacos配置管理添加配置1"></p><p><img src="/img/springcloud_img/Nacos%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E5%A2%9E%E5%8A%A0%E9%85%8D%E7%BD%AE2.png" alt="Nacos配置管理增加配置2"></p><p><img src="/img/springcloud_img/Nacos%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E6%B7%BB%E5%8A%A0%E9%85%8D%E7%BD%AE3.png" alt="Nacos配置管理添加配置3"></p><h2 id="2、微服务配置拉取【微服务拉取Nacos中定义的配置】"><a href="#2、微服务配置拉取【微服务拉取Nacos中定义的配置】" class="headerlink" title="2、微服务配置拉取【微服务拉取Nacos中定义的配置】"></a>2、微服务配置拉取【微服务拉取Nacos中定义的配置】</h2><p>配置获取步骤分析：</p><ul><li>1、项目启动</li><li><strong>2、读取bootstrap.yml配置文件 【提前在 bootstrap.yml 配置文件中设置nacos 地址】</strong></li><li><strong>3、读取Nacos 中的配置文件</strong> </li><li>4、读取本地配置文件 application.yml</li><li>5、创建Spring 容器</li><li>6、加载bean</li></ul><p>在微服务中设置Nacos 配置拉取：</p><p>1、引入Nacos 的配置管理客户端依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--nacos配置管理依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、新建 <code>bootstrap.yml</code> 配置文件，配置Nacos 配置管理的地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">userservice</span>  <span class="hljs-comment"># 服务名称</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span>  <span class="hljs-comment"># 环境</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span>  <span class="hljs-comment"># Nacos 地址</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span>  <span class="hljs-comment"># 文件后缀名</span><br></code></pre></td></tr></table></figure><p>启动项目查看是否使用了Nacos 中配置的内容:</p><p>1、在代码中使用Nacos 中配置的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 注入Nacos 中的配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String dateformat;<br><br><span class="hljs-meta">@GetMapping(&quot;now&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">now</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));<br>&#125;<br></code></pre></td></tr></table></figure><p>2、通过浏览器访问这个接口</p><p><img src="/img/springcloud_img/Nacos%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86.png" alt="Nacos配置管理"></p><p><img src="/img/springcloud_img/Nacos%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E6%80%BB%E7%BB%93.png" alt="Nacos配置管理总结"></p><h2 id="3、配置热更新"><a href="#3、配置热更新" class="headerlink" title="3、配置热更新"></a>3、配置热更新</h2><h3 id="配置自动刷新"><a href="#配置自动刷新" class="headerlink" title="配置自动刷新"></a>配置自动刷新</h3><p>Nacos 中的配置文件变更后，微服务无需重启就可以感知，不过需要通过下面两种配置实现：</p><p><strong>方式1：在 @Value 注入的变量所在类上添加注解 <code>@RefreshScope</code></strong></p><p><img src="/img/springcloud_img/Nacos%E7%83%AD%E6%9B%B4%E6%96%B0%E9%85%8D%E7%BD%AE1.png" alt="Nacos热更新配置1"></p><p>**方式2：使用 <code>@ConfigurationProperties</code> 注解 **</p><p><img src="/img/springcloud_img/Nacos%E7%83%AD%E6%9B%B4%E6%96%B02.png" alt="Nacos热更新2"></p><p><img src="/img/springcloud_img/Nacos%E7%83%AD%E6%9B%B4%E6%96%B0%E9%85%8D%E7%BD%AE3.png" alt="Nacos热更新配置3"></p><p><img src="/img/springcloud_img/Nacos%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E7%83%AD%E6%9B%B4%E6%96%B0%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93.png" alt="Nacos配置管理热更新配置总结"></p><h2 id="4、多环境配置共享"><a href="#4、多环境配置共享" class="headerlink" title="4、多环境配置共享"></a>4、多环境配置共享</h2><p>微服务启动时会从nacos读取多个配置文件：</p><ul><li>服务名称-环境.yaml   ，例如：userservice-dev.yaml</li><li>服务名称.yaml    ，例如： userservice.yaml</li></ul><p>无论环境如何变化，<code>服务名称.yaml</code> 这个文件一定会加载，因此多环境共享配置可以写入这个文件</p><p><strong>多种配置的优先级：</strong></p><ul><li><p>nacos 中的配置 &gt; 本地配置</p></li><li><p><code>服务名称-环境.yaml</code> &gt; <code>服务名称.yaml</code> &gt; 本地配置</p></li></ul><p><img src="/img/springcloud_img/Nacos%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93.png" alt="Nacos多环境配置总结"></p><h2 id="5、Nacos-集群搭建"><a href="#5、Nacos-集群搭建" class="headerlink" title="5、Nacos 集群搭建"></a>5、Nacos 集群搭建</h2><h3 id="5-1、集群结构图"><a href="#5-1、集群结构图" class="headerlink" title="5.1、集群结构图"></a>5.1、集群结构图</h3><p>官方给出的Nacos 集群图：</p><p><img src="/img/springcloud_img/%E5%AE%98%E6%96%B9Nacos%E9%9B%86%E7%BE%A4%E5%9B%BE.png" alt="官方Nacos集群图"></p><p>其中包含三个Nacos 节点，然后一个负载均衡器代理3个Nacos 。这里负载均衡器可以使用nginx。</p><p><img src="/img/springcloud_img/Nacos%E9%9B%86%E7%BE%A4%E5%9B%BE.png" alt="Nacos集群图"></p><p>三个Nacos 节点的地址: </p><table><thead><tr><th>节点</th><th>ip</th><th>port</th></tr></thead><tbody><tr><td>nacos1</td><td>192.168.0.104</td><td>8845</td></tr><tr><td>nacos2</td><td>192.168.0.104</td><td>8846</td></tr><tr><td>nacos3</td><td>192.168.0.104</td><td>8847</td></tr></tbody></table><h3 id="5-2、搭建集群"><a href="#5-2、搭建集群" class="headerlink" title="5.2、搭建集群"></a>5.2、搭建集群</h3><p>搭建集群的基本步骤：</p><ul><li>搭建数据库，初始化数据库表结构</li><li>下载nacos 安装包</li><li>配置nacos</li><li>启动nacos 集群</li><li>nginx 反向代理</li></ul><h4 id="5-2-1、初始化数据库"><a href="#5-2-1、初始化数据库" class="headerlink" title="5.2.1、初始化数据库"></a>5.2.1、初始化数据库</h4><p>首先新建一个数据库，命名为nacos，而后导入下面的SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  `c_desc` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `c_use` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `effect` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `type` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `c_schema` text,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_aggr   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_aggr` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `datum_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;datum_id&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;内容&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;增加租户字段&#x27;</span>;<br><br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_beta   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_beta` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `beta_ips` <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;betaIps&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info_beta&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_tag   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_tag` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `tag_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_id&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info_tag&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_tags_relation   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_tags_relation` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `tag_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_name&#x27;</span>,<br>  `tag_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_type&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `nid` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`nid`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_tag_relation&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = group_capacity   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `group_capacity` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,<br>  `quota` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;配额，0表示使用默认值&#x27;</span>,<br>  `usage` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;使用量&#x27;</span>,<br>  `max_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_aggr_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,<br>  `max_aggr_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_history_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;最大变更历史数量&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;集群、各Group容量信息表&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = his_config_info   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `his_config_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">64</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `nid` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  `src_user` text,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `op_type` <span class="hljs-type">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`nid`),<br>  KEY `idx_gmt_create` (`gmt_create`),<br>  KEY `idx_gmt_modified` (`gmt_modified`),<br>  KEY `idx_did` (`data_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;多租户改造&#x27;</span>;<br><br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = tenant_capacity   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tenant_capacity` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;Tenant ID&#x27;</span>,<br>  `quota` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;配额，0表示使用默认值&#x27;</span>,<br>  `usage` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;使用量&#x27;</span>,<br>  `max_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_aggr_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;聚合子配置最大个数&#x27;</span>,<br>  `max_aggr_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_history_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;最大变更历史数量&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;租户容量信息表&#x27;</span>;<br><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tenant_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `kp` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;kp&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `tenant_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_name&#x27;</span>,<br>  `tenant_desc` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tenant_desc&#x27;</span>,<br>  `create_source` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;create_source&#x27;</span>,<br>  `gmt_create` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;tenant_info&#x27;</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `users` (<br>`username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>`password` <span class="hljs-type">varchar</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`enabled` <span class="hljs-type">boolean</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `roles` (<br>`username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`role` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="hljs-keyword">ASC</span>, `role` <span class="hljs-keyword">ASC</span>) <span class="hljs-keyword">USING</span> BTREE<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `permissions` (<br>    `role` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `resource` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `action` <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="hljs-keyword">USING</span> BTREE<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users (username, password, enabled) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;nacos&#x27;</span>, <span class="hljs-string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="hljs-literal">TRUE</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> roles (username, role) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;nacos&#x27;</span>, <span class="hljs-string">&#x27;ROLE_ADMIN&#x27;</span>);<br></code></pre></td></tr></table></figure><p>执行完成之后，结构如下：</p><p><img src="/img/springcloud_img/%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="初始化数据库"></p><h4 id="5-2-2、下载nacos"><a href="#5-2-2、下载nacos" class="headerlink" title="5.2.2、下载nacos"></a>5.2.2、下载nacos</h4><p>nacos 下载地址：<a href="https://github.com/alibaba/nacos/tags">https://github.com/alibaba/nacos/tags</a></p><h4 id="5-2-3、配置nacos"><a href="#5-2-3、配置nacos" class="headerlink" title="5.2.3、配置nacos"></a>5.2.3、配置nacos</h4><p>将这个包解压到任意非中文目录下，如图：</p><p><img src="/img/springcloud_img/Nacos%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE.png" alt="Nacos集群配置"></p><p>1、进入nacos 的conf 目录，修改配置文件cluster.conf.example，重命名为 cluster.conf</p><p><img src="/img/springcloud_img/Nacos%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE2.png" alt="Nacos集群配置2"></p><p>然后在cluster.conf 中添加内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Text">192.168.0.104:8845<br>192.168.0.104:8846<br>192.168.0.104:8847<br></code></pre></td></tr></table></figure><p><img src="/img/springcloud_img/Nacos%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE3.png" alt="Nacos集群配置3"></p><p>2、编辑<code>application.properties</code> 配置文件</p><p><img src="/img/springcloud_img/application.properties%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE.png" alt="application.properties配置文件位置"></p><p><img src="/img/springcloud_img/Nacos%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE4.png" alt="Nacos集群配置4"></p><p>3、将nacos 解压文件复制三份，重命名【代表3个nacos 】</p><p><img src="/img/springcloud_img/Nacos%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE5.png" alt="Nacos集群配置5"></p><p>4、编辑application.properties 配置端口</p><p><img src="/img/springcloud_img/Nacos%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE6.png" alt="Nacos集群配置6"></p><p>5、分别启动三个nacos 节点</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">startup.<span class="hljs-built_in">cmd</span><br></code></pre></td></tr></table></figure><p><img src="/img/springcloud_img/Nacos%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE7.png" alt="Nacos集群配置7"></p><h4 id="5-2-4、Nginx-反向代理"><a href="#5-2-4、Nginx-反向代理" class="headerlink" title="5.2.4、Nginx 反向代理"></a>5.2.4、Nginx 反向代理</h4><p>解压<a href="https://pan.baidu.com/s/1wCwprIEpCwZPxVmpD4of6w?pwd=2o6d">nginx安装包</a> ，找到conf目录，修改<code>nginx.conf</code> 文件</p><p><img src="/img/springcloud_img/Nacos%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE-Nginx%E9%85%8D%E7%BD%AE.png" alt="Nacos集群配置-Nginx配置"></p><p>修改conf&#x2F;nginx.conf文件，配置如下：【放到http{ } 括号内部】</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> nacos-cluster &#123;  <span class="hljs-comment"># 配置集群，nginx就可以对这三个地址做负载均衡</span><br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.0.104:8845</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.0.104:8846</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.0.104:8847</span>;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<span class="hljs-comment"># 反向代理 端口</span><br>    <span class="hljs-attribute">server_name</span>  localhost;<span class="hljs-comment"># 反向代理 ip</span><br><br>    <span class="hljs-section">location</span> /nacos &#123;<span class="hljs-comment"># /nacos  ： Nacos 默认路径 【只要访问了这个路径，就代理到上面的集群中】</span><br>        <span class="hljs-attribute">proxy_pass</span> http://nacos-cluster;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/springcloud_img/Nacos%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE-Nginx%E9%85%8D%E7%BD%AE2.png" alt="Nacos集群配置 - Nginx配置2"></p><p>启动nginx</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">start</span> nginx.exe<br></code></pre></td></tr></table></figure><p><img src="/img/springcloud_img/Nacos%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE-%E5%90%AF%E5%8A%A8Nginx.png" alt="Nacos集群配置 - 启动Nginx"></p><h4 id="5-2-5、配置完成，启动nacos"><a href="#5-2-5、配置完成，启动nacos" class="headerlink" title="5.2.5、配置完成，启动nacos"></a>5.2.5、配置完成，启动nacos</h4><p>浏览器输入 <code>http://localhost/nacos</code>,就可以进入nacos界面</p><h4 id="5-2-6、在Java代码中配置nacos地址"><a href="#5-2-6、在Java代码中配置nacos地址" class="headerlink" title="5.2.6、在Java代码中配置nacos地址"></a>5.2.6、在Java代码中配置nacos地址</h4><p><strong>只需要把端口号换成80 即可</strong></p><p>Java中 <code>bootstrap.yaml</code> 配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">userservice</span>  <span class="hljs-comment"># 服务名称</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span>  <span class="hljs-comment"># 环境</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:80</span>  <span class="hljs-comment"># Nacos 地址   只需要改端口</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span>  <span class="hljs-comment"># 文件后缀名</span><br></code></pre></td></tr></table></figure><h1 id="八、http客户端feign"><a href="#八、http客户端feign" class="headerlink" title="八、http客户端feign"></a>八、http客户端feign</h1><h2 id="1、基于Feign-远程调用"><a href="#1、基于Feign-远程调用" class="headerlink" title="1、基于Feign 远程调用"></a>1、基于Feign 远程调用</h2><h3 id="1-1、RestTemplate-方式调用存在的问题"><a href="#1-1、RestTemplate-方式调用存在的问题" class="headerlink" title="1.1、RestTemplate 方式调用存在的问题"></a>1.1、RestTemplate 方式调用存在的问题</h3><p>RestTemplate 发起远程调用的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://userservice/user/&quot;</span>+order.getUserId();<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> restTemplate.getForObject(url,User.class);<br></code></pre></td></tr></table></figure><p>存在以下问题：</p><ul><li>代码可读性差，编程体验不统一</li><li>参数复杂URL难以维护</li></ul><h3 id="1-2、Feign-的介绍"><a href="#1-2、Feign-的介绍" class="headerlink" title="1.2、Feign 的介绍"></a>1.2、Feign 的介绍</h3><p>Feign 是一个声明式的http客户端，官方地址：<a href="http://github.com/OpenFeign/feign">http://github.com/OpenFeign/feign</a></p><p>其作用就是优雅的实现http请求的发送，解决RestTempalte 存在的问题</p><h3 id="1-3、定义和使用Feign-客户端"><a href="#1-3、定义和使用Feign-客户端" class="headerlink" title="1.3、定义和使用Feign 客户端"></a>1.3、定义和使用Feign 客户端</h3><p>使用Feign的步骤如下：</p><p>1、引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、在启动类添加<code>@EnableFeignClients</code> 注解开启Feign 功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients</span>  <span class="hljs-comment">// 开启Feign 功能</span><br><span class="hljs-meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OrderApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、编写Feign 客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(&quot;userservice&quot;)</span>  <span class="hljs-comment">// 要调用的服务名称</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserClient</span>&#123;<br>  <span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br>  User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span>Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是基于SpringMVC 的注解来声明远程调用的信息，比如</p><ul><li>服务名称： userservice</li><li>请求方式：GET</li><li>请求路径：&#x2F;user&#x2F;{id}</li><li>请求参数：Long id</li><li>返回值类型：User</li></ul><p>4、远程调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">// 注入 定义的UserClient</span><br><span class="hljs-meta">@Autowired</span><br>   UserClient userClient;<br><br>   <span class="hljs-keyword">public</span> Order <span class="hljs-title function_">queryOrderById</span><span class="hljs-params">(Long orderId)</span> &#123;<br>       <span class="hljs-comment">// 1.查询订单</span><br>       <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orderMapper.findById(orderId);<br><br>       <span class="hljs-comment">// 利用feign 进行远程调用</span><br>       <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userClient.findById(order.getUserId());<br>       order.setUser(user);<br><br>       <span class="hljs-comment">// 4.返回</span><br>       <span class="hljs-keyword">return</span> order;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="2、自定义Feign-的配置"><a href="#2、自定义Feign-的配置" class="headerlink" title="2、自定义Feign 的配置"></a>2、自定义Feign 的配置</h2><p>Feign 运行自定义配置来覆盖默认配置，可以修改的配置如下：</p><p><img src="/img/springcloud_img/Feign%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE.png" alt="Feign自定义配置"></p><p>日志级别：</p><ul><li>NONE 【默认】</li><li>BASIC  当发起http请求时，会记录请求什么时候发的，什么时候结束的，请求时间等请求基本信息</li><li>HEADERS  除了记录请求基本信息之外，还会记录请求头和响应头</li><li>FULL  除了记录请求基本信息、请求头、响应头之外，还会记录请求体，响应体</li></ul><h3 id="2-1、配置Feign-日志有两种方式："><a href="#2-1、配置Feign-日志有两种方式：" class="headerlink" title="2.1、配置Feign 日志有两种方式："></a>2.1、配置Feign 日志有两种方式：</h3><p><strong>方式一：配置文件方式</strong></p><p>1、全局生效：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">feign:</span><br><span class="hljs-attr">client:</span><br><span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span>  <span class="hljs-comment">#  default 全局的配置</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">BASIC</span>  <span class="hljs-comment"># 日志级别，BASIC 就是基本的请求和响应信息</span><br></code></pre></td></tr></table></figure><p>2、局部生效</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br><span class="hljs-attr">client:</span><br><span class="hljs-attr">config:</span><br><span class="hljs-attr">userservice:</span>  <span class="hljs-comment"># 这里使用default就是全局配置，如果写的是服务名称，则是针对某个微服务的配置</span><br><span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">FULL</span>  <span class="hljs-comment"># 日志级别</span><br></code></pre></td></tr></table></figure><p><strong>方式二：java代码方式</strong></p><p>1、需要先声明一个Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeignClientConfiguration</span>()&#123;<br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> Logger.Level <span class="hljs-title function_">feignLogLevel</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> Logger.Level.BASIC;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.1、而后如果是全局配置，则把它放到<code>@EnableFeignClients</code> 这个注解中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(defaultConfiguration = FeignClientConfiguration.class)</span><br></code></pre></td></tr></table></figure><p>2.2、如果是局部配置，则把它放到<code>@FeignClient</code> 这个注解中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value=&quot;userservice&quot;, configuration = FeignClientConfiguration.class)</span><br></code></pre></td></tr></table></figure><p><img src="/img/springcloud_img/Feign%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE.png" alt="Feign 自定义日志配置"></p><h2 id="3、Feign-的性能优化"><a href="#3、Feign-的性能优化" class="headerlink" title="3、Feign 的性能优化"></a>3、Feign 的性能优化</h2><p>Feign 底层的客户端实现：</p><ul><li>URLConnection：默认实现，不支持连接池</li><li>Apache HttpClient：支持连接池</li><li>OKHttp：支持连接池</li></ul><p>因此优化Feign 的性能主要包括：</p><p>1、使用支持连接池的 代替 默认的URLConnection</p><p>2、日志级别，最好用basic 或none</p><h3 id="3-1、Feign-连接池配置"><a href="#3-1、Feign-连接池配置" class="headerlink" title="3.1、Feign 连接池配置"></a>3.1、Feign 连接池配置</h3><h4 id="3-1-1、Feign-添加HttpClient-的支持："><a href="#3-1-1、Feign-添加HttpClient-的支持：" class="headerlink" title="3.1.1、Feign 添加HttpClient 的支持："></a>3.1.1、Feign 添加HttpClient 的支持：</h4><p>1、引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--httpClient 的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.github.openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>feign-httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、配置连接池：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">httpclient:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 开启feign 对HttpClient 的支持</span><br>    <span class="hljs-attr">max-connections:</span> <span class="hljs-number">200</span>  <span class="hljs-comment"># 最大连接数</span><br>    <span class="hljs-attr">max-connections-per-route:</span> <span class="hljs-number">50</span>  <span class="hljs-comment"># 每个路径的最大连接数</span><br></code></pre></td></tr></table></figure><p><img src="/img/springcloud_img/Feign%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93.png" alt="Feign 性能优化总结"></p><h2 id="4、Feign最佳实践"><a href="#4、Feign最佳实践" class="headerlink" title="4、Feign最佳实践"></a>4、Feign最佳实践</h2><h3 id="4-1、Feign-最佳实践分析"><a href="#4-1、Feign-最佳实践分析" class="headerlink" title="4.1、Feign 最佳实践分析"></a>4.1、Feign 最佳实践分析</h3><h4 id="4-1-1、方式一（继承）：给消费者的FeignClient-和提供者的controller-定义统一的父接口作为标准"><a href="#4-1-1、方式一（继承）：给消费者的FeignClient-和提供者的controller-定义统一的父接口作为标准" class="headerlink" title="4.1.1、方式一（继承）：给消费者的FeignClient 和提供者的controller 定义统一的父接口作为标准"></a>4.1.1、方式一（继承）：给消费者的FeignClient 和提供者的controller 定义统一的父接口作为标准</h4><p><img src="/img/springcloud_img/Feign%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-%E7%BB%A7%E6%89%BF.png" alt="Feign最佳实践-继承"></p><h4 id="4-1-2、方式二（抽取）：将FeignClient抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用"><a href="#4-1-2、方式二（抽取）：将FeignClient抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用" class="headerlink" title="4.1.2、方式二（抽取）：将FeignClient抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用"></a>4.1.2、方式二（抽取）：将FeignClient抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用</h4><p><img src="/img/springcloud_img/Feign%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-%E7%BB%A7%E6%89%BF.png" alt="Feign最佳实践-继承"></p><p><img src="/img/springcloud_img/Feign%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93.png" alt="Feign最佳实践分析总结"></p><h4 id="4-2、实现Feign-最佳实践"><a href="#4-2、实现Feign-最佳实践" class="headerlink" title="4.2、实现Feign 最佳实践"></a>4.2、实现Feign 最佳实践</h4><p>**抽取FeignClient **</p><p>实现最佳实践方式二的步骤如下:</p><p>1、首先创建一个modult，命名为feign-api，然后引入feign的starter依赖</p><p>2、将order-service中编写的UserClient、User、DefaultFeignConfiguration都复制到feign-api项目中</p><p>3、在order-service中引入feign-api的依赖</p><p>当定义的FeignClient不再SpringBootApplication的扫描包范围时，这些FeignClient无法使用。有两种方式解决：</p><p>方式一：指定FeignClient所在包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(basePackages=&quot;cn.itcast.feign.clients&quot;)</span><br></code></pre></td></tr></table></figure><p>方式二：指定FeignClient字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(clients=&#123;UserClient.class&#125;)</span><br></code></pre></td></tr></table></figure><h1 id="九、统一网关Gateway"><a href="#九、统一网关Gateway" class="headerlink" title="九、统一网关Gateway"></a>九、统一网关Gateway</h1><h2 id="1、网关作用介绍"><a href="#1、网关作用介绍" class="headerlink" title="1、网关作用介绍"></a>1、网关作用介绍</h2><p><img src="/img/springcloud_img/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E7%BD%91%E5%85%B3.png" alt="为什么需要网关"></p><p><strong>网关的技术实现</strong></p><p>在SpringCloud中网关的实现包括两种：</p><ul><li>gateway</li><li>zuul</li></ul><p>Zuul 是基于Servlet 的实现，属于阻塞式编程。而SpringCloudGateway 则是基于Spring5 中提供的WebFlux ，属于响应式编程的实现，具备更好的性能。</p><h2 id="2、搭建网关服务"><a href="#2、搭建网关服务" class="headerlink" title="2、搭建网关服务"></a>2、搭建网关服务</h2><p>搭建网关服务的步骤</p><p>1、创建新的module，引入SpringCloudGateway的依赖和nacos的服务注册发现依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--nacos服务注册发现依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--网关gateway依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、编写路由配置及nacos地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10010</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span>  <span class="hljs-comment"># nacos地址</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user-service</span>  <span class="hljs-comment"># 路由标识</span><br>          <span class="hljs-comment"># uri： http://127.0.0.1:8081  # 路由的目标地址  http就是固定地址</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://userservice</span>  <span class="hljs-comment"># 路由的目标地址</span><br>          <span class="hljs-attr">predicates:</span>  <span class="hljs-comment"># 路由断言，判断请求是否符合规则</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span>  <span class="hljs-comment"># 路径断言，判断路由是否是以/user 开头，如果是，则符合</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">order-service</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://orderservice</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/order/**</span><br><br></code></pre></td></tr></table></figure><p><img src="/img/springcloud_img/gateway%E7%BD%91%E5%85%B3%E8%AE%BE%E7%BD%AE-%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE.png" alt="gateway网关设置-启动项目"></p><p><img src="/img/springcloud_img/gateway%E7%BD%91%E5%85%B3%E6%B5%81%E7%A8%8B.png" alt="gateway网关流程"></p><p><img src="/img/springcloud_img/gateway%E7%BD%91%E5%85%B3%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4.png" alt="gateway网关搭建步骤"></p><h2 id="3、路由断言工厂-Route-Predicate-Factory"><a href="#3、路由断言工厂-Route-Predicate-Factory" class="headerlink" title="3、路由断言工厂 Route Predicate Factory"></a>3、路由断言工厂 Route Predicate Factory</h2><p>网关路由可以配置的内容包括：</p><ul><li>路由id：路由唯一标识</li><li>uri：路由目的地，支持 lb 和 http两种</li><li><strong>predicates：路由断言，判断请求是否符合要求，符合则转发到路由目的地</strong></li><li>filters：路由过滤器，处理请求或响应</li></ul><p>在配置文件中写的断言规则只是字符串，这些字符串会被 Predicate Factory 读取并处理，转变为路由判断的条件</p><p>例如<code>Path=/user/**</code> 是按照路径匹配，这个规则是由<code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code> 类来处理的</p><p><strong>Spring 提供了11种基本的Predicate工厂：</strong></p><p><img src="/img/springcloud_img/gateway%E8%B7%AF%E7%94%B1%E6%96%AD%E8%A8%80%E5%B7%A5%E5%8E%82.png" alt="gateway路由断言工厂"></p><h2 id="4、路由过滤器-GatewayFilter"><a href="#4、路由过滤器-GatewayFilter" class="headerlink" title="4、路由过滤器 GatewayFilter"></a>4、路由过滤器 GatewayFilter</h2><p>GatewayFilter 是网关种提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理：</p><p><img src="/img/springcloud_img/gateway%E8%BF%87%E6%BB%A4%E5%99%A8.png" alt="gateway过滤器"></p><h3 id="4-1、过滤器工厂-GatewayFilterFactory"><a href="#4-1、过滤器工厂-GatewayFilterFactory" class="headerlink" title="4.1、过滤器工厂 GatewayFilterFactory"></a>4.1、过滤器工厂 GatewayFilterFactory</h3><p>Spring 提供了31种不同的路由过滤器工厂。例如：</p><p><img src="/img/springcloud_img/gateway%E8%BF%87%E6%BB%A4%E5%99%A8%E5%B7%A5%E5%8E%82.png" alt="gateway过滤器工厂"></p><p><strong>案例：</strong>给所有进入userservice 的请求添加一个请求头</p><p>给所有进入userservice 的请求添加一个请求头：Truth&#x3D;itcast is freaking awesome! </p><p>实现方式：在gateway中修改application.yml 文件，给userservice 的路由添加过滤器：</p><p><img src="/img/springcloud_img/gateway%E8%BF%87%E6%BB%A4%E5%99%A8%E6%A1%88%E4%BE%8B.png" alt="gateway过滤器案例"></p><h3 id="4-2、默认过滤器-default-filters"><a href="#4-2、默认过滤器-default-filters" class="headerlink" title="4.2、默认过滤器  default-filters"></a>4.2、默认过滤器  default-filters</h3><p>如果要对所有的路由都生效，则可以将过滤器工厂写到default-filter 下：<code>spring.cloud.gateway.default-filter</code></p><p><img src="/img/springcloud_img/gateway%E8%BF%87%E6%BB%A4%E5%99%A8-%E6%89%80%E6%9C%89%E8%B7%AF%E7%94%B1%E9%83%BD%E7%94%9F%E6%95%88.png" alt="gateway过滤器-所有路由都生效"></p><p><img src="/img/springcloud_img/gateway%E8%BF%87%E6%BB%A4%E5%99%A8-%E6%80%BB%E7%BB%93.png" alt="gateway过滤器-总结"></p><h2 id="5、全局过滤器-GlobalFilter"><a href="#5、全局过滤器-GlobalFilter" class="headerlink" title="5、全局过滤器 GlobalFilter"></a>5、全局过滤器 GlobalFilter</h2><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与 GatewayFilter 的作用一样</p><p>区别在于GatewayFilter 通过配置定义，处理逻辑是固定的。而GlobalFilter 的逻辑需要自己写代码实现</p><p>定义方式是实现GlobalFilter 接口</p><p><img src="/img/springcloud_img/%E5%85%A8%E5%B1%80%E8%BF%87%E6%BB%A4%E5%99%A8GlobalFilter.png" alt="全局过滤器GlobalFilter"></p><p><strong>案例：</strong>定义全局过滤器，拦截并判断用户身份</p><p>需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：</p><ul><li>参数中是否有authorization，</li><li>authorization 参数值是否为admin</li></ul><p>如果同时满足则放行，否则拦截</p><p>定义一个类，实现接口<code>GlobalFilter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.gateway;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;<br><span class="hljs-keyword">import</span> org.springframework.core.Ordered;<br><span class="hljs-keyword">import</span> org.springframework.core.annotation.Order;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.MultiValueMap;<br><span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Mono;<br><br><span class="hljs-comment">//@Order(-1)  // 这个过滤器的执行优先级  参数越小，优先级越高</span><br><span class="hljs-meta">@Component</span>  <span class="hljs-comment">//将这个方法注册为Spring的组件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorizeFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span>, Ordered &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exchange</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> chain</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class="hljs-comment">//1、获取请求参数</span><br>        <span class="hljs-type">ServerHttpRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> exchange.getRequest();<br>        MultiValueMap&lt;String, String&gt; params = request.getQueryParams();<br><br>        <span class="hljs-comment">//2、获取参数中的authorization 参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">auth</span> <span class="hljs-operator">=</span> params.getFirst(<span class="hljs-string">&quot;authorization&quot;</span>);<br><br>        <span class="hljs-comment">//3、判断参数值是否等于admin</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span>.equals(auth))&#123;<br>            <span class="hljs-comment">//放行</span><br>            <span class="hljs-keyword">return</span> chain.filter(exchange);<br>        &#125;<br><br>        <span class="hljs-comment">//拦截</span><br>        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED); <span class="hljs-comment">//设置状态码  401：未登录</span><br>        <span class="hljs-keyword">return</span> exchange.getResponse().setComplete();<br>    &#125;<br><br>    <span class="hljs-comment">//实现 Ordered 接口，作用与注解 @Order() 一样</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>浏览器直接输入 <code>http://localhost:10010/order/101</code> ,会显示401</p><p><img src="/img/springcloud_img/%E6%A1%88%E4%BE%8B-%E6%9C%AA%E5%8A%A0%E5%8F%82%E6%95%B0.png" alt="案例-未加参数"></p><p>浏览器输入加上参数<code>?authorization=admin</code>，就会显示页面</p><p><img src="/img/springcloud_img/gateway%E5%85%A8%E5%B1%80%E8%BF%87%E6%BB%A4%E5%99%A8%E6%A1%88%E4%BE%8B.png" alt="gateway全局过滤器案例"></p><p><img src="/img/springcloud_img/gateway%E5%85%A8%E5%B1%80%E8%BF%87%E6%BB%A4%E5%99%A8%E6%80%BB%E7%BB%93.png" alt="gateway全局过滤器总结"></p><h2 id="6、过滤器链执行顺序"><a href="#6、过滤器链执行顺序" class="headerlink" title="6、过滤器链执行顺序"></a>6、过滤器链执行顺序</h2><p>请求进入网关会碰到三类过滤器：当前的路由过滤器、DefaultFilter、GlobalFilter</p><p>请求路由后，网关会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器</p><p><img src="/img/springcloud_img/%E8%BF%87%E6%BB%A4%E5%99%A8%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png" alt="过滤器执行顺序"></p><ul><li>每一个过滤器都必须指定一个int 类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong></li><li>GlobalFilter 通过实现Ordered 接口，或者添加@Order 注解来指定order 值，由我们自己指定</li><li>路由过滤器和defaultFiilter的order由Spring 指定，默认是按照声明顺序从1递增</li><li>当过滤器的order 值一样时，会按照<code>defaultFilter &gt; 路由过滤器 &gt; GlobalFilter</code> 的顺序执行</li></ul><p>可以参考下面及各类的源码来查看：</p><p><img src="/img/springcloud_img/gateway%E8%BF%87%E6%BB%A4%E5%99%A8%E9%93%BE%E6%BA%90%E7%A0%81.png" alt="gateway过滤器链源码"></p><p><img src="/img/springcloud_img/gateway%E8%BF%87%E6%BB%A4%E5%99%A8%E9%93%BE%E6%80%BB%E7%BB%93.png" alt="gateway过滤器链总结"></p><h2 id="7、网关的cors-跨域配置"><a href="#7、网关的cors-跨域配置" class="headerlink" title="7、网关的cors 跨域配置"></a>7、网关的cors 跨域配置</h2><p><strong>跨域问题处理</strong></p><p>跨域：域名不一致就是跨域，主要包括：</p><ul><li>域名不同：<code>www.taobao.com</code> 和 <code>www.taobao.org</code> 和 <code>www.jd.com</code> 和 <code>miaosha.jd.com</code></li><li>域名相同，端口不同：localhost:8080 和 localhost:8081</li></ul><p>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax 请求，请求被浏览器拦截的问题</p><p>解决方案：CORS</p><p>网关处理跨域采用的同样时CORS方案，并且只需要简单配置即可实现：</p><p><img src="/img/springcloud_img/CORS%E9%85%8D%E7%BD%AE.png" alt="CORS配置"></p><p><img src="/img/springcloud_img/Cors%E6%80%BB%E7%BB%93.png" alt="Cors总结"></p><h1 id="十、Docker"><a href="#十、Docker" class="headerlink" title="十、Docker"></a>十、Docker</h1><h2 id="1、Docker-架构"><a href="#1、Docker-架构" class="headerlink" title="1、Docker 架构"></a>1、Docker 架构</h2><h3 id="1-1、镜像和容器"><a href="#1-1、镜像和容器" class="headerlink" title="1.1、镜像和容器"></a>1.1、镜像和容器</h3><p><strong>镜像（Image）：</strong>Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像</p><p><strong>容器（Container）：</strong>镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器做隔离，对外不可见</p><h3 id="1-2、Docker和DockerHub"><a href="#1-2、Docker和DockerHub" class="headerlink" title="1.2、Docker和DockerHub"></a>1.2、Docker和DockerHub</h3><ul><li>DockerHub：<a href="https://hub.docker.com/">DockerHub</a>是一个Docker镜像的托管平台。这样的平台称为Docker Registry</li><li>国内也有类似于DockerHub的公开服务，比如 <a href="https://c.163yun.com/dashboard?nowLang=zh#/overview">网易云镜像服务</a>、<a href="https://cr.console.aliyun.com/cn-hangzhou/instances">阿里云镜像库</a> 等</li></ul><p><img src="/img/springcloud_img/DockerHub%E4%BB%8B%E7%BB%8D.png" alt="DockerHub介绍"></p><h3 id="1-3、Docker-架构"><a href="#1-3、Docker-架构" class="headerlink" title="1.3、Docker 架构"></a>1.3、Docker 架构</h3><p>Docker是一个CS架构的程序，由两部分组成：</p><ul><li>服务端（server）：Docker守护进程，负责处理Docker指令，管理镜像、容器等</li><li>客户端（client）：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令</li></ul><p><img src="/img/springcloud_img/Docker%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.png" alt="Docker整体架构"></p><p><img src="/img/springcloud_img/Docker%E6%9E%B6%E6%9E%84%E6%80%BB%E7%BB%93.png" alt="Docker架构总结"></p><p><strong>Docker安装步骤：</strong> <a href="https://pan.baidu.com/s/1aNGz8LjNOfqW7NLCnJZ0eg?pwd=snnz">https://pan.baidu.com/s/1aNGz8LjNOfqW7NLCnJZ0eg?pwd=snnz</a> </p><h2 id="2、Docker基本操作"><a href="#2、Docker基本操作" class="headerlink" title="2、Docker基本操作"></a>2、Docker基本操作</h2><h3 id="2-1、镜像操作"><a href="#2-1、镜像操作" class="headerlink" title="2.1、镜像操作"></a>2.1、镜像操作</h3><p><strong>镜像相关命令：</strong></p><ul><li>镜像名称一般分两部分组成：[repository]:[tag]</li><li>在没有指定tag时，默认是latest，代表最新版本的镜像</li></ul><p><strong>镜像操作命令：</strong></p><ul><li>获取镜像：<ul><li>方式1、本地获取：准备名为Dockerfile的文件，然后利用<code>docker build</code>命令构建镜像</li><li>方式2、远程拉取：通过<code>docker pull</code>从Docker Registry镜像服务器拉取</li></ul></li><li>查看镜像：<code>docker images</code></li><li>删除镜像：<code>docker rmi</code></li><li>分享镜像：<ul><li>方式1：通过<code>docker push</code> 推送镜像到Docker Registry镜像服务器</li><li>方式2：通过<code>docker save</code> 把镜像保存为一个压缩包，然后通过<code>docker load</code>把压缩包加载成镜像</li></ul></li></ul><p><img src="/img/springcloud_img/Docker%E9%95%9C%E5%83%8F%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4.png" alt="Docker镜像操作命令"></p><p><strong>案例：</strong>利用<code>docker save</code> 将nginx镜像导出磁盘，再通过<code>docker load</code> 加载回来</p><ul><li><p>步骤一：使用<code>docker save</code> 导出镜像到磁盘</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">docker save -o 导出的压缩文件路径 镜像</span><br>docker save -o nginx.tar nginx:latest<br></code></pre></td></tr></table></figure><p>导出之后，就会看到生成这个压缩文件了</p><p><img src="/img/springcloud_img/docker%E5%AF%BC%E5%87%BA%E6%96%87%E4%BB%B6.png" alt="docker把镜像导出为压缩文件"></p><p>之后把这个镜像删除</p></li><li><p>步骤二：利用<code>docker tag</code> 创建新镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">docker load -i 压缩文件路径</span><br>docker load -i nginx.tar<br></code></pre></td></tr></table></figure><p>导入之后就可以重新看到这个镜像了</p><p><img src="/img/springcloud_img/docker%E9%95%9C%E5%83%8F%E5%AF%BC%E5%85%A5.png" alt="docker镜像导入"></p></li></ul><h3 id="2-2、容器操作"><a href="#2-2、容器操作" class="headerlink" title="2.2、容器操作"></a>2.2、容器操作</h3><p><strong>容器相关命令</strong></p><p><img src="/img/springcloud_img/docker%E5%AE%B9%E5%99%A8%E6%93%8D%E4%BD%9C.png" alt="docker容器操作"></p><p><strong>案例：</strong>创建运行一个Nginx容器</p><p><strong>步骤一：</strong>去docker hub 查看Nginx 的容器运行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name mn -p 80:80 -d nginx<br></code></pre></td></tr></table></figure><ul><li>docker run：创建并运行一个容器</li><li>–name：给容器起一个名字</li><li>-p：端口映射【将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口】</li><li>-d：后台运行容器</li></ul><p><strong>步骤二：</strong>输入<code>192.168.88.130:80</code>访问nginx</p><p><img src="/img/springcloud_img/docker%E5%AE%B9%E5%99%A8%E6%A1%88%E4%BE%8B.png" alt="docker容器案例"></p><p><strong>步骤三：</strong>可以查看容器运行日志</p><p>输入 <code>docker logs 容器名</code> 就可以查看对应容器运行日志</p><p><img src="/img/springcloud_img/docker%E5%AE%B9%E5%99%A8%E6%A1%88%E4%BE%8B1.png" alt="docker容器案例1"></p><p><strong>持续查看日志：<code>docker logs -f 容器名</code></strong></p><p><strong>案例：</strong>进入Nginx容器，修改HTML文件内容，添加“你好你好”</p><p><strong>步骤一：</strong>进入容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it mn bash<br></code></pre></td></tr></table></figure><ul><li>docker exec：进入容器</li><li>-it：给当前进入的容器创建一个标准输入、输出终端，允许与容器交互</li><li>bash：进入容器后执行的命令，bash是一个linux终端交互命令</li></ul><p><strong>步骤二：</strong>进入nginx的HTML所在目录 <code>/usr/share/nginx/html/</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/share/nginx/html/<br></code></pre></td></tr></table></figure><p><strong>步骤三：</strong>修改index.html 的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i &#x27;s#Welcome to nginx#你好你好#g&#x27; index.html<br>sed -i &#x27;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#x27; index.html<br></code></pre></td></tr></table></figure><p>修改完成后，浏览器刷新<code>192.168.88.130:80</code> 就可以看到修改好的页面</p><p><img src="/img/springcloud_img/docker%E8%BF%9B%E5%85%A5%E5%AE%B9%E5%99%A8%E6%A1%88%E4%BE%8B.png" alt="docker进入容器案例"></p><h2 id="3、数据卷操作"><a href="#3、数据卷操作" class="headerlink" title="3、数据卷操作"></a>3、数据卷操作</h2><h3 id="3-1、数据卷介绍"><a href="#3-1、数据卷介绍" class="headerlink" title="3.1、数据卷介绍"></a>3.1、数据卷介绍</h3><p>容器与数据耦合的问题</p><p><img src="/img/springcloud_img/docker%E5%AE%B9%E5%99%A8%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%80%A6%E5%90%88%E9%97%AE%E9%A2%98.png" alt="docker容器与数据耦合问题"></p><p><strong>数据卷（volume）</strong>是一个虚拟目录，指向宿主机文件系统中的某个目录</p><p><img src="/img/springcloud_img/docker%E6%95%B0%E6%8D%AE%E5%8D%B7volume.png" alt="docker数据卷volume"></p><h3 id="3-2、操作数据卷"><a href="#3-2、操作数据卷" class="headerlink" title="3.2、操作数据卷"></a>3.2、操作数据卷</h3><p>数据卷操作的基本语法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker volume [COMMAND]<br></code></pre></td></tr></table></figure><p><code>docker volume</code> 命令是数据卷操作，根据命令后跟随的command 来确定下一步的操作：</p><ul><li>create          创建一个volume</li><li>inspect        显示一个或多个volume 的详细信息</li><li>ls                  列出所有的volume</li><li>prune          删除未使用的volume</li><li>rm                删除一个或多个指定的volume</li></ul><p><strong>案例：</strong>创建一个数据卷，并查看数据卷在宿主机的目录位置</p><p>1、创建数据卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker volume create 数据卷名称<br></code></pre></td></tr></table></figure><p>2、查看所有数据卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker volume ls<br></code></pre></td></tr></table></figure><p>3、查看数据卷详细信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker volume inspect 数据卷名称<br></code></pre></td></tr></table></figure><p><img src="/img/springcloud_img/docker%E6%95%B0%E6%8D%AE%E5%8D%B7-%E6%9F%A5%E7%9C%8B%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF.png" alt="docker数据卷-查看详细信息"></p><h3 id="3-3、挂载数据卷"><a href="#3-3、挂载数据卷" class="headerlink" title="3.3、挂载数据卷"></a>3.3、挂载数据卷</h3><p>在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器目录</p><p>举例说明：<code>docker run --name mn -v html:/root/html -p 8080:80 -d nginx</code></p><ul><li>docker run        创建并运行容器</li><li>–name mn        给容器起个名字叫mn</li><li>-v html:&#x2F;root&#x2F;html        把html数据卷挂载到容器内的&#x2F;root&#x2F;html 这个目录中</li><li>-p 8080:80          把宿主机的8080端口映射到容器内的80端口</li><li>-d                         后台运行容器</li></ul><p><strong>在创建容器时挂载数据卷，如果数据卷不存在，docker会自动创建数据卷</strong></p><p><strong>案例：</strong>创建并运行一个MySQL容器，将宿主机目录直接挂载到容器</p><p>提示：目录挂载与数据卷挂载的语法时类似的：</p><ul><li>-v [宿主机目录]：[容器内目录]</li><li>-v [宿主机文件]：[容器内文件]</li></ul><p>步骤：</p><ul><li>1、拉取镜像 或 通过load命令 将 <a href="https://pan.baidu.com/s/1Ol7m54vtT6n0A5LsCrUlcg?pwd=qinp">mysql.tar</a> 加载为镜像</li><li>2、创建 &#x2F;tmp&#x2F;mysql&#x2F;data 目录 和 &#x2F;tmp&#x2F;mysql&#x2F;conf 目录，将 <a href="https://pan.baidu.com/s/1sFZEUazeAwQiNxSigtqOXA?pwd=x8y7">hmy.cnf</a> 文件上传到 &#x2F;tmp&#x2F;mysql&#x2F;conf</li><li>3、去<a href="https://hub.docker.com/">DockerHub</a> 查阅MySQL，创建并运行MySQL容器，要求：<ul><li>1、挂载 &#x2F;tmp&#x2F;mysql&#x2F;data 到mysql容器内的数据存储目录</li><li>2、挂载 &#x2F;tmp&#x2F;mysql&#x2F;conf&#x2F;hmy.cnf 到mysql容器的配置文件</li><li>3、设置MySQL密码</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run \<br> --name mysql \<br> -e MYSQL_ROOT_PASSWORD=123 \<br> -p 3306:3306 \<br> -v /tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf \<br> -v /tmp/mysql/data:/var/lib/mysql \<br> -d \<br> mysql:5.7.25<br></code></pre></td></tr></table></figure><p><img src="/img/springcloud_img/docker%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%80%BB%E7%BB%93.png" alt="docker数据卷总结"></p><h2 id="4、Dockerfile-自定义镜像"><a href="#4、Dockerfile-自定义镜像" class="headerlink" title="4、Dockerfile 自定义镜像"></a>4、Dockerfile 自定义镜像</h2><h3 id="4-1、镜像结构"><a href="#4-1、镜像结构" class="headerlink" title="4.1、镜像结构"></a>4.1、镜像结构</h3><ul><li>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成</li></ul><p><img src="/img/springcloud_img/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%95%9C%E5%83%8F-%E9%95%9C%E5%83%8F%E7%BB%93%E6%9E%84.png" alt="自定义镜像-镜像结构"></p><p><img src="/img/springcloud_img/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%95%9C%E5%83%8F-%E9%95%9C%E5%83%8F%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93.png" alt="自定义镜像-镜像结构总结"></p><h3 id="4-2、Dockerfile"><a href="#4-2、Dockerfile" class="headerlink" title="4.2、Dockerfile"></a>4.2、Dockerfile</h3><p><strong>什么是Dockerfile</strong></p><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的<strong>指令（Instruction）</strong>，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer</p><p><img src="/img/springcloud_img/Dockerfile%E6%8C%87%E4%BB%A4.png" alt="Dockerfile指令"></p><p>官方文档：<a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p><p><strong>案例：</strong>基于Ubuntu镜像构建一个新镜像，运行一个java项目</p><ul><li><p>步骤1：新建一个空文件夹 docker-demo</p></li><li><p>步骤2：拷贝 <a href="https://pan.baidu.com/s/1Na8Oq5dVyUugkpxUSJLQug?pwd=a34g">docker-demo.jar</a>文件到 docker-demo 这个目录</p></li><li><p>步骤3：拷贝 <a href="https://pan.baidu.com/s/16Tcjz3IDyKOOanRgCAid7w?pwd=azh2">jdk8.tar.gz</a> 文件到 docker-demo 这个目录</p></li><li><p>步骤4：拷贝 <a href="https://pan.baidu.com/s/1Y_7kSGHDEgRgQimpWtgmLg?pwd=smcr">Dockerfile</a> 到 docker-demo 这个目录</p></li><li><p>步骤5：进入 docker-demo</p></li><li><p>步骤6：运行命令：<code>docker build -t javaweb:1.0 .</code></p></li><li><p>步骤7：创建并运行容器：<code>docker run --name web -p 8090:8090 -d javaweb:1.0</code></p></li><li><p>步骤8：浏览器输入<code>192.168.88.130:8090/hello/count</code> ，就可以看到容器成功启动了</p><p><img src="/img/springcloud_img/Dockerfile%E6%A1%88%E4%BE%8B.png" alt="Dockerfile案例"></p></li></ul><p>也可以基于 现有的 <code>java:8-alpine</code>镜像来构建新镜像，来运行java项目</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text"># Dockerfile文件<br># 指定基础镜像<br>FROM java:8-alpine<br><br>COPY ./docker-demo.jar /tmp/app.jar<br><br># 暴露端口<br>EXPOSE 8090<br># 入口，java项目的启动命令<br>ENTRYPOINT java -jar /tmp/app.jar<br></code></pre></td></tr></table></figure><p><img src="/img/springcloud_img/%E8%87%AA%E5%AE%9A%E4%B9%89Dockerfile%E6%80%BB%E7%BB%93.png" alt="自定义Dockerfile总结"></p><h2 id="5、DockerCompose"><a href="#5、DockerCompose" class="headerlink" title="5、DockerCompose"></a>5、DockerCompose</h2><h3 id="5-1、什么是DockerCompose"><a href="#5-1、什么是DockerCompose" class="headerlink" title="5.1、什么是DockerCompose"></a>5.1、什么是DockerCompose</h3><ul><li><p>Docker Compose 可以基于Compose 文件快速的部署分布式应用，而无需手动一个个创建和运行容器</p></li><li><p>Compose 文件是一个文本文件，通过指令定义集群中的每个容器如何运行</p><p><img src="/img/springcloud_img/DockerCompose%E7%A4%BA%E4%BE%8B.png" alt="DockerCompose示例"></p><p>DockerCompose的详细语法参考官网：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></p></li></ul><h3 id="5-2、安装DockerCompose"><a href="#5-2、安装DockerCompose" class="headerlink" title="5.2、安装DockerCompose"></a>5.2、安装DockerCompose</h3><p>参考：<a href="https://pan.baidu.com/s/1siBIEQyhp1Ni5DTOaP62vg?pwd=h5ff">https://pan.baidu.com/s/1siBIEQyhp1Ni5DTOaP62vg?pwd=h5ff</a></p><p><img src="/img/springcloud_img/DockerCompose%E6%80%BB%E7%BB%93.png" alt="DockerCompose总结"></p><h2 id="6、Docker镜像仓库"><a href="#6、Docker镜像仓库" class="headerlink" title="6、Docker镜像仓库"></a>6、Docker镜像仓库</h2><h3 id="常见镜像仓库服务"><a href="#常见镜像仓库服务" class="headerlink" title="常见镜像仓库服务"></a>常见镜像仓库服务</h3><p>镜像仓库（Docker Registry ）有公共的和私有的两种形式：</p><ul><li>公共仓库：例如Docker官方的<a href="https://hub.docker.com/">Docker Hub</a>，国内也有一些云服务商提供类似于Docker Hub 的公开服务，比如<a href="https://c.163.com/hub">网易云镜像服务</a>、<a href="https://hub.daocloud.io/">DaoCloud</a><a href="https://hub.daocloud.io/"> </a><a href="https://hub.daocloud.io/">镜像服务</a>、<a href="https://cr.console.aliyun.com/">阿里云镜像服务</a>等。</li><li>除了使用公开仓库外，用户还可以在本地搭建私有 DockerRegistry。企业自己的镜像最好是采用私有DockerRegistry来实现。</li></ul><h3 id="私有镜像仓库"><a href="#私有镜像仓库" class="headerlink" title="私有镜像仓库"></a>私有镜像仓库</h3><p><strong>参考：</strong><a href="https://pan.baidu.com/s/1siBIEQyhp1Ni5DTOaP62vg?pwd=h5ff">https://pan.baidu.com/s/1siBIEQyhp1Ni5DTOaP62vg?pwd=h5ff</a></p><h3 id="在私有镜像仓库推送或拉取镜像"><a href="#在私有镜像仓库推送或拉取镜像" class="headerlink" title="在私有镜像仓库推送或拉取镜像"></a>在私有镜像仓库推送或拉取镜像</h3><p>推送镜像到私有镜像服务必须先tag，步骤如下：</p><p>①重新tag本地镜像，名称前缀为私有仓库的地址：ip:8080&#x2F;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker tag 镜像名 私有仓库地址/自定义新镜像名<br></code></pre></td></tr></table></figure><p>②推送镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker push 私有仓库地址/自定义新镜像名<br></code></pre></td></tr></table></figure><p>③拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull 私有仓库地址/自定义新镜像名<br></code></pre></td></tr></table></figure><p><img src="/img/springcloud_img/docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E6%80%BB%E7%BB%93.png" alt="docker私有仓库总结"></p><h1 id="十一、服务异步通讯"><a href="#十一、服务异步通讯" class="headerlink" title="十一、服务异步通讯"></a>十一、服务异步通讯</h1><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><h3 id="1-、同步通讯的优缺点"><a href="#1-、同步通讯的优缺点" class="headerlink" title="(1)、同步通讯的优缺点"></a>(1)、同步通讯的优缺点</h3><p>微服务间基于Feign 的调用就属于同步方式，存在一些问题</p><p><img src="/img/springcloud_img/%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98.png" alt="同步调用的问题"></p><p><img src="/img/springcloud_img/%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98.png" alt="同步调用存在的问题"></p><p><img src="/img/springcloud_img/%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8%E6%80%BB%E7%BB%93.png" alt="同步调用总结"></p><h3 id="2-、异步调用的优缺点"><a href="#2-、异步调用的优缺点" class="headerlink" title="(2)、异步调用的优缺点"></a>(2)、异步调用的优缺点</h3><p>异步调用常见实现就是事件驱动模式</p><p><img src="/img/springcloud_img/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8.png" alt="事件驱动"></p><p>优势一：服务解耦</p><p>优势二：性能提升，吞吐量提高</p><p>优势三：服务没有强依赖，不担心级联失败问题</p><p>优势四：流量削峰</p><p><img src="/img/springcloud_img/%E5%BC%82%E6%AD%A5%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BB%93.png" alt="异步通信总结"></p><h3 id="3-、MQ"><a href="#3-、MQ" class="headerlink" title="(3)、MQ"></a>(3)、MQ</h3><p>MQ（MessageQueue），中文是消息队列，字面来看就是存放消息的队列。也就是事件驱动架构中的Broker</p><p><img src="/img/springcloud_img/MQ%E4%BB%8B%E7%BB%8D.png" alt="MQ介绍"></p><h2 id="2、RabbitMQ"><a href="#2、RabbitMQ" class="headerlink" title="2、RabbitMQ"></a>2、RabbitMQ</h2><h3 id="2-1、RabbitMQ概述"><a href="#2-1、RabbitMQ概述" class="headerlink" title="2.1、RabbitMQ概述"></a>2.1、RabbitMQ概述</h3><p>RabbitMQ 是基于Erlang 语言开发的开源消息通信中间件，官网地址：<a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a></p><p>安装RabbitMQ，参考：<a href="https://pan.baidu.com/s/16VoS-DNodUxa7KMibN3Dgw?pwd=2sv4">https://pan.baidu.com/s/16VoS-DNodUxa7KMibN3Dgw?pwd=2sv4</a></p><p>安装完成之后，浏览器输入：<code>192.168.88.130:15672</code>,就可以进入rabbitmq了</p><p><img src="/img/springcloud_img/rabbitmq%E5%AE%89%E8%A3%85.png" alt="rabbitmq安装"></p><p>其中：</p><ul><li>Overview 是总览，显示rabbitmq的一些节点信息</li><li>Connections 是连接，消息发送者和消息接收者都应该和RabbitMQ建立连接</li><li>Channels 是通道，建立连接之后，一定要创建通道，然后生产者和接收者才能基于Channels 完成消息的发送和接收</li><li>Exchanges 是交换机，是消息的路由器</li><li>Queues 是队列，用来做消息存储</li><li>Admin 是管理，可以管理当前用户信息</li></ul><p><strong>RabbtiMQ结构</strong></p><p><img src="/img/springcloud_img/RabbtiMQ%E7%BB%93%E6%9E%84.png" alt="RabbtiMQ结构"></p><p><img src="/img/springcloud_img/RabbitMQ%E6%80%BB%E7%BB%93.png" alt="RabbitMQ总结"></p><h3 id="2-2、MQ的常见消息模型"><a href="#2-2、MQ的常见消息模型" class="headerlink" title="2.2、MQ的常见消息模型"></a>2.2、MQ的常见消息模型</h3><p>MQ的官方文档中给出了5个MQ的Demo示例，对应了几种不同的用法：</p><p><img src="/img/springcloud_img/RabbitMQ%E5%B8%B8%E8%A7%81%E6%B6%88%E6%81%AF%E6%A8%A1%E5%9E%8B.png" alt="RabbitMQ常见消息模型"></p><p><strong>HelloWorld案例</strong></p><p>官方的HelloWorld是基于最基础的消息队列模型来实现的，只包括三个角色：</p><ul><li><p>publisher：消息发布者，将消息发送到队列queue</p></li><li><p>queue：消息队列，负责接收并缓存消息</p></li><li><p>consumer：订阅队列，处理队列中的消息</p><p><img src="/img/springcloud_img/RabbitMQ-HelloWorld%E6%A1%88%E4%BE%8B.png" alt="RabbitMQ-HelloWorld案例"></p></li></ul><p><img src="/img/springcloud_img/RabbitMQ-%E7%AE%80%E5%8D%95%E6%A1%88%E4%BE%8B%E6%80%BB%E7%BB%93.png" alt="RabbitMQ-简单案例总结"></p><h2 id="3、SpringAMQP"><a href="#3、SpringAMQP" class="headerlink" title="3、SpringAMQP"></a>3、SpringAMQP</h2><h3 id="3-1、基本介绍"><a href="#3-1、基本介绍" class="headerlink" title="3.1、基本介绍"></a>3.1、基本介绍</h3><p><strong>什么是SpringAMQP</strong></p><p>SpringAmqp的官方地址：<a href="https://spring.io/projects/spring-amqp">https://spring.io/projects/spring-amqp</a></p><p><img src="/img/springcloud_img/SpringAMQP%E4%BB%8B%E7%BB%8D.png" alt="SpringAMQP介绍"></p><h3 id="3-2、HelloWorld模型"><a href="#3-2、HelloWorld模型" class="headerlink" title="3.2、HelloWorld模型"></a>3.2、HelloWorld模型</h3><p><strong>案例：</strong>利用SpringAMQP实现HelloWorld终端额基础消息队列功能</p><ul><li><p>1、在父工程中引入 spring-amqp 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2、在 publisher 服务中利用RabbitTemplate 发送消息到 simple.queue 这个队列</p><ul><li><p>1、在 publisher 服务中编写application.yml ，添加mq连接信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.88</span><span class="hljs-number">.130</span>  <span class="hljs-comment"># 主机名</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span>  <span class="hljs-comment"># 端口</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/itcast</span>  <span class="hljs-comment"># 虚拟主机</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">itcast</span>  <span class="hljs-comment"># 用户名</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123321</span>  <span class="hljs-comment"># 密码</span><br></code></pre></td></tr></table></figure></li><li><p>2、注入<code>RabbitTemplate</code>，发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br>    <br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessage2SimpleQueue</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;simple.queue&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello , Spring AMQP !!&quot;</span>;<br>    rabbitTemplate.convertAndSend(queue,message);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>3、此时，在RabbitMQ中就可以看到发送的消息了</p><p><img src="/img/springcloud_img/RabbitMQ-HelloWorld%E6%B6%88%E6%81%AF%E7%A4%BA%E4%BE%8B.png" alt="RabbitMQ-HelloWorld消息示例"></p><p><img src="/img/springcloud_img/SpringAMQP%E5%85%A5%E9%97%A8%E6%80%BB%E7%BB%93.png" alt="SpringAMQP入门总结"></p></li></ul></li><li><p>3、在 consumer 服务中编写消费逻辑，绑定 simple.queue 这个队列</p><ul><li><p>1、在consumer 服务中编写 application.yml，添加mq 连接信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.88</span><span class="hljs-number">.130</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/itcast</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">itcast</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123321</span><br></code></pre></td></tr></table></figure></li><li><p>2、监听消息：在consumer 服务中新建一个类，编写消费逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringRabbitListener</span> &#123;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span>  <span class="hljs-comment">//queues = 队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenSimpleQueue</span><span class="hljs-params">(String msg)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;消费者接收到 simple.queue 的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>3、然后启动Spring，就可以看到接收到的消息了</p><p><img src="/img/springcloud_img/SpringAMQP-consumer%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF.png" alt="SpringAMQP-consumer接收消息"></p></li></ul></li></ul><p><strong>消息接收者在接收到消息之后，队列中的消息就没有了</strong></p><p><img src="/img/springcloud_img/SpringAMQP%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E6%80%BB%E7%BB%93.png" alt="SpringAMQP接收消息总结"></p><h3 id="3-3、WorkQueue模型"><a href="#3-3、WorkQueue模型" class="headerlink" title="3.3、WorkQueue模型"></a>3.3、WorkQueue模型</h3><p><strong>WorkQueue 工作队列</strong></p><p>WorkQueue工作队列，可以提高消息处理速度，避免队列消息堆积</p><p><img src="/img/springcloud_img/workqueue%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97.png" alt="workqueue工作队列"></p><p><strong>案例：</strong>模拟WorkQueue，实现一个队列绑定多个消费者</p><p>基本思路:</p><ul><li><p>1、在publisher 服务中定义测试方法，每秒产生50条消息，发送到 simple.queue</p><p><img src="/img/springcloud_img/WorkQueue%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E8%80%85.png" alt="WorkQueue消息发送者"></p></li><li><p>2、在consumer 服务中定义两个消息监听者，都监听simple.queue 队列</p><p>消费者1每秒处理50条消息，消费者2每秒处理10条消息</p><p><img src="/img/springcloud_img/WorkQueue%E6%B6%88%E6%81%AF%E6%8E%A5%E6%94%B6%E8%80%85.png" alt="WorkQueue消息接收者"></p></li></ul><p><strong>消息预取限制：</strong></p><p>修改application.yaml 文件，设置preFetch 这个值，可以控制预取消息的上限：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.88</span><span class="hljs-number">.130</span>  <span class="hljs-comment"># 主机名</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span>  <span class="hljs-comment"># 端口</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/itcast</span>  <span class="hljs-comment"># 虚拟主机</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">itcast</span>  <span class="hljs-comment"># 用户名</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123321</span>  <span class="hljs-comment"># 密码</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">prefetch:</span> <span class="hljs-number">1</span>  <span class="hljs-comment"># 每次只能获取一条消息，处理完成才能获取下一条消息</span><br></code></pre></td></tr></table></figure><p><img src="/img/springcloud_img/WorkQueue%E6%80%BB%E7%BB%93.png" alt="WorkQueue总结"></p><h3 id="3-4、发布订阅模型介绍"><a href="#3-4、发布订阅模型介绍" class="headerlink" title="3.4、发布订阅模型介绍"></a>3.4、发布订阅模型介绍</h3><p><strong>发布（Publish）、订阅（SubScribe）</strong></p><p>发布订阅模式与之前案例的区别就是允许将同一消息发送给多个消费者。实现方式是加入了exchange（交换机）</p><p><img src="/img/springcloud_img/SpringAMQP%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%9E%8B.png" alt="SpringAMQP发布订阅模型"></p><p>常见exchange 类型包括：</p><ul><li>Fanout：广播</li><li>Direct：路由</li><li>Topic：话题</li></ul><p><strong>注意：</strong>exchange 负责消息路由，而不是存储，路由失败则消息丢失</p><h3 id="3-5、发布订阅-Fanout-Exchange"><a href="#3-5、发布订阅-Fanout-Exchange" class="headerlink" title="3.5、发布订阅 - Fanout Exchange"></a>3.5、发布订阅 - Fanout Exchange</h3><p>Fanout Exchange 会将接收到的消息路由到每一个跟其绑定的queue</p><p><img src="/img/springcloud_img/FanoutExchange%E6%A8%A1%E5%9E%8B.png" alt="FanoutExchange模型"></p><p><strong>案例：</strong>利用SpringAMQP 演示FanoutExchange 的使用</p><p><img src="/img/springcloud_img/FanoutExchange%E6%A1%88%E4%BE%8B%E6%A8%A1%E5%9E%8B.png" alt="FanoutExchange案例模型"></p><p>实现思路：</p><ul><li>1、在consumer 服务中，利用代码声明队列、交换机，并将两者绑定</li><li>2、在consumer 服务中，编写两个消费者方法，分别监听两个队列：fanout.queue1、fanout.queue2</li><li>3、在publisher 中编写测试方法，向交换机 itcast.fanout 发送消息</li></ul><p><strong>步骤：</strong></p><ul><li><p>步骤1：在consumer 服务中声明Exchange、Queue、Binding</p><p>SpringAMQP 提供了声明交换机、队列、绑定关系的API，例如交换机的API：</p><p><img src="/img/springcloud_img/ExchangeAPI.png" alt="ExchangeAPI"></p><p>在consumer服务创建一个类，添加@Configuration注解，并声明FanoutExchange、Queue和绑定关系对象Binding</p><p><img src="/img/springcloud_img/FanoutExchange%E6%B6%88%E8%B4%B9%E8%80%85%E9%85%8D%E7%BD%AE%E7%B1%BB.png" alt="FanoutExchange消费者配置类"></p><p>此时启动消费者服务，就可以在RabbitMQ页面中看到声明的交换机和队列了</p><p><img src="/img/springcloud_img/FanoutExchange%E4%BA%A4%E6%8D%A2%E6%9C%BA.png" alt="FanoutExchange交换机"></p><p><img src="/img/springcloud_img/FanoutExchange%E9%98%9F%E5%88%97.png" alt="FanoutExchange队列"></p></li><li><p>步骤2：在consumer 服务中监听消息</p><p><img src="/img/springcloud_img/FanoutExchange%E6%B6%88%E8%B4%B9%E8%80%85%E7%9B%91%E5%90%AC%E9%98%9F%E5%88%97.png" alt="FanoutExchange消费者监听队列"></p></li><li><p>步骤3：在publisher 服务中发送消息到交换机</p><p><img src="/img/springcloud_img/FanoutExchange%E5%8F%91%E9%80%81%E8%80%85%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF.png" alt="FanoutExchange发送者发送消息"></p></li></ul><p>然后发送者发送消息，在所有的消费者中都可以接收到消息了</p><p><img src="/img/springcloud_img/FanoutExchange%E4%BA%A4%E6%8D%A2%E6%9C%BA%E6%80%BB%E7%BB%93.png" alt="FanoutExchange交换机总结"></p><h3 id="3-6、发布订阅-DirectExchange"><a href="#3-6、发布订阅-DirectExchange" class="headerlink" title="3.6、发布订阅 - DirectExchange"></a>3.6、发布订阅 - DirectExchange</h3><p>Direct Exchange 会将接收到的消息根据规则路由到指定的Queue，因此称为路由模式（routes）</p><ul><li>每一个Queue 都与Exchange 设置BindingKey</li><li>发布者发送消息时，指定消息的RoutingKey</li><li>Exchange 将消息路由到BindingKey 与消息RoutingKey 一致的队列</li></ul><p><img src="/img/springcloud_img/DirectExchange%E6%A8%A1%E5%9E%8B.png" alt="DirectExchange模型"></p><p><strong>案例：</strong>利用SpringAMQP 演示DirectExchange 的使用</p><p>实现思路:</p><ul><li><p>1、利用 <code>@RabbitListener</code> 声明Exchange、Bean、BindingKey</p></li><li><p>2、在consumer 服务中，编写两个消费者方法，分别监听两个队列：direct.queue1、direct.queue2</p></li><li><p>3、在publisher 服务中编写测试方法，向交换机 itcast.direct 发送消息</p><p><img src="/img/springcloud_img/DirectExchange%E6%A1%88%E4%BE%8B%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF.png" alt="DirectExchange案例实现思路"></p></li></ul><p><strong>步骤：</strong></p><ul><li><p>步骤1：在consumer 服务中，编写两个消费者方法，分别监听direct.queue1、direct.queue2，并利用 @RabbitListener 声明Exchange、Queue、RoutingKey</p><p><img src="/img/springcloud_img/DirectExchange%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E8%80%85.png" alt="DirectExchange消息消费者"></p></li><li><p>步骤2：在publisher 服务中编写测试方法，向交换机 itcast.direct 发送消息</p></li></ul><p><img src="/img/springcloud_img/DirectExchange%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E8%80%85%E6%A1%88%E4%BE%8B.png" alt="DirectExchange消息发送者案例"></p><p><img src="/img/springcloud_img/Direct%E4%BA%A4%E6%8D%A2%E6%9C%BA%E6%80%BB%E7%BB%93.png" alt="Direct交换机总结"></p><h3 id="3-7、发布订阅-TopicExchange"><a href="#3-7、发布订阅-TopicExchange" class="headerlink" title="3.7、发布订阅 - TopicExchange"></a>3.7、发布订阅 - TopicExchange</h3><p>TopicExchange 与DirectExchange 类似，区别在于RoutingKey 必须是多个单词的列表，并且以 <code>.</code> 分割</p><p>Queue 与Exchange 指定BindingKey 时可以使用通配符：</p><p>#  代指0或多个单词</p><p>* 代指一个单词</p><p><img src="/img/springcloud_img/TopicExchange%E6%A8%A1%E5%9E%8B.png" alt="TopicExchange模型"></p><p><strong>案例：</strong>利用SpringAMQP 演示TopicExchange 的使用</p><p>实现思路：</p><p><img src="/img/springcloud_img/TopicExchange%E6%A1%88%E4%BE%8B%E6%A8%A1%E5%9E%8B.png" alt="TopicExchange案例模型"></p><ul><li><p>1、在consumer服务中，编写两个消费者方法，分别监听两个消息：topic.queue1、topic.queue2，并利用@RabbitListener 声明Exchange、Queue、RoutingKey</p><p><img src="/img/springcloud_img/TopicExchange%E6%B6%88%E8%B4%B9%E8%80%85.png" alt="TopicExchange消费者"></p></li><li><p>2、在publisher 服务中编写测试方法。向itcast.topic 发送消息</p><p><img src="/img/springcloud_img/TopicExchange%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E8%80%85.png" alt="TopicExchange消息发送者"></p></li></ul><p><img src="/img/springcloud_img/TopicExchange%E6%80%BB%E7%BB%93.png" alt="TopicExchange总结"></p><h3 id="3-8、消息转换器"><a href="#3-8、消息转换器" class="headerlink" title="3.8、消息转换器"></a>3.8、消息转换器</h3><p>Spring对消息对象的处理是由<code>org.springframework.amqp.support.converter.MessageConverter</code>来处理的。而默认实现是<code>SimpleMessageConverter</code>，基于JDK的<code>ObjectOutputStream</code>完成序列化。</p><p>如果要修改只需要定义一个<code>MessageConverter</code> 类型的Bean即可。推荐用JSON方式序列化，步骤如下：</p><ul><li><p>1、引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2、在发送者服务声明MessageConverter：</p><p><img src="/img/springcloud_img/SpringAMQP%E6%B6%88%E6%81%AF%E8%BD%AC%E6%8D%A2%E5%99%A8.png" alt="SpringAMQP消息转换器"></p></li></ul><p><img src="/img/springcloud_img/SpringAMQP%E6%B6%88%E6%81%AF%E8%BD%AC%E6%8D%A2%E5%99%A8%E6%80%BB%E7%BB%93.png" alt="SpringAMQP消息转换器总结"></p><h1 id="十二、分布式搜索"><a href="#十二、分布式搜索" class="headerlink" title="十二、分布式搜索"></a>十二、分布式搜索</h1><h2 id="1、初识elasticsearch"><a href="#1、初识elasticsearch" class="headerlink" title="1、初识elasticsearch"></a>1、初识elasticsearch</h2><p><strong>什么是elasticsearch</strong></p><p>elasticsearch 是一款非常强大的开源搜索引擎，可以帮助从海量数据中快速找到需要的内容</p><p>elasticsearch 结合kibana、Logstash、Beats，也就是elastic stack（ELK）。被广泛应用在日志数据分析、实时监控等领域</p><p>elasticsearch 是elastic stack 的核心，负责存储、搜索、分析数据</p><p><img src="/img/springcloud_img/elasticsearch.png" alt="elasticsearch"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot2</title>
    <link href="/2024/02/26/SpringBoot2/"/>
    <url>/2024/02/26/SpringBoot2/</url>
    
    <content type="html"><![CDATA[<ul><li>视频：<a href="https://www.bilibili.com/video/BV15b4y1a7yG/?spm_id_from=333.337.search-card.all.click&vd_source=e710048bca758289bcc6b7e0e07eec72">https://www.bilibili.com/video/BV15b4y1a7yG/?spm_id_from=333.337.search-card.all.click&amp;vd_source=e710048bca758289bcc6b7e0e07eec72</a></li><li>文档：<a href="https://docs.spring.io/spring-boot/docs/2.7.12/reference/html/features.html#features.spring-application">https://docs.spring.io/spring-boot/docs/2.7.12/reference/html/features.html#features.spring-application</a></li></ul><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="1、入门案例"><a href="#1、入门案例" class="headerlink" title="1、入门案例"></a>1、入门案例</h2><p>阿里云镜像：<a href="http://start.aliyun.com/">http://start.aliyun.com</a></p><ul><li><p>starter：</p><ul><li>SpringBoot中常见项目名称，定义了当前项目使用的所有依赖坐标，以达到<strong>减少依赖配置</strong>的目的</li></ul></li><li><p>parent：</p><ul><li>所有SpringBoot项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到<strong>减少依赖冲突</strong>的目的</li><li>spring-boot-starter-parent 各版本间存在着诸多坐标版本不同</li></ul></li><li><p>引导类：</p><ul><li>SpringBoot的引导类是Boot工程的执行入口，运行main方法就可以启动项目</li><li>SpringBoot工程运行后初始化Spring容器，扫描引导类所在的包，加载bean</li></ul></li><li><p>内嵌Tomacat：</p><ul><li>SpringBoot内置了三款服务器：tomcat（默认）、jetty、undertow</li><li>内嵌Tomcat服务器是SpringBoot辅助功能之一</li><li>内嵌Tomcat工作原理：是将Tomcat服务器作为对象运行，并将该对象交给Spring容器管理</li><li>变更内嵌服务器的思想：是在pom文件中通过<code>&lt;exclusions&gt;</code>标签去除现有服务器，再通过<code>&lt;dependency&gt;</code>标签添加新的服务器。如何更换服务器：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <br><span class="hljs-comment">&lt;!--maven排除依赖：exclusions标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-comment">&lt;!--排除tomcat服务器依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--使用jetty服务器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="2、基础配置"><a href="#2、基础配置" class="headerlink" title="2、基础配置"></a>2、基础配置</h2><p><strong>复制工程：</strong></p><p><img src="/img/springboot2_img/%E5%A4%8D%E5%88%B6%E9%A1%B9%E7%9B%AE.jpg" alt="复制项目"></p><p>然后修改项目中pom文件的<code>&lt;artifactld&gt;</code>标准中内容为项目名,并且删除<code>&lt;name&gt;、&lt;description&gt;</code> 这两个标签</p><p><img src="/img/springboot2_img/%E5%A4%8D%E5%88%B6%E5%B7%A5%E7%A8%8B%E4%B9%8B%E4%BF%AE%E6%94%B9pom.jpg" alt="复制工程之修改pom"></p><p>在项目的文件夹下，只留下src文件夹和pom文件就行</p><p><img src="/img/springboot2_img/%E5%A4%8D%E5%88%B6%E9%A1%B9%E7%9B%AE%E4%B9%8B%E5%88%A0%E9%99%A4%E6%97%A0%E7%94%A8%E6%96%87%E4%BB%B6.jpg" alt="复制项目之删除无用文件"></p><h3 id="1、属性配置"><a href="#1、属性配置" class="headerlink" title="1、属性配置"></a>1、属性配置</h3><p>SpringBoot内置属性查询：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties</a></p><h3 id="2、配置文件分类"><a href="#2、配置文件分类" class="headerlink" title="2、配置文件分类"></a>2、配置文件分类</h3><p>三种格式的配置文件的优先级：properties格式 &gt; yml格式 &gt; yaml格式</p><p>不同配置文件中相同配置按照加载优先级相互覆盖，不同配置文件中不同配置全部保留</p><h3 id="3、yaml文件格式"><a href="#3、yaml文件格式" class="headerlink" title="3、yaml文件格式"></a>3、yaml文件格式</h3><ul><li>大小写敏感</li><li>属性层级关系使用多行描述，每行结尾使用冒号结束</li><li>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</li><li>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</li></ul><h3 id="4、yaml数据读取"><a href="#4、yaml数据读取" class="headerlink" title="4、yaml数据读取"></a>4、yaml数据读取</h3><h4 id="1-单一属性数据"><a href="#1-单一属性数据" class="headerlink" title="1.单一属性数据"></a>1.单一属性数据</h4><p>使用注解<code>@Value</code>读取单个数据，属性名引用方式：**<code>@Value(&quot;$&#123;一级属性名.二级属性名……&#125;&quot;)</code>**</p><h4 id="2-读取全部数据"><a href="#2-读取全部数据" class="headerlink" title="2.读取全部数据"></a>2.读取全部数据</h4><p>如果定义的数据量过大，SpringBoot提供了一个对象，能够把所有的数据都封装到这一个对象中，这个对象叫做Environment；</p><p>使用自动装配注解可以将所有的yaml数据封装到这个对象中;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *读取yml中的全部数据</span><br><span class="hljs-comment"> * 使用自动装配将所有的数据封装到对象Environment中</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> Environment env;<br></code></pre></td></tr></table></figure><p>使用<code>对象名.getProperty(yml中定义的key)</code>获取对应的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">country</span> <span class="hljs-operator">=</span> env.getProperty(<span class="hljs-string">&quot;country&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="3-yml中的数据引用"><a href="#3-yml中的数据引用" class="headerlink" title="3.yml中的数据引用"></a>3.yml中的数据引用</h4><p>在同一个yml中可以使用<code>$&#123;属性名&#125;</code>引用属性值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">baseDir:</span> <span class="hljs-string">/usr/local/fire</span><br> <br><span class="hljs-attr">center:</span><br>    <span class="hljs-attr">dataDir:</span> <span class="hljs-string">$&#123;baseDir&#125;/data</span><br>    <span class="hljs-attr">tmpDir:</span> <span class="hljs-string">$&#123;baseDir&#125;/tmp</span><br>    <span class="hljs-attr">logDir:</span> <span class="hljs-string">$&#123;baseDir&#125;/log</span><br>    <span class="hljs-attr">msgDir:</span> <span class="hljs-string">$&#123;baseDir&#125;/msgDir</span><br></code></pre></td></tr></table></figure><p>如果属性中出现转义字符，可以使用双引号包裹起来作为字符解析。</p><p>如果不加双引号，代表的是原字符串。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">baseDir:</span> <span class="hljs-string">c:\file</span><br> <br><span class="hljs-attr">center:</span><br>    <span class="hljs-attr">dataDir:</span> <span class="hljs-string">$&#123;baseDir&#125;\tmp</span>                 <span class="hljs-comment"># c:\file\tmp</span><br>    <span class="hljs-attr">dataDir:</span> <span class="hljs-string">&quot;$&#123;baseDir&#125;\tmp&quot;</span>               <span class="hljs-comment"># c:\filemp</span><br></code></pre></td></tr></table></figure><h4 id="4、将配置文件中的属性值绑定到Java对象中-主流写法-ConfigurationProperties注解"><a href="#4、将配置文件中的属性值绑定到Java对象中-主流写法-ConfigurationProperties注解" class="headerlink" title="4、将配置文件中的属性值绑定到Java对象中 (主流写法) @ConfigurationProperties注解"></a><strong>4、将配置文件中的属性值绑定到Java对象中 (主流写法) <code>@ConfigurationProperties</code>注解</strong></h4><p><strong><code>@ConfigurationProperties(prefix = &quot;datasource&quot;)</code></strong> : Spring Boot中用于绑定配置文件中的属性值到Java对象中的注解。prefix属性用于指定配置文件中的属性前缀，绑定时会自动匹配前缀相同的属性值到Java对象中。例如，prefix为”datasource”，则配置文件中的属性名需要以”datasource.”开头</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># application.yml</span><br><br><span class="hljs-attr">datasource:</span><br>  <span class="hljs-attr">driver:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost/springboot_db</span><br>  <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// MyDataSource.java</span><br><br><span class="hljs-meta">@Component</span>  <span class="hljs-comment">// 这个bean被Spring管理</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;datasource&quot;)</span>  <span class="hljs-comment">// Spring Boot中用于绑定配置文件中的属性值到Java对象中的注解。prefix属性用于指定配置文件中的属性前缀，绑定时会自动匹配前缀相同的属性值到Java对象中。例如，prefix为&quot;datasource&quot;，则配置文件中的属性名需要以&quot;datasource.&quot;开头</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDataSource</span> &#123;<br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-comment">//getter和setter</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Spring Boot会自动将配置文件中以”datasource.”开头的属性值绑定到DataSourceConfig对象中的对应属性上。我们可以在其他的Java类中使用<code>@Autowired</code>注解来注入这个对象，从而获取配置文件中的属性值。</p><h2 id="3、整合第三方技术"><a href="#3、整合第三方技术" class="headerlink" title="3、整合第三方技术"></a>3、整合第三方技术</h2><h3 id="1、整合JUnit"><a href="#1、整合JUnit" class="headerlink" title="1、整合JUnit"></a>1、整合JUnit</h3><h5 id="1、导入测试对应的starter（SpringBoot自动导入了）"><a href="#1、导入测试对应的starter（SpringBoot自动导入了）" class="headerlink" title="1、导入测试对应的starter（SpringBoot自动导入了）"></a>1、导入测试对应的starter（SpringBoot自动导入了）</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2、测试类使用-SpringBootTest注解修饰（SpringBoot自带了）"><a href="#2、测试类使用-SpringBootTest注解修饰（SpringBoot自带了）" class="headerlink" title="2、测试类使用@SpringBootTest注解修饰（SpringBoot自带了）"></a>2、测试类使用<code>@SpringBootTest</code>注解修饰（SpringBoot自带了）</h5><h5 id="3、使用-Autowired自动装配的形式添加要测试的对象"><a href="#3、使用-Autowired自动装配的形式添加要测试的对象" class="headerlink" title="3、使用@Autowired自动装配的形式添加要测试的对象"></a>3、使用<code>@Autowired</code>自动装配的形式添加要测试的对象</h5><h3 id="2、整合MyBatis"><a href="#2、整合MyBatis" class="headerlink" title="2、整合MyBatis"></a>2、整合MyBatis</h3><ul><li>核心配置：数据库连接相关信息（连什么？连谁？什么权限？）</li><li>映射配置：SQL映射（xml &#x2F; 注解）</li></ul><h4 id="1、导入对应的starter"><a href="#1、导入对应的starter" class="headerlink" title="1、导入对应的starter"></a>1、导入对应的starter</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--pom.xml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、配置数据源"><a href="#2、配置数据源" class="headerlink" title="2、配置数据源"></a>2、配置数据源</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># application.yml</span><br><span class="hljs-comment"># 配置数据库相关连接信息---dataSource对象</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://主机:端口/数据库?serverTimezone=UTC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">用户名</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">密码</span><br></code></pre></td></tr></table></figure><h4 id="3、编写接口"><a href="#3、编写接口" class="headerlink" title="3、编写接口"></a>3、编写接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;select * from t_user where id = #&#123;id&#125;&quot;)</span><br>    Book <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot05MybatisApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    BookDao bookDao;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> bookDao.getById(<span class="hljs-number">9</span>);<br>        System.out.println(<span class="hljs-string">&quot;book = &quot;</span> + book);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、整合MyBaits-plus"><a href="#3、整合MyBaits-plus" class="headerlink" title="3、整合MyBaits-plus"></a>3、整合MyBaits-plus</h3><h4 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--mybatis-plus--&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.baomidou/mybatis-plus --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、配置数据源-1"><a href="#2、配置数据源-1" class="headerlink" title="2、配置数据源"></a>2、配置数据源</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># application.yml</span><br><span class="hljs-comment"># 配置数据库相关连接信息---dataSource对象</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://主机:端口/数据库?serverTimezone=UTC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">用户名</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">密码</span><br><br><span class="hljs-comment"># 设置MyBatis-plus相关配置</span><br><span class="hljs-comment"># 指定数据库表名的前缀为t_</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">table-prefix:</span> <span class="hljs-string">t_</span><br></code></pre></td></tr></table></figure><h4 id="3、Mapper中继承BaseMapper接口"><a href="#3、Mapper中继承BaseMapper接口" class="headerlink" title="3、Mapper中继承BaseMapper接口"></a>3、Mapper中继承BaseMapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用mybatis-plus 很多基础的方法都在BaseMapper&lt;T&gt;接口中定义好了，使用的时候直接继承BaseMapper就行</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、测试-1"><a href="#4、测试-1" class="headerlink" title="4、测试"></a>4、测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot06MybatisplusApplicationTests</span> &#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserDao userDao;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userDao.selectById(<span class="hljs-number">10</span>);<br>System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetAll</span><span class="hljs-params">()</span>&#123;<br>List&lt;User&gt; users = userDao.selectList(<span class="hljs-literal">null</span>);<br>users.forEach(System.out::println);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、整合Druid"><a href="#4、整合Druid" class="headerlink" title="4、整合Druid"></a>4、整合Druid</h3><h4 id="1、引入druid依赖"><a href="#1、引入druid依赖" class="headerlink" title="1、引入druid依赖"></a>1、引入druid依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--引入druid--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、配置数据源-2"><a href="#2、配置数据源-2" class="headerlink" title="2、配置数据源"></a>2、配置数据源</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 方式1：不推荐</span><br><span class="hljs-comment">#spring:</span><br><span class="hljs-comment">#  datasource:</span><br><span class="hljs-comment">#    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="hljs-comment">#    url: jdbc:mysql://主机:端口/数据库?serverTimezone=UTC</span><br><span class="hljs-comment">#    username: 用户名</span><br><span class="hljs-comment">#    password: 密码</span><br><span class="hljs-comment">#    type: com.alibaba.druid.pool.DruidDataSource  # 指定Druid数据源</span><br><br><span class="hljs-comment"># 方式2：推荐</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">druid:</span>   <span class="hljs-comment"># 在这里多一层</span><br>        <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://主机:端口/数据库?serverTimezone=UTC</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">用户名</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">密码</span><br></code></pre></td></tr></table></figure><h4 id="3、其他"><a href="#3、其他" class="headerlink" title="3、其他"></a>3、其他</h4><p>其他方面与整合MyBatis一样</p><h2 id="4、基于SpringBoot的SSMP整合案例"><a href="#4、基于SpringBoot的SSMP整合案例" class="headerlink" title="4、基于SpringBoot的SSMP整合案例"></a>4、基于SpringBoot的SSMP整合案例</h2><h3 id="1、创建工程，引入依赖"><a href="#1、创建工程，引入依赖" class="headerlink" title="1、创建工程，引入依赖"></a>1、创建工程，引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- pom.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--mybatis-plus--&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.baomidou/mybatis-plus --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--druid--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># application.yml</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><h3 id="2、创建数据库表"><a href="#2、创建数据库表" class="headerlink" title="2、创建数据库表"></a>2、创建数据库表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for tbl_book</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `tbl_book`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tbl_book`  (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `type` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `description` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">51</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8_general_ci ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;<br> <br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of tbl_book</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;Spring实战 第5版&#x27;</span>, <span class="hljs-string">&#x27;Spring入门经典教程，深入理解Spring原理技术内幕&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;Spring 5核心原理与30个类手写实战&#x27;</span>, <span class="hljs-string">&#x27;十年沉淀之作，手写Spring精华思想&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;Spring 5 设计模式&#x27;</span>, <span class="hljs-string">&#x27;深入Spring源码剖析Spring源码中蕴含的10大设计模式&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;Spring MVC+MyBatis开发从入门到项目实战&#x27;</span>, <span class="hljs-string">&#x27;全方位解析面向Web应用的轻量级框架，带你成为Spring MVC开发高手&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;轻量级Java Web企业应用实战&#x27;</span>, <span class="hljs-string">&#x27;源码级剖析Spring框架，适合已掌握Java基础的读者&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;Java核心技术 卷I 基础知识（原书第11版）&#x27;</span>, <span class="hljs-string">&#x27;Core Java 第11版，Jolt大奖获奖作品，针对Java SE9、10、11全面更新&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;深入理解Java虚拟机&#x27;</span>, <span class="hljs-string">&#x27;5个维度全面剖析JVM，大厂面试知识点全覆盖&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;Java编程思想（第4版）&#x27;</span>, <span class="hljs-string">&#x27;Java学习必读经典,殿堂级著作！赢得了全球程序员的广泛赞誉&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">9</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;零基础学Java（全彩版）&#x27;</span>, <span class="hljs-string">&#x27;零基础自学编程的入门图书，由浅入深，详解Java语言的编程思想和核心技术&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;市场营销&#x27;</span>, <span class="hljs-string">&#x27;直播就该这么做：主播高效沟通实战指南&#x27;</span>, <span class="hljs-string">&#x27;李子柒、李佳琦、薇娅成长为网红的秘密都在书中&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">11</span>, <span class="hljs-string">&#x27;市场营销&#x27;</span>, <span class="hljs-string">&#x27;直播销讲实战一本通&#x27;</span>, <span class="hljs-string">&#x27;和秋叶一起学系列网络营销书籍&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;市场营销&#x27;</span>, <span class="hljs-string">&#x27;直播带货：淘宝、天猫直播从新手到高手&#x27;</span>, <span class="hljs-string">&#x27;一本教你如何玩转直播的书，10堂课轻松实现带货月入3W+&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="3、实体类快速开发—–lombok"><a href="#3、实体类快速开发—–lombok" class="headerlink" title="3、实体类快速开发—–lombok"></a>3、实体类快速开发—–lombok</h3><h4 id="3-1、引入依赖"><a href="#3-1、引入依赖" class="headerlink" title="3.1、引入依赖"></a>3.1、引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--lombok--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-2、在实体类上加上注解-Data"><a href="#3-2、在实体类上加上注解-Data" class="headerlink" title="3.2、在实体类上加上注解@Data"></a>3.2、在实体类上加上注解<code>@Data</code></h4><p>可以为当前实体类在编译期设置对应的get&#x2F;set方法，toString方法，hashCode方法，equals方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String type;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String description;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、数据层标准开发（基础MyBatisPlus）"><a href="#4、数据层标准开发（基础MyBatisPlus）" class="headerlink" title="4、数据层标准开发（基础MyBatisPlus）"></a>4、数据层标准开发（基础MyBatisPlus）</h3><h4 id="1、在application-yml文件中配置表前缀和表的id的策略"><a href="#1、在application-yml文件中配置表前缀和表的id的策略" class="headerlink" title="1、在application.yml文件中配置表前缀和表的id的策略"></a>1、在application.yml文件中配置表前缀和表的id的策略</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># MyBatisPlus相关配置</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">table-prefix:</span> <span class="hljs-string">tbl_</span>   <span class="hljs-comment"># 表前缀</span><br>      <span class="hljs-attr">id-type:</span> <span class="hljs-string">auto</span>  <span class="hljs-comment"># 数据库的自增策略。</span><br></code></pre></td></tr></table></figure><h4 id="2、编写一个接口实现BaseMapper，并指定泛型"><a href="#2、编写一个接口实现BaseMapper，并指定泛型" class="headerlink" title="2、编写一个接口实现BaseMapper，并指定泛型"></a>2、编写一个接口实现BaseMapper，并指定泛型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.example.springboot.domain.Book;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Book&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoTestCase</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testgetById</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> bookDao.selectById(<span class="hljs-number">1</span>);  <span class="hljs-comment">// 根据id查询单个</span><br>        System.out.println(<span class="hljs-string">&quot;book = &quot;</span> + book);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSave</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>        book.setType(<span class="hljs-string">&quot;测试数据123&quot;</span>);<br>        book.setName(<span class="hljs-string">&quot;测试数据123&quot;</span>);<br>        book.setDescription(<span class="hljs-string">&quot;测试数据123&quot;</span>);<br>        bookDao.insert(book);  <span class="hljs-comment">//新增。需要配置id的策略</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>        book.setId(<span class="hljs-number">51</span>);<br>        book.setType(<span class="hljs-string">&quot;测试数据324234&quot;</span>);<br>        book.setName(<span class="hljs-string">&quot;测试数据43423423&quot;</span>);<br>        book.setDescription(<span class="hljs-string">&quot;测试数据123&quot;</span>);<br>        bookDao.updateById(book);  <span class="hljs-comment">//根据id修改</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDelete</span><span class="hljs-params">()</span> &#123;<br>        bookDao.deleteById(<span class="hljs-number">51</span>);  <span class="hljs-comment">// 根据id删除</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetAll</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Book&gt; books = bookDao.selectList(<span class="hljs-literal">null</span>);  <span class="hljs-comment">// 查询所有</span><br>        books.forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、开启MyBatisPlus运行日志"><a href="#4、开启MyBatisPlus运行日志" class="headerlink" title="4、开启MyBatisPlus运行日志"></a>4、开启MyBatisPlus运行日志</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># MyBatisPlus相关配置</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">table-prefix:</span> <span class="hljs-string">tbl_</span>   <span class="hljs-comment"># 表前缀</span><br>      <span class="hljs-attr">id-type:</span> <span class="hljs-string">auto</span>  <span class="hljs-comment"># 数据库的自增策略。</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span>  <span class="hljs-comment"># 标准输出，将日志信息输出到控制台</span><br></code></pre></td></tr></table></figure><h4 id="5、MyBatisPlus分页"><a href="#5、MyBatisPlus分页" class="headerlink" title="5、MyBatisPlus分页"></a>5、MyBatisPlus分页</h4><h5 id="1、创建一个配置类，配置MyBaitisPlus的拦截器"><a href="#1、创建一个配置类，配置MyBaitisPlus的拦截器" class="headerlink" title="1、创建一个配置类，配置MyBaitisPlus的拦截器"></a>1、创建一个配置类，配置MyBaitisPlus的拦截器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springboot.config;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">//这是一个配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MPConfig</span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * MyBatisPlus的拦截器，作用是分页，也就是在sql语句后面拼接limit</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>());  <span class="hljs-comment">//作用是分页，也就是在sql语句后面拼接limit</span><br>        <span class="hljs-keyword">return</span> interceptor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h5><p><img src="/img/springboot2_img/MyBatisPlus%E5%88%86%E9%A1%B5%E6%B5%8B%E8%AF%95.jpg" alt="MyBatisPlus分页测试"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetPage</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">IPage</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);<br>    bookDao.selectPage(page, <span class="hljs-literal">null</span>);<br>    System.out.println(page.getCurrent());  <span class="hljs-comment">// 当前页码</span><br>    System.out.println(page.getSize());  <span class="hljs-comment">// 每页记录数</span><br>    System.out.println(page.getTotal());  <span class="hljs-comment">// 总记录数</span><br>    System.out.println(page.getPages());  <span class="hljs-comment">// 总页数</span><br>    System.out.println(page.getRecords());  <span class="hljs-comment">// 查询出来的详细数据</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6、MyBatisPlus条件查询"><a href="#6、MyBatisPlus条件查询" class="headerlink" title="6、MyBatisPlus条件查询"></a>6、MyBatisPlus条件查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 有两种写法，QueryWrapper和LambdaQueryWrapper，推荐第二种</span><br><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetByCondition</span><span class="hljs-params">()</span> &#123;  <span class="hljs-comment">// 按条件查询</span><br>        <span class="hljs-comment">//QueryWrapper就是查询条件</span><br>        QueryWrapper&lt;Book&gt; qw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        qw.like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Spring&quot;</span>);  <span class="hljs-comment">//查询name中包含Spring的数据</span><br>        List&lt;Book&gt; books = bookDao.selectList(qw);<br>        books.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetByCondition2</span><span class="hljs-params">()</span> &#123;  <span class="hljs-comment">// 按条件查询</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Spring&quot;</span>;<br>        <span class="hljs-comment">//LambdaQueryWrapper也是查询条件</span><br>        LambdaQueryWrapper&lt;Book&gt; lqw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>        lqw.like(name != <span class="hljs-literal">null</span>, Book::getName, name);  <span class="hljs-comment">//查询name中包含Spring的数据。第一个参数是布尔值，true就拼接like，false不拼接。可不写。</span><br>        List&lt;Book&gt; books = bookDao.selectList(lqw);<br>        books.forEach(System.out::println);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="5、业务层开发（快速开发——MyBatisPlus）"><a href="#5、业务层开发（快速开发——MyBatisPlus）" class="headerlink" title="5、业务层开发（快速开发——MyBatisPlus）"></a>5、业务层开发（快速开发——MyBatisPlus）</h3><ul><li>Service层接口定义与数据层接口定义具有较大区别。举例：<ul><li>业务层：<code>login(String username,String password)</code></li><li>数据层：<code>selectByUsernameAndPassword(String username,String password)</code></li></ul></li></ul><p>快速开发方案：</p><ul><li>使用MyBatisPlus提供的业务层通用接口（<code>IService&lt;T&gt;</code>）与业务层通用实现类（<code>ServiceImpl&lt;M,T&gt;</code>）</li><li>可以在通用类基础上做功能重载或功能追加</li><li>注意重载时不要覆盖原始操作，避免原始提供的功能丢失</li></ul><h4 id="5-1、定义接口-继承IService接口"><a href="#5-1、定义接口-继承IService接口" class="headerlink" title="5.1、定义接口,继承IService接口"></a>5.1、定义接口,继承IService接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;<br><span class="hljs-keyword">import</span> com.example.springboot.domain.Book;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;Book&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2、定义实现类，继承ServiceImpl类，实现上一步定义的接口"><a href="#5-2、定义实现类，继承ServiceImpl类，实现上一步定义的接口" class="headerlink" title="5.2、定义实现类，继承ServiceImpl类，实现上一步定义的接口"></a>5.2、定义实现类，继承ServiceImpl类，实现上一步定义的接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;<br><span class="hljs-keyword">import</span> com.example.springboot.dao.BookDao;<br><span class="hljs-keyword">import</span> com.example.springboot.domain.Book;<br><span class="hljs-keyword">import</span> com.example.springboot.service.BookService;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;BookDao, Book&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、表现层开发"><a href="#6、表现层开发" class="headerlink" title="6、表现层开发"></a>6、表现层开发</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springboot.controller;<br><br><span class="hljs-keyword">import</span> com.example.springboot.domain.Book;<br><span class="hljs-keyword">import</span> com.example.springboot.service.IBookService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/books&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IBookService bookService;<br><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> bookService.list();<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book)</span> &#123;<br>        <span class="hljs-keyword">return</span> bookService.save(book);<br>    &#125;<br><br>    <span class="hljs-meta">@PutMapping</span><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book)</span> &#123;<br>        <span class="hljs-keyword">return</span> bookService.updateById(book);<br>    &#125;<br><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> bookService.removeById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Book <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> bookService.getById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> IPage&lt;Book&gt; <span class="hljs-title function_">getPage</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> currentPage,<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> pageSize)</span>&#123;<br>        <span class="hljs-keyword">return</span> bookService.getPage(currentPage,pageSize);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7、表现层消息一致性处理"><a href="#7、表现层消息一致性处理" class="headerlink" title="7、表现层消息一致性处理"></a>7、表现层消息一致性处理</h3><ul><li>设计表现层返回结果的模型类，用于后端与前端进行数据格式同意，也称为<font color=#3271ae><strong>前后端数据协议</strong></font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Result</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Result</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String message)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Result</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String message, T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = message;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-comment">// 省略getter和setter方法</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;&gt;(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;success&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">(T data)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;&gt;(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;success&quot;</span>, data);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">error</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String message)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;&gt;(code, message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8、异常消息处理"><a href="#8、异常消息处理" class="headerlink" title="8、异常消息处理"></a>8、异常消息处理</h3><p>只需要定义一个统一异常处理的类，并使用<code>@ControllerAdvice</code>注解来标注这个类；然后在这个类中定义不同的方法，方法的返回值也是返回给前端的模型类，使用<code>@ExceptionHandler</code>注解标注具体的各个方法。就可以解决发生异常时返回给前端的数据格式不统一的问题了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br><br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">handleException</span><span class="hljs-params">(Exception e)</span> &#123;<br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();<br>        result.setCode(<span class="hljs-string">&quot;500&quot;</span>);<br>        result.setMessage(<span class="hljs-string">&quot;服务器出现异常，请稍后再试&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="实用1"><a href="#实用1" class="headerlink" title="实用1"></a>实用1</h1><h2 id="1、打包与运行"><a href="#1、打包与运行" class="headerlink" title="1、打包与运行"></a>1、打包与运行</h2><h3 id="1、windows操作"><a href="#1、windows操作" class="headerlink" title="1、windows操作"></a>1、windows操作</h3><h4 id="1、SpringBoot项目快速启动（Windows版）"><a href="#1、SpringBoot项目快速启动（Windows版）" class="headerlink" title="1、SpringBoot项目快速启动（Windows版）"></a>1、SpringBoot项目快速启动（Windows版）</h4><ul><li><p>①、对SpringBoot项目打包（执行Maven构建指令package）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn package<br></code></pre></td></tr></table></figure></li><li><p>②、运行项目（执行启动指令）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -jar springboot.jar<br></code></pre></td></tr></table></figure></li><li><p>注意事项：</p><p>jar支持命令行启动需要依赖maven插件支持，要确定打包时是否具有SpringBoot对应的maven插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2、Windows端口被占用"><a href="#2、Windows端口被占用" class="headerlink" title="2、Windows端口被占用"></a>2、Windows端口被占用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查询端口</span><br>netstat -ano<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查询指定端口</span><br>netstat -ano | findstr &quot;端口号&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">根据进程PID查询进程名称</span><br>tasklist | findstr &quot;进程PID号&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">根据PID杀死任务</span><br>taskkill /F /PID &quot;进程PID号&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">根据进程名称杀死任务</span><br>taskkill -f -t -im &quot;进程名称&quot;<br></code></pre></td></tr></table></figure><h3 id="2、Linux启动jar包"><a href="#2、Linux启动jar包" class="headerlink" title="2、Linux启动jar包"></a>2、Linux启动jar包</h3><p>跟Windows一样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -jar springboot_08_ssmp-0.0.1-SNAPSHOT.jar<br></code></pre></td></tr></table></figure><h2 id="2、配置文件相关"><a href="#2、配置文件相关" class="headerlink" title="2、配置文件相关"></a>2、配置文件相关</h2><h3 id="1、临时属性设置"><a href="#1、临时属性设置" class="headerlink" title="1、临时属性设置"></a>1、临时属性设置</h3><h4 id="1-1、命令行设置临时属性"><a href="#1-1、命令行设置临时属性" class="headerlink" title="1.1、命令行设置临时属性"></a>1.1、命令行设置临时属性</h4><ul><li>使用jar命令启动SpringBoot工程时可以使用临时属性替换配置文件中的属性</li><li>临时属性添加方式：<code>java -jar 工程名.jar --属性名=值</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -jar springboot_08_ssmp-0.0.1-SNAPSHOT.jar --server.port=8080<br></code></pre></td></tr></table></figure><ul><li>如果携带多个属性，使用空格分隔</li><li>临时属性必须是当前boot工程支持的属性，否则设置无效</li></ul><h4 id="1-2、在IDEA中设置临时属性"><a href="#1-2、在IDEA中设置临时属性" class="headerlink" title="1.2、在IDEA中设置临时属性"></a>1.2、在IDEA中设置临时属性</h4><p><img src="/img/springboot2_img/%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE.jpg" alt="编辑配置"></p><p><img src="/img/springboot2_img/%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE2.jpg" alt="编辑配置2"></p><p><img src="/img/springboot2_img/%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE3.jpg" alt="编辑配置3"></p><p><img src="/img/springboot2_img/%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE4.jpg" alt="编辑配置4"></p><p>之后在启动项目时，就会自动加载在上面配置的内容了</p><h4 id="1-3、启动类相关知识"><a href="#1-3、启动类相关知识" class="headerlink" title="1.3、启动类相关知识"></a>1.3、启动类相关知识</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// SpringBoot的启动类</span><br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SSMPApplication</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <span class="hljs-comment">// main方法的这个args参数就是我们手动设置的这些命令行参数。</span><br>SpringApplication.run(SSMPApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>SpringApplication.run(SSMPApplication.class, args);</code>就是SpringBoot项目的入口方法</p><ul><li>这里的第二个参数<code>args</code>是一个字符串数组，用于传递命令行参数。例如指定配置文件的路径、设置日志级别等等。这些参数在应用程序中被main方法的args数组读取和使用。</li><li><code>args</code>参数是可选的，如果不需要传递命令行参数，则可以省略。在这种情况下，<code>args</code>默认为一个空数组。</li></ul><h3 id="2、配置文件等级"><a href="#2、配置文件等级" class="headerlink" title="2、配置文件等级"></a>2、配置文件等级</h3><p>SpringBoot中4级配置文件：</p><ul><li>1级：jar包外：config&#x2F;application.yml 用于运维经理整体调控    <strong><font color=#3271ae>【最高】</font></strong></li><li>2级：jar包外：application.yml 用于运维人员配置涉密线上环境</li><li>3级：classpath：config&#x2F;application.yml 用于项目经理整体调控</li><li>4级：classpath：application.yml 用于开发人员本机开发与测试      <strong><font color=#3271ae>【最低】</font></strong></li></ul><p>作用：</p><ul><li>1级与2级是系统打包后设置通用属性，1级常用于运维经理进行线上整体项目部署方案调控</li><li>3级与4级用于系统开发阶段设置通用属性，3级常用于项目经理进行整体项目属性调控</li></ul><p>多层级配置文件间的属性采用叠加并覆盖的形式作用于程序</p><h3 id="3、自定义配置文件"><a href="#3、自定义配置文件" class="headerlink" title="3、自定义配置文件"></a>3、自定义配置文件</h3><p>配置文件可以修改名称和路径，有两种方式：</p><ul><li><p>方式1：使用<code>--spring.config.name=配置文件名</code>（不用写文件扩展名）</p><p><img src="/img/springboot2_img/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B61.jpg" alt="自定义配置文件方式1"></p></li><li><p>方式2：使用<code>--spring.config.location=classpath:/配置文件名</code>（要写扩展名，可以配置多个，中间使用逗号分隔）</p><p><img src="/img/springboot2_img/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B62.jpg" alt="自定义配置文件方式2"></p></li></ul><blockquote><ul><li>单服务器项目：使用自定义配置文件需求较低</li><li>多服务器项目：使用自定义配置文件需求较高，将所有配置文件放置在同一个目录中，统一管理</li><li>基于SpringCloud技术：所有的服务器将不再设置配置文件，而是通过配置中心进行设定，动态加载配置信息</li></ul></blockquote><h2 id="3、多环境开发"><a href="#3、多环境开发" class="headerlink" title="3、多环境开发"></a>3、多环境开发</h2><h3 id="1、yaml版多环境开发"><a href="#1、yaml版多环境开发" class="headerlink" title="1、yaml版多环境开发"></a>1、yaml版多环境开发</h3><h4 id="1-1、在同一个yaml文件中设置多环境"><a href="#1-1、在同一个yaml文件中设置多环境" class="headerlink" title="1.1、在同一个yaml文件中设置多环境"></a>1.1、在同一个yaml文件中设置多环境</h4><blockquote><ul><li>yaml格式中设置多环境使用 <code>---</code> 区分环境设置边界</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&gt;#</span> <span class="hljs-string">应用哪个环境</span><br><span class="hljs-string">&gt;spring:</span><br><span class="hljs-string">&gt;profiles:</span><br> <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br><span class="hljs-string">&gt;---</span> <br><span class="hljs-string">&gt;#</span> <span class="hljs-string">设置环境</span><br><span class="hljs-string">&gt;#</span> <span class="hljs-string">生产环境</span><br><span class="hljs-string">&gt;server:</span><br><span class="hljs-string">&gt;port:</span> <span class="hljs-number">80</span><br><span class="hljs-string">&gt;spring:</span><br><span class="hljs-string">&gt;config:</span><br> <span class="hljs-attr">activate:</span><br>   <span class="hljs-attr">on-profile:</span> <span class="hljs-string">pro</span><br><span class="hljs-string">&gt;---</span><br><span class="hljs-string">&gt;#</span> <span class="hljs-string">开发环境</span><br><span class="hljs-string">&gt;server:</span><br><span class="hljs-string">&gt;port:</span> <span class="hljs-number">81</span><br><span class="hljs-string">&gt;spring:</span><br><span class="hljs-string">&gt;config:</span><br> <span class="hljs-attr">activate:</span><br>   <span class="hljs-attr">on-profile:</span> <span class="hljs-string">dev</span><br><span class="hljs-string">&gt;---</span><br><span class="hljs-string">&gt;#</span> <span class="hljs-string">测试环境</span><br><span class="hljs-string">&gt;server:</span><br><span class="hljs-string">&gt;port:</span> <span class="hljs-number">82</span><br><span class="hljs-string">&gt;spring:</span><br><span class="hljs-string">&gt;config:</span><br> <span class="hljs-attr">activate:</span><br>   <span class="hljs-attr">on-profile:</span> <span class="hljs-string">test</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="1-2、在多个yaml文件中设置多环境"><a href="#1-2、在多个yaml文件中设置多环境" class="headerlink" title="1.2、在多个yaml文件中设置多环境"></a>1.2、在多个yaml文件中设置多环境</h4><blockquote><p>使用不同的配置文件：可以为不同的环境（例如开发、测试、生产）创建不同的配置文件，例如 <code>application-dev.yaml</code>、<code>application-test.yaml</code>、<code>application-prod.yaml</code>，然后通过设置 <code>spring.profiles.active</code> 属性来指定当前使用的环境，例如 <code>spring.profiles.active=dev</code>。Spring Boot会自动加载对应的配置文件</p></blockquote><h3 id="2、properties版多环境开发"><a href="#2、properties版多环境开发" class="headerlink" title="2、properties版多环境开发"></a>2、properties版多环境开发</h3><blockquote><p>使用不同的配置文件：可以为不同的环境（例如开发、测试、生产）创建不同的配置文件，例如 <code>application-dev.properties</code>、<code>application-test.properties</code>、<code>application-prod.properties</code>，然后通过设置 <code>spring.profiles.active</code> 属性来指定当前使用的环境，例如 <code>spring.profiles.active=dev</code>。Spring Boot会自动加载对应的配置文件</p></blockquote><h3 id="3、多环境开发独立配置文件书写技巧"><a href="#3、多环境开发独立配置文件书写技巧" class="headerlink" title="3、多环境开发独立配置文件书写技巧"></a>3、多环境开发独立配置文件书写技巧</h3><ul><li><p>根据功能对配置文件中的信息进行拆分，并制作成独立的配置文件，命名规则如下</p><ul><li>application-devDB.yml</li><li>application-devRedis.yml</li><li>application-devMVC.yml</li></ul></li><li><p>使用include属性在激活指定环境的情况下，同时对多个环境进行加载使其生效，多个环境间只用逗号分隔</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br>    <span class="hljs-attr">include:</span> <span class="hljs-string">devDB,devMVC</span>  <br></code></pre></td></tr></table></figure><ul><li>当主环境dev与其他环境有相同属性时，主环境属性生效；</li><li>其他环境中有相同属性时，最后加载的环境属性生效</li></ul></li><li><p>也能使用group属性替代include属性，可以定义多种著环境与子环境的包含关系，降低配置书写量【比include好】</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br>    <span class="hljs-attr">group:</span>  <span class="hljs-comment"># 也可以使用group   </span><br>      <span class="hljs-attr">&quot;dev&quot;:</span> <span class="hljs-string">devDB,devMVC</span><br>      <span class="hljs-attr">&quot;pro&quot;:</span> <span class="hljs-string">proDB,proMVC</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="4、多环境开发控制"><a href="#4、多环境开发控制" class="headerlink" title="4、多环境开发控制"></a>4、多环境开发控制</h3><h4 id="Maven与SpringBoot多环境配置"><a href="#Maven与SpringBoot多环境配置" class="headerlink" title="Maven与SpringBoot多环境配置"></a>Maven与SpringBoot多环境配置</h4><h5 id="①、Maven中设置多环境属性"><a href="#①、Maven中设置多环境属性" class="headerlink" title="①、Maven中设置多环境属性"></a>①、Maven中设置多环境属性</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置多环境--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--环境1--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>          <span class="hljs-comment">&lt;!--唯一标识 id--&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>env_dev<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">profile.active</span>&gt;</span>dev<span class="hljs-tag">&lt;/<span class="hljs-name">profile.active</span>&gt;</span>  <span class="hljs-comment">&lt;!--之后要在springboot的配置文件中引用这个标签--&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--环境2--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>env_pro<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">profile.active</span>&gt;</span>pro<span class="hljs-tag">&lt;/<span class="hljs-name">profile.active</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>          <span class="hljs-comment">&lt;!--设定生效--&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="②、SpringBoot中引用Maven属性"><a href="#②、SpringBoot中引用Maven属性" class="headerlink" title="②、SpringBoot中引用Maven属性"></a>②、SpringBoot中引用Maven属性</h5><p>在配置文件中使用<code>@..@</code> 占位符读取Maven对应的配置属性值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">@profile.active@</span>  <span class="hljs-comment"># 读取maven中定义的环境</span><br>    <span class="hljs-attr">group:</span><br>      <span class="hljs-attr">&quot;dev&quot;:</span> <span class="hljs-string">devDB,devMVC</span><br>      <span class="hljs-attr">&quot;pro&quot;:</span> <span class="hljs-string">proDB,proMVC</span><br></code></pre></td></tr></table></figure><h5 id="③、执行Maven打包指令"><a href="#③、执行Maven打包指令" class="headerlink" title="③、执行Maven打包指令"></a>③、执行Maven打包指令</h5><p>就可以看到jar包中的application.yml中是我们配置好的环境了</p><p><img src="/img/springboot2_img/Maven%E9%85%8D%E7%BD%AESpringBoot%E5%A4%9A%E7%8E%AF%E5%A2%83.jpg" alt="Maven配置SpringBoot多环境"></p><h2 id="4、日志"><a href="#4、日志" class="headerlink" title="4、日志"></a>4、日志</h2><h3 id="1、日志基础"><a href="#1、日志基础" class="headerlink" title="1、日志基础"></a>1、日志基础</h3><h4 id="1、代码中使用日志工具记录日志"><a href="#1、代码中使用日志工具记录日志" class="headerlink" title="1、代码中使用日志工具记录日志"></a>1、代码中使用日志工具记录日志</h4><h5 id="①、添加日志记录操作"><a href="#①、添加日志记录操作" class="headerlink" title="①、添加日志记录操作"></a>①、添加日志记录操作</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/books&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br><br>    <span class="hljs-comment">//1、创建记录日志的对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(BookController.class);<br><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;springboot ........&quot;</span>);<br><br>        <span class="hljs-comment">//2、使用</span><br>        log.debug(<span class="hljs-string">&quot;debug....&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;info....&quot;</span>);<br>        log.warn(<span class="hljs-string">&quot;warn....&quot;</span>);<br>        log.error(<span class="hljs-string">&quot;error.....&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello...&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ul><li>可以使用大括号 <code>&#123;&#125;</code> 作为占位符的标识符，例如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;log.info(<span class="hljs-string">&quot;User &#123;&#125; logged in.&quot;</span>, username);<br>&gt;log.info(<span class="hljs-string">&quot;User &#123;&#125; password is &#123;&#125;.&quot;</span>, username, password);<br></code></pre></td></tr></table></figure><ul><li><p>日志级别：</p></li><li><p>TRACE：运行堆栈信息，使用率低</p></li><li><p>DEBUG：程序员调试代码使用</p></li><li><p>INFO：记录运维过程数据</p></li><li><p>WARN：记录运维过程报警数据</p></li><li><p>ERROR：记录错误堆栈信息</p></li><li><p>FATAL：灾难信息，合并计入ERROR中</p></li></ul></blockquote><h5 id="②、设置日志输出级别"><a href="#②、设置日志输出级别" class="headerlink" title="②、设置日志输出级别"></a>②、设置日志输出级别</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># application.yml</span><br><br><span class="hljs-comment"># 开启debug模式，输出调试信息，常用于检查系统运行状况</span><br><span class="hljs-comment">#de<span class="hljs-doctag">bug:</span> true</span><br><br><span class="hljs-comment"># 设置日志级别，</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-comment"># 设置分组，对某个组设置日志级别</span><br>  <span class="hljs-attr">group:</span><br>    <span class="hljs-attr">fenzu1:</span> <span class="hljs-string">org.example.springboot.service,</span> <span class="hljs-string">org.example.springboot.dao</span><br>    <span class="hljs-attr">fenzu2:</span> <span class="hljs-string">org.example.springboot.controller</span><br>  <span class="hljs-attr">level:</span><br><span class="hljs-comment">#    root: info  # root表示根节点，即整体应用日志级别</span><br><span class="hljs-comment">#    org.example.springboot.controller: debug  # 设置某个包的日志级别</span><br>    <span class="hljs-attr">fenzu2:</span> <span class="hljs-string">error</span>  <span class="hljs-comment"># 对某个组设置日志级别</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>优化日志对象创建代码</strong></p><p>使用lombok提供的注解<code>@Slf4j</code>简化开发，减少日志对象的声明操作，为类快速添加日志对象</p><p>使用这个注解可以替代 <code> private static final Logger log = LoggerFactory.getLogger(BookController2.class);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br>&gt;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br>&gt;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br>&gt;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br>&gt;<span class="hljs-meta">@RestController</span><br>&gt;<span class="hljs-meta">@RequestMapping(&quot;/books2&quot;)</span><br>&gt;<span class="hljs-meta">@Slf4j</span>  <span class="hljs-comment">//使用这个注解可以替代  private static final Logger log = LoggerFactory.getLogger(BookController2.class);</span><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController2</span> &#123;<br><br>&gt;<span class="hljs-meta">@GetMapping</span><br>&gt;<span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>&gt;System.out.println(<span class="hljs-string">&quot;springboot ........&quot;</span>);<br><br>&gt;<span class="hljs-comment">//使用</span><br>&gt;log.debug(<span class="hljs-string">&quot;debug....&quot;</span>);<br>&gt;log.info(<span class="hljs-string">&quot;info....&quot;</span>);<br>&gt;log.warn(<span class="hljs-string">&quot;warn....&quot;</span>);<br>&gt;log.error(<span class="hljs-string">&quot;error.....&quot;</span>);<br>&gt;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello...&quot;</span>;<br>&gt;&#125;<br>&gt;&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="2、日志输出格式控制"><a href="#2、日志输出格式控制" class="headerlink" title="2、日志输出格式控制"></a>2、日志输出格式控制</h4><p><img src="/img/springboot2_img/%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F.jpg" alt="日志输出格式"></p><ul><li>PID：进程ID，用于表明当前操作所处的进程，当多服务同时记录日志时，该值可用于协助调试程序</li><li>所属类&#x2F;接口名：当前显示信息为SpringBoot重写后的信息，名称过长时，简化包名书写为首字母，甚至直接删除</li></ul><blockquote><ul><li>在Spring Boot的日志记录中，使用了一些常见的占位符来格式化日志消息。以下是一些常用的占位符及其解释：</li></ul><ol><li><code>%d</code>: 用于输出日期和时间。可以通过指定格式来自定义日期时间的显示方式。例如：<ul><li><code>%d&#123;yyyy-MM-dd HH:mm:ss&#125;</code>: 输出格式为年-月-日 时:分:秒。</li><li><code>%d&#123;yyyy-MM-dd&#125;</code>: 输出格式为年-月-日。</li></ul></li><li><code>%p</code>: 用于输出日志级别。日志级别可以是DEBUG、INFO、WARN、ERROR等。例如：<ul><li><code>%p</code>: 输出日志级别的名称（如INFO）。</li><li><code>%5p</code>: 输出日志级别的名称，固定宽度为5个字符，右对齐。</li></ul></li><li><code>%c</code>: 用于输出日志的类名。例如：<ul><li><code>%c</code>: 输出完整的类名（包括包名）。</li><li><code>%c&#123;1&#125;</code>: 输出类名的最后一个组件（不包括包名）。</li></ul></li><li><code>%t</code>: 用于输出线程名。例如：<ul><li><code>%t</code>: 输出线程的名称。</li></ul></li><li><code>%m</code>: 用于输出日志消息。例如：<ul><li><code>%m</code>: 输出日志消息的内容。</li></ul></li><li><code>%n</code>: 用于输出换行符。</li><li><code>%r</code>: 用于输出从应用程序启动到输出日志的时间（以毫秒为单位）。</li><li><code>%F</code>: 用于输出日志消息所在的文件名。</li><li><code>%L</code>: 用于输出日志消息所在的行号。</li><li><code>%M</code>: 用于输出日志消息所在的方法名。</li><li><code>%X</code>: 用于输出MDC（Mapped Diagnostic Context）的内容。MDC可以用于在不同的日志事件中传递上下文信息。</li><li><code>%%</code>: 用于输出百分号。</li></ol><p>这些占位符可以在Spring Boot的配置文件中使用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&gt;#</span> <span class="hljs-string">application.yml</span><br><br><span class="hljs-string">&gt;#</span> <span class="hljs-string">设置日志输出格式</span><br><span class="hljs-string">&gt;logging:</span><br> <span class="hljs-attr">pattern:</span><br>   <span class="hljs-attr">console:</span> <span class="hljs-string">&quot;%d [%p] [%t] %m%n&quot;</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="3、日志文件"><a href="#3、日志文件" class="headerlink" title="3、日志文件"></a>3、日志文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># application.yml</span><br><br><span class="hljs-comment"># 设置保存在文件中</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">server.log</span><br>  <span class="hljs-attr">logback:</span><br>    <span class="hljs-attr">rollingpolicy:</span><br>      <span class="hljs-attr">max-file-size:</span> <span class="hljs-string">4KB</span> <span class="hljs-comment"># 设置文件最大多大</span><br>      <span class="hljs-attr">file-name-pattern:</span> <span class="hljs-string">server.%d.%i.log</span>  <span class="hljs-comment"># 设置文件名。比如server.2023-05-27.0.log   %i代表第几个</span><br></code></pre></td></tr></table></figure><h1 id="实用2"><a href="#实用2" class="headerlink" title="实用2"></a>实用2</h1><h2 id="1、热部署（重启）"><a href="#1、热部署（重启）" class="headerlink" title="1、热部署（重启）"></a>1、热部署（重启）</h2><h4 id="关于热部署"><a href="#关于热部署" class="headerlink" title="关于热部署"></a>关于热部署</h4><ul><li>重启（Restart）：会加载自定义开发代码，包含类、页面、配置文件等，加载位置restart类加载器</li><li>重载（ReLoad）：会加载jar包，加载位置base类加载器</li></ul><p>热部署仅仅加载当前开发者自定义开发的资源，不加载jar资源</p><h3 id="1、手动启动热部署"><a href="#1、手动启动热部署" class="headerlink" title="1、手动启动热部署"></a>1、手动启动热部署</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h4><h5 id="①、引入依赖"><a href="#①、引入依赖" class="headerlink" title="①、引入依赖"></a>①、引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--热部署工具--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="②、手动进行热部署："><a href="#②、手动进行热部署：" class="headerlink" title="②、手动进行热部署："></a>②、手动进行热部署：</h5><p>点击<code>build project</code>                     快捷键：<code>Ctrl + F9</code></p><h3 id="2、自动启动热部署"><a href="#2、自动启动热部署" class="headerlink" title="2、自动启动热部署"></a>2、自动启动热部署</h3><p><img src="/img/springboot2_img/%E7%83%AD%E9%83%A8%E7%BD%B2-%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE.jpg" alt="热部署-自动构建项目"></p><p><img src="/img/springboot2_img/%E8%87%AA%E5%8A%A8%E7%83%AD%E9%83%A8%E7%BD%B2.jpg" alt="自动热部署"></p><p>默认是鼠标焦点离开IDEA 5秒之后，自动进行热部署</p><h3 id="3、热部署范围配置"><a href="#3、热部署范围配置" class="headerlink" title="3、热部署范围配置"></a>3、热部署范围配置</h3><blockquote><p>默认不触发重启的目录列表</p><ul><li>&#x2F;META-INF&#x2F;maven</li><li>&#x2F;META-INF&#x2F;resources</li><li>&#x2F;resources</li><li>&#x2F;static</li><li>&#x2F;public</li><li>&#x2F;templates</li></ul></blockquote><p>可以在application.yml文件中对触发热部署的范围进行修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">devtools:</span><br>    <span class="hljs-attr">restart:</span><br>      <span class="hljs-attr">exclude:</span> <span class="hljs-string">static/**,</span> <span class="hljs-string">public/**,</span> <span class="hljs-string">config/application.yml</span>  <span class="hljs-comment"># 不触发热部署的范围</span><br></code></pre></td></tr></table></figure><h3 id="4、关闭热部署"><a href="#4、关闭热部署" class="headerlink" title="4、关闭热部署"></a>4、关闭热部署</h3><ul><li>关闭热部署：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">devtools:</span><br>    <span class="hljs-attr">restart:</span><br>      <span class="hljs-attr">exclude:</span> <span class="hljs-string">static/**,</span> <span class="hljs-string">public/**,</span> <span class="hljs-string">config/application.yml</span>  <span class="hljs-comment"># 不触发热部署的范围</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 设置热部署不可用</span><br></code></pre></td></tr></table></figure><ul><li>可以设置高优先级属性禁用热部署：在启动类中设置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.setProperty(<span class="hljs-string">&quot;spring.devtools.restart.enabled&quot;</span>,<span class="hljs-string">&quot;false&quot;</span>);  <span class="hljs-comment">// 以更高的优先级关闭热部署。这个优先级比application.properties高</span><br>SpringApplication.run(SSMPApplication.class, args);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、实用配置"><a href="#2、实用配置" class="headerlink" title="2、实用配置"></a>2、实用配置</h2><h3 id="1、-ConfigurationProperties注解"><a href="#1、-ConfigurationProperties注解" class="headerlink" title="1、@ConfigurationProperties注解"></a>1、<code>@ConfigurationProperties</code>注解</h3><ul><li><p>可以使用<code>@ConfigurationProperties</code>注解为第三方bean绑定属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;datasource&quot;)</span><br><span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br><span class="hljs-keyword">return</span> ds;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># application.yml</span><br><br><span class="hljs-comment"># 自定义属性</span><br><span class="hljs-attr">datasource:</span><br>  <span class="hljs-attr">driverClassName:</span> <span class="hljs-string">com.mysql.123123123123</span><br></code></pre></td></tr></table></figure></li></ul><blockquote><p><code>@EnableConfigurationProperties</code>注解相关</p><p>可以在启动类上加上这个注解代表开启属性绑定；并指定对应的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;# 启动类<br><br>&gt;<span class="hljs-meta">@SpringBootApplication</span><br>&gt;<span class="hljs-meta">@EnableConfigurationProperties(&#123;ServerConfig.class&#125;)</span>  <span class="hljs-comment">//开启属性绑定，并设定对应的bean。如果设置了这个注解，就不需要在对应的类上加上@Component这个注解了</span><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot13ConfigurationApplication</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(Springboot13ConfigurationApplication.class, args);<br>&#125;<br>&gt;&#125;<br></code></pre></td></tr></table></figure><p>如果设置了<code>@EnableConfigurationProperties</code>这个注解，就不需要在对应的类上加上<code>@Component</code>这个注解了</p></blockquote><ul><li><p>在<code>@ConfigurationProperties</code>注解标注的类上会有一个警告，可以加上依赖去掉</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--去掉注释警告--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2、宽松绑定"><a href="#2、宽松绑定" class="headerlink" title="2、宽松绑定"></a>2、宽松绑定</h3><blockquote><p><code>@ConfigurationProperties</code>注解是Spring Boot提供的一个用于绑定属性的注解，用于将配置文件中的属性值绑定到一个Java对象上。在属性名绑定方面，<code>@ConfigurationProperties</code>注解支持属性名宽松绑定。</p><p>属性名宽松绑定指的是在绑定属性时，注解会尝试将配置文件中的属性名与Java对象的属性名进行灵活匹配，以实现属性值的绑定。具体来说，宽松绑定提供以下几种匹配规则：</p><ol><li>小写和中划线转换：配置文件中的属性名可以使用小写字母和中划线（例如<code>my-property-name</code>），而Java对象的属性名可以使用驼峰命名规则（例如<code>myPropertyName</code>），注解会自动进行转换并匹配。</li><li>驼峰转换：配置文件中的属性名可以使用驼峰命名规则（例如<code>myPropertyName</code>），而Java对象的属性名可以使用小写字母和中划线（例如<code>my-property-name</code>），注解会自动进行转换并匹配。</li><li>层级匹配：配置文件中的属性名可以使用层级结构（例如<code>my.property.name</code>），而Java对象的属性可以使用嵌套对象来匹配层级结构。</li></ol><p>下面是一个示例，演示了<code>@ConfigurationProperties</code>注解的属性名宽松绑定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@ConfigurationProperties(prefix = &quot;my&quot;)</span><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyProperties</span> &#123;<br> <span class="hljs-keyword">private</span> String propertyName;<br><br> <span class="hljs-comment">// Getter and Setter</span><br><br> <span class="hljs-comment">// ...</span><br>&gt;&#125;<br></code></pre></td></tr></table></figure><p>在上述示例中，<code>@ConfigurationProperties</code>注解使用<code>prefix</code>参数指定了属性名的前缀为<code>my</code>。然后，注解会尝试将配置文件中以<code>my</code>为前缀的属性名与<code>MyProperties</code>类中的属性进行宽松匹配。例如，配置文件中的属性<code>my.property-name</code>会被绑定到<code>MyProperties</code>类中的<code>propertyName</code>属性上。</p></blockquote><h3 id="3、常用计量单位绑定"><a href="#3、常用计量单位绑定" class="headerlink" title="3、常用计量单位绑定"></a>3、常用计量单位绑定</h3><p>Spring Boot支持JDK 8提供的时间和空间计量单位，这些单位用于处理日期、时间和持续时间的操作。下面是一些常用的时间和空间计量单位：</p><p>时间计量单位：</p><ul><li><code>Duration</code>: 表示一段时间的持续时间，可以精确到纳秒级别。</li><li><code>Instant</code>: 表示时间线上的一个特定时刻，通常与UTC（协调世界时）进行交互。</li><li><code>LocalDate</code>: 表示一个日期，不包含时间部分，例如年、月、日。</li><li><code>LocalDateTime</code>: 表示日期和时间，不考虑时区的影响。</li><li><code>LocalTime</code>: 表示一天中的特定时间，不包含日期部分。</li></ul><p>空间计量单位：</p><ul><li><code>Period</code>: 表示日期之间的间隔，例如年、月、日之间的差距。</li><li><code>Year</code>, <code>YearMonth</code>, <code>MonthDay</code>: 表示年份、年月和月日的对象。</li><li><code>ZoneId</code>, <code>ZoneOffset</code>: 表示时区的对象，用于处理时区相关的操作。</li></ul><p>大小计量单位，用于表示数据大小或容量。这些计量单位用于处理文件大小、网络传输速度等方面的操作。</p><ol><li><code>DataSize</code>: 表示数据大小的对象，可以表示字节、千字节、兆字节、吉字节等。</li><li><code>ByteSizeUnit</code>: 表示字节单位的枚举，包括<code>BYTES</code>、<code>KILOBYTES</code>、<code>MEGABYTES</code>、<code>GIGABYTES</code>等。</li><li><code>DataUnit</code>: 表示数据单位的枚举，包括<code>BYTES</code>、<code>KB</code>、<code>MB</code>、<code>GB</code>等。</li><li><code>MemoryUnit</code>: 表示内存单位的枚举，包括<code>BYTES</code>、<code>KILOBYTES</code>、<code>MEGABYTES</code>、<code>GIGABYTES</code>等。</li></ol><p>你可以使用这些大小计量单位来处理文件大小、数据容量等相关的操作。</p><p>在Spring Boot中，你可以使用这些时间和空间计量单位来处理日期、时间和持续时间的操作。此外，Spring Boot还提供了对应的类型转换器，可以方便地将这些计量单位与配置文件中的属性进行绑定和转换。</p><p>例如，你可以在<code>application.properties</code>或<code>application.yaml</code>文件中定义一个属性，并将其绑定到<code>Duration</code>、<code>DataSize</code>类型的字段上：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">myapp.server-time-out</span>: <span class="hljs-string">3</span><br><span class="hljs-attr">myapp.data-size</span>: <span class="hljs-string">10</span><br></code></pre></td></tr></table></figure><p>然后，你可以在Spring Boot的配置类中使用<code>@Value</code>注解或<code>@ConfigurationProperties</code>注解将该属性绑定到<code>Duration</code>、<code>DataSize</code>类型的字段上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(&quot;myapp&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAppProperties</span> &#123;<br>    <br>    <span class="hljs-meta">@DurationUnit(ChronoUnit.HOURS)</span>  <span class="hljs-comment">// 代表以小时为单位</span><br>    <span class="hljs-keyword">private</span> Duration serverTimeOut;  <span class="hljs-comment">// PT3H</span><br><br>    <span class="hljs-meta">@DataSizeUnit(DataUnit.BYTES)</span>  <span class="hljs-comment">// 数据存储单位  代表byte</span><br>    <span class="hljs-keyword">private</span> DataSize dataSize;  <span class="hljs-comment">// 10B</span><br><br>    <span class="hljs-comment">// Getter and Setter</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、数据校验"><a href="#4、数据校验" class="headerlink" title="4、数据校验"></a>4、数据校验</h3><p>在Spring Boot中，可以使用Java Bean验证（Java Bean Validation）进行数据校验。Java Bean验证是一种基于注解的验证方式，可以轻松地对Java对象的字段、方法和参数进行验证。</p><h4 id="1、步骤"><a href="#1、步骤" class="headerlink" title="1、步骤"></a>1、步骤</h4><p>下面是使用Java Bean验证进行数据校验的步骤：</p><ol><li><p>添加依赖：确保在项目的构建文件（如<code>pom.xml</code>）中添加以下依赖，以包含Java Bean验证相关的库：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建需要进行数据校验的Java Bean类，并在需要验证的字段上添加相应的验证注解。例如，我们创建一个名为<code>User</code>的类，其中包含了需要验证的字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@NotNull(message = &quot;用户名不能为空&quot;)</span><br>    <span class="hljs-meta">@Size(min = 3, max = 20, message = &quot;用户名长度必须在3到20个字符之间&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-meta">@NotEmpty(message = &quot;邮箱不能为空&quot;)</span><br>    <span class="hljs-meta">@Email(message = &quot;邮箱格式不正确&quot;)</span><br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-comment">// Getters and Setters</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在上述示例中，我们使用了<code>javax.validation.constraints</code>包下的注解来对<code>username</code>和<code>email</code>字段进行验证。<code>@NotNull</code>表示字段不能为空，<code>@Size</code>表示字段长度在指定范围内，<code>@NotEmpty</code>表示字段不能为空字符串，<code>@Email</code>表示字段必须是有效的电子邮件格式。</p></li><li><p>在需要进行数据校验的地方，如控制器方法中，使用<code>@Valid</code>注解对需要验证的Java Bean参数进行注解。例如，我们在控制器中使用<code>@Valid</code>注解验证<code>User</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@PostMapping(&quot;/users&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">createUser</span><span class="hljs-params">(<span class="hljs-meta">@Valid</span> <span class="hljs-meta">@RequestBody</span> User user)</span> &#123;<br>        <span class="hljs-comment">// 处理用户创建逻辑</span><br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;User created successfully&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述示例中，<code>@Valid</code>注解应用于<code>User</code>对象参数，表示对该对象进行数据验证。</p></li><li><p>处理验证错误：如果数据验证失败，Spring Boot会自动返回相应的验证错误信息。你可以使用<code>BindingResult</code>参数来获取验证结果并进行处理。例如，在控制器方法中添加<code>BindingResult</code>参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@PostMapping(&quot;/users&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">createUser</span><span class="hljs-params">(<span class="hljs-meta">@Valid</span> <span class="hljs-meta">@RequestBody</span> User user, BindingResult bindingResult)</span> &#123;<br>        <span class="hljs-keyword">if</span> (bindingResult.hasErrors()) &#123;<br>            <span class="hljs-comment">// 处理验证错误</span><br>            <span class="hljs-keyword">return</span> ResponseEntity.badRequest().body(<span class="hljs-string">&quot;Validation error: &quot;</span> + bindingResult.getFieldError().getDefaultMessage());<br>        &#125;<br>        <span class="hljs-comment">// 处理用户创建逻辑</span><br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;User created successfully&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述示例中，如果数据验证失败，我们从<code>BindingResult</code>中获取第一个验证错误的默认消息，并返回相应的错误响应。</p></li></ol><p>通过以上步骤，你可以在Spring Boot应用程序中使用Java Bean验证进行数据校验。当请求到达控制器时，Spring Boot会自动根据注解配置对Java Bean对象的字段进行验证，并返回</p><h4 id="2、常见的数据校验注解"><a href="#2、常见的数据校验注解" class="headerlink" title="2、常见的数据校验注解"></a>2、常见的数据校验注解</h4><blockquote><ol><li><code>@NotNull</code>: 用于验证属性值不能为null。它可以应用于任何类型的字段。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@NotNull</span><br>&gt;<span class="hljs-keyword">private</span> String username;  <span class="hljs-comment">//如果username字段为null，验证将失败</span><br></code></pre></td></tr></table></figure><ol start="2"><li><code>@NotBlank</code>: 用于验证字符串属性值不能为空且不能只包含空格字符。它只能应用于字符串类型的字段。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@NotBlank</span><br>&gt;<span class="hljs-keyword">private</span> String fullName;  <span class="hljs-comment">// 如果fullName字段为null、空字符串或只包含空格字符，验证将失败。</span><br></code></pre></td></tr></table></figure><ol start="3"><li><code>@Min</code>: 用于验证数字属性值必须大于等于指定的最小值。它可以应用于数字类型的字段。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@Min(18)</span><br>&gt;<span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;  <span class="hljs-comment">// age字段的值必须大于等于18。如果age小于18，验证将失败。</span><br></code></pre></td></tr></table></figure><ol start="4"><li><code>@Max</code>: 用于验证数字属性值必须小于等于指定的最大值。它可以应用于数字类型的字段。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@Max(100)</span><br>&gt;<span class="hljs-keyword">private</span> <span class="hljs-type">int</span> score;  <span class="hljs-comment">// score字段的值必须小于等于100。如果score大于100，验证将失败。</span><br></code></pre></td></tr></table></figure><ol start="5"><li><code>@DecimalMin</code>: 用于验证数字属性值必须大于等于指定的最小值，支持浮点数。它可以应用于数字类型的字段。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@DecimalMin(&quot;0.01&quot;)</span><br>&gt;<span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;  <span class="hljs-comment">// price字段的值必须大于等于0.01。如果price小于0.01，验证将失败。</span><br></code></pre></td></tr></table></figure><ol start="6"><li><code>@DecimalMax</code>: 用于验证数字属性值必须小于等于指定的最大值，支持浮点数。它可以应用于数字类型的字段。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@DecimalMax(&quot;100.00&quot;)</span><br>&gt;<span class="hljs-keyword">private</span> <span class="hljs-type">double</span> amount;  <span class="hljs-comment">// amount字段的值必须小于等于100.00。如果amount大于100.00，验证将失败。</span><br></code></pre></td></tr></table></figure><ol start="7"><li><code>@Pattern</code>: 用于验证属性值必须符合指定的正则表达式。它可以应用于字符串类型的字段。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@Pattern(regexp = &quot;[A-Za-z0-9]+&quot;)</span><br>&gt;<span class="hljs-keyword">private</span> String code;  <span class="hljs-comment">// code字段的值必须只包含字母和数字。如果code不符合正则表达式的要求，验证将失败。</span><br></code></pre></td></tr></table></figure><ol start="8"><li><code>@Range</code>: 用于验证数字或字符串属性值必须在指定的范围内。它可以应用于数字或字符串类型的字段。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@Range(min = 1, max = 100)</span><br>&gt;<span class="hljs-keyword">private</span> <span class="hljs-type">int</span> quantity;  <span class="hljs-comment">// quantity字段的值必须大于等于1且小于等于100。如果quantity小于1或大于100，验证将失败。</span><br></code></pre></td></tr></table></figure><ol start="9"><li><code>@Digits</code>: 用于验证数字属性值的整数部分和小数部分的位数不能超过指定的值。它可以应用于数字类型的字段。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@Digits(integer = 3, fraction = 2)</span><br>&gt;<span class="hljs-keyword">private</span> BigDecimal amount;  <span class="hljs-comment">// amount字段的整数部分最多可以有3位，小数部分最多可以有2位。如果amount的位数超过限制，验证将失败。</span><br></code></pre></td></tr></table></figure><ol start="10"><li><code>@AssertTrue</code>: 用于验证属性值必须为true。它可以应用于boolean类型的字段。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@AssertTrue</span><br>&gt;<span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> agreed;  <span class="hljs-comment">// agreed字段的值必须为true。如果agreed为false，验证将失败。</span><br></code></pre></td></tr></table></figure><ol start="11"><li><code>@AssertFalse</code>: 用于验证属性值必须为false。它可以应用于boolean类型的字段。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@AssertFalse</span><br>&gt;<span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> expired;  <span class="hljs-comment">// expired字段的值必须为false。如果`expired`为true，验证将失败。</span><br></code></pre></td></tr></table></figure><ol start="12"><li>@NotEmpty: 用于验证一个字符串或集合不能为空。它可以应用于字符串类型的字段、集合或数组。如果被注解的字段为null或空字符串（””），则验证失败。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@NotEmpty</span><br>&gt;<span class="hljs-keyword">private</span> String username;  <span class="hljs-comment">// 如果username字段为null或空字符串，验证将失败。</span><br></code></pre></td></tr></table></figure><ol start="13"><li>@Email: 用于验证一个字符串是否符合电子邮件的格式。被注解的字段必须是一个字符串类型。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@Email</span><br>&gt;<span class="hljs-keyword">private</span> String email;  <span class="hljs-comment">// 如果email字段的值不符合电子邮件的格式（例如，缺少@符号或域名不合法），则验证将失败。</span><br></code></pre></td></tr></table></figure><ol start="14"><li>@Size: 用于验证一个字符串、集合或数组的大小是否在指定范围内。它可以用于字符串、集合或数组类型的字段上。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@Size(min = 1, max = 10)</span><br>&gt;<span class="hljs-keyword">private</span> String password;  <span class="hljs-comment">// password字段的长度必须在1到10之间（包括1和10）。如果password的长度小于1或大于10，验证将失败。</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="3、BindingResult-类"><a href="#3、BindingResult-类" class="headerlink" title="3、BindingResult 类"></a>3、<code>BindingResult</code> 类</h4><blockquote><p><code>BindingResult</code> 是 Spring 框架中用于处理数据绑定和校验结果的类。它作为控制器方法的参数之一，在数据绑定和校验过程中收集和封装校验错误信息。</p><p>当进行数据绑定和校验时，如果校验失败，Spring 框架会将校验错误信息存储在 <code>BindingResult</code> 对象中，并将其作为参数传递给控制器方法。</p><p><code>BindingResult</code> 提供了以下主要功能：</p><ol><li>获取校验错误信息：通过 <code>BindingResult</code>，可以获取校验过程中的错误信息。这些错误信息包括字段级别的错误、全局错误等。你可以通过 <code>hasErrors()</code> 方法检查是否有错误，然后使用 <code>getFieldErrors()</code>、<code>getGlobalErrors()</code> 方法获取具体的错误信息列表。</li><li>处理校验错误：<code>BindingResult</code> 提供了一些方法用于处理校验错误。例如，你可以通过 <code>rejectValue()</code> 方法手动添加字段级别的错误信息，或者通过 <code>reject()</code> 方法添加全局错误信息。</li><li>控制流程处理：根据校验结果，你可以根据需要进行相应的流程处理。例如，如果有校验错误，你可以决定如何处理错误，返回适当的错误响应或进行其他的业务逻辑处理。</li></ol><p>以下是一个简单的示例，展示了如何在控制器方法中使用 <code>BindingResult</code> 处理校验错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@RestController</span><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>&gt;<span class="hljs-meta">@PostMapping(&quot;/users&quot;)</span><br>&gt;<span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">createUser</span><span class="hljs-params">(<span class="hljs-meta">@Valid</span> <span class="hljs-meta">@RequestBody</span> User user, BindingResult bindingResult)</span> &#123;<br>   <span class="hljs-keyword">if</span> (bindingResult.hasErrors()) &#123;<br>       <span class="hljs-comment">// 处理校验错误</span><br>       List&lt;FieldError&gt; fieldErrors = bindingResult.getFieldErrors();<br>       <span class="hljs-comment">// 返回错误响应或进行其他处理</span><br>       <span class="hljs-keyword">return</span> ResponseEntity.badRequest().body(<span class="hljs-string">&quot;Validation failed&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-comment">// 校验通过，处理用户创建逻辑</span><br>   <span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;User created successfully&quot;</span>);<br>&gt;&#125;<br>&gt;&#125;<br></code></pre></td></tr></table></figure><p>在上述示例中，我们在控制器方法的参数中使用了 <code>@Valid</code> 注解对 <code>User</code> 对象进行校验，并将 <code>BindingResult</code> 参数添加到方法中。如果校验失败，我们可以根据 <code>BindingResult</code> 对象中的错误信息进行相应处理。</p><p>总而言之，<code>BindingResult</code> 类是 Spring 框架中用于收集和处理数据绑定和校验结果的重要类。通过它，你可以获取和处理校验错误信息，从而实现对校验结果的控制和处理。</p></blockquote><h3 id="5、yaml注意事项"><a href="#5、yaml注意事项" class="headerlink" title="5、yaml注意事项"></a>5、yaml注意事项</h3><ul><li>如果是int类型的数据在yaml中编写，推荐使用双引号包裹</li></ul><h2 id="3、测试-1"><a href="#3、测试-1" class="headerlink" title="3、测试"></a>3、测试</h2><h3 id="1、临时加载配置属性"><a href="#1、临时加载配置属性" class="headerlink" title="1、临时加载配置属性"></a>1、临时加载配置属性</h3><ul><li><p>在启动测试环境时可以通过properties参数设置测试环境专用的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用properties 属性可以为当前测试用例添加临时的属性配置</span><br><span class="hljs-meta">@SpringBootTest(properties = &#123;&quot;test.prop=testValue1&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertiesAndArgsTest</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;test.prop&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String msg;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testProperties</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;msg = &quot;</span> + msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优势：比多环境开发中的测试环境影响范围更小，仅对当前测试类有效</li></ul></li><li><p>在启动测试环境时也可以通过args参数设置测试环境专用的传入参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用args 属性可以为当前测试用例添加临时的命令行参数</span><br><span class="hljs-meta">@SpringBootTest(args = &#123;&quot;--test.prop=testValue2&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertiesAndArgsTest</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;test.prop&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String msg;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testProperties</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;msg = &quot;</span> + msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>properties属性 和 args属性选一个用就行</p><h3 id="2、临时加载Bean"><a href="#2、临时加载Bean" class="headerlink" title="2、临时加载Bean"></a>2、临时加载Bean</h3><p>通过<code>@Import</code>注解，你可以将指定的bean或配置类加载到测试环境中，以供测试使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@Import(&#123;MyBean.class, MyConfig.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-comment">// 测试逻辑...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在上述示例中，<code>@Import</code>注解用于加载<code>MyBean</code>和<code>MyConfig</code>到测试环境中。<code>MyBean</code>可以是一个普通的Bean类，<code>MyConfig</code>可以是一个配置类，它定义了需要加载的bean。</p><p>使用<code>@Import</code>注解时，你可以加载多个bean或配置类，只需在<code>@Import</code>注解的值中指定它们。被加载的bean可以在测试中进行注入和使用。</p><h3 id="3、Web环境模拟测试"><a href="#3、Web环境模拟测试" class="headerlink" title="3、Web环境模拟测试"></a>3、Web环境模拟测试</h3><h4 id="1、相关知识"><a href="#1、相关知识" class="headerlink" title="1、相关知识"></a>1、相关知识</h4><h5 id="1、-SpringBootTest注解中的webEnvironment属性"><a href="#1、-SpringBootTest注解中的webEnvironment属性" class="headerlink" title="1、@SpringBootTest注解中的webEnvironment属性"></a>1、<code>@SpringBootTest</code>注解中的<code>webEnvironment</code>属性</h5><blockquote><p>在<code>@SpringBootTest</code>注解中的<code>webEnvironment</code>属性有四个可选值：</p><ol><li><code>WebEnvironment.MOCK</code>：</li></ol><ul><li><p>说明：模拟的Web环境，不启动真实的Web服务器。适用于针对控制器（Controller）层或服务层的单元测试，可以使用<code>MockMvc</code>等工具模拟HTTP请求和验证响应。</p></li><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMockTest</span> &#123;<br>    <span class="hljs-comment">// 测试逻辑...</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="2"><li><code>WebEnvironment.RANDOM_PORT</code>：</li></ol><ul><li><p>说明：真实的Web环境，启动一个随机端口的Web服务器。适用于进行集成测试，可以通过HTTP客户端发送真实的HTTP请求，并验证整个请求-响应周期。</p></li><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyIntegrationTest</span> &#123;<br>    <span class="hljs-comment">// 测试逻辑...</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li><code>WebEnvironment.DEFINED_PORT</code>：</li></ol><ul><li><p>说明：真实的Web环境，绑定到预定义的端口（通常为默认的HTTP端口，如80或8080）。适用于进行集成测试，特别是与外部系统或其他服务进行集成的情况。</p></li><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDefinedPortTest</span> &#123;<br>    <span class="hljs-comment">// 测试逻辑...</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="4"><li><code>WebEnvironment.NONE</code>：</li></ol><ul><li><p>说明：非Web环境，不启动Web服务器。适用于纯粹的单元测试，不需要涉及到Web组件。</p></li><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyUnitTest</span> &#123;<br>    <span class="hljs-comment">// 测试逻辑...</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></blockquote><h5 id="2、-AutoConfigureMockMvc注解"><a href="#2、-AutoConfigureMockMvc注解" class="headerlink" title="2、@AutoConfigureMockMvc注解"></a>2、<code>@AutoConfigureMockMvc</code>注解</h5><blockquote><p><code>@AutoConfigureMockMvc</code>是一个Spring Boot测试注解，用于自动配置<code>MockMvc</code>实例。</p><p>在进行Spring Boot应用程序的集成测试时，使用<code>@AutoConfigureMockMvc</code>注解可以方便地自动配置<code>MockMvc</code>实例，而无需手动创建。它会自动将<code>MockMvc</code>注入到测试类中的<code>MockMvc</code>字段中，使您可以直接在测试方法中使用。</p><p><code>MockMvc</code>是一个用于模拟和测试Spring MVC应用程序的类，可以模拟HTTP请求和响应，以及验证控制器的行为和结果。通过使用<code>@AutoConfigureMockMvc</code>注解，您无需手动创建<code>MockMvc</code>实例，而是让Spring Boot自动进行配置和注入。</p><p>以下是一个示例测试类，展示了如何使用<code>@AutoConfigureMockMvc</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br>&gt;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br>&gt;<span class="hljs-keyword">import</span> org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;<br>&gt;<span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br>&gt;<span class="hljs-keyword">import</span> org.springframework.test.web.servlet.MockMvc;<br>&gt;<span class="hljs-keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;<br>&gt;<span class="hljs-keyword">import</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers;<br><br>&gt;<span class="hljs-meta">@SpringBootTest</span><br>&gt;<span class="hljs-meta">@AutoConfigureMockMvc</span><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyControllerTest</span> &#123;<br><br>&gt;<span class="hljs-meta">@Autowired</span><br>&gt;<span class="hljs-keyword">private</span> MockMvc mockMvc;<br><br>&gt;<span class="hljs-meta">@Test</span><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMyEndpoint</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>&gt;mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/my-endpoint&quot;</span>))<br>     .andExpect(MockMvcResultMatchers.status().isOk())<br>     .andExpect(MockMvcResultMatchers.jsonPath(<span class="hljs-string">&quot;$.message&quot;</span>).value(<span class="hljs-string">&quot;Hello&quot;</span>));<br>&gt;&#125;<br>&gt;&#125;<br></code></pre></td></tr></table></figure><p>在上述示例中，我们使用了<code>@SpringBootTest</code>注解来启动整个应用程序上下文，并使用<code>@AutoConfigureMockMvc</code>注解自动配置<code>MockMvc</code>实例。<code>MockMvc</code>实例被自动注入到<code>mockMvc</code>字段中，我们可以在测试方法中使用它来模拟和验证控制器的行为。</p><p>总结一下，<code>@AutoConfigureMockMvc</code>是一个Spring Boot测试注解，用于自动配置<code>MockMvc</code>实例。它简化了测试中<code>MockMvc</code>实例的创建和配置过程，使您可以更方便地进行Spring MVC应用程序的集成测试。</p></blockquote><h5 id="3、MockMvc对象"><a href="#3、MockMvc对象" class="headerlink" title="3、MockMvc对象"></a>3、MockMvc对象</h5><blockquote><ol><li><p>使用<code>MockMvc</code>对象执行各种类型的HTTP请求非常简单。<code>MockMvc</code>提供了一系列方法，用于构建和执行不同类型的请求。以下是一些常见的HTTP请求示例：</p></li><li><p>执行GET请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/api/users&quot;</span>))<br>       .andExpect(MockMvcResultMatchers.status().isOk());<br></code></pre></td></tr></table></figure><p>上述代码执行一个GET请求到”&#x2F;api&#x2F;users”接口，并验证响应的状态码是否为200。</p></li><li><p>执行POST请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.post(<span class="hljs-string">&quot;/api/users&quot;</span>)<br>       .contentType(MediaType.APPLICATION_JSON)<br>       .content(<span class="hljs-string">&quot;&#123; \&quot;name\&quot;: \&quot;John\&quot;, \&quot;email\&quot;: \&quot;john@example.com\&quot; &#125;&quot;</span>))<br>       .andExpect(MockMvcResultMatchers.status().isOk());<br></code></pre></td></tr></table></figure><p>上述代码执行一个POST请求到”&#x2F;api&#x2F;users”接口，并传递JSON数据作为请求体。通过<code>contentType()</code>方法设置请求的Content-Type，并使用<code>content()</code>方法设置请求的内容。</p></li><li><p>执行PUT请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.put(<span class="hljs-string">&quot;/api/users/&#123;id&#125;&quot;</span>, <span class="hljs-number">1</span>)<br>       .contentType(MediaType.APPLICATION_JSON)<br>       .content(<span class="hljs-string">&quot;&#123; \&quot;name\&quot;: \&quot;John Doe\&quot;, \&quot;email\&quot;: \&quot;john.doe@example.com\&quot; &#125;&quot;</span>))<br>       .andExpect(MockMvcResultMatchers.status().isOk());<br></code></pre></td></tr></table></figure><p>上述代码执行一个PUT请求到”&#x2F;api&#x2F;users&#x2F;{id}”接口，并传递路径参数和JSON数据作为请求体。</p></li><li><p>执行DELETE请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.delete(<span class="hljs-string">&quot;/api/users/&#123;id&#125;&quot;</span>, <span class="hljs-number">1</span>))<br>       .andExpect(MockMvcResultMatchers.status().isOk());<br></code></pre></td></tr></table></figure><p>上述代码执行一个DELETE请求到”&#x2F;api&#x2F;users&#x2F;{id}”接口，并传递路径参数。</p></li></ol><p>这只是一些常见的HTTP请求示例，<code>MockMvc</code>还提供了其他方法和选项，以满足更复杂的测试需求。您可以根据具体的测试场景和要求，选择合适的方法和参数来构建和执行HTTP请求，并使用<code>andExpect()</code>方法对响应进行验证。</p><ol start="2"><li><p>使用<code>MockMvc</code>对象，您可以使用<code>andExpect()</code>方法对响应结果进行验证。<code>andExpect()</code>方法提供了多种断言和匹配器，用于验证响应的状态码、内容、头部等。以下是一些常见的响应结果验证示例：</p></li><li><p>验证状态码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/api/users&quot;</span>))<br>       .andExpect(MockMvcResultMatchers.status().isOk());<br></code></pre></td></tr></table></figure><p>上述代码验证响应的状态码是否为200（<code>HttpStatus.OK</code>）。</p></li><li><p>验证响应内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/api/users/1&quot;</span>))<br>       .andExpect(MockMvcResultMatchers.content().json(<span class="hljs-string">&quot;&#123; \&quot;id\&quot;: 1, \&quot;name\&quot;: \&quot;John\&quot;, \&quot;email\&quot;: \&quot;john@example.com\&quot; &#125;&quot;</span>));<br></code></pre></td></tr></table></figure><p>上述代码验证响应的内容是否与指定的JSON字符串匹配。</p></li><li><p>验证响应头部：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/api/users&quot;</span>))<br>       .andExpect(MockMvcResultMatchers.header().string(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>));<br></code></pre></td></tr></table></figure><p>上述代码验证响应的<code>Content-Type</code>头部是否为<code>application/json</code>。</p></li><li><p>验证JSON响应中的字段值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/api/users/1&quot;</span>))<br>       .andExpect(MockMvcResultMatchers.jsonPath(<span class="hljs-string">&quot;$.name&quot;</span>).value(<span class="hljs-string">&quot;John&quot;</span>));<br></code></pre></td></tr></table></figure><p>上述代码验证JSON响应中的<code>name</code>字段的值是否为<code>John</code>。</p></li><li><p>验证重定向：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/login&quot;</span>))<br>       .andExpect(MockMvcResultMatchers.status().is3xxRedirection())<br>       .andExpect(MockMvcResultMatchers.redirectedUrl(<span class="hljs-string">&quot;/home&quot;</span>));<br></code></pre></td></tr></table></figure><p>上述代码验证响应是否为重定向，并验证重定向的URL是否为<code>/home</code>。</p></li></ol><p>您可以根据需要使用适当的<code>andExpect()</code>方法和匹配器来验证响应结果。<code>MockMvc</code>提供了丰富的验证选项，以确保应用程序的行为和结果符合预期。</p><ol start="3"><li><p>使用<code>MockMvc</code>对象可以模拟会话和认证，以便在测试中进行相应的验证。下面是使用<code>MockMvc</code>模拟会话和认证的示例：</p></li><li><p>模拟会话： 若要模拟会话，您可以使用<code>session()</code>方法将一个<code>MockHttpSession</code>对象传递给请求。以下是一个示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">MockHttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MockHttpSession</span>();<br>session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;john&quot;</span>);<br><br>mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/api/orders&quot;</span>).session(session))<br>       .andExpect(MockMvcResultMatchers.status().isOk());<br></code></pre></td></tr></table></figure><p>在上述示例中，我们创建了一个<code>MockHttpSession</code>对象并将其设置为请求的会话。然后，我们执行GET请求<code>/api/orders</code>，并验证响应的状态码是否为200。</p></li><li><p>模拟用户认证： 若要模拟用户认证，您可以使用<code>with()</code>方法结合<code>MockMvcRequestPostProcessors.user()</code>来指定用户的身份信息和角色。以下是一个示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/api/orders&quot;</span>).with(user(<span class="hljs-string">&quot;john&quot;</span>).password(<span class="hljs-string">&quot;password&quot;</span>).roles(<span class="hljs-string">&quot;USER&quot;</span>)))<br>       .andExpect(MockMvcResultMatchers.status().isOk());<br></code></pre></td></tr></table></figure><p>在上述示例中，我们使用<code>with()</code>方法和<code>user()</code>方法指定了一个名为”john”、密码为”password”、角色为”USER”的用户进行请求。然后，我们执行GET请求<code>/api/orders</code>，并验证响应的状态码是否为200。</p></li></ol><p>通过使用<code>session()</code>方法和<code>with()</code>方法，您可以在测试中模拟会话和认证，以验证受限制的端点和受保护的功能的行为和结果。这样可以确保应用程序在不同的用户身份和会话状态下的行为是正确的。</p></blockquote><h4 id="2、例子"><a href="#2、例子" class="headerlink" title="2、例子"></a>2、例子</h4><h5 id="1、发送虚拟请求"><a href="#1、发送虚拟请求" class="headerlink" title="1、发送虚拟请求"></a>1、发送虚拟请求</h5><ul><li>、首先加上<code>@AutoConfigureMockMvc</code>注解，开启虚拟MVC的调用；在<code>@SpringBootTest</code>注解中开启<code>webEnvironment</code>属性</li><li>2、然后注入<code>MockMVC</code>对象</li><li>3、通过<code>mockMvc.perform(MockMvcRequestBuilders.get(&quot;URI&quot;)/post(&quot;URI&quot;)/put(&quot;URI&quot;)/delete(&quot;URI&quot;))</code>方法执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span>  <span class="hljs-comment">//随机端口</span><br><span class="hljs-meta">@AutoConfigureMockMvc</span>  <span class="hljs-comment">//开启虚拟MVC的调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebTest</span> &#123;<br><br>    <span class="hljs-comment">// 方式1，注入MockMvc</span><br><span class="hljs-comment">//    @Autowired</span><br><span class="hljs-comment">//    private MockMvc mockMvc;</span><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWeb</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> MockMvc mockMvc)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <span class="hljs-comment">//方式2，将MockMvc放到参数中</span><br>        <span class="hljs-type">MockHttpServletRequestBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/books&quot;</span>);  <span class="hljs-comment">//模拟虚拟的http请求</span><br>        mockMvc.perform(builder);  <span class="hljs-comment">//执行</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、匹配响应执行状态"><a href="#2、匹配响应执行状态" class="headerlink" title="2、匹配响应执行状态"></a>2、匹配响应执行状态</h5><ul><li>通过<code>MockMvcResultMatchers.status()</code>中的一系列Http状态与模拟的请求的状态进行匹配</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testStatus</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> MockMvc mockMvc)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">MockHttpServletRequestBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/books1&quot;</span>);<br>    <span class="hljs-type">ResultActions</span> <span class="hljs-variable">action</span> <span class="hljs-operator">=</span> mockMvc.perform(builder);<br><br>    <span class="hljs-comment">//设定预期值 与真实值进行比较</span><br>    <span class="hljs-type">StatusResultMatchers</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> MockMvcResultMatchers.status();  <span class="hljs-comment">//当前模拟运行的状态</span><br>    <span class="hljs-type">ResultMatcher</span> <span class="hljs-variable">ok</span> <span class="hljs-operator">=</span> status.isOk();  <span class="hljs-comment">// 预期值  200</span><br><br>    action.andExpect(ok);  <span class="hljs-comment">//添加预期值到本次调用过程中进行匹配</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、匹配响应体"><a href="#3、匹配响应体" class="headerlink" title="3、匹配响应体"></a>3、匹配响应体</h5><ul><li>通过<code>MockMvcResultMatchers.content()</code>设置预期的值与模拟请求的请求结果进行匹配</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testBody</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> MockMvc mockMvc)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">MockHttpServletRequestBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/books&quot;</span>);<br>    <span class="hljs-type">ResultActions</span> <span class="hljs-variable">action</span> <span class="hljs-operator">=</span> mockMvc.perform(builder);<br><br>    <span class="hljs-comment">//定义本次调用的预期值</span><br>    <span class="hljs-type">ContentResultMatchers</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> MockMvcResultMatchers.content();<br>    <span class="hljs-type">ResultMatcher</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> content.json(<span class="hljs-string">&quot;&#123;\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;spriangboot\&quot;,\&quot;type\&quot;:\&quot;springbo2ot\&quot;,\&quot;description\&quot;:\&quot;springboot\&quot;&#125;&quot;</span>);<br><br>    action.andExpect(body);  <span class="hljs-comment">// 匹配</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4、匹配响应头"><a href="#4、匹配响应头" class="headerlink" title="4、匹配响应头"></a>4、匹配响应头</h5><ul><li>通过<code>MockMvcResultMatchers.header()</code>设置预期的contentType与模拟请求的请求头进行匹配</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testContentType</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> MockMvc mockMvc)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">MockHttpServletRequestBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/books&quot;</span>);<br>    <span class="hljs-type">ResultActions</span> <span class="hljs-variable">action</span> <span class="hljs-operator">=</span> mockMvc.perform(builder);<br><br>    <span class="hljs-comment">//定义本次调用的预期值</span><br>    <span class="hljs-type">HeaderResultMatchers</span> <span class="hljs-variable">header</span> <span class="hljs-operator">=</span> MockMvcResultMatchers.header();<br>    <span class="hljs-type">ResultMatcher</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> header.string(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<br><br>    action.andExpect(contentType);  <span class="hljs-comment">// 匹配</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5、完整写法"><a href="#5、完整写法" class="headerlink" title="5、完整写法"></a>5、完整写法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetById</span><span class="hljs-params">(<span class="hljs-meta">@Autowired</span> MockMvc mockMvc)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       <span class="hljs-type">MockHttpServletRequestBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/books&quot;</span>);<br>       <span class="hljs-type">ResultActions</span> <span class="hljs-variable">action</span> <span class="hljs-operator">=</span> mockMvc.perform(builder);<br><br>       <span class="hljs-comment">//测试状态码</span><br>       <span class="hljs-type">StatusResultMatchers</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> MockMvcResultMatchers.status();  <span class="hljs-comment">//当前模拟运行的状态</span><br>       <span class="hljs-type">ResultMatcher</span> <span class="hljs-variable">ok</span> <span class="hljs-operator">=</span> status.isOk();  <span class="hljs-comment">// 预期值  200</span><br>       action.andExpect(ok);  <span class="hljs-comment">//添加预期值到本次调用过程中进行匹配</span><br><br>       <span class="hljs-comment">//测试响应体</span><br>       <span class="hljs-type">ContentResultMatchers</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> MockMvcResultMatchers.content();<br>       <span class="hljs-type">ResultMatcher</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> content.json(<span class="hljs-string">&quot;&#123;\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;springboot\&quot;,\&quot;type\&quot;:\&quot;springboot\&quot;,\&quot;description\&quot;:\&quot;springboot\&quot;&#125;&quot;</span>);<br>       action.andExpect(body);  <span class="hljs-comment">// 匹配</span><br><br>       <span class="hljs-comment">//测试响应头</span><br>       <span class="hljs-type">HeaderResultMatchers</span> <span class="hljs-variable">header</span> <span class="hljs-operator">=</span> MockMvcResultMatchers.header();<br>       <span class="hljs-type">ResultMatcher</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> header.string(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<br>       action.andExpect(contentType);  <span class="hljs-comment">// 匹配</span><br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="4、测试类自动回滚"><a href="#4、测试类自动回滚" class="headerlink" title="4、测试类自动回滚"></a>4、测试类自动回滚</h3><p>SpringBoot提供了一种在测试期间对事务操作进行回滚的机制，以确保测试数据的独立性和一致性。这样做可以避免测试数据对数据库的永久性修改，同时保持测试用例之间的隔离。</p><p>要启用测试用例的事务回滚，可以使用Spring的<code>@Transactional</code>注解，并指定<code>rollbackFor</code>属性来指定需要回滚的异常类型。</p><p>以下是一个示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.annotation.Rollback;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@Rollback(true)</span> <span class="hljs-comment">// 指定回滚操作</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">YourTestClass</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">yourTestMethod</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 测试用例的代码逻辑</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述示例中，<code>@SpringBootTest</code>用于指定测试用例是一个Spring Boot应用程序的测试。<code>@Transactional</code>用于启用测试用例的事务管理。<code>@Rollback(true)</code>用于指定测试用例完成后进行事务回滚。 如果<code>@Rollback(false)</code>事务就不会进行回滚</p><p>当测试用例执行完毕时，事务将自动回滚，确保对数据库的修改不会永久保存。</p><p>请注意，此机制仅适用于与Spring事务管理器集成的数据库事务。如果你使用的是其他持久化框架或工具，可能需要采取其他方式来实现事务回滚的机制。</p><h3 id="5、测试用例数据设定成随机数据"><a href="#5、测试用例数据设定成随机数据" class="headerlink" title="5、测试用例数据设定成随机数据"></a>5、测试用例数据设定成随机数据</h3><ul><li><p>测试用例数据通常采用随机值进行测试，使用SpringBoot提供的随机数为其赋值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># application.yml</span><br><br><span class="hljs-comment"># 随机测试用例</span><br><span class="hljs-attr">testcase:</span><br>  <span class="hljs-attr">book:</span><br>    <span class="hljs-attr">id:</span> <span class="hljs-string">$&#123;random.int&#125;</span>  <span class="hljs-comment"># 随机整数</span><br>    <span class="hljs-attr">id2:</span> <span class="hljs-string">$&#123;random.int(10)&#125;</span>  <span class="hljs-comment"># 10以内的整数</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">$&#123;random.in</span> <span class="hljs-string">t(5,10)&#125;</span>  <span class="hljs-comment"># 5 到 10的整数</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;random.value&#125;</span>  <span class="hljs-comment"># 随机字符串，MD5加密，32位</span><br>    <span class="hljs-attr">uuid:</span> <span class="hljs-string">$&#123;random.uuid&#125;</span>  <span class="hljs-comment"># 随机uuid</span><br>    <span class="hljs-attr">publishTime:</span> <span class="hljs-string">$&#123;random.long&#125;</span>  <span class="hljs-comment"># 随机long类型整数</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="4、数据层解决方案"><a href="#4、数据层解决方案" class="headerlink" title="4、数据层解决方案"></a>4、数据层解决方案</h2><h3 id="1、SQL"><a href="#1、SQL" class="headerlink" title="1、SQL"></a>1、SQL</h3><h4 id="SpringBoot提供的一些默认配置"><a href="#SpringBoot提供的一些默认配置" class="headerlink" title="SpringBoot提供的一些默认配置"></a>SpringBoot提供的一些默认配置</h4><h5 id="1、内置数据源"><a href="#1、内置数据源" class="headerlink" title="1、内置数据源"></a>1、内置数据源</h5><ul><li>SpringBoot 提供了3种内嵌的数据源对象供开发者选择<ul><li>HikariCP：默认内置数据源对象</li><li>Tomcat提供DataSource：HikariCP不可用的情况下，且在web环境中，将使用tomcat服务器配置的数据源对象</li><li>Commons DBCP：Hikari不可用，tomcat数据源也不可用，将使用dbcp数据源</li></ul></li></ul><h5 id="2、内置的持久化解决方案—JdbcTemplate"><a href="#2、内置的持久化解决方案—JdbcTemplate" class="headerlink" title="2、内置的持久化解决方案—JdbcTemplate"></a>2、内置的持久化解决方案—JdbcTemplate</h5><p>要想用JdbcTemplate，要导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3、内置数据库"><a href="#3、内置数据库" class="headerlink" title="3、内置数据库"></a>3、内置数据库</h4><ul><li>SpringBoot提供了3种内嵌数据库供开发者选择<ul><li>H2</li><li>HSQL</li><li>Derby</li></ul></li></ul><h3 id="2、NoSQL"><a href="#2、NoSQL" class="headerlink" title="2、NoSQL"></a>2、NoSQL</h3><h4 id="1、Redis"><a href="#1、Redis" class="headerlink" title="1、Redis"></a>1、Redis</h4><blockquote><ul><li>Redis是一款key-value存储结构的内存级的NoSQLs数据库</li><li>支持多种数据存储格式</li><li>支持持久化</li><li>支持集群</li></ul></blockquote><h5 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h5><ul><li><p>1、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2、配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">主机</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-string">端口</span><br></code></pre></td></tr></table></figure></li><li><p>3、使用RedisTemplate操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br>  <br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">ValueOperations</span> <span class="hljs-variable">ops</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue();  <span class="hljs-comment">//ops*：获取各种数据类型的操作接口</span><br>ops.set(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">41</span>);<br>&#125;<br>  <br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">ValueOperations</span> <span class="hljs-variable">ops</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue();<br><span class="hljs-type">Object</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> ops.get(<span class="hljs-string">&quot;age&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;age = &quot;</span> + age);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>客户端：</p><ul><li>RedisTemplate 是以对象作为key和value，内部对数据进行序列化</li><li>StringRedisTemplate 是以字符串作为key和value</li></ul><p>SpringBoot整合Redis客户端选择：</p><ul><li>lettuce（默认）</li><li>jedis</li></ul><h4 id="2、MongoDB"><a href="#2、MongoDB" class="headerlink" title="2、MongoDB"></a>2、MongoDB</h4><p><strong>docker安装mongo</strong></p><blockquote><ol><li>打开终端或命令提示符，并运行以下命令，以在Docker上拉取MongoDB的官方镜像：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">docker pull mongo</span><br></code></pre></td></tr></table></figure><p>这将下载最新的MongoDB镜像到您的本地机器。</p><ol start="2"><li>下载完成后，您可以运行以下命令来创建和启动一个MongoDB容器：（必须指定用户名和密码）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">docker run -d --name mongodb_my -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=admin --privileged=<span class="hljs-literal">true</span> --restart always mongo --auth</span><br></code></pre></td></tr></table></figure><p>该命令将创建一个名为”mymongodb”的容器，并将MongoDB默认端口27017映射到您本地机器的27017端口。您可以根据需要自定义容器名称和端口映射。</p><ol start="3"><li>等待一段时间，直到容器启动完成。您可以使用以下命令检查容器的运行状态：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">docker ps</span><br></code></pre></td></tr></table></figure><p>如果看到”Mymongodb”容器正在运行，表示MongoDB已经成功安装并运行在Docker上。</p></blockquote><p>MongoDB是一个开源、高性能、无模式的文档型数据库。NoSQL数据库产品的一种，是最像关系型数据库的非关系型数据库</p><h5 id="mongo常见操作"><a href="#mongo常见操作" class="headerlink" title="mongo常见操作"></a>mongo常见操作</h5><blockquote><p>MongoDB的语法是基于JavaScript的，它使用一种称为MongoDB查询语言（MongoDB Query Language，简称MQL）的语法来操作和查询数据库。下面是一些常见的MongoDB语法示例：</p><ol><li>插入文档（数据）到集合中：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&gt;</span>db.collection.insertOne(&#123; key1: value1, key2: value2, ... &#125;)<br><span class="hljs-operator">&gt;</span>db.collection.insertMany([&#123; key1: value1, key2: value2, ... &#125;, &#123; key1: value1, key2: value2, ... &#125;])<br></code></pre></td></tr></table></figure><ol start="2"><li>查询集合中的文档：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&gt;</span>db.collection.find(&#123; key: <span class="hljs-keyword">value</span> &#125;)<br><span class="hljs-operator">&gt;</span>db.collection.findOne(&#123; key: <span class="hljs-keyword">value</span> &#125;)<br></code></pre></td></tr></table></figure><ol start="3"><li>更新集合中的文档：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&gt;</span>db.collection.updateOne(&#123; key: <span class="hljs-keyword">value</span> &#125;, &#123; $<span class="hljs-keyword">set</span>: &#123; newKey: newValue &#125; &#125;)<br><span class="hljs-operator">&gt;</span>db.collection.updateMany(&#123; key: <span class="hljs-keyword">value</span> &#125;, &#123; $<span class="hljs-keyword">set</span>: &#123; newKey: newValue &#125; &#125;)<br></code></pre></td></tr></table></figure><ol start="4"><li>删除集合中的文档：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&gt;</span>db.collection.deleteOne(&#123; key: <span class="hljs-keyword">value</span> &#125;)<br><span class="hljs-operator">&gt;</span>db.collection.deleteMany(&#123; key: <span class="hljs-keyword">value</span> &#125;)<br></code></pre></td></tr></table></figure><ol start="5"><li>使用条件进行查询：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&gt;</span>db.collection.find(&#123; $<span class="hljs-keyword">and</span>: [&#123; key1: value1 &#125;, &#123; key2: value2 &#125;] &#125;)<br><span class="hljs-operator">&gt;</span>db.collection.find(&#123; $<span class="hljs-keyword">or</span>: [&#123; key1: value1 &#125;, &#123; key2: value2 &#125;] &#125;)<br></code></pre></td></tr></table></figure><ol start="6"><li>使用投影（Projection）指定返回的字段：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&gt;</span>db.collection.find(&#123;&#125;, &#123; key1: <span class="hljs-number">1</span>, key2: <span class="hljs-number">1</span>, _id: <span class="hljs-number">0</span> &#125;)<br></code></pre></td></tr></table></figure><ol start="7"><li>使用聚合（Aggregation）框架进行复杂的数据处理：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&gt;</span>db.collection.aggregate([&#123; $<span class="hljs-keyword">match</span>: &#123; key: <span class="hljs-keyword">value</span> &#125; &#125;, &#123; $<span class="hljs-keyword">group</span>: &#123; _id: &quot;$key&quot;, count: &#123; $sum: <span class="hljs-number">1</span> &#125; &#125; &#125;])<br></code></pre></td></tr></table></figure><ol start="8"><li>创建索引：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&gt;</span>db.collection.createIndex(&#123; key: <span class="hljs-number">1</span> &#125;)<br></code></pre></td></tr></table></figure><p>以上仅是一些常见的MongoDB语法示例，MongoDB提供了更多的查询和操作功能。您可以参考MongoDB官方文档以获取更详细和全面的语法说明：<a href="https://docs.mongodb.com/manual/">https://docs.mongodb.com/manual/</a></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 查询<br>db.getCollection(<span class="hljs-string">&#x27;book&#x27;</span>).find()<br><br>db.book.find(&#123;type:&quot;springboot&quot;&#125;)<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 添加文档<br>db.book.save(&#123;&quot;name&quot;:&quot;springboot&quot;,&quot;type&quot;:&quot;springboot&quot;&#125;)<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 删除操作<br>db.book.remove(&#123;type:&quot;springboot&quot;&#125;)<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 修改操作<br>db.book.update(&#123;name:&quot;springboot&quot;&#125;,&#123;$<span class="hljs-keyword">set</span>:&#123;name:&quot;springboot222&quot;&#125;&#125;)  <span class="hljs-operator">/</span><span class="hljs-operator">/</span>只修改遇到的第一条<br>db.book.updateMany(&#123;name:&quot;springboot&quot;&#125;,&#123;$<span class="hljs-keyword">set</span>:&#123;name:&quot;springboot222&quot;&#125;&#125;)  <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 修改全部<br></code></pre></td></tr></table></figure><h5 id="SpringBoot整合-1"><a href="#SpringBoot整合-1" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h5><ul><li><p>1、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2、配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">mongodb:</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.111</span> <span class="hljs-comment">#指定MongoDB服务地址</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">27017</span> <span class="hljs-comment">#指定端口，默认就为27017</span><br>      <span class="hljs-attr">database:</span> <span class="hljs-string">itheima</span> <span class="hljs-comment">#指定使用的数据库(集合)</span><br>      <span class="hljs-attr">authentication-database:</span> <span class="hljs-string">admin</span> <span class="hljs-comment"># 登录认证的逻辑库名</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">admin</span> <span class="hljs-comment">#用户名</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">admin</span> <span class="hljs-comment">#密码</span><br></code></pre></td></tr></table></figure></li><li><p>3、使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> MongoTemplate mongoTemplate;<br>  <br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>    book.setId(<span class="hljs-number">2</span>);<br>    book.setName(<span class="hljs-string">&quot;taoao&quot;</span>);<br>    book.setType(<span class="hljs-string">&quot;student&quot;</span>);<br>    book.setDescription(<span class="hljs-string">&quot;学生&quot;</span>);<br>    mongoTemplate.save(book);<br>&#125;<br>  <br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">find</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Book&gt; all = mongoTemplate.findAll(Book.class);<br>    System.out.println(<span class="hljs-string">&quot;all = &quot;</span> + all);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="3、ElasticSearch"><a href="#3、ElasticSearch" class="headerlink" title="3、ElasticSearch"></a>3、ElasticSearch</h4><ul><li>ElasticSearch是一个分布式全文搜索引擎</li></ul><blockquote><p><strong>docker安装elasticsearch</strong></p><ol><li>打开终端或命令行界面，运行以下命令来下载 Elasticsearch 的 Docker 镜像：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">docker pull docker.elastic.co/elasticsearch/elasticsearch:7.16.2</span><br></code></pre></td></tr></table></figure><ol start="2"><li>安装镜像后，运行以下命令来创建并启动 Elasticsearch 容器：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> docker.elastic.co/elasticsearch/elasticsearch:7.16.2</span><br></code></pre></td></tr></table></figure><p>这将创建一个名为 <code>elasticsearch</code> 的容器，并将 Elasticsearch 的 HTTP 端口映射到主机的 <code>9200</code> 端口，将 Elasticsearch 的传输端口映射到主机的 <code>9300</code> 端口。<code>-e &quot;discovery.type=single-node&quot;</code> 配置将 Elasticsearch 配置为单节点模式。</p><ol start="3"><li>等待一段时间，直到 Elasticsearch 容器成功启动。你可以使用以下命令检查容器的状态：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">docker ps</span><br></code></pre></td></tr></table></figure><p>如果看到 <code>elasticsearch</code> 容器正在运行，则表示安装成功。</p><p>现在，你可以通过访问 <code>http://localhost:9200</code> 来验证 Elasticsearch 是否正常工作。你应该能够看到 Elasticsearch 的相关信息。</p><p>请注意，这只是一个简单的单节点安装示例。在生产环境中，你可能需要配置更多参数和参数文件，以满足你的需求。有关更详细的安装和配置说明，请参考 Elasticsearch 官方文档。</p><p><strong>安装IK分词器</strong></p><p>在Elasticsearch容器中安装IK分词器插件时，你应该将其放置在容器内的插件目录。以下是步骤：</p><ol><li>进入已经创建的Elasticsearch容器的命令行界面。可以使用以下命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">docker <span class="hljs-built_in">exec</span> -it elasticsearch bash</span><br></code></pre></td></tr></table></figure><ol start="2"><li>切换到Elasticsearch的插件目录。运行以下命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-built_in">cd</span> /usr/share/elasticsearch/plugins</span><br></code></pre></td></tr></table></figure><ol start="3"><li>使用<code>wget</code>命令下载IK分词器插件的压缩包。运行以下命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.16.2/elasticsearch-analysis-ik-7.16.2.zip</span><br></code></pre></td></tr></table></figure><ol start="4"><li>创建<code>ik</code>文件夹，用于将解压出来的文件放到其中</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-built_in">mkdir</span> ik</span><br></code></pre></td></tr></table></figure><ol start="5"><li>解压插件文件。将zip中的文件解压到<code>ik</code>文件夹中。运行以下命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">unzip elasticsearch-analysis-ik-7.16.2.zip -d ik/</span><br></code></pre></td></tr></table></figure><ol start="6"><li>删除插件压缩包。运行以下命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-built_in">rm</span> elasticsearch-analysis-ik-7.16.2.zip</span><br></code></pre></td></tr></table></figure><p>完成以上步骤后，IK分词器插件应该已经正确安装在Elasticsearch容器的插件目录中。重新启动容器以使更改生效。</p></blockquote><h5 id="索引相关操作："><a href="#索引相关操作：" class="headerlink" title="索引相关操作："></a>索引相关操作：</h5><ol><li><p>创建名为<code>books</code>的索引，并指定使用IK分词器和<code>all</code>字段：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs shell">PUT http://192.168.0.111:9200/books<br>&#123;<br>  &quot;settings&quot;: &#123;<br>    &quot;analysis&quot;: &#123;<br>      &quot;analyzer&quot;: &#123;<br>        &quot;ik_analyzer&quot;: &#123;<br>          &quot;type&quot;: &quot;custom&quot;,<br>          &quot;tokenizer&quot;: &quot;ik_max_word&quot;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;,<br>  &quot;mappings&quot;: &#123;<br>    &quot;properties&quot;: &#123;<br>      &quot;id&quot;: &#123;<br>        &quot;type&quot;: &quot;integer&quot;<br>      &#125;,<br>      &quot;name&quot;: &#123;<br>        &quot;type&quot;: &quot;text&quot;,<br>        &quot;analyzer&quot;: &quot;ik_analyzer&quot;,<br>        &quot;copy_to&quot;: &quot;all&quot;<br>      &#125;,<br>      &quot;type&quot;: &#123;<br>        &quot;type&quot;: &quot;text&quot;,<br>        &quot;analyzer&quot;: &quot;ik_analyzer&quot;,<br>        &quot;copy_to&quot;: &quot;all&quot;<br>      &#125;,<br>      &quot;description&quot;: &#123;<br>        &quot;type&quot;: &quot;text&quot;,<br>        &quot;analyzer&quot;: &quot;ik_analyzer&quot;,<br>        &quot;copy_to&quot;: &quot;all&quot;<br>      &#125;,<br>      &quot;all&quot;: &#123;<br>        &quot;type&quot;: &quot;text&quot;,<br>        &quot;analyzer&quot;: &quot;ik_analyzer&quot;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述示例中，我们使用PUT请求创建索引<code>books</code>。在索引的<code>settings</code>中定义了<code>ik_analyzer</code>作为自定义分析器，使用<code>ik_max_word</code>作为分词器。在<code>mappings</code>中，我们定义了<code>id</code>、<code>name</code>、<code>type</code>和<code>description</code>字段的类型和属性，同时通过<code>copy_to</code>指定将<code>name</code>、<code>type</code>和<code>description</code>的内容复制到<code>all</code>字段中。</p></li><li><p>插入文档到<code>books</code>索引中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">POST http://192.168.0.111:9200/books/_doc/1<br>&#123;<br>  &quot;id&quot;: 1,<br>  &quot;name&quot;: &quot;Book 1&quot;,<br>  &quot;type&quot;: &quot;Fiction&quot;,<br>  &quot;description&quot;: &quot;This is a description of Book 1.&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用POST请求插入文档到<code>books</code>索引中。文档的内容包括<code>id</code>、<code>name</code>、<code>type</code>和<code>description</code>字段。你可以按照相同的方式插入其他文档。</p><p>这样，通过以上操作，你就可以创建名为<code>books</code>的索引，并使用IK分词器定义了<code>name</code>、<code>type</code>和<code>description</code>字段的映射。通过<code>copy_to</code>属性，将这些字段的内容复制到<code>all</code>字段中。同时，<code>name</code>、<code>type</code>和<code>description</code>字段使用了<code>ik_analyzer</code>分析器，而<code>all</code>字段也使用了相同的分析器。</p></li></ol><h5 id="SpringBoot整合-2"><a href="#SpringBoot整合-2" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h5><h6 id="1、整合"><a href="#1、整合" class="headerlink" title="1、整合"></a>1、整合</h6><ul><li><p>1、引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2、连接客户端，创建索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springboot;<br><br><span class="hljs-keyword">import</span> org.apache.http.HttpHost;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.admin.indices.create.CreateIndexRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RequestOptions;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RestClient;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RestClientBuilder;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RestHighLevelClient;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.AfterEach;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.BeforeEach;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot18EsApplicationTests</span> &#123;<br>    <span class="hljs-comment">//    @Autowired</span><br><span class="hljs-comment">//    private ElasticsearchRestTemplate template;   // 不推荐使用，老版本</span><br><br>    <span class="hljs-keyword">private</span> RestHighLevelClient client;<br><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//连接</span><br>        <span class="hljs-type">HttpHost</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> HttpHost.create(<span class="hljs-string">&quot;http://192.168.0.111:9200&quot;</span>);<br>        <span class="hljs-type">RestClientBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> RestClient.builder(host);<br>        client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestHighLevelClient</span>(builder);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//关闭</span><br>        client.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建索引</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCreateIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">CreateIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateIndexRequest</span>(<span class="hljs-string">&quot;books&quot;</span>);<br>        client.indices().create(request, RequestOptions.DEFAULT);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h6 id="2、添加文档"><a href="#2、添加文档" class="headerlink" title="2、添加文档"></a>2、添加文档</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加文档</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCreateDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> bookDao.selectById(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">IndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;books&quot;</span>).id(String.valueOf(book.getId()));<br>        String json= JSON.toJSONString(book);<br>        request.source(json,XContentType.JSON);<br>        client.index(request,RequestOptions.DEFAULT);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCreateDocAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        List&lt;Book&gt; books = bookDao.selectList(<span class="hljs-literal">null</span>);<br>        BulkRequest bulk=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BulkRequest</span>();<br>        <span class="hljs-keyword">for</span> (Book book : books) &#123;<br>            <span class="hljs-type">IndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;books&quot;</span>).id(String.valueOf(book.getId()));<br>            String json= JSON.toJSONString(book);<br>            request.source(json,XContentType.JSON);<br>            bulk.add(request);<br>        &#125;<br>        client.bulk(bulk,RequestOptions.DEFAULT);<br>    &#125;<br></code></pre></td></tr></table></figure><h6 id="3、查询文档"><a href="#3、查询文档" class="headerlink" title="3、查询文档"></a>3、查询文档</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//按id查询</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>       <span class="hljs-type">GetRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetRequest</span>(<span class="hljs-string">&quot;books&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);<br>       <span class="hljs-type">GetResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.get(request, RequestOptions.DEFAULT);<br>       <span class="hljs-type">String</span> <span class="hljs-variable">sourceAsString</span> <span class="hljs-operator">=</span> response.getSourceAsString();<br>       System.out.println(<span class="hljs-string">&quot;sourceAsString = &quot;</span> + sourceAsString);<br>   &#125;<br><br><span class="hljs-comment">//按条件查询</span><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSearch</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>       <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;books&quot;</span>);<br>       <span class="hljs-type">SearchSourceBuilder</span> <span class="hljs-variable">bulider</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchSourceBuilder</span>();<br>       bulider.query(QueryBuilders.termQuery(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;spring&quot;</span>));  <span class="hljs-comment">//条件</span><br>       request.source(bulider);<br>       <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">search</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>       <span class="hljs-type">SearchHits</span> <span class="hljs-variable">hits</span> <span class="hljs-operator">=</span> search.getHits();<br>       <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>           <span class="hljs-type">String</span> <span class="hljs-variable">sourceAsString</span> <span class="hljs-operator">=</span> hit.getSourceAsString();<br>           System.out.println(<span class="hljs-string">&quot;sourceAsString = &quot;</span> + sourceAsString);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="5、整合第三方技术"><a href="#5、整合第三方技术" class="headerlink" title="5、整合第三方技术"></a>5、整合第三方技术</h2><h3 id="1、缓存"><a href="#1、缓存" class="headerlink" title="1、缓存"></a>1、缓存</h3><h4 id="1、缓存的作用"><a href="#1、缓存的作用" class="headerlink" title="1、缓存的作用"></a>1、缓存的作用</h4><ul><li>缓存是一种介于数据永久存储介质（数据库）和 数据应用程序（app）之间的数据临时存储介质</li><li>使用缓存可以有效的减少低速数据读取过程的次数（例如磁盘IO），提高系统性能</li><li>缓存不仅可以提高永久性存储介质的数据读取效率，还可以提供临时的数据存储空间</li></ul><h4 id="2、spring-cache"><a href="#2、spring-cache" class="headerlink" title="2、spring-cache"></a>2、spring-cache</h4><h5 id="2、SpringBoot内置了缓存技术（simple），方便缓存使用"><a href="#2、SpringBoot内置了缓存技术（simple），方便缓存使用" class="headerlink" title="2、SpringBoot内置了缓存技术（simple），方便缓存使用"></a>2、SpringBoot内置了缓存技术（simple），方便缓存使用</h5><blockquote><ul><li>启用缓存</li></ul><p><code>@EnableCaching</code>是Spring框架中的一个注解，用于启用方法级别的缓存支持。通过在配置类上添加<code>@EnableCaching</code>注解，可以告诉Spring启用缓存功能，并自动代理被<code>@Cacheable</code>、<code>@CachePut</code>和<code>@CacheEvict</code>等注解修饰的方法，以实现缓存的自动管理。</p><p><code>@EnableCaching</code>注解可以应用于任意一个Spring配置类上，通常是应用的主配置类，或者是一个专门用于配置缓存的配置类。当应用了<code>@EnableCaching</code>注解后，Spring将会在运行时创建一个代理对象，拦截被<code>@Cacheable</code>、<code>@CachePut</code>和<code>@CacheEvict</code>等注解修饰的方法的调用，并处理缓存的逻辑。</p><p>同时，为了使<code>@EnableCaching</code>注解生效，还需要配置一个适当的缓存管理器。可以根据需求选择不同的缓存管理器，如EhCache、Redis或Caffeine等，并将其配置为Spring应用的一部分。缓存管理器负责实际的缓存操作，如数据的读取、写入和清除等。</p><p>需要注意的是，使用<code>@EnableCaching</code>注解启用缓存功能后，还需要在具体的方法上使用<code>@Cacheable</code>、<code>@CachePut</code>和<code>@CacheEvict</code>等注解来定义缓存的行为。<code>@EnableCaching</code>注解只是用于启用缓存功能的开关，并不会自动对所有方法进行缓存处理。</p><p>总结来说，通过在配置类上添加<code>@EnableCaching</code>注解，可以启用Spring的缓存功能，并自动代理被缓存相关注解修饰的方法，实现方法级别的缓存支持。同时，需要配置一个适当的缓存管理器来实现实际的缓存操作。</p><ul><li>设置进入缓存的数据</li></ul><p><code>@Cacheable</code>是Spring框架中的一个注解，用于配置方法的结果缓存。通过在方法上添加<code>@Cacheable</code>注解，可以告诉Spring将方法的返回值缓存起来，以便在下一次调用相同的方法时，可以直接返回缓存的结果，而不需要再执行方法体内的逻辑。</p><p><code>@Cacheable</code>注解可以应用于方法级别，也可以应用于类级别。当应用于方法级别时，它会告诉Spring根据方法的参数和返回值来生成唯一的缓存键，以便在后续的调用中进行查找和匹配。当应用于类级别时，它会将整个类的所有方法的结果缓存起来。</p><p><strong><code>@Cacheable</code>注解提供了一些属性来进一步配置缓存的行为。其中最重要的属性是value和key。value属性指定要使用的缓存名称，可以是一个字符串数组，用于指定多个缓存名称。key属性用于自定义缓存键的生成逻辑，可以使用SpEL表达式或实现CacheKeyGenerator接口来指定缓存键的生成方式。</strong></p><p>除了<code>@Cacheable</code>注解外，Spring还提供了其他的缓存相关注解，如<code>@CacheEvict</code>用于清除缓存中的数据，<code>@CachePut</code>用于更新缓存中的数据，以及<code>@Caching</code>用于同时应用多个缓存相关的注解。</p><p>需要注意的是，为了使用<code>@Cacheable</code>注解，需要先配置一个适当的缓存管理器，如EhCache、Redis或Caffeine等，并将其配置为Spring应用的一部分。这样，当使用<code>@Cacheable</code>注解时，Spring就会根据缓存管理器的配置来实现方法结果的缓存。</p><ul><li>设置读取缓存的数据</li></ul></blockquote><ul><li><p>1、引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--cache--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2、开启缓存功能</p><ul><li>在启动类上加上注解<code>@EnableCaching</code>，开启缓存功能</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableCaching</span>  <span class="hljs-comment">//开启缓存功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot19CacheApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Springboot19CacheApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>3、使用</p><ul><li>在service层的需要添加缓存的方法上加上<code>@Cacheable</code>注解,注解中最重要的属性是value和key</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Cacheable(value = &quot;cacheSpace&quot;,key = &quot;#id&quot;)</span>  <span class="hljs-comment">//value属性指定要使用的缓存名称，key指定通过什么查找这个缓存</span><br><span class="hljs-keyword">public</span> Book <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span> &#123;<br>    <span class="hljs-keyword">return</span> bookDao.selectById(id);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><em><strong>SpringBoot提供的缓存技术除了提供默认的缓存方案，还可以对其他缓存技术进行整合，统一接口，方便缓存技术的开发和管理</strong></em></p><h5 id="3、整合EhCache"><a href="#3、整合EhCache" class="headerlink" title="3、整合EhCache"></a>3、整合EhCache</h5><ul><li><p>1、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--ehcache--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.sf.ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2、配置</p><ul><li><p>1、在application.yml中指定使用ehcache缓存策略</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cache:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">ehcache</span><br>    <span class="hljs-attr">ehcache:</span><br>      <span class="hljs-attr">config:</span> <span class="hljs-string">ehcache.xml</span>  <span class="hljs-comment"># 指定redis名称</span><br></code></pre></td></tr></table></figure></li><li><p>2、添加ehcache.xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;http://ehcache.org/ehcache.xsd&quot;</span> <span class="hljs-attr">updateCheck</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;D:\ehcache&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--默认缓存策略--&gt;</span><br>    <span class="hljs-comment">&lt;!--eternal 是否永久存在，设置为true则不会被清除，此时与timeout冲突。通常设置为false--&gt;</span><br>    <span class="hljs-comment">&lt;!--diskPersistent 是否启用磁盘持久化--&gt;</span><br>    <span class="hljs-comment">&lt;!--mexElementsInMemory 最大缓存数量--&gt;</span><br>    <span class="hljs-comment">&lt;!--overflowToDisk 超过最大缓存数量是否持久化到磁盘--&gt;</span><br>    <span class="hljs-comment">&lt;!--timeToIdleSeconds 最大不活动间隔，设置过长缓存容易溢出，设置过段无效果。可用于记录时效性数据。例如验证码--&gt;</span><br>    <span class="hljs-comment">&lt;!--timeToLiveSeconds 最大存活时间--&gt;</span><br>    <span class="hljs-comment">&lt;!--memoryStoreEvictionPolicy 缓存清除策略  lru是长时间不访问的淘汰，lfu是最近访问最少的淘汰--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span> <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;1000&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;60&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;60&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--name 对应@Cacheable 注解中的value值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;smsCode&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;1000&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;60&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;60&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>3、使用</p><p>使用方法和SpringBoot内置的缓存一样</p></li></ul><h5 id="4、整合Redis"><a href="#4、整合Redis" class="headerlink" title="4、整合Redis"></a>4、整合Redis</h5><ul><li><p>1、添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Redis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2、配置Redis作为缓存</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 设定当前缓存使用Redis</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cache:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">use-key-prefix:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 是否使用前缀   对应注解中要不要value，如果false，即便设置了value也不存在，风险性高，一般选择true</span><br>      <span class="hljs-attr">cache-null-values:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 是否使用空值</span><br>      <span class="hljs-attr">key-prefix:</span> <span class="hljs-string">aa</span>  <span class="hljs-comment"># 指定前缀  会显示：aa + 注解中的value</span><br>      <span class="hljs-attr">time-to-live:</span> <span class="hljs-string">10s</span>  <span class="hljs-comment"># 最大活动时间,多久过期</span><br><br>  <span class="hljs-comment"># 配置Redis连接</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.111</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br></code></pre></td></tr></table></figure></li><li><p>3、使用</p><p>使用方法和SpringBoot内置的缓存一样</p></li></ul><h5 id="5、整合memcached"><a href="#5、整合memcached" class="headerlink" title="5、整合memcached"></a>5、整合memcached</h5><h6 id="安装memcached"><a href="#安装memcached" class="headerlink" title="安装memcached"></a>安装memcached</h6><blockquote><p>要在Docker中安装Memcached，可以按照以下步骤进行操作：</p><ol><li>拉取Memcached镜像：在终端或命令行中执行以下命令，从Docker Hub上拉取Memcached的官方镜像。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">docker pull memcached</span><br></code></pre></td></tr></table></figure><ol start="2"><li>运行Memcached容器：执行以下命令来运行Memcached容器。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">docker run -d -p 11211:11211 --name memcached memcached</span><br></code></pre></td></tr></table></figure><p>这条命令会在后台运行一个名为”memcached”的容器，并将容器的11211端口映射到主机的11211端口。Memcached服务将在容器中启动并监听11211端口。</p><p>这样，你就成功在Docker中安装并运行了Memcached。你可以使用Memcached来缓存和加速你的应用程序的数据访问。记得根据需要进行适当的配置和调整，如内存限制、缓存策略等。</p></blockquote><h6 id="memcached介绍"><a href="#memcached介绍" class="headerlink" title="memcached介绍"></a>memcached介绍</h6><ul><li>memcached客户端选择：<ul><li>Memcached Client for Java：最早期客户端，稳定可靠，用户群广</li><li>SpyMemcached：效率更高</li><li>Xmemcached：并发处理更好</li></ul></li><li>SpringBoot未提供对memcached的整合，需要使用硬编码方式实现客户端初始化管理</li></ul><h6 id="整合Xmemcached步骤"><a href="#整合Xmemcached步骤" class="headerlink" title="整合Xmemcached步骤"></a>整合Xmemcached步骤</h6><ul><li><p>1、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--整合xmemcached --&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.googlecode.xmemcached/xmemcached --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.googlecode.xmemcached<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xmemcached<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2、编写配置</p><ul><li><p>①、application.yml中自定义一些参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 自定义</span><br><span class="hljs-attr">memcached:</span><br>  <span class="hljs-attr">servers:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.111</span><span class="hljs-string">:11211</span>  <span class="hljs-comment"># 服务器地址</span><br>  <span class="hljs-attr">pool-size:</span> <span class="hljs-number">10</span>  <span class="hljs-comment"># 连接池数量</span><br>  <span class="hljs-attr">time-out:</span> <span class="hljs-number">3000</span>  <span class="hljs-comment"># 设置默认操作超时</span><br></code></pre></td></tr></table></figure></li><li><p>②、编写配置类，读取参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(&quot;memcached&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XMemcachedProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> String servers;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> poolSize;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> timeOut;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>③、编写配置类，提供一个MemcachedClient的Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springboot.config;<br><br><span class="hljs-keyword">import</span> net.rubyeye.xmemcached.MemcachedClient;<br><span class="hljs-keyword">import</span> net.rubyeye.xmemcached.MemcachedClientBuilder;<br><span class="hljs-keyword">import</span> net.rubyeye.xmemcached.XMemcachedClientBuilder;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XMemcachedConfig</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> XMemcachedProperties xMemcachedProperties;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MemcachedClient <span class="hljs-title function_">getMemcachedClient</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">MemcachedClientBuilder</span> <span class="hljs-variable">memcachedClientBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMemcachedClientBuilder</span>(xMemcachedProperties.getServers());<br>        memcachedClientBuilder.setOpTimeout(xMemcachedProperties.getTimeOut());<br>        memcachedClientBuilder.setConnectionPoolSize(xMemcachedProperties.getPoolSize());<br>        <span class="hljs-type">MemcachedClient</span> <span class="hljs-variable">memcachedClient</span> <span class="hljs-operator">=</span> memcachedClientBuilder.build();<br>        <span class="hljs-keyword">return</span> memcachedClient;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>3、使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 以下是SpringBoot中使用xmemcached</span><br><br><span class="hljs-comment">// 自动注入刚才定义的MemcachedClient</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MemcachedClient memcachedClient;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendCOdeToSMS</span><span class="hljs-params">(String tele)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> codeUtils.generator(tele);<br>        <span class="hljs-keyword">try</span> &#123;<br>            memcachedClient.set(tele,<span class="hljs-number">10</span>,code);  <span class="hljs-comment">// 往缓存中放数据。三个参数：需要放到缓存中的key，过期时间，值</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkCode</span><span class="hljs-params">(SMSCode smsCode)</span> &#123;<br>        <span class="hljs-comment">//取出内存中的与传进来的比对</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> smsCode.getCode();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cacheCode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            cacheCode = memcachedClient.get(smsCode.getTele());  <span class="hljs-comment">// 从缓存中取出</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> code.equals(cacheCode);<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="3、jetcache（阿里）（缓存整合框架）"><a href="#3、jetcache（阿里）（缓存整合框架）" class="headerlink" title="3、jetcache（阿里）（缓存整合框架）"></a>3、jetcache（阿里）（缓存整合框架）</h4><ul><li>jetCache对SpringCache进行了封装，在原有功能基础上实现了多级缓存、缓存统计、自动刷新、异步调用、数据报表等功能</li><li>jetCache设定了本地缓存与远程缓存的多级缓存解决方案<ul><li>本地缓存（local）<ul><li>LinkedHashMap</li><li>Caffeine</li></ul></li><li>远程缓存（remote）<ul><li>Redis</li><li>Tair</li></ul></li></ul></li></ul><h5 id="1、整合jetcache"><a href="#1、整合jetcache" class="headerlink" title="1、整合jetcache"></a>1、整合jetcache</h5><ul><li><p>1、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入jetcache--&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alicp.jetcache/jetcache-starter-redis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alicp.jetcache<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jetcache-starter-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2、在application.yml中进行配置（没有提示）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 配置jetcache，替代springCache</span><br><span class="hljs-attr">jetcache:</span><br>  <span class="hljs-attr">remote:</span>  <span class="hljs-comment"># 远程缓存配置</span><br>    <span class="hljs-attr">default:</span>  <span class="hljs-comment"># 默认的缓存管理模式</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">redis</span>  <span class="hljs-comment"># 缓存类型为Redis</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.111</span>  <span class="hljs-comment"># Redis服务器主机地址</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span>  <span class="hljs-comment"># Redis服务器端口</span><br>      <span class="hljs-attr">keyConvertor:</span> <span class="hljs-string">fastjson</span>  <span class="hljs-comment"># 使用Fastjson作为键转换器，将键对象转换为字符串</span><br>      <span class="hljs-attr">valueEncode:</span> <span class="hljs-string">java</span>  <span class="hljs-comment"># 使用Java序列化器对缓存值进行编码</span><br>      <span class="hljs-attr">valueDecode:</span> <span class="hljs-string">java</span>  <span class="hljs-comment"># 使用Java序列化器对缓存值进行解码</span><br>      <span class="hljs-attr">poolConfig:</span>  <span class="hljs-comment"># Redis连接池配置</span><br>        <span class="hljs-attr">maxTotal:</span> <span class="hljs-number">50</span>  <span class="hljs-comment"># 最大连接数</span><br>    <span class="hljs-attr">sms:</span> <span class="hljs-comment"># 可以设置分多少种管理模式，一种的话是default，多种的话在remote下继续写</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">redis</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.111</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>      <span class="hljs-attr">poolConfig:</span> <span class="hljs-comment"># 必须要有</span><br>        <span class="hljs-attr">maxTotal:</span> <span class="hljs-number">50</span>  <span class="hljs-comment"># 最大连接数</span><br>  <span class="hljs-attr">local:</span>  <span class="hljs-comment"># 本地缓存配置</span><br>    <span class="hljs-attr">default:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">linkedhashmap</span>  <span class="hljs-comment"># 缓存类型为LinkedHashMap</span><br>      <span class="hljs-attr">keyConvertor:</span> <span class="hljs-string">fastjson</span>  <span class="hljs-comment"># 使用Fastjson作为键转换器，将键对象转换为字符串</span><br><br></code></pre></td></tr></table></figure></li><li><p>3、有两种使用方法，方法1：</p><ul><li><p>1、在启动类上使用注解<code>@EnableCreateCacheAnnotation</code>开启使用缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springboot;<br><br><span class="hljs-keyword">import</span> com.alicp.jetcache.anno.config.EnableCreateCacheAnnotation;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableCreateCacheAnnotation</span>  <span class="hljs-comment">// jetCache的注解。是jetcache启用缓存的主开关   启用使用注解方式创建缓存</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot20JetcacheApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Springboot20JetcacheApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>2、使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@CreateCache</span>(name = &quot;jetCache&quot;,expire = 3600,timeUnit = TimeUnit.SECONDS)：远程的方案。告诉jetCache 这是一个用来缓存的对象。</span><br><span class="hljs-comment">   * name  等同于<span class="hljs-doctag">@Cacheable</span>注解的value；</span><br><span class="hljs-comment">   * expire 指定过期时间；</span><br><span class="hljs-comment">   * timeUnit  单位默认是秒</span><br><span class="hljs-comment">   * cacheType   有三种选择：只用远程、只用本地、两者都用.默认只用远程</span><br><span class="hljs-comment">   * area:  就是remote或者local下面的属性名，默认时default</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@CreateCache(area=&quot;default&quot;,name = &quot;jetCache&quot;,expire = 3600,timeUnit = TimeUnit.SECONDS,cacheType = CacheType.LOCAL)</span><br>  <span class="hljs-keyword">private</span> Cache&lt;String,String&gt; jetCache;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendCodeToSMS</span><span class="hljs-params">(String tele)</span> &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> codeUtils.generator(tele);<br>      jetCache.put(tele,code);  <span class="hljs-comment">// 放入缓存</span><br>      <span class="hljs-keyword">return</span> code;<br>  &#125;<br>    <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkCode</span><span class="hljs-params">(SMSCode smsCode)</span> &#123;<br>      <span class="hljs-comment">//取出内存中的与传进来的比对</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> smsCode.getCode();<br>      <span class="hljs-type">String</span> <span class="hljs-variable">queryCode</span> <span class="hljs-operator">=</span> jetCache.get(smsCode.getTele());  <span class="hljs-comment">// 从缓存中取出</span><br>      <span class="hljs-keyword">return</span> code.equals(queryCode);<br>  &#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>4、方法2：</p><ul><li><p>1、在启动类上加上两个注解：<code>@EnableCreateCacheAnnotation</code>，<code>@EnableMethodCache</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springboot;<br><br><span class="hljs-keyword">import</span> com.alicp.jetcache.anno.config.EnableCreateCacheAnnotation;<br><span class="hljs-keyword">import</span> com.alicp.jetcache.anno.config.EnableMethodCache;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableCreateCacheAnnotation</span>  <span class="hljs-comment">// jetCache的注解。是jetcache启用缓存的主开关   启用使用注解方式创建缓存</span><br><span class="hljs-meta">@EnableMethodCache(basePackages = &quot;com.example.springboot&quot;)</span>  <span class="hljs-comment">//开启方法注解缓存</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot20JetcacheApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Springboot20JetcacheApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>2、使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-meta">@Cached(name = &quot;book&quot;, key = &quot;#id&quot;, expire = 3600)</span>  <span class="hljs-comment">// 保存到缓存，如果缓存中存在数据查询缓存</span><br>   <span class="hljs-meta">@CacheRefresh(refresh = 10)</span>  <span class="hljs-comment">// 缓存多久查询一次数据库</span><br>   <span class="hljs-keyword">public</span> Book <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span> &#123;<br>       <span class="hljs-keyword">return</span> bookDao.selectById(id);<br>   &#125;<br>    <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-meta">@CacheUpdate(name = &quot;book&quot;, key = &quot;#book.id&quot;, value = &quot;#book&quot;)</span>  <span class="hljs-comment">// 更新缓存</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Book book)</span> &#123;<br>       <span class="hljs-keyword">return</span> bookDao.updateById(book) &gt; <span class="hljs-number">0</span>;<br>   &#125;<br>    <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-meta">@CacheInvalidate(name = &quot;book&quot;, key = &quot;#id&quot;)</span>  <span class="hljs-comment">// 删除缓存</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> &#123;<br>       <span class="hljs-keyword">return</span> bookDao.deleteById(id) &gt; <span class="hljs-number">0</span>;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h5 id="2、application-yml配置范例"><a href="#2、application-yml配置范例" class="headerlink" title="2、application.yml配置范例"></a>2、application.yml配置范例</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jetcache:</span>  <span class="hljs-comment"># JetCache的配置部分开始。</span><br>  <span class="hljs-attr">statIntervalMinutes:</span> <span class="hljs-number">15</span>  <span class="hljs-comment"># 设置统计信息的刷新间隔为15分钟。统计信息包括缓存命中率、请求次数等。</span><br>  <span class="hljs-attr">areaInCacheName:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 禁用缓存区域（area）在缓存名称中的显示。缓存区域是用于对缓存进行逻辑分组的一种机制。</span><br>  <span class="hljs-attr">local:</span>  <span class="hljs-comment"># 本地缓存的配置部分开始。</span><br>    <span class="hljs-attr">default:</span>  <span class="hljs-comment"># 默认缓存配置。</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">linkedhashmap</span>  <span class="hljs-comment"># 指定使用LinkedHashMap作为本地缓存的类型。</span><br>    <span class="hljs-attr">keyConvertor:</span> <span class="hljs-string">fastjson</span>  <span class="hljs-comment"># 使用Fastjson作为键转换器，将键对象转换为字符串。</span><br>    <span class="hljs-attr">limit:</span> <span class="hljs-number">100</span>  <span class="hljs-comment"># 设置本地缓存的最大容量为100。</span><br>  <span class="hljs-attr">remote:</span>  <span class="hljs-comment"># 远程缓存的配置部分开始。</span><br>    <span class="hljs-attr">default:</span>  <span class="hljs-comment"># 默认远程缓存配置。</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.111</span>  <span class="hljs-comment"># 指定远程缓存的主机地址。</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span>  <span class="hljs-comment"># 指定远程缓存的端口号。</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">redis</span>  <span class="hljs-comment"># 指定使用Redis作为远程缓存的类型。</span><br>      <span class="hljs-attr">keyConvertor:</span> <span class="hljs-string">fastjson</span>  <span class="hljs-comment"># 使用Fastjson作为键转换器，将键对象转换为字符串。</span><br>      <span class="hljs-attr">valueEncoder:</span> <span class="hljs-string">java</span>  <span class="hljs-comment"># 指定使用Java序列化器对缓存值进行编码。</span><br>      <span class="hljs-attr">valueDecoder:</span> <span class="hljs-string">java</span>  <span class="hljs-comment"># 指定使用Java序列化器对缓存值进行解码。</span><br>      <span class="hljs-attr">poolConfig:</span>  <span class="hljs-comment"># 连接池的配置部分。</span><br>        <span class="hljs-attr">minIdle:</span> <span class="hljs-number">5</span>  <span class="hljs-comment"># 指定连接池的最小空闲连接数为5。</span><br>        <span class="hljs-attr">maxIdle:</span> <span class="hljs-number">20</span>  <span class="hljs-comment"># 指定连接池的最大空闲连接数为20。</span><br>        <span class="hljs-attr">maxTotal:</span> <span class="hljs-number">50</span>  <span class="hljs-comment"># 指定连接池的最大连接数为50。</span><br></code></pre></td></tr></table></figure><p>这个配置示例涵盖了统计信息刷新间隔、缓存区域显示、本地缓存和远程缓存的相关配置。</p><p><img src="/img/springboot2_img/jetcache%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF.jpg" alt="jetcache配置相关信息"></p><h4 id="4、j2cache（缓存整合框架）"><a href="#4、j2cache（缓存整合框架）" class="headerlink" title="4、j2cache（缓存整合框架）"></a>4、j2cache（缓存整合框架）</h4><ul><li>j2cache是一个缓存整合框架，可以提供缓存的整合方案，使各种缓存搭配使用，自身不提供缓存功能</li></ul><h5 id="整合jecache，这里采用-redis-ehcache"><a href="#整合jecache，这里采用-redis-ehcache" class="headerlink" title="整合jecache，这里采用 redis + ehcache"></a>整合jecache，这里采用 redis + ehcache</h5><ul><li><p>1、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--整合j2cache--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.oschina.j2cache<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>j2cache-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.5-release<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--自带redis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.oschina.j2cache<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>j2cache-spring-boot2-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.0-release<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--整合ehcache --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.sf.ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2、配置</p><ul><li><p>①、在application.yml中配置j2cache配置文件名</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">j2cache:</span><br>  <span class="hljs-attr">config-location:</span> <span class="hljs-string">j2cache.properties</span>   <span class="hljs-comment"># j2cache的配置文件名</span><br></code></pre></td></tr></table></figure></li><li><p>②、在j2cache.properties中指定一级缓存、二级缓存、以及1级缓存怎么传到2级缓存</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 1级缓存的配置</span><br><span class="hljs-attr">j2cache.L1.provider_class</span> = <span class="hljs-string">ehcache  # j2cache中的1级缓存用什么</span><br><span class="hljs-attr">ehcache.configXml</span> = <span class="hljs-string">ehcache.xml  # ehcache的配置文件名</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 设置是否启用二级缓存  true 代表启用二级缓存</span><br><span class="hljs-attr">j2cache.l2-cache-open</span> = <span class="hljs-string">true</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 2级缓存的配置</span><br><span class="hljs-attr">j2cache.L2.provider_class</span> = <span class="hljs-string">net.oschina.j2cache.cache.support.redis.SpringRedisProvider  # 2级缓存用redis</span><br><span class="hljs-attr">j2cache.L2.config_section</span> = <span class="hljs-string">redis  # 指定自定义前缀名，下面redis.hosts 的前缀就是这里配置的</span><br><br><span class="hljs-attr">redis.hosts</span> = <span class="hljs-string">192.168.0.111:6379</span><br><span class="hljs-attr">redis.mode</span> = <span class="hljs-string">single</span><br><span class="hljs-attr">redis.namespace</span> = <span class="hljs-string">j2cache </span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 1级缓存的数据如何到达2级缓存</span><br><span class="hljs-attr">j2cache.broadcast</span> = <span class="hljs-string">net.oschina.j2cache.cache.support.redis.SpringRedisPubSubPolicy</span><br></code></pre></td></tr></table></figure></li><li><p>③、配置ehcache的配置文件ehcache.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;http://ehcache.org/ehcache.xsd&quot;</span> <span class="hljs-attr">updateCheck</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;D:\ehcache&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--默认缓存策略--&gt;</span><br>    <span class="hljs-comment">&lt;!--eternal 是否永久存在，设置为true则不会被清除，此时与timeout冲突。通常设置为false--&gt;</span><br>    <span class="hljs-comment">&lt;!--diskPersistent 是否启用磁盘持久化--&gt;</span><br>    <span class="hljs-comment">&lt;!--mexElementsInMemory 最大缓存数量--&gt;</span><br>    <span class="hljs-comment">&lt;!--overflowToDisk 超过最大缓存数量是否持久化到磁盘--&gt;</span><br>    <span class="hljs-comment">&lt;!--timeToIdleSeconds 最大不活动间隔，设置过长缓存容易溢出，设置过段无效果。可用于记录时效性数据。例如验证码--&gt;</span><br>    <span class="hljs-comment">&lt;!--timeToLiveSeconds 最大存活时间--&gt;</span><br>    <span class="hljs-comment">&lt;!--memoryStoreEvictionPolicy 缓存清除策略  lru是长时间不访问的淘汰，lfu是最近访问最少的淘汰--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span> <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;1000&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;60&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;60&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--name 对应@Cacheable 注解中的value值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;smsCode&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;1000&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;60&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;60&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>3、使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> CacheChannel cacheChannel;  <span class="hljs-comment">// 缓存对象</span><br>  <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendCodeToSMS</span><span class="hljs-params">(String tele)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> codeUtils.generator(tele);<br>    cacheChannel.set(<span class="hljs-string">&quot;sms&quot;</span>, tele, code);  <span class="hljs-comment">// 放入缓存</span><br>    <span class="hljs-keyword">return</span> code;<br>&#125;<br>  <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkCode</span><span class="hljs-params">(SMSCode smsCode)</span> &#123;<br>    <span class="hljs-comment">//取出内存中的与传进来的比对</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> smsCode.getCode();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">queryCode</span> <span class="hljs-operator">=</span> cacheChannel.get(<span class="hljs-string">&quot;sms&quot;</span>,smsCode.getTele()).asString();  <span class="hljs-comment">// 从缓存取出</span><br>    <span class="hljs-keyword">return</span> code.equals(queryCode);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2、定时任务"><a href="#2、定时任务" class="headerlink" title="2、定时任务"></a>2、定时任务</h3><h4 id="1、Quartz（比较麻烦）"><a href="#1、Quartz（比较麻烦）" class="headerlink" title="1、Quartz（比较麻烦）"></a>1、Quartz（比较麻烦）</h4><h5 id="1、相关概念"><a href="#1、相关概念" class="headerlink" title="1、相关概念"></a>1、相关概念</h5><blockquote><ul><li>工作（Job）：用于定义具体执行的工作</li><li>工作明细（JobDetail）：用于描述定时工作相关的信息</li><li>触发器（Trigger）：用于描述触发工作的规则，通常使用cron表示式定义调度规则</li><li>调度器（Scheduler）：描述了工作明细与触发器的对应关系</li></ul></blockquote><h5 id="2、cron表达式"><a href="#2、cron表达式" class="headerlink" title="2、cron表达式"></a>2、cron表达式</h5><blockquote><p>在Spring Boot中，可以使用cron表达式来配置定时任务。Cron表达式是一个由6或7个字段组成的字符串，用于指定任务的执行时间。下面是cron表达式的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;秒 分 时 日 月 星期 [年]<br></code></pre></td></tr></table></figure><p>每个字段可以接受不同的取值，下面是字段的含义和取值范围：</p><ul><li>秒（0-59）</li><li>分（0-59）</li><li>时（0-23）</li><li>日（1-31）</li><li>月（1-12或JAN-DEC）</li><li>星期（1-7或SUN-SAT，1表示星期天或者SUN）</li><li>年（可选，1970-2099）</li></ul><p>这里是一些示例cron表达式的用法：</p><ul><li><code>0 0 12 * * ?</code>：每天中午12点执行任务</li><li><code>0 15 10 * * ?</code>：每天上午10点15分执行任务</li><li><code>0 0/5 14 * * ?</code>：每天下午2点开始，每隔5分钟执行任务</li><li><code>0 0 8 1 * ?</code>：每月1号早上8点执行任务</li><li><code>0 0 12 ? * MON-FRI</code>：每个工作日中午12点执行任务</li><li><code>0 0 12 1 JAN *</code>：每年1月1日中午12点执行任务</li></ul></blockquote><h5 id="3、整合Quartz"><a href="#3、整合Quartz" class="headerlink" title="3、整合Quartz"></a>3、整合Quartz</h5><ul><li><p>1、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--整合Quartz--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2、编写任务,这个类要继承QueatzJobBean类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 工作，也就是要干嘛</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyQuartz</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">QuartzJobBean</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executeInternal</span><span class="hljs-params">(JobExecutionContext context)</span> <span class="hljs-keyword">throws</span> JobExecutionException &#123;<br>        System.out.println(<span class="hljs-string">&quot;quartz task run ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>3、创建一个配置类，指定工作明细和触发器，并绑定它们的关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springboot.config;<br><br><span class="hljs-keyword">import</span> com.example.springboot.quartz.MyQuartz;<br><span class="hljs-keyword">import</span> org.quartz.*;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuartzConfig</span> &#123;<br>    <span class="hljs-comment">//要定义一个工作明细和触发器。再通过调度器把触发器绑定工作明细，工作明细中指定工作</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 工作明细，绑定具体的工作</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> JobDetail <span class="hljs-title function_">printJobDetail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> JobBuilder.newJob(MyQuartz.class)  <span class="hljs-comment">// 绑定具体的工作</span><br>                .storeDurably()  <span class="hljs-comment">// 如果没有使用这个工作，是否要持久化</span><br>                .build();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 触发器，绑定对应的工作明细</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Trigger <span class="hljs-title function_">printJobTrigger</span><span class="hljs-params">()</span> &#123;<br>        ScheduleBuilder&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Trigger</span>&gt; schedBuilder = CronScheduleBuilder.cronSchedule(<span class="hljs-string">&quot;0/5 * * * * ?&quot;</span>);  <span class="hljs-comment">//  秒 分 时 日 月 星期  (如果星期写？，代表根据前面的日月匹配星期)</span><br>        <span class="hljs-keyword">return</span> TriggerBuilder.newTrigger()<br>                .withSchedule(schedBuilder)  <span class="hljs-comment">// 设定时间,这里指定的是每5秒触发一次</span><br>                .forJob(printJobDetail())  <span class="hljs-comment">// 指定哪个工作明细</span><br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="2、Spring-Task（推荐）"><a href="#2、Spring-Task（推荐）" class="headerlink" title="2、Spring Task（推荐）"></a>2、Spring Task（推荐）</h4><ul><li><p>1、在启动类上加上注解<code>@EnableScheduling</code>,代表开启定时任务功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableScheduling</span>  <span class="hljs-comment">//代表开启定时任务功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot22TaskApplication</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(Springboot22TaskApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>2、在要定时执行的任务上写上注解<code>@Scheduled</code> 表示什么时候执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.springboot.quartz;<br><br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.Scheduled;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBean</span> &#123;<br>    <span class="hljs-meta">@Scheduled(cron = &quot;0/3 * * * * ?&quot;)</span>  <span class="hljs-comment">//每3秒执行一次</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;spring task .......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>3、另外，可以选择在application.yml中对定时任务进行配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 定时任务相关配置  可选</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">task:</span><br>    <span class="hljs-attr">scheduling:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">size:</span> <span class="hljs-number">1</span>  <span class="hljs-comment"># 任务调度线程池大小，默认 1</span><br>    <span class="hljs-attr">execution:</span><br>      <span class="hljs-attr">thread-name-prefix:</span> <span class="hljs-string">spring_task_</span>  <span class="hljs-comment"># 调度线程名称前缀，默认scheduling-</span><br>      <span class="hljs-attr">shutdown:</span><br>        <span class="hljs-attr">await-termination:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 线程池关闭时等待所有任务完成 false</span><br>        <span class="hljs-attr">await-termination-period:</span> <span class="hljs-string">10s</span>  <span class="hljs-comment"># 调度线程关闭前最大等待时间，确保最后一定关闭</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="3、邮件"><a href="#3、邮件" class="headerlink" title="3、邮件"></a>3、邮件</h3><blockquote><ul><li>SMTP（Simple Mail Transfer Protocol）：简单邮件传输协议，用于发送电子邮件的传输协议</li><li>POP3（Post Office Protocol - Version 3）：用于接收电子邮件的标准协议</li><li>IMAP（Internet Mail Access Protocol）：互联网消息协议，是POP3的替代协议</li></ul></blockquote><h4 id="SpringBoot整合JavaMail"><a href="#SpringBoot整合JavaMail" class="headerlink" title="SpringBoot整合JavaMail"></a>SpringBoot整合JavaMail</h4><ul><li><p>1、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2、配置邮箱</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># application.yml</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mail:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">smtp.163.com</span>  <span class="hljs-comment"># smtp：发邮件；163：网易邮箱，qq：qq邮箱</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">abcd@163.com</span>  <span class="hljs-comment"># 邮箱名称</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">abcd</span>  <span class="hljs-comment"># 授权码</span><br></code></pre></td></tr></table></figure></li><li><p>3、发送简单邮件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、自动装配javaMailSender</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> JavaMailSender javaMailSender;<br>  <br><span class="hljs-comment">//发送人</span><br><span class="hljs-keyword">private</span> String from=<span class="hljs-string">&quot;fayoujian@163.com&quot;</span>;<br><span class="hljs-comment">//接收人</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">to</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;shouyoujian@qq.com&quot;</span>;<br><span class="hljs-comment">//标题</span><br><span class="hljs-keyword">private</span> String subject=<span class="hljs-string">&quot;测试邮件&quot;</span>;<br><span class="hljs-comment">//正文</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;测试邮件正文内容&quot;</span>;<br>  <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMail</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SimpleMailMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMailMessage</span>();<br>    message.setFrom(from + <span class="hljs-string">&quot;(小甜甜)&quot;</span>);        <br>    message.setTo(to);<br>    message.setSubject(subject);<br>    message.setText(context);<br>    <br>    javaMailSender.send(message);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>4、发送复杂邮件——链接、附件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、自动装配javaMailSender</span><br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> JavaMailSender javaMailSender;<br>  <br>  <span class="hljs-comment">//发送人</span><br>  <span class="hljs-keyword">private</span> String from=<span class="hljs-string">&quot;fayoujian@163.com&quot;</span>;<br>  <span class="hljs-comment">//接收人</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">to</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;shouyoujian@qq.com&quot;</span>;<br>  <span class="hljs-comment">//标题</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;测试邮件&quot;</span>;<br>  <span class="hljs-comment">//正文</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;a href=&#x27;https://syea01.github.io/&#x27;&gt; 点开有惊喜 &lt;/a&gt;&quot;</span>;<br>  <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMail</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> javaMailSender.createMimeMessage();<br>          <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(message,<span class="hljs-literal">true</span>);  <span class="hljs-comment">// true 代表允许添加附件</span><br>          helper.setFrom(from + <span class="hljs-string">&quot;(小甜甜)&quot;</span>);<br>          helper.setTo(to);<br>          helper.setSubject(subject);<br>          helper.setText(context, <span class="hljs-literal">true</span>);  <span class="hljs-comment">// 发送正文带链接的话，需要指定true</span><br>  <br>          <span class="hljs-comment">//发送附件</span><br>          <span class="hljs-type">File</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;E:\\springboot\\pom.xml&quot;</span>);<br>          <span class="hljs-type">File</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;F:\\壁纸.jpg&quot;</span>);<br>          helper.addAttachment(<span class="hljs-string">&quot;pom.xml&quot;</span>,f1);<br>          helper.addAttachment(<span class="hljs-string">&quot;壁纸.jpg&quot;</span>,f2);<br>          <br>          javaMailSender.send(message);<br>      &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          e.printStackTrace();<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="4、消息"><a href="#4、消息" class="headerlink" title="4、消息"></a>4、消息</h3><blockquote><p>三种异步消息传递技术是 JMS（Java Message Service）、AMQP（Advanced Message Queueing Protocol）和 MQTT（Message Queueing Telemetry Transport）。</p><ol><li>JMS（Java Message Service）是一个规范，类似于 JDBC 规范，提供与消息服务相关的 API 接口。JMS 提供了两种消息模型：点对点模型和发布订阅模型。</li></ol><ul><li>点对点模型（Peer-to-Peer）：消息发送到一个队列中，队列保存消息。队列的消息只能被一个消费者消费，或在超时后被丢弃。</li><li>发布订阅模型（Publish-Subscribe）：消息可以被多个消费者消费，生产者与消费者完全独立，不需要感知对方的存在。 JMS 还定义了多种消息类型，包括 TextMessage、MapMessage、BytesMessage、StreamMessage、ObjectMessage 和只包含消息头和属性的 Message。JMS 的实现包括 ActiveMQ、Redis、HornetMQ、RabbitMQ 和 RocketMQ（但 RocketMQ 没有完全遵守 JMS 规范）。</li></ul><ol start="2"><li>AMQP（Advanced Message Queueing Protocol）是一种消息代理规范，也是一种协议，规范了网络交换的数据格式，并兼容 JMS。AMQP 具有跨平台性，服务器供应商、生产者和消费者可以使用不同的语言来实现。 AMQP 定义了不同的消息交换模型，包括直连交换（direct exchange）、扇形交换（fanout exchange）、主题交换（topic exchange）、头交换（headers exchange）和系统交换（system exchange）。AMQP 消息类型只包含 byte[] 类型。AMQP 的实现包括 RabbitMQ、StormMQ 和 RocketMQ。</li><li>MQTT（Message Queueing Telemetry Transport）是一种专为小设备设计的消息队列遥测传输协议，是物联网（IoT）生态系统的重要组成部分。MQTT 使用轻量级的发布订阅模型，支持多个客户端订阅相同的主题并接收相应的消息。MQTT 在低带宽、不稳定网络环境下具有高效的消息传输能力。一些 MQTT 的实现包括 Eclipse Mosquitto、HiveMQ 和 EMQ X。</li></ol><p>这三种异步消息传递技术都有各自的特点和适用场景，可以根据具体的需求选择合适的技术来实现消息传递。</p></blockquote><h4 id="1、整合ActiveMQ"><a href="#1、整合ActiveMQ" class="headerlink" title="1、整合ActiveMQ"></a>1、整合ActiveMQ</h4><h5 id="1、安装ActiveMQ"><a href="#1、安装ActiveMQ" class="headerlink" title="1、安装ActiveMQ"></a>1、安装ActiveMQ</h5><blockquote><p>要在Docker中安装ActiveMQ，您可以按照以下步骤进行操作：</p><ol><li>打开终端或命令提示符，运行以下命令从Docker Hub下载并运行ActiveMQ的官方Docker镜像：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">docker run -p 61616:61616 -p 8161:8161 --name activemq -d rmohr/activemq</span><br></code></pre></td></tr></table></figure><p>这将下载并运行名为”rmohr&#x2F;activemq”的ActiveMQ Docker镜像。参数<code>-p 61616:61616</code>将宿主机的61616端口映射到容器内的61616端口，用于消息传输。参数<code>-p 8161:8161</code>将宿主机的8161端口映射到容器内的8161端口，用于ActiveMQ的管理控制台。</p><ol start="2"><li>容器启动后，您可以使用以下命令检查容器的状态：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">docker ps</span><br></code></pre></td></tr></table></figure><p>您应该能够看到名为”activemq”的容器正在运行。</p><ol start="3"><li>现在，您可以通过访问<code>http://localhost:8161</code>在您的浏览器中打开ActiveMQ的管理控制台。默认的用户名和密码分别为”admin”。</li></ol><p>在管理控制台中，您可以配置和监视ActiveMQ实例，创建和管理队列和主题，查看消息等。</p><p>这样，您就成功地在Docker中安装了ActiveMQ，并可以开始使用它进行消息传递和管理。</p></blockquote><h5 id="2、SpringBoot整合ActiveMQ"><a href="#2、SpringBoot整合ActiveMQ" class="headerlink" title="2、SpringBoot整合ActiveMQ"></a>2、SpringBoot整合ActiveMQ</h5><ul><li><p>1、添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--activeMQ--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2、配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># application.yml</span><br><br><span class="hljs-comment"># activemq</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">activemq:</span><br>    <span class="hljs-attr">broker-url:</span> <span class="hljs-string">tcp://192.168.0.111:61616</span>  <span class="hljs-comment"># 连接地址</span><br>  <span class="hljs-attr">jms:</span><br>    <span class="hljs-attr">template:</span><br>      <span class="hljs-attr">default-destination:</span> <span class="hljs-string">itheima</span><br>    <span class="hljs-attr">pub-sub-domain:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 如果不设置默认是false，代表点对点模型。设置为true就是广播模型</span><br></code></pre></td></tr></table></figure></li><li><p>3、使用</p><ul><li><p>①、生产消息</p><p>**发送消息：<code>messagingTemplate.convertAndSend(&quot;队列名称&quot;,消息);</code> **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> JmsMessagingTemplate messagingTemplate;<br>    <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String id)</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;id:&quot;</span>+id+<span class="hljs-string">&quot;放到队列中&quot;</span>);<br>      messagingTemplate.convertAndSend(<span class="hljs-string">&quot;order.queue.id&quot;</span>,id);  <span class="hljs-comment">// 放到消息队列中</span><br>  &#125;<br>    <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">doMessage</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> messagingTemplate.receiveAndConvert(<span class="hljs-string">&quot;order.queue.id&quot;</span>,String.class);  <span class="hljs-comment">//从消息队列中取消息（一般不用这种方法接收消息，都是使用注解@JmsListener自动监听消息）</span><br>      System.out.println(<span class="hljs-string">&quot;id:&quot;</span> + id + <span class="hljs-string">&quot;已经取出&quot;</span>);<br>      <span class="hljs-keyword">return</span> id;<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>②、设置监听器，消费消息</p><p>使用<code>@JmsListener</code>注解可以监听消息，方法的<strong>参数</strong>就是监听到的消息</p><p>还可以使用<code>@SendTo</code>注解，这个注解可以在当前队列中的消息在处理完这个方法之后，将当前方法的<strong>返回值</strong>放到另一个队列中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageListener</span> &#123;<br>    <span class="hljs-meta">@JmsListener(destination = &quot;order.queue.id&quot;)</span>  <span class="hljs-comment">//监听消息队列，如果有消息，立马执行这个方法，进行消费</span><br>    <span class="hljs-meta">@SendTo(&quot;order.other.queue.id&quot;)</span>  <span class="hljs-comment">//可以在当前队列中的消息在处理完这个方法之后，将当前方法的返回值放到另一个队列中</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">receive</span><span class="hljs-params">(String id)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;已接收id: &quot;</span> + id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;new: &quot;</span> + id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="2、整合RabbitMQ"><a href="#2、整合RabbitMQ" class="headerlink" title="2、整合RabbitMQ"></a>2、整合RabbitMQ</h4><h5 id="1、安装RabbitMQ"><a href="#1、安装RabbitMQ" class="headerlink" title="1、安装RabbitMQ"></a>1、安装RabbitMQ</h5><blockquote><p>要在Docker中安装RabbitMQ，您可以按照以下步骤进行操作：</p><ol><li>打开终端或命令提示符，运行以下命令从Docker Hub下载并运行RabbitMQ的官方Docker镜像：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">docker run -d --hostname my-rabbit --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3-management</span><br></code></pre></td></tr></table></figure><p>这将下载并运行名为”rabbitmq:3-management”的RabbitMQ Docker镜像。参数<code>-p 5672:5672</code>将宿主机的5672端口映射到容器内的5672端口，用于消息传输。参数<code>-p 15672:15672</code>将宿主机的15672端口映射到容器内的15672端口，用于RabbitMQ的管理控制台。</p><ol start="2"><li>容器启动后，您可以使用以下命令检查容器的状态：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">docker ps</span><br></code></pre></td></tr></table></figure><p>您应该能够看到名为”rabbitmq”的容器正在运行。 </p><ol start="3"><li>现在，您可以通过访问<code>http://localhost:15672</code>在您的浏览器中打开RabbitMQ的管理控制台。默认的用户名和密码分别为”guest”。</li></ol><p>在管理控制台中，您可以配置和监视RabbitMQ实例，创建和管理队列、交换器、绑定等。</p><p>这样，您就成功地在Docker中安装了RabbitMQ，并可以开始使用它进行消息传递和管理。</p></blockquote><h5 id="2、两种不同的交换机：direct模式（直连模式）、topic模式（主题模式）"><a href="#2、两种不同的交换机：direct模式（直连模式）、topic模式（主题模式）" class="headerlink" title="2、两种不同的交换机：direct模式（直连模式）、topic模式（主题模式）"></a>2、两种不同的交换机：direct模式（直连模式）、topic模式（主题模式）</h5><blockquote><p>RabbitMQ中的Topic模式和Direct模式是两种不同的消息路由模式，它们在消息的路由机制和消费者的订阅方式上有所区别。</p><p>Direct模式：</p><ul><li>Direct模式使用简单的消息路由方式，它将消息根据绑定的路由键（Routing Key）与队列的绑定键（Binding Key）进行精确匹配。只有当消息的路由键与绑定键完全匹配时，才会将消息路由到对应的队列。</li><li>在Direct模式下，生产者将消息发送到Exchange，并指定一个具体的Routing Key。消费者通过绑定队列到Exchange，并指定相同的Routing Key来接收消息。</li><li>Direct模式适用于一对一的消息传递，其中每个消息只被一个消费者消费。</li></ul><p>Topic模式：</p><ul><li>Topic模式使用灵活的消息路由方式，它将消息根据绑定的路由键与队列的绑定键进行模式匹配。路由键可以使用通配符进行匹配，支持两种通配符：</li><li>*：匹配一个单词，例如<code>topic.*</code>可以匹配”topic.a”、”topic.ab”等。</li><li>#：匹配任意个单词，例如<code>topic.#</code>可以匹配”topic.aa”、”topic.aa.ab”、”topic.a.b.ac”等。</li><li>在Topic模式下，生产者将消息发送到Exchange，并指定一个具体的Routing Key。消费者通过绑定队列到Exchange，并指定带有通配符的Routing Key来接收符合模式匹配的消息。</li><li>Topic模式适用于一对多的消息传递，其中一个消息可以被多个符合匹配规则的消费者接收。</li></ul><p>总结：</p><ul><li>Direct模式使用精确匹配的方式，消息只能被一个消费者消费，适用于一对一的消息传递。</li><li>Topic模式使用模式匹配的方式，消息可以被多个消费者消费，适用于一对多的消息传递。通配符 * 和 # 提供了更灵活的路由选择。</li></ul></blockquote><h5 id="3、SpringBoot整合RabbitMQ"><a href="#3、SpringBoot整合RabbitMQ" class="headerlink" title="3、SpringBoot整合RabbitMQ"></a>3、SpringBoot整合RabbitMQ</h5><ul><li><p>①、添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--RabbitMQ--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>②、配置RabbitMQ的连接</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># application.yml</span><br><br><span class="hljs-comment"># rabbitmq</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.111</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br></code></pre></td></tr></table></figure></li><li><p>③、配置类中定义消息队列、交换机、绑定信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.amqp.core.Binding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.BindingBuilder;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.DirectExchange;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Queue;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitConfigDirect</span> &#123;<br><br>    <span class="hljs-comment">//定义存储消息的消息队列对象</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 可以定义多个Queue类型的Bean，就是定义多个队列</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">directQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//name:队列名称</span><br>        <span class="hljs-comment">//druable:是否持久化，默认false</span><br>        <span class="hljs-comment">//exclusive:是否当前连接专用，默认false。连接关闭之后队列就被删除</span><br>        <span class="hljs-comment">//autoDelete:是否自动删除，当生产者或消费者不再使用此队列，自动删除</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(<span class="hljs-string">&quot;direct_queue&quot;</span>);  <span class="hljs-comment">// 队列名字</span><br>    &#125;<br><br>    <span class="hljs-comment">//定义交换机，用于绑定上面的消息队列</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 一个交换机可以绑定多个队列</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">directExchange</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//这里是DirectExchange（直连交换机）,还可以是TopicExchange（主题交换机）</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(<span class="hljs-string">&quot;directExchange&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//把上面的交换机和消息队列绑定起来</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 可以定义多个Binding类型的Bean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">bindingDirect</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(directQueue()).to(directExchange())  <span class="hljs-comment">//绑定</span><br>                .with(<span class="hljs-string">&quot;direct&quot;</span>);  <span class="hljs-comment">//起个名称，也就是 routingKey</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>④、使用</p><ul><li><p>生产消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> AmqpTemplate amqpTemplate;<br>    <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String id)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;id:&quot;</span> + id + <span class="hljs-string">&quot;放到队列中&quot;</span>);<br>    amqpTemplate.convertAndSend(<span class="hljs-string">&quot;directExchange&quot;</span>, <span class="hljs-string">&quot;direct&quot;</span>, id);  <span class="hljs-comment">// 交换机名称，routingKey，消息</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定义监听，消费消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageListener</span> &#123;<br>    <span class="hljs-meta">@RabbitListener(queues = &quot;direct_queue&quot;)</span>  <span class="hljs-comment">//需要指定队列名称。作用和ActiveMQ的@JmsListener注解类似</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive</span><span class="hljs-params">(String id)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;已接收到消息，id = &quot;</span> + id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3、整合RocketMQ"><a href="#3、整合RocketMQ" class="headerlink" title="3、整合RocketMQ"></a>3、整合RocketMQ</h4><h5 id="1、安装RocketMQ"><a href="#1、安装RocketMQ" class="headerlink" title="1、安装RocketMQ"></a>1、安装RocketMQ</h5><blockquote><ol><li>拉取镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">docker pull rocketmqinc/rocketmq</span><br></code></pre></td></tr></table></figure><ol start="2"><li>创建RocketMQ容器的名称服务器（NameServer）。运行以下命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">docker run -d --restart=always --name rmqnamesrv --privileged=<span class="hljs-literal">true</span> -p 9876:9876  -v /docker/rocketmq/nameserver/logs:/root/logs -v /docker/rocketmq/nameserver/store:/root/store -e <span class="hljs-string">&quot;MAX_POSSIBLE_HEAP=100000000&quot;</span> rocketmqinc/rocketmq sh mqnamesrv</span><br></code></pre></td></tr></table></figure><p>这将在后台运行一个名为<code>rmqnamesrv</code>的容器，并将容器的9876端口映射到主机的9876端口。</p><ol start="3"><li>在主机编写broker的配置文件：<code>/opt/docker/rocketmq/broker.conf</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;brokerClusterName = DefaultCluster<br>&gt;brokerName = broker-a<br>&gt;brokerId = <span class="hljs-number">0</span><br>&gt;deleteWhen = <span class="hljs-number">04</span><br>&gt;fileReservedTime = <span class="hljs-number">48</span><br>&gt;brokerRole = ASYNC_MASTER<br>&gt;flushDiskType = ASYNC_FLUSH<br>&gt;brokerIP1 = <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.111</span>                       <br></code></pre></td></tr></table></figure><ol start="4"><li>创建RocketMQ容器的消息服务器（Broker）。运行以下命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">docker run -d --restart=always --name rmqbroker --<span class="hljs-built_in">link</span> rmqnamesrv:namesrv -p 10911:10911 -p 10909:10909 --privileged=<span class="hljs-literal">true</span> -v /docker/rocketmq/data/broker/logs:/root/logs -v /docker/rocketmq/data/broker/store:/root/store -v /docker/rocketmq/conf/broker.conf:/opt/docker/rocketmq/broker.conf -e <span class="hljs-string">&quot;NAMESRV_ADDR=namesrv:9876&quot;</span> -e <span class="hljs-string">&quot;MAX_POSSIBLE_HEAP=200000000&quot;</span> rocketmqinc/rocketmq sh mqbroker -c /opt/docker/rocketmq/broker.conf</span><br></code></pre></td></tr></table></figure><p>这将在后台运行一个名为<code>rmqbroker</code>的容器，并将容器的10909和10911端口映射到主机的相应端口。同时，我们将<code>NAMESRV_ADDR</code>环境变量设置为<code>rmqnamesrv:9876</code>，以指定NameServer的地址。</p><ol start="5"><li>您现在已经成功在Docker中安装并运行了RocketMQ。您可以使用RocketMQ客户端连接到<code>localhost:9876</code>，开始使用RocketMQ。</li></ol></blockquote><h5 id="2、SpringBoot整合RocketMQ"><a href="#2、SpringBoot整合RocketMQ" class="headerlink" title="2、SpringBoot整合RocketMQ"></a>2、SpringBoot整合RocketMQ</h5><ul><li><p>1、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--整合rocketmq--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.rocketmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2、在application.yml中配置name-server和生产者的组</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># rocketmq</span><br><span class="hljs-attr">rocketmq:</span><br>  <span class="hljs-attr">name-server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.111</span><span class="hljs-string">:9876</span><br>  <span class="hljs-attr">producer:</span>  <span class="hljs-comment"># 生产者</span><br>    <span class="hljs-attr">group:</span> <span class="hljs-string">group_rocketmq</span>  <span class="hljs-comment"># 自定义组名</span><br></code></pre></td></tr></table></figure></li><li><p>3、使用</p><ul><li><p>①、生产消息</p><p>生产消息（同步）：<code>rocketMQTemplate.convertAndSend(&quot;自定义消息存放位置&quot;, 消息);</code> </p><p>生产消息（异步）：<code>rocketMQTemplate.asyncSend(&quot;自定义消息存放位置&quot;, 消息, callback); </code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RocketMQTemplate rocketMQTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String id)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;生产消息，id： &quot;</span> + id);<br><span class="hljs-comment">//        rocketMQTemplate.convertAndSend(&quot;order_id&quot;, id);  // 生产消息（这一行的写法是同步消息，正常情况应该使用异步消息）</span><br>        <br>        <span class="hljs-type">SendCallback</span> <span class="hljs-variable">callback</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendCallback</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSuccess</span><span class="hljs-params">(SendResult sendResult)</span> &#123;<br>                <span class="hljs-comment">// 异步消息发送成功的回调处理</span><br>                System.out.println(<span class="hljs-string">&quot;消息发送成功&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onException</span><span class="hljs-params">(Throwable throwable)</span> &#123;<br>                <span class="hljs-comment">// 异步消息发送异常的回调处理</span><br>                System.out.println(<span class="hljs-string">&quot;消息发送失败！&quot;</span>);<br>            &#125;<br>        &#125;;<br>        rocketMQTemplate.asyncSend(<span class="hljs-string">&quot;order_id&quot;</span>,id,callback);  <span class="hljs-comment">//异步消息.三个参数：消息存放的位置、消息、以及消息成功或失败应该怎么处理</span><br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>②、消费消息</p><p>需实现接口RocketMQListener，泛型就是消息的类型</p><p>通过注解<code>@RocketMQMessageListener(topic = &quot;消息存放位置&quot;,consumerGroup = &quot;group_rocketmq&quot;) </code>监听消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.rocketmq.spring.annotation.RocketMQMessageListener;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.spring.core.RocketMQListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@RocketMQMessageListener(topic = &quot;order_id&quot;,consumerGroup = &quot;group_rocketmq&quot;)</span>  <span class="hljs-comment">//至少必须指定这两个参数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RocketMQListener</span>&lt;String&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(String id)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;消费消息，id：    &quot;</span> + id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="4、整合Kafka"><a href="#4、整合Kafka" class="headerlink" title="4、整合Kafka"></a>4、整合Kafka</h4><h5 id="1、安装Kafka"><a href="#1、安装Kafka" class="headerlink" title="1、安装Kafka"></a>1、安装Kafka</h5><blockquote><p>要在Docker中安装Apache Kafka，您可以按照以下步骤进行操作：</p><ol><li><p>首先，确保您已经安装了Docker并具有适当的权限来执行Docker命令。</p></li><li><p>下载Kafka镜像。您可以从Docker Hub下载官方的Apache Kafka镜像。运行以下命令：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">docker pull confluentinc/cp-kafka</span><br></code></pre></td></tr></table></figure><p>这将下载最新版本的Apache Kafka镜像。</p><ol start="3"><li>创建一个网络，以便Kafka容器之间可以相互通信。运行以下命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">docker network create kafka-net</span><br></code></pre></td></tr></table></figure><ol start="4"><li>创建Kafka容器。运行以下命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">docker run -d --name kafka -p 9092:9092 --network kafka-net -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092 -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 -e KAFKA_CREATE_TOPICS=<span class="hljs-string">&quot;topic1:1:1&quot;</span> confluentinc/cp-kafka</span><br></code></pre></td></tr></table></figure><p>该命令将在后台运行一个名为<code>kafka</code>的容器，并将容器的9092端口映射到主机的9092端口。同时，我们通过环境变量设置了Kafka的配置参数，如<code>KAFKA_ADVERTISED_LISTENERS</code>和<code>KAFKA_ZOOKEEPER_CONNECT</code>。这里我们还创建了一个名为<code>topic1</code>的主题。</p><p>如果您想要创建多个主题，可以在<code>KAFKA_CREATE_TOPICS</code>环境变量中指定多个主题的配置，格式为<code>&lt;topic_name&gt;:&lt;num_partitions&gt;:&lt;replication_factor&gt;</code>。</p><ol start="5"><li>创建一个ZooKeeper容器来管理Kafka。运行以下命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">docker run -d --name zookeeper -p 2181:2181 --network kafka-net -e ZOOKEEPER_CLIENT_PORT=2181 confluentinc/cp-zookeeper</span><br></code></pre></td></tr></table></figure><p>这将在后台运行一个名为<code>zookeeper</code>的容器，并将容器的2181端口映射到主机的2181端口。</p><p>现在，您已经成功在Docker中安装和运行了Apache Kafka。您可以使用Kafka的相关工具和客户端连接到<code>localhost:9092</code>，开始使用Kafka进行消息传递。</p></blockquote><h5 id="2、SpringBoot整合Kafka"><a href="#2、SpringBoot整合Kafka" class="headerlink" title="2、SpringBoot整合Kafka"></a>2、SpringBoot整合Kafka</h5><ul><li><p>1、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--整合kafka--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-kafka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2、在application.yml中配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># kafka</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.111</span><span class="hljs-string">:9092</span><br>    <span class="hljs-attr">consumer:</span><br>      <span class="hljs-attr">group-id:</span> <span class="hljs-string">order</span><br></code></pre></td></tr></table></figure></li><li><p>3、使用</p><ul><li><p>①、生产消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> KafkaTemplate&lt;String,String&gt; kafkaTemplate;<br>    <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String id)</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;生产消息：id：  &quot;</span> + id);<br>      kafkaTemplate.send(<span class="hljs-string">&quot;topic1&quot;</span>,id);  <span class="hljs-comment">//生产消息</span><br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>②、消费消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;<br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.KafkaListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageListener</span> &#123;<br>    <span class="hljs-meta">@KafkaListener(topics = &quot;topic1&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(ConsumerRecord&lt;String, String&gt; record)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;消费消息，id：   &quot;</span> + record.value());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="6、监控"><a href="#6、监控" class="headerlink" title="6、监控"></a>6、监控</h2><h3 id="1、监控的意义"><a href="#1、监控的意义" class="headerlink" title="1、监控的意义"></a>1、监控的意义</h3><ul><li>监控服务状态是否宕机</li><li>监控服务运行指标（内存、虚拟机、线程、请求等）</li><li>监控日志</li><li>管理服务（服务下线）</li></ul><blockquote><p>监控的实施方式：</p><ul><li>显示监控信息的服务器：用于获取服务信息，并显示对应的信息</li><li>运行的服务：启动时主动上报，告知监控服务器自己需要受到监控</li></ul></blockquote><h3 id="2、可视化监控平台"><a href="#2、可视化监控平台" class="headerlink" title="2、可视化监控平台"></a>2、可视化监控平台</h3><ul><li>Spring Boot Admin：开源社区项目，用于管理和监控SpringBoot应用程。客户端注册到服务端后，通过HTTP请求方式，服务端定期从客户端获取对应的信息，并通过UI界面展示对应信息。</li></ul><h4 id="1、服务器端"><a href="#1、服务器端" class="headerlink" title="1、服务器端"></a>1、服务器端</h4><ul><li><p>1、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--springboot-admin 服务端--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--一定要配置成web项目--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2、application.yml中配置端口</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure></li><li><p>3、在启动类上加上注解<code>@EnableAdminServer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> de.codecentric.boot.admin.server.config.EnableAdminServer;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableAdminServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot25AdminServerApplication</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(Springboot25AdminServerApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="2、客户端（被监控）"><a href="#2、客户端（被监控）" class="headerlink" title="2、客户端（被监控）"></a>2、客户端（被监控）</h4><ul><li><p>1、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2、在application.yml中配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">boot:</span><br>    <span class="hljs-attr">admin:</span><br>      <span class="hljs-attr">client:</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">http://localhost:8080</span>  <span class="hljs-comment"># 代表被这个网址监控</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoint:</span><br>    <span class="hljs-attr">health:</span><br>      <span class="hljs-attr">show-details:</span> <span class="hljs-string">always</span>  <span class="hljs-comment"># 开放健康信息</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&quot;*&quot;</span>  <span class="hljs-comment"># “*” 代表开放全部</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="3、监控原理"><a href="#3、监控原理" class="headerlink" title="3、监控原理"></a>3、监控原理</h3><ul><li>Actuator提供了SpringBoot生产就绪功能，通过端点的配置与访问，获取端点信息</li><li>端点描述了一组监控信息，SpringBoot提供了多个内置端点，也可以根据需要自定义端点信息</li><li>访问当前应用所有端点信息：<code>/actuator</code></li><li>访问端点详细信息：<code>/actuator/端点名称</code></li></ul><blockquote><p>Spring Boot Admin是一个用于管理和监控Spring Boot应用程序的开源工具。它提供了一个用户友好的Web界面，可以用来监视应用程序的健康状况、配置信息、日志文件等。</p><p>以下是一些常用的Spring Boot Admin端点：</p><ol><li><code>/actuator/health</code>: 用于检查应用程序的健康状况。返回应用程序的健康状态信息，例如是否存活、数据库连接状态等。</li><li><code>/actuator/info</code>: 用于显示应用程序的自定义信息。您可以在应用程序的配置文件中配置自定义信息，例如应用程序的版本号、描述等。</li><li><code>/actuator/metrics</code>: 用于查看应用程序的各种度量指标。包括CPU使用率、内存使用情况、请求数量等。</li><li><code>/actuator/loggers</code>: 用于查看和修改应用程序的日志级别。</li><li><code>/actuator/mappings</code>: 用于显示应用程序的URL映射信息。</li></ol><p>在<code>application.yml</code>配置文件中，您可以配置Spring Boot Admin端点的访问和安全性。</p><p>以下是一个示例的<code>application.yml</code>配置文件，其中包含了一些常用的Spring Boot Admin配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">&gt;spring:</span><br><span class="hljs-string">&gt;boot:</span><br> <span class="hljs-attr">admin:</span><br>   <span class="hljs-attr">client:</span><br>     <span class="hljs-attr">url:</span> <span class="hljs-string">http://admin-server:8080</span><br>     <span class="hljs-attr">username:</span> <span class="hljs-string">admin</span><br>     <span class="hljs-attr">password:</span> <span class="hljs-string">password</span><br></code></pre></td></tr></table></figure><p>上述配置文件中的关键部分如下：</p><ul><li><code>spring.boot.admin.client.url</code>：配置Spring Boot Admin Server的URL。</li><li><code>spring.boot.admin.client.username</code>和<code>spring.boot.admin.client.password</code>：配置连接Spring Boot Admin Server所需的用户名和密码。</li></ul><p>请注意，您需要根据您的实际环境和需求进行适当的配置调整。确保将<code>spring.boot.admin.client.url</code>设置为正确的Spring Boot Admin Server的URL，并提供正确的用户名和密码进行身份验证。</p><p>通过上述配置，您的Spring Boot应用程序将能够与Spring Boot Admin Server建立连接，并将应用程序的信息显示在Spring Boot Admin界面中。</p></blockquote><ul><li><p>启用指定端点</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span> <br>  <span class="hljs-attr">endpoint:</span><br>    <span class="hljs-attr">health:</span>  <span class="hljs-comment"># 端点名称</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">show-details:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">beans:</span>  <span class="hljs-comment"># 端点名称</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>启用所有端点</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">enabled-by-default:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="4、自定义监控指标"><a href="#4、自定义监控指标" class="headerlink" title="4、自定义监控指标"></a>4、自定义监控指标</h3><h4 id="1、系统端点添加监控指标"><a href="#1、系统端点添加监控指标" class="headerlink" title="1、系统端点添加监控指标"></a>1、系统端点添加监控指标</h4><h5 id="1、自定义info端点（信息监控）"><a href="#1、自定义info端点（信息监控）" class="headerlink" title="1、自定义info端点（信息监控）"></a>1、自定义info端点（信息监控）</h5><p>为info端点添加自定义指标</p><ul><li><p>实现接口InfoContributor，重写方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.actuate.info.Info;<br><span class="hljs-keyword">import</span> org.springframework.boot.actuate.info.InfoContributor;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 把自定义信息加到SpringBootAdmin的info上</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InfoConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InfoContributor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contribute</span><span class="hljs-params">(Info.Builder builder)</span> &#123;<br>        builder.withDetail(<span class="hljs-string">&quot;runTime&quot;</span>,System.currentTimeMillis());<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">infoMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        infoMap.put(<span class="hljs-string">&quot;buildTime&quot;</span>,<span class="hljs-string">&quot;1999&quot;</span>);<br>        builder.withDetails(infoMap);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>效果：</p></li></ul><p><img src="/img/springboot2_img/springbootadmin-info%E9%85%8D%E7%BD%AE.jpg" alt="springbootadmin-info配置"></p><h5 id="2、自定义health端点（健康监控）"><a href="#2、自定义health端点（健康监控）" class="headerlink" title="2、自定义health端点（健康监控）"></a>2、自定义health端点（健康监控）</h5><ul><li><p>继承接口AbstractHealthIndicator，重写方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.actuate.health.AbstractHealthIndicator;<br><span class="hljs-keyword">import</span> org.springframework.boot.actuate.health.Health;<br><span class="hljs-keyword">import</span> org.springframework.boot.actuate.health.Status;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HealthConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHealthIndicator</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doHealthCheck</span><span class="hljs-params">(Health.Builder builder)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (condition) &#123;<br>            builder.withDetail(<span class="hljs-string">&quot;aaaa&quot;</span>, <span class="hljs-string">&quot;aaaa&quot;</span>);<br><span class="hljs-comment">//            builder.up();  //代表健康</span><br>            builder.status(Status.UP); <span class="hljs-comment">//代表健康</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            builder.withDetail(<span class="hljs-string">&quot;问题&quot;</span>, <span class="hljs-string">&quot;问题&quot;</span>);<br><span class="hljs-comment">//            builder.down();</span><br>            builder.status(Status.OUT_OF_SERVICE);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>效果：</p><p><img src="/img/springboot2_img/springbootadmin-health.jpg" alt="springbootadmin-health"></p></li></ul><h5 id="3、自定义metrics端点（性能监控）"><a href="#3、自定义metrics端点（性能监控）" class="headerlink" title="3、自定义metrics端点（性能监控）"></a>3、自定义metrics端点（性能监控）</h5><p><img src="/img/springboot2_img/springbootadmin%E6%80%A7%E8%83%BDmetrics%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E6%A0%87.jpg" alt="springbootadmin性能metrics自定义指标"></p><p>展示：</p><p><img src="/img/springboot2_img/springbootadmin-metrics.jpg" alt="springbootadmin-metrics"></p><h4 id="2、自定义端点"><a href="#2、自定义端点" class="headerlink" title="2、自定义端点"></a>2、自定义端点</h4><p>在Spring Boot Admin中，可以通过自定义Endpoint和度量指标来添加自定义的性能指标。下面是一些添加自定义指标的步骤：</p><ol><li><p>创建自定义Endpoint：创建一个继承自<code>Endpoint</code>类的自定义Endpoint，用于公开您的自定义指标。您可以在Endpoint中定义方法来获取和计算您的指标数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.actuate.endpoint.annotation.Endpoint;<br><span class="hljs-keyword">import</span> org.springframework.boot.actuate.endpoint.annotation.ReadOperation;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Endpoint(id = &quot;custom&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomEndpoint</span> &#123;<br>    <span class="hljs-meta">@ReadOperation</span><br>    <span class="hljs-keyword">public</span> CustomMetrics <span class="hljs-title function_">getCustomMetrics</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 从您的应用程序中获取自定义指标数据</span><br>        <span class="hljs-comment">// 返回一个包含自定义指标数据的CustomMetrics对象</span><br>        <span class="hljs-type">CustomMetrics</span> <span class="hljs-variable">customMetrics</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomMetrics</span>();<br>        customMetrics.setCustomMetric1(<span class="hljs-number">222</span>);<br>        customMetrics.setCustomMetric2(<span class="hljs-number">3333</span>);<br>        <span class="hljs-keyword">return</span> customMetrics;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建自定义度量指标：创建一个包含自定义指标数据的<code>CustomMetrics</code>类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomMetrics</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> customMetric1;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> customMetric2;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>访问自定义指标：启动应用程序并访问Spring Boot Admin界面。在应用程序的详情页面中，您将看到一个名为”custom”的Endpoint。点击该Endpoint，您将看到您定义的自定义指标数据。</p></li></ol><p>这样，您就可以通过自定义Endpoint和自定义度量指标在Spring Boot Admin中添加和展示自定义的性能指标。您可以根据应用程序的需求，定义不同的自定义Endpoint和自定义指标类来管理和监控各种性能指标数据。</p><p>展示：</p><p><img src="/img/springboot2_img/springbootadmin-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AB%AF%E7%82%B9.jpg" alt="springbootadmin-自定义端点"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="1、自动配置"><a href="#1、自动配置" class="headerlink" title="1、自动配置"></a>1、自动配置</h2><h3 id="1、Bean加载方式"><a href="#1、Bean加载方式" class="headerlink" title="1、Bean加载方式"></a>1、Bean加载方式</h3><p><img src="/img/springboot2_img/bean%E5%8A%A0%E8%BD%BD%E7%9A%848%E7%A7%8D%E6%96%B9%E5%BC%8F.jpg" alt="bean加载的8种方式"></p><h3 id="2、Bean加载控制"><a href="#2、Bean加载控制" class="headerlink" title="2、Bean加载控制"></a>2、Bean加载控制</h3><blockquote><p>bean的加载控制指的是根据特定情况对bean进行选择性加载以达到适用于项目的目标</p></blockquote><ul><li>使用<code>@Conditional</code>注解的派生注解设置各种组合条件控制bean的加载</li></ul><h3 id="3、Bean依赖属性配置"><a href="#3、Bean依赖属性配置" class="headerlink" title="3、Bean依赖属性配置"></a>3、Bean依赖属性配置</h3><ol><li>将业务功能的资源提取为独立的属性类（***properties），并设置读取配置文件的信息：在这一步骤中，你将业务功能所需的资源抽取出来，创建一个独立的属性类（通常以.properties文件的形式）。这个属性类负责读取配置文件中的信息，为业务功能提供必要的资源。</li><li>使用固定格式的配置文件注入属性类的数据：在这一步骤中，你需要创建一个配置文件，用于注入属性类所需的数据。这个配置文件必须按照一定的固定格式，以确保属性类能够正确读取并使用其中的数据。</li><li>定义业务功能bean，并使用<code>@EnableConfigurationProperties</code>注解来加载属性类：在这一步骤中，你需要定义业务功能的bean对象，并使用<code>@EnableConfigurationProperties</code>注解来指定该bean需要加载属性类的信息。这样做可以确保在创建业务功能的实例时，相关的属性类也会被加载并与之关联。</li><li>使用<code>@Import</code>导入业务功能bean，解耦并强制加载bean：在这一步骤中，通常会使用<code>@Import</code>注解来导入业务功能的bean。这种导入方式可以实现解耦，使得业务功能的bean能够被正确加载和管理，而不需要在代码中显式地强制加载。</li></ol><p>总结：</p><ul><li>业务bean的属性可以设置默认值，即在属性类中可以定义属性的默认取值。</li><li>当需要设置属性时，可以通过配置文件传递属性值，由属性类读取配置文件中的值并将其注入到业务bean中。</li><li>应尽量避免在业务bean中使用强制加载方式。相反，应根据需要使用<code>@Import</code>注解来导入业务功能的bean，以降低Spring容器管理bean的强度，实现更灵活的加载机制。</li></ul><h3 id="4、自动配置原理"><a href="#4、自动配置原理" class="headerlink" title="4、自动配置原理"></a>4、自动配置原理</h3><h3 id="5、变更自动配置"><a href="#5、变更自动配置" class="headerlink" title="5、变更自动配置"></a>5、变更自动配置</h3><p><img src="/img/springboot2_img/%E5%8F%98%E6%9B%B4%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE.jpg" alt="变更自动配置"></p><p><img src="/img/springboot2_img/%E5%8F%98%E6%9B%B4%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93.jpg" alt="变更自动配置总结"></p><h2 id="2、自定义starter"><a href="#2、自定义starter" class="headerlink" title="2、自定义starter"></a>2、自定义starter</h2><p>在Spring Boot中，可以通过自定义starter来封装一组相关的依赖和配置，以便在其他项目中进行重复使用。自定义starter可以简化应用程序的配置和依赖管理，提供一种可插拔的方式来扩展和定制Spring Boot应用。</p><p>以下是自定义Spring Boot starter的基本步骤：</p><ol><li>创建一个Maven或Gradle项目：作为自定义starter的项目，可以使用Maven或Gradle构建工具来创建项目。</li><li>定义starter模块：在项目中创建一个模块，作为starter的核心模块。在该模块中，可以包含以下内容：<ul><li>自定义的配置类：用于配置和初始化相关的组件。</li><li>自定义的自动配置类：用于自动配置相关的组件。</li><li>自定义的依赖：将需要的依赖添加到项目的依赖管理中。</li></ul></li><li>创建自动配置类：在starter模块中，创建一个自动配置类，用于自动配置相关的组件。自动配置类通常使用<code>@Configuration</code>注解进行标记，并使用其他注解如<code>@ConditionalOnClass</code>、<code>@ConditionalOnProperty</code>等来进行条件化的配置。</li><li>创建配置类：在starter模块中，创建一个配置类，用于接受外部配置，并将配置值注入到相关的组件中。配置类通常使用<code>@ConfigurationProperties</code>注解进行标记，并定义需要配置的属性和对应的Getter&#x2F;Setter方法。</li><li>定义starter的启动类：在starter模块中，创建一个启动类，用于加载自动配置和配置类，并将其纳入Spring Boot应用的上下文中。</li><li>打包和发布：将自定义starter模块进行打包，并发布到Maven仓库或本地仓库中，以便其他项目可以引入并使用。</li></ol><p>使用自定义starter的项目，只需在其pom.xml文件中添加对自定义starter的依赖，Spring Boot将自动加载并应用自定义starter的自动配置和配置。</p><p>通过自定义starter，可以将一组相关的依赖和配置进行封装，提供一种简化和集中化的方式来扩展和定制Spring Boot应用程序。同时，它也可以帮助我们提高代码的复用性和可维护性。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringBoot2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM</title>
    <link href="/2024/02/26/SSM/"/>
    <url>/2024/02/26/SSM/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Spring"><a href="#一、Spring" class="headerlink" title="一、Spring"></a>一、Spring</h1><h2 id="1、IOC"><a href="#1、IOC" class="headerlink" title="1、IOC"></a>1、IOC</h2><h3 id="1-1、什么是IOC"><a href="#1-1、什么是IOC" class="headerlink" title="1.1、什么是IOC"></a>1.1、什么是IOC</h3><ul><li><p>IOC：控制反转，把对象的创建和对象之间调用的过程都交给Spring进行管理</p></li><li><p>使用IOC的目的：为了降低耦合度</p></li></ul><h3 id="1-2、IOC底层原理"><a href="#1-2、IOC底层原理" class="headerlink" title="1.2、IOC底层原理"></a>1.2、IOC底层原理</h3><ul><li>xml解析、工厂模式、反射</li></ul><h3 id="1-3、IOC-中的接口（容器）"><a href="#1-3、IOC-中的接口（容器）" class="headerlink" title="1.3、IOC 中的接口（容器）"></a>1.3、IOC 中的接口（容器）</h3><p>1、IOC的思想基于IOC容器完成，IOC容器底层就是对象工厂</p><p>2、Spring提供 IOC容器的两种实现方式：（两个接口）</p><ul><li>BeanFactory：IOC容器最基本的实现方式，它是Spring内部的使用接口，不提供给开发人员进行使用<ul><li>特点：加载配置文件的时候不会创建对象，只有在获取（使用）对象的时候才会使用<ul><li>加载配置文件：<code>BeanFactory context = new ClassPathXmlApplicationContext(&quot;配置文件&quot;);</code></li><li>获取对象：<code>context.getBean(&quot;id&quot;,类名.class)</code></li></ul></li></ul></li><li>ApplicationContext：是BeanFactory接口的子接口，提供了更多更强大的功能，一般是由开发人员使用的<ul><li>特点：加载配置文件的时候就会创建对象</li><li>ApplicationContext接口的实现类：FileSystemXmlApplicationContext、ClassPathXmlApplicationContext</li></ul></li></ul><h3 id="1-4、IOC的Bean管理操作"><a href="#1-4、IOC的Bean管理操作" class="headerlink" title="1.4、IOC的Bean管理操作"></a>1.4、IOC的Bean管理操作</h3><h4 id="1、Bean管理概念"><a href="#1、Bean管理概念" class="headerlink" title="1、Bean管理概念"></a>1、Bean管理概念</h4><p>指的是两个操作：Spring创建对象、Spring注入属性</p><h4 id="2、Bean管理操作有两种实现方式"><a href="#2、Bean管理操作有两种实现方式" class="headerlink" title="2、Bean管理操作有两种实现方式"></a>2、Bean管理操作有两种实现方式</h4><p><strong>基于xml配置文件 和 基于注解</strong></p><h4 id="2-1、xml方式"><a href="#2-1、xml方式" class="headerlink" title="2.1、xml方式"></a>2.1、xml方式</h4><h5 id="1、基于xml方式创建对象"><a href="#1、基于xml方式创建对象" class="headerlink" title="1、基于xml方式创建对象"></a>1、基于xml方式创建对象</h5><ul><li>在Spring的配置文件中使用bean标签，标签中添加对应属性就可以实现对象创建</li><li>在bean标签中有多个属性：<ul><li>id：对象的唯一标识，可以根据这个标识来创建对象</li><li>class：类的全路径</li><li>name：name属性的作用跟id一样，差别是id属性不能使用特殊符号（不常用，了解）</li></ul></li><li>创建对象时，默认使用的是无参构造方法</li></ul><h5 id="2、基于xml方式注入属性"><a href="#2、基于xml方式注入属性" class="headerlink" title="2、基于xml方式注入属性"></a>2、基于xml方式注入属性</h5><p><strong>DI：依赖注入，就是注入属性，有两种注入方式：set方式和有参构造方式</strong></p><h6 id="1：使用set方法进行注入"><a href="#1：使用set方法进行注入" class="headerlink" title="1：使用set方法进行注入"></a>1：使用set方法进行注入</h6><p>（1）创建类Book,定义属性和set方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示使用set方法进行注入属性</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-keyword">private</span> String bname;<br>    <span class="hljs-keyword">private</span> String bauthor;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBname</span><span class="hljs-params">(String bname)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bname = bname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBauthor</span><span class="hljs-params">(String bauthor)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bauthor = bauthor;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Book&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;bname=&#x27;&quot;</span> + bname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, bauthor=&#x27;&quot;</span> + bauthor + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）在Spring配置文件中配置属性注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--set方式注入属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring5.Book&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;易筋经&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bauthor&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;达摩&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（3）验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBook1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br>    <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;book&quot;</span>, Book.class);<br>    System.out.println(book); <span class="hljs-comment">// Book&#123;bname=&#x27;易筋经&#x27;, bauthor=&#x27;达摩&#x27;&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2：使用有参构造进行注入"><a href="#2：使用有参构造进行注入" class="headerlink" title="2：使用有参构造进行注入"></a>2：使用有参构造进行注入</h6><p>（1）创建类Orders,定义属性和构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用有参构造注入属性</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Orders</span> &#123;<br>    <span class="hljs-keyword">private</span> String oname;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Orders</span><span class="hljs-params">(String oname, String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.oname = oname;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Orders&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;oname=&#x27;&quot;</span> + oname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）在Spring配置文件中配置属性注入：</p><p>constructor-arg 中既可以使用name，又可以使用index。index&#x3D;0代表第一个属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--有参构造方式注入属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring5.Orders&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;oname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;电脑&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;China&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（3）验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOrders</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;orders&quot;</span>, Orders.class);<br>    System.out.println(orders); <span class="hljs-comment">// Orders&#123;oname=&#x27;电脑&#x27;, address=&#x27;China&#x27;&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3、p-名称空间注入（基于xml方式）-了解"><a href="#3、p-名称空间注入（基于xml方式）-了解" class="headerlink" title="3、p 名称空间注入（基于xml方式）(了解)"></a>3、p 名称空间注入（基于xml方式）(了解)</h6><p>使用p名称空间注入，可以简化基于xml配置方式</p><p>（1）添加p名称空间在Spring配置文件中：<code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span>   <span class="hljs-attr">新添加的这一行</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）在Spring配置文件中的bean标签里进行操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--set方式使用p命名空间注入属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring5.Book&quot;</span> <span class="hljs-attr">p:bname</span>=<span class="hljs-string">&quot;九阳神功&quot;</span> <span class="hljs-attr">p:bauthor</span>=<span class="hljs-string">&quot;无名氏&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="4、xml注入其他类型属性"><a href="#4、xml注入其他类型属性" class="headerlink" title="4、xml注入其他类型属性"></a>4、xml注入其他类型属性</h6><p>4.1、注入空值</p><p>直接设置name属性，不设置value属性，在内部添加一个<code>&lt;null/&gt;</code> 标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1、set方式注入属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring5.Book&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;易筋经&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bauthor&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;达摩&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置null值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.2、属性值包含特殊符号</p><ul><li>方式1：可以把&lt;&gt;进行转义：<code>&amp;lt;    &amp;gt;</code></li><li>方式2：把带特殊符号的内容写到CDATA中：<code> &lt;![CDATA[包含特殊符号内容]]&gt;</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1、set方式注入属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring5.Book&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;易筋经&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bauthor&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;达摩&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--属性值包含特殊符号</span><br><span class="hljs-comment">        方式1：可以把&lt;&gt;进行转义：&amp;lt;&amp;gt;</span><br><span class="hljs-comment">        方式2：把带特殊符号的内容写到CDATA中</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.3、注入外部bean</p><ul><li><p>1、创建两个类：service类和dao类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.dao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.dao.impl;<br><br><span class="hljs-keyword">import</span> org.example.dao.UserDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;UserDaoImpl.update&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>2、在service中调用dao中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.service;<br><br><span class="hljs-keyword">import</span> org.example.dao.UserDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-comment">//1、创建UserDao类型的属性：生成set方法</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;UserService.add&quot;</span>);<br><br>        userDao.update();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>3、在Spring的xml配置文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--首先创建service 和 dao 的对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.service.UserService&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--注入userDao对象</span><br><span class="hljs-comment">            name属性：类里边的属性名称</span><br><span class="hljs-comment">            ref属性：创建的userDaoImpl对象的bean标签的id值 （注意：这里不能使用value属性）</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>4、验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean2.xml&quot;</span>);<br>       <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;userService&quot;</span>, UserService.class);<br>       userService.add();  <span class="hljs-comment">// UserService.add</span><br>                           <span class="hljs-comment">// UserDaoImpl.update</span><br>   &#125;<br></code></pre></td></tr></table></figure></li></ul><p>4.4、注入内部bean</p><ul><li><p>1、创建两个类，员工类和部门类，其中一个员工对应一个部门</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.bean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 部门类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dept</span> &#123;<br>    <span class="hljs-keyword">private</span> String dname;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDname</span><span class="hljs-params">(String dname)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dname = dname;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dept&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;dname=&#x27;&quot;</span> + dname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.bean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 员工类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br>    <span class="hljs-keyword">private</span> String ename;<br>    <span class="hljs-keyword">private</span> String gender;<br><br>    <span class="hljs-comment">//员工属于某一个部门</span><br>    <span class="hljs-keyword">private</span> Dept dept;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDept</span><span class="hljs-params">(Dept dept)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dept = dept;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEname</span><span class="hljs-params">(String ename)</span> &#123;<br>        <span class="hljs-built_in">this</span>.ename = ename;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Emp&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;ename=&#x27;&quot;</span> + ename + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, dept=&quot;</span> + dept +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>2、在Spring的xml配置文件中进行配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--内部bean--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.bean.Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lucy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--在property中只定义name，然后在里面再写bean--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.bean.Dept&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;安保部&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>3、验证</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBean2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean3.xml&quot;</span>);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;emp&quot;</span>, Emp.class);<br>    System.out.println(emp); <span class="hljs-comment">// Emp&#123;ename=&#x27;lucy&#x27;, gender=&#x27;女&#x27;, dept=Dept&#123;dname=&#x27;安保部&#x27;&#125;&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>4.5、注入属性-级联赋值</p><p>级联赋值有两种写法，第一种是通过外部bean的方式进行级联赋值</p><ul><li>1、上面内部bean的Dept类和Emp类不变</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.bean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 部门类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dept</span> &#123;<br>    <span class="hljs-keyword">private</span> String dname;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDname</span><span class="hljs-params">(String dname)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dname = dname;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dept&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;dname=&#x27;&quot;</span> + dname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.bean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 员工类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br>    <span class="hljs-keyword">private</span> String ename;<br>    <span class="hljs-keyword">private</span> String gender;<br><br>    <span class="hljs-comment">//员工属于某一个部门</span><br>    <span class="hljs-keyword">private</span> Dept dept;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDept</span><span class="hljs-params">(Dept dept)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dept = dept;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEname</span><span class="hljs-params">(String ename)</span> &#123;<br>        <span class="hljs-built_in">this</span>.ename = ename;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Emp&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;ename=&#x27;&quot;</span> + ename + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, dept=&quot;</span> + dept +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>2、在Spring的xml配置文件中进行配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--级联赋值<span class="hljs-number">1</span>--&gt;<br>&lt;bean id=<span class="hljs-string">&quot;dept&quot;</span> class=<span class="hljs-string">&quot;org.example.bean.Dept&quot;</span>&gt;<br>    &lt;property name=<span class="hljs-string">&quot;dname&quot;</span> value=<span class="hljs-string">&quot;研发部&quot;</span>&gt;&lt;/property&gt;<br>&lt;/bean&gt;<br>&lt;bean id=<span class="hljs-string">&quot;emp&quot;</span> class=<span class="hljs-string">&quot;org.example.bean.Emp&quot;</span>&gt;<br>    &lt;property name=<span class="hljs-string">&quot;ename&quot;</span> value=<span class="hljs-string">&quot;张三&quot;</span>&gt;&lt;/property&gt;<br>    &lt;property name=<span class="hljs-string">&quot;gender&quot;</span> value=<span class="hljs-string">&quot;男&quot;</span>&gt;&lt;/property&gt;<br>    &lt;!--通过外部bean来赋值--&gt;<br>    &lt;property name=<span class="hljs-string">&quot;dept&quot;</span> ref=<span class="hljs-string">&quot;dept&quot;</span>&gt;&lt;/property&gt;<br>&lt;/bean&gt;<br></code></pre></td></tr></table></figure><p>第二种是通过<code>对象名.属性名</code>方式进行赋值，前提是要能获取到这个对象，所以需要为对象这个属性设置getter方法</p><ul><li>1、上面内部bean的Dept类不变，Emp类中为dept这个属性增加一个getter方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.bean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 部门类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dept</span> &#123;<br>    <span class="hljs-keyword">private</span> String dname;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDname</span><span class="hljs-params">(String dname)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dname = dname;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dept&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;dname=&#x27;&quot;</span> + dname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.bean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 员工类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br>    <span class="hljs-keyword">private</span> String ename;<br>    <span class="hljs-keyword">private</span> String gender;<br><br>    <span class="hljs-comment">//员工属于某一个部门</span><br>    <span class="hljs-keyword">private</span> Dept dept;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDept</span><span class="hljs-params">(Dept dept)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dept = dept;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Dept <span class="hljs-title function_">getDept</span><span class="hljs-params">()</span> &#123;  <span class="hljs-comment">//级联赋值 需要为dept这个属性设置getter方法</span><br>        <span class="hljs-keyword">return</span> dept;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEname</span><span class="hljs-params">(String ename)</span> &#123;<br>        <span class="hljs-built_in">this</span>.ename = ename;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Emp&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;ename=&#x27;&quot;</span> + ename + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, dept=&quot;</span> + dept +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>2、在Spring的xml配置文件中进行配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--级联赋值2--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.bean.Dept&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.bean.Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--通过外部bean来赋值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dept&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--需要先给emp中的dept属性生成getter方法--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept.dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;技术部&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.6、xml注入集合类型属性</p><ul><li>1、定义一个类，定义数组类型、List集合类型、Map集合类型、Set集合类型的属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.collectiontype;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Stu</span> &#123;<br>    <span class="hljs-comment">//1、数组类型的属性</span><br>    <span class="hljs-keyword">private</span> String[] courses;<br>    <span class="hljs-comment">//2、List集合类型属性</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; list;<br>    <span class="hljs-comment">//3、Map集合类型的属性</span><br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; maps;<br>    <span class="hljs-comment">//4、Set集合类型的属性</span><br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; set;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCourses</span><span class="hljs-params">(String[] courses)</span> &#123;<br>        <span class="hljs-built_in">this</span>.courses = courses;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setList</span><span class="hljs-params">(List&lt;String&gt; list)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMaps</span><span class="hljs-params">(Map&lt;String, String&gt; maps)</span> &#123;<br>        <span class="hljs-built_in">this</span>.maps = maps;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSet</span><span class="hljs-params">(Set&lt;String&gt; set)</span> &#123;<br>        <span class="hljs-built_in">this</span>.set = set;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Stu&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;courses=&quot;</span> + Arrays.toString(courses) +<br>                <span class="hljs-string">&quot;, list=&quot;</span> + list +<br>                <span class="hljs-string">&quot;, maps=&quot;</span> + maps +<br>                <span class="hljs-string">&quot;, set=&quot;</span> + set +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>2、在Spring的xml配置文件中进行配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--集合类型属性的注入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring5.collectiontype.Stu&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--数组类型：在property中定义array或者list标签，然后再在array中定义value--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;courses&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>数据库<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--list集合类型，在property中定义list标签，然后再在array中定义value--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>小三<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--map集合类型，在property中定义map标签，再在其中定义entry标签，可以指定key和value--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maps&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;JAVA&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;PHP&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;php&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--set集合类型，在property中定义set标签，再在其中定义value--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;set&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>MySQL<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Redis<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>3、验证</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCollection</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br>    <span class="hljs-type">Stu</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;stu&quot;</span>, Stu.class);<br>    System.out.println(stu); <span class="hljs-comment">// Stu&#123;courses=[java, 数据库], list=[张三, 小三], maps=&#123;JAVA=java, PHP=php&#125;, set=[MySQL, Redis]&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>4.6.1、在集合中设置对象类型值</p><ul><li>1、定义Course课程类，和Stu学生类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.collectiontype;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 课程类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Course</span> &#123;<br>    <span class="hljs-keyword">private</span> String cname;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCname</span><span class="hljs-params">(String cname)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cname = cname;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Course&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;cname=&#x27;&quot;</span> + cname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.collectiontype;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Stu</span> &#123;<br><br>    <span class="hljs-comment">//学生学习的多门课程</span><br>    <span class="hljs-keyword">private</span> List&lt;Course&gt; courseList;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCourseList</span><span class="hljs-params">(List&lt;Course&gt; courseList)</span> &#123;<br>        <span class="hljs-built_in">this</span>.courseList = courseList;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Stu&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;courseList=&quot;</span> + courseList +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>2、在Spring的xml配置文件中进行配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--集合类型属性的注入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring5.collectiontype.Stu&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入List集合中存储对象的类型：在list标签内部定义ref标签，ref标签中的bean属性对应外部bean的id值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;courseList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;course1&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;course2&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;course1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring5.collectiontype.Course&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring5框架&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;course2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring5.collectiontype.Course&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Mybatis框架&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.6.2、把集合注入部分提取出来</p><ul><li>1、定义一个类用作演示</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.collectiontype;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; list;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setList</span><span class="hljs-params">(List&lt;String&gt; list)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Book&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;list=&quot;</span> + list +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>2、在Spring的xml配置文件中引入命名空间 util</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:util</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/util&quot;</span>  <span class="hljs-attr">新引入的util命名空间</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/util   http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span>  新引入的util命名空间<br><br>    <span class="hljs-comment">&lt;!--提取list集合类型属性注入--&gt;</span><br>    <span class="hljs-comment">&lt;!--1、首先定义一个util:list标签，然后自定义一个id，在标签中定义集合内容--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">util:list</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>西游记<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>水浒传<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>三国演义<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">util:list</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--2、正常创建bean，然后再通过ref引入上面定义id--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring5.collectiontype.Book&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookList&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3、工厂Bean（Factory-Bean）"><a href="#3、工厂Bean（Factory-Bean）" class="headerlink" title="3、工厂Bean（Factory Bean）"></a>3、工厂Bean（Factory Bean）</h5><p><strong>Spring有两种类型的Bean，一种普通Bean（开发人员定义的），另外一种工厂Bean（Spring内置的）</strong></p><ul><li><p>普通Bean：在Spring的xml配置文件种定义的Bean是什么类型，就返回什么类型</p></li><li><p>Factory Bean：在Spring的xml配置文件中定义的Bean类型可以和返回类型不一样</p><ul><li>1、创建一个类，让这个类作为工厂Bean，实现接口FactoryBean；然后重写方法，在方法中定义返回的bean类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.factorybean;<br><br><span class="hljs-keyword">import</span> org.example.spring5.collectiontype.Course;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.FactoryBean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;Course&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回bean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Course <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Course</span> <span class="hljs-variable">course</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Course</span>();<br>        course.setCname(<span class="hljs-string">&quot;abc&quot;</span>);<br>        <span class="hljs-keyword">return</span> course;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> FactoryBean.<span class="hljs-built_in">super</span>.isSingleton();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>2、在xml中配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring5.factorybean.MyBean&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><ul><li>3、测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean3.xml&quot;</span>);<br>    <span class="hljs-type">Course</span> <span class="hljs-variable">course</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;myBean&quot;</span>, Course.class);<br>    System.out.println(course); <span class="hljs-comment">// Course&#123;cname=&#x27;abc&#x27;&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="4、Bean的作用域"><a href="#4、Bean的作用域" class="headerlink" title="4、Bean的作用域"></a>4、Bean的作用域</h5><p>1、在Spring中，可以设置创建的Bean实例是单实例还是多实例</p><p>2、在Spring中，默认情况下，Bean是单实例对象</p><p>3、修改Bean为多实例对象</p><ul><li>在Spring 配置文件bean标签中有一个属性（scope）可以设置单实例还是多实例</li><li>scope：singleton【默认值，表示是单实例对象】、prototype【表示是多实例对象】</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;自定义id&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;全路径&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>/&gt;</span>  scope=&quot;prototype&quot; 表示当前bean是多实例<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> test实例() &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean2.xml&quot;</span>);<br>    <span class="hljs-type">Book</span> <span class="hljs-variable">book1</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;自定义id&quot;</span>, Book.class);<br>    <span class="hljs-type">Book</span> <span class="hljs-variable">book2</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;自定义id&quot;</span>, Book.class);<br>    <span class="hljs-comment">// book1和book2不相等，代表设置成功</span><br>    System.out.println(book1);  <span class="hljs-comment">// org.example.spring5.collectiontype.Book@6fb0d3ed</span><br>    System.out.println(book2);  <span class="hljs-comment">// org.example.spring5.collectiontype.Book@6dde5c8c</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>singleton 和 prototype 的区别<ul><li>1、singleton 表示单实例；prototype 表示多实例</li><li>2、设置scope 值为singleton 的时候，加载配置文件（new ClassPathXmlApplicationContext()）时就会创建单实例对象；设置scope值为prototype的时候，在调用getBean方法的时候才会创建多实例对象</li></ul></li></ul><h5 id="5、Bean的生命周期"><a href="#5、Bean的生命周期" class="headerlink" title="5、Bean的生命周期"></a>5、Bean的生命周期</h5><ul><li><p>生命周期：从对象的创建到销毁的过程</p></li><li><p>Bean的生命周期：</p><ul><li><p>创建Bean实例（无参构造）</p></li><li><p>为Bean的属性设置值（调用set 方法）</p></li><li><p>调用Bean的初始化方法（需要进行配置初始化方法）</p></li><li><p>使用Bean</p></li><li><p>当容器关闭的时候，调用Bean的销毁方法（需要进行配置销毁方法）</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.bean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Orders</span> &#123;<br>    <span class="hljs-keyword">private</span> String oname;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Orders</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;第一步，执行无参构造创建bean实例&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOname</span><span class="hljs-params">(String oname)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;第二步，调用set方法进行属性赋值&quot;</span>);<br>        <span class="hljs-built_in">this</span>.oname = oname;<br>    &#125;<br><br>    <span class="hljs-comment">//第三步，创建执行的初始化方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initMethod</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;第三步，创建执行的初始化方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//第五步，创建销毁的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroyMethod</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;第五步，创建销毁的方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Orders&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;oname=&#x27;&quot;</span> + oname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--init-method、destroy-method 中的方法是Orders类中的方法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring5.bean.Orders&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;initMethod&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroyMethod&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;oname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;手机&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBean</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean4.xml&quot;</span>);<br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;orders&quot;</span>, Orders.class);<br>    System.out.println(<span class="hljs-string">&quot;第四步，使用Bean&quot;</span>);<br>    context.close();  <span class="hljs-comment">//销毁</span><br>&#125;<br>     <span class="hljs-comment">//第一步，执行无参构造创建bean实例</span><br> <span class="hljs-comment">//第二步，调用set方法进行属性赋值</span><br>  <br>    <span class="hljs-comment">//第四步，使用Bean</span><br>    <span class="hljs-comment">//第五步，创建销毁的方法</span><br></code></pre></td></tr></table></figure><ul><li><p>bean的后置处理器（加上后置处理器之后才是完整的生命周期）</p><ul><li><p>后置处理器指的是在上面第三步【调用Bean的初始化方法（需要进行配置初始化方法）】前后各有一步</p><p>1、创建一个类，实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.bean;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 会为当前配置文件中所有的bean添加一个后置处理器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanPost</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化之前</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> beanName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> BeansException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyBeanPost.postProcessBeforeInitialization&quot;</span>);<br>        <span class="hljs-keyword">return</span> BeanPostProcessor.<span class="hljs-built_in">super</span>.postProcessBeforeInitialization(bean, beanName);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化之后</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> beanName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> BeansException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyBeanPost.postProcessAfterInitialization&quot;</span>);<br>        <span class="hljs-keyword">return</span> BeanPostProcessor.<span class="hljs-built_in">super</span>.postProcessAfterInitialization(bean, beanName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、在配置文件中进行配置后置处理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--init-method、destroy-method 中的方法是Orders类中的方法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring5.bean.Orders&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;initMethod&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroyMethod&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;oname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;手机&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br><span class="hljs-comment">&lt;!--配置后置处理器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBeanPost&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring5.bean.MyBeanPost&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>3、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBean</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean4.xml&quot;</span>);<br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;orders&quot;</span>, Orders.class);<br>    System.out.println(<span class="hljs-string">&quot;第四步，使用Bean&quot;</span>);<br>    context.close();<br>&#125;<br>    <span class="hljs-comment">// 第一步，执行无参构造创建bean实例</span><br>    <span class="hljs-comment">// 第二步，调用set方法进行属性赋值</span><br>    <span class="hljs-comment">// MyBeanPost.postProcessBeforeInitialization</span><br>    <span class="hljs-comment">// 第三步，创建执行的初始化方法</span><br>    <span class="hljs-comment">// MyBeanPost.postProcessAfterInitialization</span><br>    <span class="hljs-comment">// 第四步，使用Bean</span><br>    <span class="hljs-comment">// 第五步，创建销毁的方法</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h5 id="6、自动装配"><a href="#6、自动装配" class="headerlink" title="6、自动装配"></a>6、自动装配</h5><ul><li><p>自动装配：根据指定装配规则（属性名称或者属性类型），Spring自动将匹配的属性值进行注入</p></li><li><p>bean标签属性autowire能实现自动装配</p><ul><li>byName方式是根据bean的名称进行注入，需要在XML配置文件中给bean设置一个唯一的名称。byType方式是根据bean的类型进行注入，需要保证容器中只有一个该类型的bean。</li><li>byName方式的优先级高于byType方式，如果按照byName方式找到了对应的bean，则不会再按照byType方式查找。如果按照byType方式找到了多个符合条件的bean，则会抛出异常。</li><li>byName方式注入时，需要保证属性名称和bean名称一致。byType方式则不需要。</li><li>byName方式注入时，不支持基本数据类型和String类型的注入。byType方式则支持。</li><li>通常情况下，推荐使用byType方式进行注入，因为它更加灵活，能够自动适应bean类型的变化。但是，在某些情况下，byName方式也是必要的，比如多个类型相同的bean需要注入到不同的属性中。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring5.autowire.Dept&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--自动装配：</span><br><span class="hljs-comment">bean标签属性autowire能实现自动装配</span><br><span class="hljs-comment">autowire属性常用两个值：</span><br><span class="hljs-comment">    byName：根据属性名称注入（特点：注入的值bean的id值要和类中属性的名称一致）</span><br><span class="hljs-comment">    byType：根据属性类型注入</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring5.autowire.Emp&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="7、引入外部的属性文件"><a href="#7、引入外部的属性文件" class="headerlink" title="7、引入外部的属性文件"></a>7、引入外部的属性文件</h5><p>首先给出直接配置数据库信息的写法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置数据库--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/userDb&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>引入外部的属性文件：</strong></p><ul><li><p>1、首先新建一个<code>jdbc.properties</code> 的配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">prop.driverClass</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">prop.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/userDb</span><br><span class="hljs-attr">prop.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">prop.password</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></table></figure></li><li><p>2、在xml中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span>  <span class="hljs-attr">新的命名空间context</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span>  新的命名空间context<br><br>    <span class="hljs-comment">&lt;!--读取外部的配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置数据库  通过 $&#123;&#125; 来引入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.driverClass&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-2、注解方式"><a href="#2-2、注解方式" class="headerlink" title="2.2、注解方式"></a>2.2、注解方式</h4><h5 id="1、创建对象"><a href="#1、创建对象" class="headerlink" title="1、创建对象"></a>1、创建对象</h5><ul><li><code>@Component</code>：普通组件</li><li><code>@Service</code>：Service层</li><li><code>@Controller</code>：Web层</li><li><code>@Repository</code>：Dao层</li></ul><p>以上4个注解的功能是一样的，都可以用来创建Bean 实例</p><h6 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h6><ul><li>1、引入spring-aop依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aop --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>2、开启组件扫描</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启组件扫描--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.example.spring5&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><ul><li>3、创建类，在类上加上对应的注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.service;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 在注解里面的value属性可以省略。默认值是类名称，首字母小写</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service(value = &quot;userService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserService.add&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="开启组件扫描的细节："><a href="#开启组件扫描的细节：" class="headerlink" title="开启组件扫描的细节："></a>开启组件扫描的细节：</h6><ul><li>1、use-default-filters&#x3D;”false”     不扫描全部包</li><li>2、context:include-filter    只扫描什么包下的内容</li><li>3、context:exclude-filter    不扫描什么包下的内容</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">   <span class="hljs-comment">&lt;!--use-default-filters=&quot;false&quot; 不扫描所有的内容--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.example.spring5&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--只扫描带有@Controller注解的类--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.example.spring5&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--不扫描带有@Service注解的类--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Service&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><code>@Import</code>注解：</strong></p><p>使用<code>@Import(类名.class)</code>注解导入要注入的bean，被导入的bean不需要声明为Bean。</p><ul><li>此形式可以有效的降低源代码与Spring技术的耦合度，在Spring技术底层及诸多框架的整合中大量使用</li></ul><h5 id="2、注入属性"><a href="#2、注入属性" class="headerlink" title="2、注入属性"></a>2、注入属性</h5><ul><li><code>@AutoWired</code>：根据属性类型进行注入</li><li><code>@Qualifier</code>：根据属性名称进行注入（需要和<code>@AutoWired</code>注解一起使用）</li><li><code>@Resource</code>：可以根据属性类型注入，也可以根据属性名称注入</li><li><code>@Value</code>：注入普通类型的属性</li></ul><h6 id="1、-AutoWired注入属性步骤："><a href="#1、-AutoWired注入属性步骤：" class="headerlink" title="1、@AutoWired注入属性步骤："></a>1、<code>@AutoWired</code>注入属性步骤：</h6><ul><li>1、创建service和dao对象，在Service类和Dao类上添加对应的创建对象注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.dao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.dao.impl;<br><br><span class="hljs-keyword">import</span> org.example.spring5.dao.UserDao;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;UserDaoImpl.add&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>2、在Service类中注入dao对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.service;<br><br><span class="hljs-keyword">import</span> org.example.spring5.dao.UserDao;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-comment">//在属性名上面添加@Autowired注解，不需要创建set方法</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserService.add&quot;</span>);<br>        userDao.add();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="2、-Qualifier注解使用方法"><a href="#2、-Qualifier注解使用方法" class="headerlink" title="2、@Qualifier注解使用方法"></a>2、<code>@Qualifier</code>注解使用方法</h6><p>步骤跟<code>@Autowired</code>注解一样，唯一的区别就是需要和<code>@Autowired</code>注解同时使用，并且要指定<code>@Autowired(&quot;属性名称&quot;)</code></p><h6 id="3、-Resource注解使用方法"><a href="#3、-Resource注解使用方法" class="headerlink" title="3、@Resource注解使用方法"></a>3、<code>@Resource</code>注解使用方法</h6><p>如果只写<code>@Resource</code> 代表根据属性类型注入；</p><p>如果写<code>@Resource(name = &quot;属性名称&quot;)</code> 根据属性名称注入。</p><p><code>@Resource</code>注解是javax包下面的，而不是spring中的，所以不推荐使用这个注解</p><h6 id="4、-Value注解使用方法"><a href="#4、-Value注解使用方法" class="headerlink" title="4、@Value注解使用方法"></a>4、<code>@Value</code>注解使用方法</h6><p>直接在属性上面使用</p><h5 id="3、完全注解开发"><a href="#3、完全注解开发" class="headerlink" title="3、完全注解开发"></a>3、完全注解开发</h5><h6 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h6><ul><li><p>1、创建配置类，代替xml配置文件</p><p><code>@Configuration</code>注解：使用<code>proxyBeanMethods=true</code>属性可以保障调用此方法得到的对象是从容器中获取的，而不是重新创建的。它默认就是true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">//代表这是一个配置类，用于替代xml配置文件</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;org.example.spring5&quot;&#125;)</span>  <span class="hljs-comment">//开启组件扫描</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>2、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSpring</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;userService&quot;</span>, UserService.class);<br>    userService.add();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="2、AOP"><a href="#2、AOP" class="headerlink" title="2、AOP"></a>2、AOP</h2><h3 id="2-1、什么是AOP"><a href="#2-1、什么是AOP" class="headerlink" title="2.1、什么是AOP"></a>2.1、什么是AOP</h3><ul><li>AOP：面向切面编程</li><li>不修改源代码，添加新功能</li></ul><h3 id="2-2、AOP的底层原理"><a href="#2-2、AOP的底层原理" class="headerlink" title="2.2、AOP的底层原理"></a>2.2、AOP的底层原理</h3><ul><li>AOP的底层原理是动态代理，有两种动态代理<ul><li>有接口的情况，使用JDK的动态代理：创建接口实现类的代理对象来实现方法的增强</li><li>没有接口的情况，使用CGLIB的动态代理：创建当前类的子类的代理对象来实现方法的增强</li></ul></li></ul><h3 id="2-3、JDK动态代理"><a href="#2-3、JDK动态代理" class="headerlink" title="2.3、JDK动态代理"></a>2.3、JDK动态代理</h3><p>使用Proxy类的newProxyInstance() 方法，会返回一个接口实现类的代理对象</p><p>newProxyInstance() 方法有三个参数，分别是：</p><ul><li><code>ClassLoader loader</code>：代理类的类加载器</li><li><code>Class&lt;?&gt;[] interfaces</code>: 增强方法所在的类实现的接口的class，支持多个</li><li><code>InvocationHandler handler</code>:实现接口InvocationHandler，创建代理对象，写增强的方法</li></ul><h4 id="举例"><a href="#举例" class="headerlink" title="举例:"></a>举例:</h4><p>1、创建一个接口和它的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(String id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a+b;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、定义一个代理类，实现InvocationHandler接口，重写其中的invoke方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-comment">//1、把创建的谁的代理对象，把谁传递过来</span><br>    <span class="hljs-keyword">private</span> Object obj;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDaoProxy</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-built_in">this</span>.obj = obj;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 写增强的逻辑</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Throwable</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;方法之前执行&quot;</span> + method.getName() + <span class="hljs-string">&quot;:传递的参数。。。&quot;</span> + Arrays.toString(args));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> method.invoke(obj, args); <span class="hljs-comment">// 执行方法</span><br>        System.out.println(<span class="hljs-string">&quot;方法之后执行&quot;</span> + obj);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、使用Proxy.newProxuInterface() 方法创建代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDKProxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建接口实现类的代理对象</span><br>        Class[] interfaces = &#123;UserDao.class&#125;;<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">proxyDao</span> <span class="hljs-operator">=</span> (UserDao) Proxy.newProxyInstance(UserDao.class.getClassLoader(), interfaces, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoProxy</span>(userDao));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4、AOP的操作术语"><a href="#2-4、AOP的操作术语" class="headerlink" title="2.4、AOP的操作术语"></a>2.4、AOP的操作术语</h3><ul><li>1、连接点：类中的哪些方法可以被增强，哪些方法就是连接点</li><li>2、切入点：实际上真正被增强的方法就是切入点</li><li>3、通知（增强）：实际上增强的逻辑部分就是增强。有多种类型：<ul><li>前置通知 <code>@Before</code>：在增强的方法之前执行</li><li>后置通知 <code>@AfterReturning</code>：在增强的方法之后执行</li><li>环绕通知 <code>@Around</code>：在增强的方法前后都执行</li><li>异常通知 <code>@AfterThrowing</code>：当增强的方法出现异常时执行。如果出现异常，环绕通知在方法之后不执行，后置通知不执行</li><li>最终通知 <code>@After</code>：类似于finally。不管有没有异常都会执行</li></ul></li><li>4、切面：是一个动作，把 通知 应用到 切入点 的过程就是切面</li></ul><p>切入点的表达式：</p><ul><li>1、切入点表达式的作用：知道对哪个类里面的哪个方法进行增强</li><li>2、语法：<code>execution([权限修饰符][返回类型][全类名][方法名称]([参数列表]))</code><ul><li>权限修饰符可以使用 <code>*</code> 代替，表示任意的修饰符</li><li>返回类型可以省略</li><li>参数列表可以使用 <code>..</code> 表示方法中的参数</li><li>举例1：对 org.example.dao.BookDao 类中的 add 方法进行增强：<code>execution(* org.example.dao.BookDao.add(..)</code></li><li>举例2：对 org.example.dao.BookDao 类中的所有方法进行增强：<code>execution(* org.example.dao.BookDao.*(..))</code></li><li>举例3：对 org.example.dao 包中的所有类，类里边的所有方法进行增强：<code>execution(* org.example.dao.*.*(..))</code></li></ul></li></ul><h3 id="2-5、Spring框架一般基于AspectJ实现AOP操作"><a href="#2-5、Spring框架一般基于AspectJ实现AOP操作" class="headerlink" title="2.5、Spring框架一般基于AspectJ实现AOP操作"></a>2.5、Spring框架一般基于AspectJ实现AOP操作</h3><h4 id="2-5-1、什么是AspectJ"><a href="#2-5-1、什么是AspectJ" class="headerlink" title="2.5.1、什么是AspectJ"></a>2.5.1、什么是AspectJ</h4><p>AspectJ 不是Spring的组成部分，它是单独、独立的AOP框架。一般把AspectJ 和Spring框架一起使用，进行AOP操作</p><h4 id="2-5-2、基于AspectJ-实现AOP操作"><a href="#2-5-2、基于AspectJ-实现AOP操作" class="headerlink" title="2.5.2、基于AspectJ 实现AOP操作"></a>2.5.2、基于AspectJ 实现AOP操作</h4><p><strong>引入依赖：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aop --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aspects --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/aopalliance/aopalliance --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>aopalliance<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aopalliance<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1、基于xml配置文件方式实现（不常用）"><a href="#1、基于xml配置文件方式实现（不常用）" class="headerlink" title="1、基于xml配置文件方式实现（不常用）"></a>1、基于xml配置文件方式实现（不常用）</h5><h6 id="1、创建被增强类和增强类"><a href="#1、创建被增强类和增强类" class="headerlink" title="1、创建被增强类和增强类"></a>1、创建被增强类和增强类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.aopxml;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Book.buy&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.aopxml;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookProxy</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 前置通知</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookProxy.before&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 后置通知</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookProxy.afterReturning&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 异常通知</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookProxy.afterThrowing&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 最终通知</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookProxy.after&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 环绕通知</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> proceedingJoinPoint</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Throwable</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookProxy.around 环绕通知之前&quot;</span>);<br>        proceedingJoinPoint.proceed();<br>        System.out.println(<span class="hljs-string">&quot;BookProxy.around 环绕通知之后&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2、在Spring的xml配置文件中创建两个类对象-并在Spring的xml配置文件中配置切入点"><a href="#2、在Spring的xml配置文件中创建两个类对象-并在Spring的xml配置文件中配置切入点" class="headerlink" title="2、在Spring的xml配置文件中创建两个类对象,并在Spring的xml配置文件中配置切入点"></a>2、在Spring的xml配置文件中创建两个类对象,并在Spring的xml配置文件中配置切入点</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--创建对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring5.aopxml.Book&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookProxy&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.spring5.aopxml.BookProxy&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置AOP的增强--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置切入点--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* org.example.spring5.aopxml.Book.buy(..))&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--配置切面  aop:aspect ref=&quot;增强类对象的id&quot; --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookProxy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--配置增强作用在具体的方法上 aop:before method=&quot;增强类中的方法名&quot; pointcut-red=&quot;上面配置的切入点的id&quot;  --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;p&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterReturning&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;p&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-throwing</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterThrowing&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;p&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;after&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;p&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;around&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;p&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-1、基于注解方式实现（常用）"><a href="#2-1、基于注解方式实现（常用）" class="headerlink" title="2.1、基于注解方式实现（常用）"></a>2.1、基于注解方式实现（常用）</h5><h6 id="1、创建被增强类，在类中定义方法，并使用注解-Component创建被增强类的对象"><a href="#1、创建被增强类，在类中定义方法，并使用注解-Component创建被增强类的对象" class="headerlink" title="1、创建被增强类，在类中定义方法，并使用注解@Component创建被增强类的对象"></a>1、创建被增强类，在类中定义方法，并使用注解<code>@Component</code>创建被增强类的对象</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.aopanno;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 被增强类（连接点）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;User.add&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2、创建增强类，编写增强逻辑，并使用注解-Component创建增强类对象-使用注解-Aspect-生成代理对象，并且通过在对应通知方法上加上对应通知的注解，使用切入点表达式来配置不同类型的通知"><a href="#2、创建增强类，编写增强逻辑，并使用注解-Component创建增强类对象-使用注解-Aspect-生成代理对象，并且通过在对应通知方法上加上对应通知的注解，使用切入点表达式来配置不同类型的通知" class="headerlink" title="2、创建增强类，编写增强逻辑，并使用注解@Component创建增强类对象,使用注解@Aspect 生成代理对象，并且通过在对应通知方法上加上对应通知的注解，使用切入点表达式来配置不同类型的通知"></a>2、创建增强类，编写增强逻辑，并使用注解<code>@Component</code>创建增强类对象,使用注解<code>@Aspect</code> 生成代理对象，并且通过在对应通知方法上加上对应通知的注解，使用切入点表达式来配置不同类型的通知</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.aopanno;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 增强类（切入点）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span>  <span class="hljs-comment">// 生成代理对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 前置通知</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before(value = &quot;execution(* org.example.spring5.aopanno.User.add(..))&quot;)</span>  <span class="hljs-comment">// value可以省略</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserProxy.before&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 后置通知</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@AfterReturning(&quot;execution(* org.example.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserProxy.afterReturning&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 异常通知</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@AfterThrowing(&quot;execution(* org.example.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserProxy.afterThrowing&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 最终通知</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@After(&quot;execution(* org.example.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserProxy.after&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 环绕通知</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Around(&quot;execution(* org.example.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;UserProxy.around 环绕之前&quot;</span>);<br>        proceedingJoinPoint.proceed();  <span class="hljs-comment">// 代表执行目标方法</span><br>        System.out.println(<span class="hljs-string">&quot;UserProxy.around 环绕之后&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3、进行通知的配置"><a href="#3、进行通知的配置" class="headerlink" title="3、进行通知的配置"></a>3、进行通知的配置</h6><p>在Spring的xml配置文件中，引入context和aop命名空间，然后开启组件扫描；并开启生成代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xmlns:context=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span>  引入context命名空间<br>       xmlns:aop=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span>   引入aop命名空间<br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="hljs-string">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd  引入context命名空间</span><br><span class="hljs-string">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;  引入aop命名空间<br><br>    &lt;!--开启组件扫描--&gt;<br>    &lt;context:component-scan base-<span class="hljs-keyword">package</span>=<span class="hljs-string">&quot;org.example.spring5.aopanno&quot;</span>/&gt;<br><br>    &lt;!--开启AspectJ 生成代理对象  aop:aspectj-autoproxy：寻找<span class="hljs-meta">@Aspect</span>注解，只要有这个注解就会自动生成代理对象--&gt;<br>    &lt;aop:aspectj-autoproxy/&gt;<br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure><h5 id="2-2、基于注解方式实现的细节"><a href="#2-2、基于注解方式实现的细节" class="headerlink" title="2.2、基于注解方式实现的细节"></a>2.2、基于注解方式实现的细节</h5><h6 id="2-2-1、当有多个不同类型的通知对同一个切入点进行增强时，提取相同的切入点表达式"><a href="#2-2-1、当有多个不同类型的通知对同一个切入点进行增强时，提取相同的切入点表达式" class="headerlink" title="2.2.1、当有多个不同类型的通知对同一个切入点进行增强时，提取相同的切入点表达式"></a>2.2.1、当有多个不同类型的通知对同一个切入点进行增强时，提取相同的切入点表达式</h6><p>首先在增强类中定义一个方法，在新定义的方法上加上注解<code>@Pointcut(&quot;切入点表达式&quot;)</code>，然后在通知注解中将切入点表达式替换成新定义的方法名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.aopanno;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 增强类（切入点）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span>  <span class="hljs-comment">// 生成代理对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br><br>    <span class="hljs-comment">//把相同的切入点进行抽取</span><br>    <span class="hljs-meta">@Pointcut(value = &quot;execution(* org.example.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointDemo</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 前置通知</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before(value = &quot;pointDemo()&quot;)</span>  <span class="hljs-comment">// value可以省略</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;UserProxy.before&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 后置通知</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@AfterReturning(&quot;pointDemo()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;UserProxy.afterReturning&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 异常通知</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@AfterThrowing(&quot;pointDemo()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;UserProxy.afterThrowing&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 最终通知</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@After(&quot;pointDemo()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;UserProxy.after&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 环绕通知</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Around(&quot;pointDemo()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;UserProxy.around 环绕之前&quot;</span>);<br>        proceedingJoinPoint.proceed();  <span class="hljs-comment">// 代表执行目标方法</span><br>        System.out.println(<span class="hljs-string">&quot;UserProxy.around 环绕之后&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-2-2、当有多个增强类对同一个方法进行增强时，可以设置增强类的优先级"><a href="#2-2-2、当有多个增强类对同一个方法进行增强时，可以设置增强类的优先级" class="headerlink" title="2.2.2、当有多个增强类对同一个方法进行增强时，可以设置增强类的优先级"></a>2.2.2、当有多个增强类对同一个方法进行增强时，可以设置增强类的优先级</h6><p>可以在不同的增强类上面加上注解<code>@Order(数字类型的值)</code>。这个数字类型的值越小，优先级越高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.aopanno;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<br><span class="hljs-keyword">import</span> org.springframework.core.annotation.Order;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Order(1)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonProxy</span> &#123;<br><br>    <span class="hljs-meta">@Before(&quot;execution(* org.example.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;PersonProxy.before&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-2-3、完全使用注解"><a href="#2-2-3、完全使用注解" class="headerlink" title="2.2.3、完全使用注解"></a>2.2.3、完全使用注解</h6><p>完全注解启动时可以使用 <code>@EnableAspectJAutAoProxy(proxyTargetClass = true)</code> 注解来替换xml中的 <code>&lt;aop:aspectj-autoproxy/&gt;</code> 标签，用于将加了@Aspect注意的类生成代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.aopanno.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;org.example.spring5.aopanno&quot;)</span><br><span class="hljs-meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span>  <span class="hljs-comment">// 替代xml中的&lt;aop:aspectj-autoproxy/&gt;标签，用于将加了@Aspect注解的类生成代理对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、JdbcTemplate"><a href="#3、JdbcTemplate" class="headerlink" title="3、JdbcTemplate"></a>3、JdbcTemplate</h2><h3 id="3-1、什么是JdbcTemplate"><a href="#3-1、什么是JdbcTemplate" class="headerlink" title="3.1、什么是JdbcTemplate"></a>3.1、什么是JdbcTemplate</h3><ul><li>Spring框架对JDBC进行了封装，使用JdbcTemplate 可以实现方便的对数据库进行操作</li></ul><h3 id="3-2、准备工作"><a href="#3-2、准备工作" class="headerlink" title="3.2、准备工作"></a>3.2、准备工作</h3><h4 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-tx --&gt;</span><br>        <span class="hljs-comment">&lt;!--事务--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-orm --&gt;</span><br>        <span class="hljs-comment">&lt;!--整合其他框架用--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-orm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、在Spring的xml配置文件中配置数据库连接池；配置JdbcTemplate对象，注入DataSource；开启组件扫描"><a href="#2、在Spring的xml配置文件中配置数据库连接池；配置JdbcTemplate对象，注入DataSource；开启组件扫描" class="headerlink" title="2、在Spring的xml配置文件中配置数据库连接池；配置JdbcTemplate对象，注入DataSource；开启组件扫描"></a>2、在Spring的xml配置文件中配置数据库连接池；配置JdbcTemplate对象，注入DataSource；开启组件扫描</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--数据库连接池的配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://主机:端口/spring&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--创建JdbcTemplate的对象,注入dataSource--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--开启组件扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.example.spring5&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3、创建service类、dao类，并在类上加上对应的注解，将它们交给Spring管理；在dao中注入jdbcTemplate对象"><a href="#3、创建service类、dao类，并在类上加上对应的注解，将它们交给Spring管理；在dao中注入jdbcTemplate对象" class="headerlink" title="3、创建service类、dao类，并在类上加上对应的注解，将它们交给Spring管理；在dao中注入jdbcTemplate对象"></a>3、创建service类、dao类，并在类上加上对应的注解，将它们交给Spring管理；在dao中注入jdbcTemplate对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.dao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.dao.impl;<br><br><span class="hljs-keyword">import</span> org.example.spring5.dao.BookDao;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br>    <span class="hljs-comment">//注入JdbcTemplate</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.service;<br><br><span class="hljs-keyword">import</span> org.example.spring5.dao.BookDao;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3、操作数据库"><a href="#3-3、操作数据库" class="headerlink" title="3.3、操作数据库"></a>3.3、操作数据库</h3><h4 id="1、增加、修改、删除操作"><a href="#1、增加、修改、删除操作" class="headerlink" title="1、增加、修改、删除操作"></a>1、增加、修改、删除操作</h4><p><strong>调用 <code>jdbcTemplate.update(String sql,Object... args)</code> 方法实现添加操作</strong></p><p>举例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Book book)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into t_book values(?,?,?)&quot;</span>;<br>    Object[] args = &#123;book.getUserId(), book.getUsername(), book.getUstatus()&#125;;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">insert</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql, args);<br>    System.out.println(<span class="hljs-string">&quot;insert = &quot;</span> + insert);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、查询操作"><a href="#2、查询操作" class="headerlink" title="2、查询操作"></a>2、查询操作</h4><h5 id="2-1、查询返回某个值"><a href="#2-1、查询返回某个值" class="headerlink" title="2.1、查询返回某个值"></a>2.1、查询返回某个值</h5><p><strong>调用 <code>jdbcTemplate.queryForObject(String sql,Class&lt;T&gt; 返回值类型.class)</code>方法实现查询某个值</strong> </p><h5 id="2-2、查询返回对象"><a href="#2-2、查询返回对象" class="headerlink" title="2.2、查询返回对象"></a>2.2、查询返回对象</h5><p>**调用 <code>jdbcTemplate.queryForObject(String sql,RowMapper&lt;T&gt; rowMapper,Class&lt;T&gt; 返回值类型.class)</code>方法实现查询某个对象 **</p><p>其中RowMapper是一个接口，用于返回不同类型的数据。使用这个接口中的实现类完成数据的封装。一般常用它的实现类BeanPropertyRowMapper来处理</p><h5 id="2-3、查询返回集合"><a href="#2-3、查询返回集合" class="headerlink" title="2.3、查询返回集合"></a>2.3、查询返回集合</h5><p><strong>调用 <code>jdbcTemplate.query(String sql,RowMapper&lt;T&gt; rowMapper,Class&lt;T&gt; 返回值类型.class)</code> 方法实现查询集合</strong></p><h4 id="3、批量操作"><a href="#3、批量操作" class="headerlink" title="3、批量操作"></a>3、批量操作</h4><p><strong>批量添加、修改、删除</strong></p><p><strong>调用 <code>jdbcTemplate.batchUpdate(String sql,List&lt;Object []&gt; batchArgs)</code> 来实现批量操作</strong></p><h2 id="4、事务操作"><a href="#4、事务操作" class="headerlink" title="4、事务操作"></a>4、事务操作</h2><h3 id="4-1、什么是事务"><a href="#4-1、什么是事务" class="headerlink" title="4.1、什么是事务"></a>4.1、什么是事务</h3><p>事务是数据库操作最基本的单元，是指逻辑上的一组操作。如果有一个操作失败，那就都失败</p><h3 id="4-2、事务有4大特性-ACID"><a href="#4-2、事务有4大特性-ACID" class="headerlink" title="4.2、事务有4大特性 ACID"></a>4.2、事务有4大特性 ACID</h3><ul><li>原子性：事务中的所有操作要么全部完成，要么全部不完成，不会出现部分完成的情况。如果事务在执行过程中发生了错误，所有的操作都会被回滚到事务开始前的状态，保证数据的一致性。</li><li>一致性：事务执行前后，数据库的完整性约束没有被破坏。在事务执行过程中，如果数据不满足约束条件，则事务会被回滚，保证数据的一致性和完整性</li><li>隔离性：多个事务同时执行时，每个事务都应该感觉不到其他事务的存在。事务之间要相互隔离，保证并发执行的正确性。数据库系统提供了四种隔离级别：读未提交（Read Uncommitted）、读已提交（Read Committed）、可重复读（Repeatable Read）、串行化（Serializable）。</li><li>持久性：事务完成后，对数据库的修改是永久性的，即使系统崩溃也不会丢失。数据库系统会将事务的结果写入到永久存储器中，保证数据的持久性。</li></ul><h3 id="4-3、Spring事务管理"><a href="#4-3、Spring事务管理" class="headerlink" title="4.3、Spring事务管理"></a>4.3、Spring事务管理</h3><h4 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h4><p>事务管理通常加到Service层</p><p>在Spring进行事务管理操作有两种方式：</p><ul><li><strong>声明式事务管理（使用）</strong></li><li>编程式事务管理</li></ul><p>声明式事务管理有两种方式：</p><ul><li><strong>基于注解方式（方便）</strong></li><li>基于xml配置文件方式</li></ul><p>在Spring中进行声明式事务管理，底层使用AOP原理</p><h4 id="2、事务管理相关API接口"><a href="#2、事务管理相关API接口" class="headerlink" title="2、事务管理相关API接口"></a>2、事务管理相关API接口</h4><p>提供了一个<strong>接口（PlatformTransactionManager）</strong>，代表事务管理器。这个接口针对不同框架提供了不同的实现类</p><p>对于Jdbc模板和MyBatis框架提供的实现类都是<strong>DataSourceTransactionManager</strong></p><h4 id="3、注解方式实现声明式事务管理"><a href="#3、注解方式实现声明式事务管理" class="headerlink" title="3、注解方式实现声明式事务管理"></a>3、注解方式实现声明式事务管理</h4><ul><li><p>1、在Spring 的xml配置文件中配置事务管理器；开启事务注解，并指出使用的是哪个事务管理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span>  <span class="hljs-attr">新的命名空间tx</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span>  新的命名空间tx<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.example.spring5&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://主机:端口/数据库&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;用户名&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;密码&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--创建事务管理器：DataSourceTransactionManager--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--开启事务注解,在其中指出使用的是哪个事务管理器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>2、在Service类或者方法上添加事务注解<code>@Transactional</code></p><p><code>@Transactional</code>这个注解既可以添加在类上，也可以添加到方法上 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.service;<br><br><span class="hljs-keyword">import</span> org.example.spring5.dao.UserDao;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accountMoney</span><span class="hljs-params">()</span> &#123;<br><br>        userDao.reduceMoney();<br>        <span class="hljs-comment">//模拟异常</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>        userDao.addMoney();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="4、-Transactional注解参数配置"><a href="#4、-Transactional注解参数配置" class="headerlink" title="4、@Transactional注解参数配置"></a>4、<code>@Transactional</code>注解参数配置</h4><ul><li><p><font color=#3271ae><strong><code>propagation</code></strong></font>：设置事务的传播行为。默认值为<code>Propagation.REQUIRED</code>，表示方法需要在一个事务中执行。</p><ul><li><p>1、<font color=#3271ae><strong><code>REQUIRED</code></strong> </font>表示当前方法必须运行在事务中，如果当前存在事务，则加入该事务，否则创建一个新的事务。<font color=#3271ae>这个传播行为适用于需要保证方法和方法之间的事务一致性的情况，<strong>例如在一个方法中调用了另一个方法，这两个方法需要在同一个事务中执行。</strong></font></p></li><li><p>2、**<code>REQUIRES_NEW</code>** 表示当前方法必须运行在一个新的事务中，如果当前存在事务，则挂起该事务，并创建一个新的事务。这个传播行为适用于需要在方法中执行独立的事务，不受外部事务的影响，<strong>例如需要在方法中进行数据的修改或删除操作。如果方法执行过程中发生异常，只会回滚当前方法的事务，不会影响外部事务的执行。</strong></p></li><li><p>3、**<code>SUPPORTS</code>** 表示当前方法不需要事务支持，如果当前存在事务，则加入该事务，否则以非事务方式运行。这个传播行为适用于不需要在方法中进行数据库操作，或者需要在方法中进行只读操作的情况，<strong>例如查询操作。</strong></p></li><li><p>4、<code>MANDATORY</code> 表示当前方法必须运行在事务中，如果当前不存在事务，则抛出异常。</p></li><li><p>5、<code>NOT_SUPPORTED</code> 表示当前方法不需要事务支持，如果当前存在事务，则挂起该事务，并以非事务方式运行。</p></li><li><p>6、<code>NEVER</code> 表示当前方法不允许运行在事务中，如果当前存在事务，则抛出异常。</p></li><li><p>7、<code>NESTED</code> 表示当前方法必须运行在一个嵌套事务中，如果当前存在事务，则在该事务的上下文中运行，否则创建一个新的嵌套事务。</p></li></ul></li><li><p><font color=#3271ae><strong><code>isolation</code></strong></font>：设置事务的隔离级别。默认值为<code>Isolation.DEFAULT</code>，表示使用数据库的默认隔离级别。其他可选值包括<code>Isolation.READ_UNCOMMITTED</code>、<code>Isolation.READ_COMMITTED</code>、<code>Isolation.REPEATABLE_READ</code>和<code>Isolation.SERIALIZABLE</code>等。其中MySQL数据库默认使用的隔离级别是：<strong>repeatable_read</strong></p><ul><li><p>在并发事务执行的情况下，可能会出现以下三种问题：</p><ol><li>脏读：一个事务读取了另一个事务还未提交的数据，然后基于这个未提交的数据进行了操作。如果这个事务回滚，那么所读取的数据就是无效的，这就是脏读。</li><li>不可重复读：一个事务读取了同一行数据两次，但是在两次读取之间，另一个事务修改了该行数据，导致第二次读取的数据与第一次读取的数据不一致。这就是不可重复读。</li><li>幻读：一个事务读取了一组数据，然后另一个事务插入了一行数据，导致第一个事务再次读取这组数据时，发现该组数据中多了一行数据，这就是幻读。</li></ol><p>这三种问题的区别在于，脏读主要发生在写操作上，不可重复读主要发生在修改操作上，幻读主要发生在插入和删除操作上。为了避免这些问题，需要使用合适的事务隔离级别。</p></li><li><p>事务的隔离级别共有四种，分别是：</p><ol><li><code>READ_UNCOMMITTED</code>：读未提交。在该隔离级别下，一个事务可以读取另一个事务还未提交的数据，可能会出现脏读、不可重复读和幻读的问题。</li><li><code>READ_COMMITTED</code>：读已提交。在该隔离级别下，一个事务只能读取另一个事务已经提交的数据，可以避免脏读的问题，但是可能会出现不可重复读和幻读的问题。</li><li><code>REPEATABLE_READ</code>：可重复读。在该隔离级别下，一个事务在执行期间多次读取同一行数据时，会保证数据的一致性，避免了不可重复读的问题，但是可能会出现幻读的问题。</li><li><code>SERIALIZABLE</code>：串行化。在该隔离级别下，所有事务串行执行，避免了脏读、不可重复读和幻读的问题，但是会降低并发性能。</li></ol></li></ul></li><li><p><code>timeout</code>：设置事务的超时时间，单位为秒。<strong>默认值为-1</strong>，表示没有超时限制。</p><ul><li>事务需要在一定时间内进行提交，如果在规定时间内不提交进行回滚</li></ul></li><li><p><code>readOnly</code>：设置事务是否为只读事务。<strong>默认值为false</strong>，表示事务可以读取和修改数据。如果设置为true，则只能读取数据，不能修改数据，这样可以提高事务的并发性能。</p></li><li><p><code>rollbackFor</code>和<code>noRollbackFor</code>：指定需要回滚的异常类型和不需要回滚的异常类型。如果出现指定的异常类型，则事务会回滚；如果出现指定的异常类型之外的异常，则事务不会回滚。可以使用<code>value</code>属性指定多个异常类型。</p></li></ul><h4 id="5、xml方式实现声明式事务管理"><a href="#5、xml方式实现声明式事务管理" class="headerlink" title="5、xml方式实现声明式事务管理"></a>5、xml方式实现声明式事务管理</h4><h5 id="开启组件扫描；配置数据源；配置Jdbc模板；配置事务管理器；配置事务的通知；配置切入点和切面"><a href="#开启组件扫描；配置数据源；配置Jdbc模板；配置事务管理器；配置事务的通知；配置切入点和切面" class="headerlink" title="开启组件扫描；配置数据源；配置Jdbc模板；配置事务管理器；配置事务的通知；配置切入点和切面"></a>开启组件扫描；配置数据源；配置Jdbc模板；配置事务管理器；配置事务的通知；配置切入点和切面</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--开启组件扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.example.spring5&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置数据源dataSource--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://主机:端口/spring&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;用户名&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;密码&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置jdbc模板--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置事务管理器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置通知，利用tx:advice--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txadvice&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置事务的相关参数--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--指定在哪种规则的方法上面添加事务--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;accountMoney&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置切入点和切面--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置切入点--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pt&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* org.example.spring5.service.UserService.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--配置切面：给切入点上设置事务的通知--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txadvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pt&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="6、全注解方式实现声明式事务管理"><a href="#6、全注解方式实现声明式事务管理" class="headerlink" title="6、全注解方式实现声明式事务管理"></a>6、全注解方式实现声明式事务管理</h4><h5 id="创建配置类，在配置类中添加注解来替代xml文件"><a href="#创建配置类，在配置类中添加注解来替代xml文件" class="headerlink" title="创建配置类，在配置类中添加注解来替代xml文件"></a>创建配置类，在配置类中添加注解来替代xml文件</h5><p>@EnableTransactionManagement会自动配置一个基于注解的事务管理器，它会扫描所有被@Transactional注解标记的方法，并在这些方法执行时开启事务。当方法执行成功时，它会提交事务，否则会回滚事务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.config;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">// 代表这是个配置类</span><br><span class="hljs-meta">@ComponentScan(basePackages = &quot;org.example.spring5&quot;)</span>  <span class="hljs-comment">// 开启组件扫描</span><br><span class="hljs-meta">@EnableTransactionManagement</span>  <span class="hljs-comment">// 自动配置一个基于注解的事务管理器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TxConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建数据库连接池DataSource</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title function_">getDruidDataSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://主机:端口/spring&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;用户名&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;密码&quot;</span>);<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建JdbcTemplate</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataSource 从IOC容器中自动查找DataSource，也就是上面这个方法创建的DataSource</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title function_">getJdbcTemplate</span><span class="hljs-params">(DataSource dataSource)</span> &#123;<br>        <span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">jdbcTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>();<br>        jdbcTemplate.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> jdbcTemplate;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置事务管理器</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataSource</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSourceTransactionManager <span class="hljs-title function_">getDataSourceTransactionManager</span><span class="hljs-params">(DataSource dataSource)</span> &#123;<br>        <span class="hljs-type">DataSourceTransactionManager</span> <span class="hljs-variable">dataSourceTransactionManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>();<br>        dataSourceTransactionManager.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> dataSourceTransactionManager;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="5、Spring5框架的一些新功能"><a href="#5、Spring5框架的一些新功能" class="headerlink" title="5、Spring5框架的一些新功能"></a>5、Spring5框架的一些新功能</h2><h3 id="1、整合第三方日志工具Log4j2"><a href="#1、整合第三方日志工具Log4j2" class="headerlink" title="1、整合第三方日志工具Log4j2"></a>1、整合第三方日志工具Log4j2</h3><p>Spring5框架自带了通用的日志封装，但是也能自己整合其他的第三方日志工具，比如<code>Log4j</code></p><p>Spring5已经移除Log4jConfigListener，官方建议使用Log4j2</p><h4 id="1-1、引入依赖"><a href="#1-1、引入依赖" class="headerlink" title="1.1、引入依赖"></a>1.1、引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-2、创建log4j2-xml-配置文件（文件名是固定的）"><a href="#1-2、创建log4j2-xml-配置文件（文件名是固定的）" class="headerlink" title="1.2、创建log4j2.xml 配置文件（文件名是固定的）"></a>1.2、创建log4j2.xml 配置文件（文件名是固定的）</h4><p>日志：ERROR &gt; WARN &gt; INFO &gt; DEBUG</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span><br><span class="hljs-comment">&lt;!--Configuration 后面的 status 用于设置 log4j2 自身内部的信息输出，可以不设置，当设置成 trace 时，可以看到 log4j2 内部各种详细输出--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">status</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--先定义所有的 appender--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appenders</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--输出日志信息到控制台--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Console&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;SYSTEM_OUT&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--控制日志输出的格式--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">console</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appenders</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--然后定义 logger，只有定义 logger 并引入的 appender，appender 才会生效!--&gt;</span><br>    <span class="hljs-comment">&lt;!--root：用于指定项目的根日志，如果没有单独指定 Logger，则会使用 root 作为默认的日志输出--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">loggers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Console&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">loggers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>通过上面两步，就可以在Spring5中整合Log4j2日志框架了。</strong></p><p><strong>另外，也可以自己在控制台手动输入日志：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserLog</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(UserLog.class);<br>    <br>    方法() &#123;<br>    log.warn/error/info...(<span class="hljs-string">&quot;手动输出日志&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、Spring5框架核心容器支持-Nullable注解"><a href="#2、Spring5框架核心容器支持-Nullable注解" class="headerlink" title="2、Spring5框架核心容器支持@Nullable注解"></a>2、Spring5框架核心容器支持<code>@Nullable</code>注解</h3><ul><li>@Nullable 注解可以使用在方法上、属性上、参数上。表示方法返回值可以为空，属性值可以为空，参数值可以为空</li></ul><h3 id="3、Spring5核心容器支持函数时风格GenericApplicationContext"><a href="#3、Spring5核心容器支持函数时风格GenericApplicationContext" class="headerlink" title="3、Spring5核心容器支持函数时风格GenericApplicationContext"></a>3、Spring5核心容器支持函数时风格GenericApplicationContext</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//函数式风格</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGenericApplicationContext</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">GenericApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericApplicationContext</span>();<br>    <span class="hljs-comment">//注册对象</span><br>    context.refresh();<br>    context.registerBean(<span class="hljs-string">&quot;user1&quot;</span>, User.class, () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>());<br>    <span class="hljs-comment">//获取在Spring中注册的对象</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) context.getBean(<span class="hljs-string">&quot;user1&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、整合JUnit4单元测试"><a href="#4、整合JUnit4单元测试" class="headerlink" title="4、整合JUnit4单元测试"></a>4、整合JUnit4单元测试</h3><h4 id="4-1、引入依赖"><a href="#4-1、引入依赖" class="headerlink" title="4.1、引入依赖"></a>4.1、引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-2、加上注解"><a href="#4-2、加上注解" class="headerlink" title="4.2、加上注解"></a>4.2、加上注解</h4><ul><li><code>@RunWith</code>：用于指定当前使用的是哪个版本的JUnit</li><li><code>@ContextConfiguration</code>：它告诉JUnit测试类在运行测试之前需要加载哪些Spring配置文件或注解，从而创建Spring应用程序上下文</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.test;<br><br><span class="hljs-keyword">import</span> org.example.spring5.service.UserService;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<br><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span>  <span class="hljs-comment">//@RunWith注解用于指定当前使用的是哪个版本的JUnit</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:bean1.xml&quot;)</span><span class="hljs-comment">// 加载配置文件,等价于 ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;);  然后就可以在下面利用@AutoWired注解直接注入对象了</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JTest4</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        userService.accountMoney();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5、整合JUnit5单元测试"><a href="#5、整合JUnit5单元测试" class="headerlink" title="5、整合JUnit5单元测试"></a>5、整合JUnit5单元测试</h3><h4 id="5-1、引入依赖"><a href="#5-1、引入依赖" class="headerlink" title="5.1、引入依赖"></a>5.1、引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.9.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-2、加入JUnit5的新注解"><a href="#5-2、加入JUnit5的新注解" class="headerlink" title="5.2、加入JUnit5的新注解"></a>5.2、加入JUnit5的新注解</h4><ul><li>@ExtendWith(SpringExtension.class)<br>@ContextConfiguration(“classpath:bean1.xml”)</li><li>@SpringJUnitConfig (location&#x3D;”classpath:bean1.xml”)  这个注解等同于上面两个注解之和，作用是告诉JUnit测试类在运行测试之前需要加载哪些Spring配置文件或注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.spring5.test;<br><br><span class="hljs-keyword">import</span> org.example.spring5.service.UserService;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.extension.ExtendWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit.jupiter.SpringExtension;<br><br><span class="hljs-meta">@ExtendWith(SpringExtension.class)</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:bean1.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JTest5</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        userService.accountMoney(); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、MyBatis"><a href="#二、MyBatis" class="headerlink" title="二、MyBatis"></a>二、MyBatis</h1><p>MySQL不同版本的注意事项：</p><ul><li><p>1、驱动类driver-class-name</p><ul><li>MySQL5使用jdbc5驱动，驱动类使用：<code>com.mysql.jdbc.Driver</code></li><li>MySQL8使用jdbc8驱动，驱动类使用：<code>com.mysql.cj.jdbc.Driver</code></li></ul></li><li><p>2、连接地址url</p><ul><li>MySQL5版本的url：<code>jdbc:mysql://localhost:3306/ssm</code></li><li>MySQL8版本的url：<code>jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</code></li></ul></li></ul><h2 id="1、搭建MyBatis"><a href="#1、搭建MyBatis" class="headerlink" title="1、搭建MyBatis"></a>1、搭建MyBatis</h2><h3 id="1-1、创建maven工程，引入依赖"><a href="#1-1、创建maven工程，引入依赖" class="headerlink" title="1.1、创建maven工程，引入依赖"></a>1.1、创建maven工程，引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--MyBatis核心--&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--junit--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--MySQL驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-2、创建表"><a href="#1-2、创建表" class="headerlink" title="1.2、创建表"></a>1.2、创建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_user` (<br>  `id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `password` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `age` <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `gender` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `email` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8mb4_0900_ai_ci;<br></code></pre></td></tr></table></figure><h3 id="1-3、创建实体类"><a href="#1-3、创建实体类" class="headerlink" title="1.3、创建实体类"></a>1.3、创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mybatis.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(Integer id, String username, String password, Integer age, String gender, String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">(String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, email=&#x27;&quot;</span> + email + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4、创建MyBatis-的核心配置文件"><a href="#1-4、创建MyBatis-的核心配置文件" class="headerlink" title="1.4、创建MyBatis 的核心配置文件"></a>1.4、创建MyBatis 的核心配置文件</h3><p>核心配置文件主要用于配置数据库的环境以及MyBatis的全局配置信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置连接数据库的环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--事务管理器--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--数据源--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://主机:端口/数据库?serverTimezone=UTC&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;用户名&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;密码&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入MyBatis的映射文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-5、创建Mapper接口"><a href="#1-5、创建Mapper接口" class="headerlink" title="1.5、创建Mapper接口"></a>1.5、创建Mapper接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mybatis.mapper;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6、创建MyBatis的映射文件"><a href="#1-6、创建MyBatis的映射文件" class="headerlink" title="1.6、创建MyBatis的映射文件"></a>1.6、创建MyBatis的映射文件</h3><p>MyBatis映射文件存放的位置是src&#x2F;main&#x2F;resources&#x2F;mappers目录下</p><p>MyBatis中可以面向接口操作数据，要保证两个一致：</p><ul><li>mapper接口的<font color=#3271ae><strong>全类名</strong></font>和映射文件的<font color=#3271ae><strong>命名空间（namespace）</strong></font>保持一致</li><li>mapper接口中方法的<font color=#3271ae><strong>方法名</strong></font>和映射文件中编写SQL的标签的<font color=#3271ae><strong>id属性</strong></font>保持一致</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--注意这个命名空间是 对应的Mapper接口的全类名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.example.mybatis.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- id 要和 方法名 保持一致 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span>&gt;</span><br>        insert into t_user values (null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;123456@qq.com&#x27;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-7、测试"><a href="#1-7、测试" class="headerlink" title="1.7、测试"></a>1.7、测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mybatis.test;<br><br><span class="hljs-keyword">import</span> com.example.mybatis.mapper.UserMapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//1、获取核心配置文件的输入流(读取)</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>        <span class="hljs-comment">//2、获取SqlSessionFactoryBuilder对象</span><br>        <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(is);<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-comment">//3、获取UserMapper的代理实现类对象</span><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>        <span class="hljs-comment">//4、执行方法</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> userMapper.addUser();<br>        System.out.println(<span class="hljs-string">&quot;res = &quot;</span> + res);<br>        <span class="hljs-comment">//5、利用这种方式创建的sqlSession不会自动提交事务。手动提交事务</span><br>        sqlSession.commit();<br>        <span class="hljs-comment">//6、关闭sqlSession对象</span><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-8、加入log4j日志功能（可选）"><a href="#1-8、加入log4j日志功能（可选）" class="headerlink" title="1.8、加入log4j日志功能（可选）"></a>1.8、加入log4j日志功能（可选）</h3><h4 id="1、引入依赖-1"><a href="#1、引入依赖-1" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--log4j--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、创建log4j-xml配置文件"><a href="#2、创建log4j-xml配置文件" class="headerlink" title="2、创建log4j.xml配置文件"></a>2、创建<code>log4j.xml</code>配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">log4j</span>:configuration <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;log4j.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">log4j:configuration</span> <span class="hljs-attr">xmlns:log4j</span>=<span class="hljs-string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Encoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125;%m (%F:%L) \n&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;java.sql&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.apache.ibatis&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;info&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">log4j:configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>log4j的日志的级别</strong></p><p>FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试)</p><p>从左到右打印的内容越来越详细</p><h2 id="2、MyBatis-的核心配置文件：mybatis-config-xml"><a href="#2、MyBatis-的核心配置文件：mybatis-config-xml" class="headerlink" title="2、MyBatis 的核心配置文件：mybatis-config.xml"></a>2、MyBatis 的核心配置文件：mybatis-config.xml</h2><h3 id="2-1、标签"><a href="#2-1、标签" class="headerlink" title="2.1、&lt;environments&gt;标签"></a>2.1、<code>&lt;environments&gt;</code>标签</h3><ul><li><code>&lt;environments&gt;</code>标签：配置多个连接数据库的环境<ul><li>default属性：设置默认使用的环境的id【<code>&lt;environment&gt;</code>标签的id】</li></ul></li><li><code>&lt;environment&gt;</code>标签：设置一个具体的连接数据库的环境<ul><li>id属性：设置环境的唯一标识，不能重复</li></ul></li><li><code>&lt;transactionManager&gt;</code>标签：设置事务管理器<ul><li>type属性：设置事务管理的方式，取值有两种：JDBC &#x2F; MANAGED<ul><li>JDBC：表示使用JDBC中原生的事务管理方式</li><li>MANAGED：被管理，例如Spring</li></ul></li></ul></li><li><code>&lt;dataSource&gt;</code>标签：设置数据源<ul><li>type属性：设置数据源的类型，取值有三种：POOLED &#x2F; UNPOOLED &#x2F;JNDI<ul><li>POOLED：表示使用数据库连接池</li><li>UNPOOLED：表示不使用数据库连接池</li><li>JNDI：表示使用上下文中的数据源</li></ul></li></ul></li></ul><h3 id="2-2、标签"><a href="#2-2、标签" class="headerlink" title="2.2、&lt;properties&gt;标签"></a>2.2、<code>&lt;properties&gt;</code>标签</h3><ul><li><code>&lt;properties&gt;</code>标签：用于引入外部的properties文件<ul><li>resource属性：properties文件的全路径</li></ul></li></ul><p>使用<code>&lt;properties&gt;</code>标签引入了外部的properties文件之后，就可以使用<code>$&#123;key&#125;</code>的方式访问value</p><h3 id="2-3、标签"><a href="#2-3、标签" class="headerlink" title="2.3、&lt;typeAliases&gt;标签"></a>2.3、<code>&lt;typeAliases&gt;</code>标签</h3><p>Mybatis核心配置文件中的标签必须按照指定的顺序配置：<code>properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?</code></p><ul><li><code>&lt;typeAliases&gt;</code>标签：设置类型别名。可以为某个具体的类型设置一个别名</li><li><code>&lt;typeAliase&gt;</code>标签：设置具体的别名<ul><li>type属性：类型</li><li>alias：别名</li></ul></li><li><code>&lt;package&gt;</code>标签：通过包设置类型别名，指定包下所有的类型，将全部拥有默认的别名，也就是它的类名，并且不区分大小写<ul><li>name属性：包路径</li></ul></li></ul><p><strong>举例：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--类型别名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--为User类设置别名user，之后在映射文件中设置resultType的时候，就可以使用user来代替User类的全类名了--&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;typeAlias type=&quot;com.example.mybatis.pojo.User&quot; alias=&quot;user&quot;/&gt; --&gt;</span><br>    <span class="hljs-comment">&lt;!--在设置别名的时候，设置了type属性之后，如果不设置alias属性，会有一个默认的别名，就是它的类型名，并且不区分大小写--&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;typeAlias type=&quot;com.example.mybatis.pojo.User&quot;/&gt; --&gt;</span><br>    <span class="hljs-comment">&lt;!--通过包设置类型别名，指定包下所有的类型，将全部拥有默认的别名，也就是它的类名，并且不区分大小写--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.example.mybatis.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-4、标签"><a href="#2-4、标签" class="headerlink" title="2.4、&lt;mappers&gt;标签"></a>2.4、<code>&lt;mappers&gt;</code>标签</h3><ul><li><code>&lt;mappers&gt;</code>标签：引入MyBatis 的映射文件</li><li><code>&lt;mapper&gt;</code>标签：引入具体的映射文件<ul><li>resource属性：映射文件的路径</li></ul></li><li><code>&lt;package&gt;</code>标签：通过包来引入映射文件。要求当前映射文件所在的包要和mapper接口所在的包一样；映射文件的名字要和Mapper接口的名字一样<ul><li>name：包路径</li></ul></li></ul><h2 id="3、使用idea定义模板文件"><a href="#3、使用idea定义模板文件" class="headerlink" title="3、使用idea定义模板文件"></a>3、使用idea定义模板文件</h2><p><img src="/img/ssm_img/%E4%BD%BF%E7%94%A8idea%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF.jpg" alt="使用idea自定义模板"></p><h2 id="4、MyBatis获取参数值"><a href="#4、MyBatis获取参数值" class="headerlink" title="4、MyBatis获取参数值"></a>4、MyBatis获取参数值</h2><p>MyBatis获取参数值的两种方式：<code>$&#123;&#125;</code>和<code>#&#123;&#125;</code></p><p><code>$&#123;&#125;</code>的本质就是字符串拼接，<code>#&#123;&#125;</code>的本质就是占位符赋值</p><ul><li><code>$&#123;&#125;</code>使用字符串拼接的方式拼接sql，如果是字符串类型或日期类型的字段进行赋值时，需要手动加单引号</li><li><code>#&#123;&#125;</code>使用占位符赋值的方式拼接sql，可以自动添加单引号；可以避免sql注入<strong>【常用】</strong></li></ul><h3 id="4-1、参数是单个基本数据类型或者String类型"><a href="#4-1、参数是单个基本数据类型或者String类型" class="headerlink" title="4.1、参数是单个基本数据类型或者String类型"></a>4.1、参数是单个基本数据类型或者String类型</h3><p>在映射文件中使用<code>#&#123;任意字符&#125;</code>代表这个参数</p><h3 id="4-2、参数是多个基本数据类型或者String类型"><a href="#4-2、参数是多个基本数据类型或者String类型" class="headerlink" title="4.2、参数是多个基本数据类型或者String类型"></a>4.2、参数是多个基本数据类型或者String类型</h3><p>可以在映射文件中使用<code>#&#123;arg0&#125;</code>或者<code>#&#123;param1&#125;</code>代表第一个参数，使用<code>#&#123;arg1&#125;</code>或者<code>#&#123;param2&#125;</code>代表第二个参数…</p><h3 id="4-3、参数是Map集合"><a href="#4-3、参数是Map集合" class="headerlink" title="4.3、参数是Map集合"></a>4.3、参数是Map集合</h3><p>在映射文件中使用<code>#&#123;自定义map的key&#125;</code>代表参数</p><h3 id="4-4、参数是实体类类型"><a href="#4-4、参数是实体类类型" class="headerlink" title="4.4、参数是实体类类型"></a>4.4、<font color=#3271ae>参数是实体类类型</font></h3><p>在映射文件中使用<code>#&#123;属性名&#125;</code>就可以获取对应的属性值</p><h3 id="4-5、参数不是实体类型类型，使用注解-Param-自定义参数名"><a href="#4-5、参数不是实体类型类型，使用注解-Param-自定义参数名" class="headerlink" title="4.5、参数不是实体类型类型，使用注解@Param(&quot;自定义参数名&quot;) "></a>4.5、<font color=#3271ae>参数不是实体类型类型，使用注解<code>@Param(&quot;自定义参数名&quot;)</code> </font></h3><p>也可以在传参的时候使用注解<font color=#3271ae><strong><code>@Param(&quot;自定义参数名&quot;)</code></strong></font>，这样在映射文件中就可以直接使用<font color=#3271ae><strong><code>#&#123;注解中自定义的参数名&#125;</code></strong></font>来代表这个参数了</p><h2 id="5、MyBatis的各种查询的返回值问题"><a href="#5、MyBatis的各种查询的返回值问题" class="headerlink" title="5、MyBatis的各种查询的返回值问题"></a>5、MyBatis的各种查询的返回值问题</h2><ul><li><p>MyBatis为Java中常用的类型设置了类型别名。resultType中可以直接写数据类型的名字，或者全类名都行</p></li><li><p>并不是所有的查询结果都有对应的实体类。当没有对应的实体类的时候，可以设置返回值类型为Map。</p></li><li><p>当返回的结果中有多条Map集合时，有两种解决方案：</p><ul><li>可以使用List集合将Map集合包裹起来；【用的多】</li><li>也可以使用注解<code>@MapKey(&quot;自定义大Map的键&quot;)</code>把当前查询的数据所转换的Map集合放到一个大Map集合中。</li></ul></li></ul><h2 id="6、MyBatis执行特殊SQL"><a href="#6、MyBatis执行特殊SQL" class="headerlink" title="6、MyBatis执行特殊SQL"></a>6、MyBatis执行特殊SQL</h2><h3 id="1、模糊查询"><a href="#1、模糊查询" class="headerlink" title="1、模糊查询"></a>1、模糊查询</h3><p>模糊查询时，如果参数需要写在<code> &#39;&#39;</code> 中的时候，不能使用<code>#&#123;&#125;</code>占位符赋值，因为<code>#&#123;&#125;</code>会自动给参数加上两个单引号。可以有三种解决方案</p><h4 id="方案1：使用-字符串拼接"><a href="#方案1：使用-字符串拼接" class="headerlink" title="方案1：使用${}字符串拼接"></a>方案1：使用<code>$&#123;&#125;</code>字符串拼接</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="方案2：使用MySQL中的concat-字符串拼接函数"><a href="#方案2：使用MySQL中的concat-字符串拼接函数" class="headerlink" title="方案2：使用MySQL中的concat()字符串拼接函数"></a>方案2：使用MySQL中的<code>concat()</code>字符串拼接函数</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>   select * from t_user where username like concat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="方案3：使用双引号把-包裹起来"><a href="#方案3：使用双引号把-包裹起来" class="headerlink" title="方案3：使用双引号把%包裹起来"></a>方案3：使用双引号把<code>%</code>包裹起来</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>   select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、批量删除"><a href="#2、批量删除" class="headerlink" title="2、批量删除"></a>2、批量删除</h3><p>这里也不能使用<code>#&#123;&#125;</code>，因为<code>#&#123;&#125;</code>会自动给参数加上两个单引号。只能使用<code>$&#123;&#125;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteMoreUser&quot;</span>&gt;</span><br>    delete from t_user where id in ($&#123;ids&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是在实际开发中一般使用动态SQL来完成这种操作</p><h3 id="3、动态设置表名"><a href="#3、动态设置表名" class="headerlink" title="3、动态设置表名"></a>3、动态设置表名</h3><p>在SQL语句中，表名不能添加单引号，所以使用<code>$&#123;&#125;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    select * from $&#123;tableName&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4、添加功能获取自增的主键"><a href="#4、添加功能获取自增的主键" class="headerlink" title="4、添加功能获取自增的主键"></a>4、添加功能获取自增的主键</h3><p>在映射文件中的<code>&lt;insert&gt;</code>标签中设置<code>useGenerateKeys=“true”</code>代表使用自增主键；并通过设置<code>keyProperty</code>把获取到的自增主键存储到传递过来的实体类对象中的哪个属性中</p><p>注意：insert方法的返回值是固定的，它只能表示是否添加成功。如果返回值是1代表成功，0代表失败</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--useGenerateKeys：是否使用自增的主键    keyProperty：把获取的主键存储到传递过来的实体类对象的哪一个属性中--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>    insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;gender&#125;,#&#123;email&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="7、MyBatisc处理字段名与属性名不一致的情况"><a href="#7、MyBatisc处理字段名与属性名不一致的情况" class="headerlink" title="7、MyBatisc处理字段名与属性名不一致的情况"></a>7、MyBatisc处理字段名与属性名不一致的情况</h2><p>数据库表结构：</p><p><img src="/img/ssm_img/mybatis-resultMap-emp.jpg" alt="mybatis-resultMap-emp"></p><p><img src="/img/ssm_img/mybatis-resultMap-dept.jpg" alt="mybatis-resultMap-dept"></p><p>实体类代码：</p><p>数据库Emp表中有一个dept_id字段，在实体类中定义的是Dept类型的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.mybatis.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer empId;<br>    <span class="hljs-keyword">private</span> String empName;<br>    <span class="hljs-keyword">private</span> Integer empAge;<br>    <span class="hljs-keyword">private</span> String empGender;<br>    <span class="hljs-comment">//Dept类型</span><br>    <span class="hljs-keyword">private</span> Dept dept;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Emp</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Emp</span><span class="hljs-params">(Integer empId, String empName, Integer empAge, String empGender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.empId = empId;<br>        <span class="hljs-built_in">this</span>.empName = empName;<br>        <span class="hljs-built_in">this</span>.empAge = empAge;<br>        <span class="hljs-built_in">this</span>.empGender = empGender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getEmpId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> empId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmpId</span><span class="hljs-params">(Integer empId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.empId = empId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmpName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> empName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmpName</span><span class="hljs-params">(String empName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.empName = empName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getEmpAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> empAge;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmpAge</span><span class="hljs-params">(Integer empAge)</span> &#123;<br>        <span class="hljs-built_in">this</span>.empAge = empAge;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmpGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> empGender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmpGender</span><span class="hljs-params">(String empGender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.empGender = empGender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Dept <span class="hljs-title function_">getDept</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> dept;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDept</span><span class="hljs-params">(Dept dept)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dept = dept;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Emp&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;empId=&quot;</span> + empId +<br>                <span class="hljs-string">&quot;, empName=&#x27;&quot;</span> + empName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, empAge=&quot;</span> + empAge +<br>                <span class="hljs-string">&quot;, empGender=&#x27;&quot;</span> + empGender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, dept=&quot;</span> + dept +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.mybatis.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dept</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer deptId;<br>    <span class="hljs-keyword">private</span> String deptName;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dept</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dept</span><span class="hljs-params">(Integer deptId, String deptName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.deptId = deptId;<br>        <span class="hljs-built_in">this</span>.deptName = deptName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getDeptId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> deptId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDeptId</span><span class="hljs-params">(Integer deptId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.deptId = deptId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDeptName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> deptName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDeptName</span><span class="hljs-params">(String deptName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.deptName = deptName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dept&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;deptId=&quot;</span> + deptId +<br>                <span class="hljs-string">&quot;, deptName=&#x27;&quot;</span> + deptName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-1、数据库表与实体类映射关系"><a href="#7-1、数据库表与实体类映射关系" class="headerlink" title="7.1、数据库表与实体类映射关系"></a>7.1、数据库表与实体类映射关系</h3><p>当数据库表的字段名与实体类的属性名不一致时，如何处理映射关系？</p><h4 id="方式1、为查询的字段设置别名，设置别名为实体类的属性名【不常用】"><a href="#方式1、为查询的字段设置别名，设置别名为实体类的属性名【不常用】" class="headerlink" title="方式1、为查询的字段设置别名，设置别名为实体类的属性名【不常用】"></a>方式1、为查询的字段设置别名，设置别名为实体类的属性名【不常用】</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByEmpId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;emp&quot;</span>&gt;</span><br>    select emp_id as empId,emp_name as empName,emp_age as empAge,emp_gender as empGender<br>    from t_emp<br>    where emp_id = #&#123;empId&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="方式2、当字段名符合MySQL的要求（使用下划线-）-并且实体类的属性名符合Java的要求（使用驼峰），此时可以在MyBatis的核心配置文件中设置一个全局配置，可以自动将下划线映射为驼峰"><a href="#方式2、当字段名符合MySQL的要求（使用下划线-）-并且实体类的属性名符合Java的要求（使用驼峰），此时可以在MyBatis的核心配置文件中设置一个全局配置，可以自动将下划线映射为驼峰" class="headerlink" title="方式2、当字段名符合MySQL的要求（使用下划线_）,并且实体类的属性名符合Java的要求（使用驼峰），此时可以在MyBatis的核心配置文件中设置一个全局配置，可以自动将下划线映射为驼峰"></a>方式2、当字段名符合MySQL的要求（使用下划线<code>_</code>）,并且实体类的属性名符合Java的要求（使用驼峰），此时可以在MyBatis的核心配置文件中设置一个全局配置，可以自动将下划线映射为驼峰</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置全局配置，作用于MyBatis的所有增删改查功能--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--自动将下划线映射到骆驼--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="方式3、在映射文件中使用标签实现自定义映射"><a href="#方式3、在映射文件中使用标签实现自定义映射" class="headerlink" title="方式3、在映射文件中使用&lt;resultMap&gt;标签实现自定义映射"></a>方式3、在映射文件中使用<code>&lt;resultMap&gt;</code>标签实现自定义映射</h4><p><code>&lt;resultMap&gt;</code>标签常用的子标签：</p><ul><li><code>&lt;id&gt;</code>标签：用来处理主键和属性名的映射关系 </li><li><code>&lt;result&gt;</code>标签：用来处理普通字段和属性名的映射关系</li><li><code>&lt;association&gt;</code>标签：处理多对一</li><li><code>&lt;collection&gt;</code>标签：处理一对多</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--自定义映射--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.example.mybatis.pojo.Emp&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- id标签 用来处理主键和属性名的映射关系 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- result标签 用来处理普通字段和属性名的映射关系 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- association标签 处理多对一 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- collection标签 处理一对多 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empAge&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empGender&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByEmpId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empResultMap&quot;</span>&gt;</span><br>    select * from t_emp where emp_id = #&#123;empId&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-2、多对一映射处理（一对一也这么处理）"><a href="#7-2、多对一映射处理（一对一也这么处理）" class="headerlink" title="7.2、多对一映射处理（一对一也这么处理）"></a>7.2、多对一映射处理（一对一也这么处理）</h3><h4 id="方式1、级联方式处理映射关系"><a href="#方式1、级联方式处理映射关系" class="headerlink" title="方式1、级联方式处理映射关系"></a>方式1、级联方式处理映射关系</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.example.mybatis.pojo.Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empAge&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empGender&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--当前emp中有个属性叫dept，这里就可以通过以下这种方式来映射--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.deptId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.deptName&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="方式2、使用标签处理映射关系"><a href="#方式2、使用标签处理映射关系" class="headerlink" title="方式2、使用&lt;association&gt;标签处理映射关系"></a>方式2、使用<code>&lt;association&gt;</code>标签处理映射关系</h4><ul><li><code>&lt;association&gt;</code>标签：专门处理多对一的映射关系（处理实体类类型的属性）<ul><li>property 属性：设置属性名称</li><li>javaType 属性：设置属性的类型</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptResultMap2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.example.mybatis.pojo.Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empAge&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empGender&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--property：设置属性    javaType：设置属性的类型 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;org.example.mybatis.pojo.Dept&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptId&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="方式3、分步查询"><a href="#方式3、分步查询" class="headerlink" title="方式3、分步查询"></a>方式3、分步查询</h4><p><strong><font color=#ee5253>踩坑：一定要事先在MyBatis的核心配置文件中全局配置好下划线映射驼峰</font></strong></p><h5 id="1、实体类"><a href="#1、实体类" class="headerlink" title="1、实体类"></a>1、实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.mybatis.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer empId;<br>    <span class="hljs-keyword">private</span> String empName;<br>    <span class="hljs-keyword">private</span> Integer empAge;<br>    <span class="hljs-keyword">private</span> String empGender;<br>    <span class="hljs-keyword">private</span> Dept dept;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Emp</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Emp</span><span class="hljs-params">(Integer empId, String empName, Integer empAge, String empGender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.empId = empId;<br>        <span class="hljs-built_in">this</span>.empName = empName;<br>        <span class="hljs-built_in">this</span>.empAge = empAge;<br>        <span class="hljs-built_in">this</span>.empGender = empGender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getEmpId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> empId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmpId</span><span class="hljs-params">(Integer empId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.empId = empId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmpName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> empName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmpName</span><span class="hljs-params">(String empName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.empName = empName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getEmpAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> empAge;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmpAge</span><span class="hljs-params">(Integer empAge)</span> &#123;<br>        <span class="hljs-built_in">this</span>.empAge = empAge;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmpGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> empGender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmpGender</span><span class="hljs-params">(String empGender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.empGender = empGender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Dept <span class="hljs-title function_">getDept</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> dept;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDept</span><span class="hljs-params">(Dept dept)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dept = dept;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Emp&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;empId=&quot;</span> + empId +<br>                <span class="hljs-string">&quot;, empName=&#x27;&quot;</span> + empName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, empAge=&quot;</span> + empAge +<br>                <span class="hljs-string">&quot;, empGender=&#x27;&quot;</span> + empGender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, dept=&quot;</span> + dept +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.mybatis.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dept</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer deptId;<br>    <span class="hljs-keyword">private</span> String deptName;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dept</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dept</span><span class="hljs-params">(Integer deptId, String deptName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.deptId = deptId;<br>        <span class="hljs-built_in">this</span>.deptName = deptName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getDeptId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> deptId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDeptId</span><span class="hljs-params">(Integer deptId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.deptId = deptId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDeptName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> deptName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDeptName</span><span class="hljs-params">(String deptName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.deptName = deptName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dept&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;deptId=&quot;</span> + deptId +<br>                <span class="hljs-string">&quot;, deptName=&#x27;&quot;</span> + deptName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、首先定义好Mapper"><a href="#2、首先定义好Mapper" class="headerlink" title="2、首先定义好Mapper"></a>2、首先定义好Mapper</h5><p>EmpMapper:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*分步查询第一步：先查询emp表*/</span><br>Emp <span class="hljs-title function_">getEmpAndDeptByStepOne</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;empId&quot;)</span>Integer empId)</span>;<br></code></pre></td></tr></table></figure><p>DeptMapper:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*分步查询第二步*/</span><br>Dept <span class="hljs-title function_">getEmpAndDeptByStepTwo</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;deptId&quot;)</span> Integer deptId)</span>;<br></code></pre></td></tr></table></figure><h5 id="3、编写EmpMapper-xml"><a href="#3、编写EmpMapper-xml" class="headerlink" title="3、编写EmpMapper.xml"></a>3、编写EmpMapper.xml</h5><p><code>&lt;association&gt;</code> 标签中三个属性：</p><ul><li>property属性：emp类中定义的dept属性</li><li>select属性：分步查询下一步的sql语句的唯一标识（接口的全路径）</li><li>column属性：分步查询下一步的sql语句中需要传递的参数（也就是在这一步查询出来的，要作为下一步的参数）</li><li>fetchType属性：lazy(延迟加载，默认值)、eager（立即加载）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByStepResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.example.mybatis.pojo.Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empAge&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empGender&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--select：中要写的就是下一步的sql语句的唯一标识    column：下一步sql语句需要传递的参数--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;org.example.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;getEmpAndDeptByStepResultMap&quot;</span>&gt;</span><br>    select * from t_emp where emp_id = #&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4、编写DeptMapper-xml"><a href="#4、编写DeptMapper-xml" class="headerlink" title="4、编写DeptMapper.xml"></a>4、编写DeptMapper.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByStepTwo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.example.mybatis.pojo.Dept&quot;</span>&gt;</span><br>    select *<br>    from t_dept<br>    where dept_id = #&#123;deptId&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>首先定义一个<code>&lt;resultMap&gt;</code>。然后在<code>&lt;resultMap&gt;</code>标签中的子标签<code>&lt;association&gt;</code>中的<code>property</code>属性中定义好实体类中的那个对象属性，在<code>select</code>属性定义好下一步的sql路径，在<code>column</code>属性定义好下一步需要的参数，然后MyBatis就会根据<code>select</code>属性自动查找下一步的sql，最终完成分步查询</strong></p><h4 id="方式3中分布查询的优点：可以实现延迟加载"><a href="#方式3中分布查询的优点：可以实现延迟加载" class="headerlink" title="方式3中分布查询的优点：可以实现延迟加载"></a>方式3中分布查询的优点：可以实现延迟加载</h4><p>分布查询的优点：可以实现延迟加载</p><p>但是必须在MyBatis核心配置文件中设置全局配置信息<code>&lt;settings&gt;</code>：</p><ul><li>lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载</li><li>aggressiveLazyLoading：默认每个属性会按需加载（false）。当开启（true）时，任何方法的调用都会加载该对象的所有属性。</li></ul><p>如果我开启了延迟加载，但是我想让某一个方法实现立即加载，其他的方法不变（仍然是延迟加载），可以在<code>&lt;association&gt;</code>标签中设置<code>fetchType</code>属性，这个属性共有两个取值：eager（立即加载）、lazy（延迟加载，默认值），</p><h3 id="7-3、一对多映射处理"><a href="#7-3、一对多映射处理" class="headerlink" title="7.3、一对多映射处理"></a>7.3、一对多映射处理</h3><p>首先需要先在一这个实体类中设置多的那个属性为List集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.mybatis.pojo;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dept</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer deptId;<br>    <span class="hljs-keyword">private</span> String deptName;<br>    <span class="hljs-comment">// 一对多</span><br>    <span class="hljs-keyword">private</span> List&lt;Emp&gt; emps;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dept</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dept</span><span class="hljs-params">(Integer deptId, String deptName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.deptId = deptId;<br>        <span class="hljs-built_in">this</span>.deptName = deptName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getDeptId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> deptId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDeptId</span><span class="hljs-params">(Integer deptId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.deptId = deptId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDeptName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> deptName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDeptName</span><span class="hljs-params">(String deptName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.deptName = deptName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">getEmps</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> emps;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmps</span><span class="hljs-params">(List&lt;Emp&gt; emps)</span> &#123;<br>        <span class="hljs-built_in">this</span>.emps = emps;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dept&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;deptId=&quot;</span> + deptId +<br>                <span class="hljs-string">&quot;, deptName=&#x27;&quot;</span> + deptName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, emps=&quot;</span> + emps +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方式1、使用标签处理"><a href="#方式1、使用标签处理" class="headerlink" title="方式1、使用&lt;collection&gt;标签处理"></a>方式1、使用<code>&lt;collection&gt;</code>标签处理</h4><ul><li><code>&lt;collection&gt;</code>标签：处理一对多映射<ul><li>property属性：实体类中的集合属性名</li><li>ofType属性：设置集合中存储的属性类型</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--处理一对多--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deptAndEmpResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.example.mybatis.pojo.Dept&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;org.example.mybatis.pojo.Emp&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empAge&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empGender&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpByDeptId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;deptAndEmpResultMap&quot;</span>&gt;</span><br>    select *<br>    from t_dept d<br>             left join t_emp e on d.dept_id = e.dept_id<br>    where d.dept_id = #&#123;deptId&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="方式2、分步查询"><a href="#方式2、分步查询" class="headerlink" title="方式2、分步查询"></a>方式2、分步查询</h4><p>类似于多对一映射关系中的<code>&lt;association&gt;</code>标签，这里使用的是<code>&lt;collection&gt;</code>标签，也是使用<code>select</code>属性和<code>column</code>属性</p><h5 id="1、定义好Mapper"><a href="#1、定义好Mapper" class="headerlink" title="1、定义好Mapper"></a>1、定义好Mapper</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// DeptMapper</span><br>    <span class="hljs-comment">/*一对多分步查询*/</span><br>    Dept <span class="hljs-title function_">getDeptAndEmpByStepOne</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;deptId&quot;)</span>Integer deptId)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// EmpMapper</span><br>    <span class="hljs-comment">/*分步查询一对多第二步*/</span><br>    List&lt;Emp&gt; <span class="hljs-title function_">getDeptAndEmpByStepTwo</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;deptId&quot;)</span>Integer deptId)</span>;<br></code></pre></td></tr></table></figure><h5 id="2、编写DeptMapper-xml"><a href="#2、编写DeptMapper-xml" class="headerlink" title="2、编写DeptMapper.xml"></a>2、编写DeptMapper.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--分步查询 一对多--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deptAndEmpByStepOneResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.example.mybatis.pojo.Dept&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;org.example.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpByStepOne&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;deptAndEmpByStepOneResultMap&quot;</span>&gt;</span><br>    select * from t_dept where dept_id = #&#123;deptId&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3、编写EmpMapper-xml-1"><a href="#3、编写EmpMapper-xml-1" class="headerlink" title="3、编写EmpMapper.xml"></a>3、编写EmpMapper.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpByStepTwo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.example.mybatis.pojo.Emp&quot;</span>&gt;</span><br>    select * from t_emp where dept_id = #&#123;deptId&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="8、动态SQL"><a href="#8、动态SQL" class="headerlink" title="8、动态SQL"></a>8、动态SQL</h2><h3 id="1、if"><a href="#1、if" class="headerlink" title="1、if"></a>1、if</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml">   <span class="hljs-comment">&lt;!--if标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.example.mybatis.pojo.Emp&quot;</span>&gt;</span><br>       select * from t_emp where 1=1<br>       <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName!=null and empName!=&#x27;&#x27;&quot;</span>&gt;</span><br>           and emp_name=#&#123;empName&#125;<br>       <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empAge!=null and empAge!=&#x27;&#x27;&quot;</span>&gt;</span><br>           and emp_age=#&#123;empAge&#125;<br>       <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empGender!=null and empGender!=&#x27;&#x27;&quot;</span>&gt;</span><br>           and emp_gender=#&#123;empGender&#125;<br>       <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、where"><a href="#2、where" class="headerlink" title="2、where"></a>2、where</h3><p><code>&lt;where&gt;</code>标签一般和<code>&lt;if&gt;</code>标签一块使用</p><ul><li>如果<code>&lt;where&gt;</code>标签中有条件成立，会自动生成where关键字</li><li>会自动将<code>&lt;if&gt;</code>标签中的and关键字去掉</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--where标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.example.mybatis.pojo.Emp&quot;</span>&gt;</span><br>    select * from t_emp<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName!=null and empName!=&#x27;&#x27;&quot;</span>&gt;</span><br>            emp_name=#&#123;empName&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empAge!=null and empAge!=&#x27;&#x27;&quot;</span>&gt;</span><br>            and emp_age=#&#123;empAge&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empGender!=null and empGender!=&#x27;&#x27;&quot;</span>&gt;</span><br>            and emp_gender=#&#123;empGender&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、trim"><a href="#3、trim" class="headerlink" title="3、trim"></a>3、trim</h3><p><code>&lt;trim&gt;</code>标签有4个属性：</p><ul><li>prefix：在内容前面自动加上某些内容</li><li>prefixOverrides：在内容前面自动去掉某些内容</li><li>suffix：在内容后面自动加上某些内容</li><li>suffixOverrides：在内容后面自动去掉某些内容</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.example.mybatis.pojo.Emp&quot;</span>&gt;</span><br>    select * from t_emp<br>    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;where&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName!=null and empName!=&#x27;&#x27;&quot;</span>&gt;</span><br>            emp_name=#&#123;empName&#125; and<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empAge!=null and empAge!=&#x27;&#x27;&quot;</span>&gt;</span><br>            emp_age=#&#123;empAge&#125; and<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empGender!=null and empGender!=&#x27;&#x27;&quot;</span>&gt;</span><br>            emp_gender=#&#123;empGender&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4、choose、when、otherwise"><a href="#4、choose、when、otherwise" class="headerlink" title="4、choose、when、otherwise"></a>4、choose、when、otherwise</h3><p>when ：相当于<code>else if...</code> 如果第一个条件成立，后面就不运行了（至少有一个）</p><p>otherwise：相当于<code>else...</code>（最多有一个）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--choose--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByChoose&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.example.mybatis.pojo.Emp&quot;</span>&gt;</span><br>    select * from t_emp<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName!=null and empName!=&#x27;&#x27;&quot;</span>&gt;</span><br>                emp_name=#&#123;empName&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empAge!=null and empAge!=&#x27;&#x27;&quot;</span>&gt;</span><br>                emp_age=#&#123;empAge&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empGender!=null and empGender!=&#x27;&#x27;&quot;</span>&gt;</span><br>                emp_gender=#&#123;empGender&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5、foreach"><a href="#5、foreach" class="headerlink" title="5、foreach"></a>5、foreach</h3><ul><li><code>&lt;foreach&gt;</code>标签的属性<ul><li>collection属性：用来设置当前要循环的集合或数组</li><li>item属性：代表集合或数组中的一条数据</li><li>separator属性：分隔符</li><li>open属性：表示循环开始时添加的字符串</li><li>close属性：表示循环结束时添加的字符串</li><li>index属性：当前循环的索引</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml">   <span class="hljs-comment">&lt;!--foreach--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertMoreEmp&quot;</span>&gt;</span><br>       insert into t_emp values<br>       <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>           (null,#&#123;emp.empName&#125;,#&#123;emp.empAge&#125;,#&#123;emp.empGender&#125;,null)<br>       <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--既可以使用 open=&quot;(&quot; close=&quot;)&quot;    也可以把（）放到foreach标签外面--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteMoreEmp&quot;</span>&gt;</span><br>       delete from t_emp where emp_id in<br>       <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;empIds&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;empId&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>           #&#123;empId&#125;<br>       <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6、SQL片段"><a href="#6、SQL片段" class="headerlink" title="6、SQL片段"></a>6、SQL片段</h3><p><code>&lt;sql&gt;</code>标签用于定义可重用的SQL片段，以便在多个SQL语句中共享。<code>&lt;sql&gt;</code>标签通常与<code>&lt;include&gt;</code>标签一起使用，以便在需要的地方插入SQL片段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empColumns&quot;</span>&gt;</span><br>    emp_id,emp_name,emp_age,emp_gender,dept_id<br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;emp&quot;</span>&gt;</span><br>    select <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;empColumns&quot;</span>/&gt;</span> from t_emp;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="9、MyBatis中的缓存"><a href="#9、MyBatis中的缓存" class="headerlink" title="9、MyBatis中的缓存"></a>9、MyBatis中的缓存</h2><h3 id="9-1、MyBatis的一级缓存【默认开启】"><a href="#9-1、MyBatis的一级缓存【默认开启】" class="headerlink" title="9.1、MyBatis的一级缓存【默认开启】"></a>9.1、MyBatis的一级缓存【默认开启】</h3><p><strong>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问</strong></p><p>使一级缓存失效的四种情况：</p><ol><li>不同的SqlSession对应不同的一级缓存</li><li>同一个SqlSession但是查询条件不同</li><li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li><li>同一个SqlSession两次查询期间手动清空了缓存</li></ol><h3 id="9-2、MyBatis的二级缓存"><a href="#9-2、MyBatis的二级缓存" class="headerlink" title="9.2、MyBatis的二级缓存"></a>9.2、MyBatis的二级缓存</h3><p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取</p><p>二级缓存开启的条件：</p><ul><li><p>1、在核心配置文件中，设置全局配置属性cacheEnabled&#x3D;”true”，默认为true，不需要设置</p></li><li><p>2、在映射文件中设置标签<code>&lt;cache /&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--注意这个命名空间是 对应的Mapper接口的全类名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.example.mybatis.mapper.CacheMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--开启二级缓存，在映射文件中开启cache标签--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cache</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>3、二级缓存必须在SqlSession关闭或提交之后有效 （因为查询的数据默认保存到一级缓存中，要想将数据保存到二级缓存中，必须关闭sqlSession）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//二级缓存</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCache</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(is);<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession1</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">CacheMapper</span> <span class="hljs-variable">mapper1</span> <span class="hljs-operator">=</span> sqlSession1.getMapper(CacheMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp1</span> <span class="hljs-operator">=</span> mapper1.getEmpById(<span class="hljs-number">1</span>);<br>    System.out.println(<span class="hljs-string">&quot;emp1 = &quot;</span> + emp1);<br>    sqlSession1.close();  <span class="hljs-comment">//关闭sqlSession1</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession2</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">CacheMapper</span> <span class="hljs-variable">mapper2</span> <span class="hljs-operator">=</span> sqlSession2.getMapper(CacheMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp2</span> <span class="hljs-operator">=</span> mapper2.getEmpById(<span class="hljs-number">1</span>);<br>    System.out.println(<span class="hljs-string">&quot;emp2 = &quot;</span> + emp2);<br>    sqlSession2.close();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>4、查询的数据所转换的实体类类型必须实现序列化的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br></code></pre></td></tr></table></figure></li></ul><p>使二级缓存失效的情况：</p><ul><li>两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</li></ul><h3 id="9-3、二级缓存的相关配置（了解）"><a href="#9-3、二级缓存的相关配置（了解）" class="headerlink" title="9.3、二级缓存的相关配置（了解）"></a>9.3、二级缓存的相关配置（了解）</h3><p>在mapper配置文件中添加的cache标签可以设置一些属性：</p><ul><li>①eviction属性：缓存回收策略，默认的是 LRU。<ul><li>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。</li><li>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。</li><li>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。</li><li>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</li></ul></li><li>②flushInterval属性：刷新间隔，单位毫秒<ul><li>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</li></ul></li><li>③size属性：引用数目，正整数<ul><li>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li></ul></li><li>④readOnly属性：只读， true&#x2F;false<ul><li>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了 很重要的性能优势。</li><li>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false。</li></ul></li><li>⑤type属性：缓存的类型。默认是MyBatis中原生的二级缓存。也可以整合第三方缓存</li></ul><h3 id="9-4、MyBatis缓存查询的顺序"><a href="#9-4、MyBatis缓存查询的顺序" class="headerlink" title="9.4、MyBatis缓存查询的顺序"></a>9.4、MyBatis缓存查询的顺序</h3><p>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。</p><p>如果二级缓存没有命中，再查询一级缓存</p><p>如果一级缓存也没有命中，则查询数据库</p><p>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</p><h3 id="9-5、整合第三方缓存EHCache（针对于二级缓存）"><a href="#9-5、整合第三方缓存EHCache（针对于二级缓存）" class="headerlink" title="9.5、整合第三方缓存EHCache（针对于二级缓存）"></a>9.5、整合第三方缓存EHCache（针对于二级缓存）</h3><p>1、添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--MyBatis EHCache整合包--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--slf4j日志门面的一个具体实现--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、创建EHCache的配置文件ehcache.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 磁盘保存路径 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;E:\atguigu\ehcache&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span></span><br><span class="hljs-tag">        <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;1000&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">maxElementsOnDisk</span>=<span class="hljs-string">&quot;10000000&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">diskExpiryThreadIntervalSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">defaultCache</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br></code></pre></td></tr></table></figure><p>EHCache配置文件说明</p><table><thead><tr><th><strong>属性名</strong></th><th><strong>是否必须</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>maxElementsInMemory</td><td>是</td><td>在内存中缓存的element的最大数目</td></tr><tr><td>maxElementsOnDisk</td><td>是</td><td>在磁盘上缓存的element的最大数目，若是0表示无穷大</td></tr><tr><td>eternal</td><td>是</td><td>设定缓存的elements是否永远不过期。 如果为true，则缓存的数据始终有效， 如果为false那么还要根据timeToIdleSeconds、timeToLiveSeconds判断</td></tr><tr><td>overflowToDisk</td><td>是</td><td>设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</td></tr><tr><td>timeToIdleSeconds</td><td>否</td><td>当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时， 这些数据便会删除，默认值是0,也就是可闲置时间无穷大</td></tr><tr><td>timeToLiveSeconds</td><td>否</td><td>缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</td></tr><tr><td>diskSpoolBufferSizeMB</td><td>否</td><td>DiskStore(磁盘缓存)的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区</td></tr><tr><td>diskPersistent</td><td>否</td><td>在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。</td></tr><tr><td>diskExpiryThreadIntervalSeconds</td><td>否</td><td>磁盘缓存的清理线程运行间隔，默认是120秒。每个120s， 相应的线程会进行一次EhCache中数据的清理工作</td></tr><tr><td>memoryStoreEvictionPolicy</td><td>否</td><td>当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。 默认是LRU （最近最少使用），可选的有LFU （最不常使用）和FIFO （先进先出）</td></tr></tbody></table><p>3、在映射文件中设置二级缓存的类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启二级缓存，在映射文件中开启cache标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>4、加入logback日志</p><p>存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。 创建logback的配置文件logback.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定日志输出的位置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 日志输出的格式 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 按照顺序分别是： 时间、日志级别、线程名称、打印日志的类、日志主体内容、换行--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger][%msg]%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是： DEBUG、INFO、WARN、ERROR --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.example.mybatis.mapper&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="10、MyBatis的逆向工程"><a href="#10、MyBatis的逆向工程" class="headerlink" title="10、MyBatis的逆向工程"></a>10、MyBatis的逆向工程</h2><p>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。 Hibernate是支持正向工程的。</p><p>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：</p><ul><li>Java实体类</li><li>Mapper接口</li><li>Mapper映射文件</li></ul><h3 id="10-1、创建逆向工程的步骤"><a href="#10-1、创建逆向工程的步骤" class="headerlink" title="10.1、创建逆向工程的步骤"></a>10.1、创建逆向工程的步骤</h3><h4 id="1、在pom-xml中添加插件"><a href="#1、在pom-xml中添加插件" class="headerlink" title="1、在pom.xml中添加插件"></a>1、在pom.xml中添加插件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 构建过程中用到的插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 插件的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、创建逆向工程的配置文件"><a href="#2、创建逆向工程的配置文件" class="headerlink" title="2、创建逆向工程的配置文件"></a>2、创建逆向工程的配置文件</h4><p>文件名必须是：generatorConfig.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">generatorConfiguration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            targetRuntime: 执行生成的逆向工程的版本</span><br><span class="hljs-comment">                MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span><br><span class="hljs-comment">                MyBatis3: 生成带条件的CRUD（奢华尊享版）</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DB2Tables&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 数据库的连接信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://主机:端口/mybatis?serverTimezone=UTC&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;用户名&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- javaBean的生成策略--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;org.example.mybatis.pojo&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;org.example.mybatis.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\resources&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Mapper接口的生成策略 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;org.example.mybatis.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 逆向分析的表 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span><br>        <span class="hljs-comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_emp&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Emp&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_dept&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Dept&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3、通过插件生成逆向工程"><a href="#3、通过插件生成逆向工程" class="headerlink" title="3、通过插件生成逆向工程"></a>3、通过插件生成逆向工程</h4><p><img src="/img/ssm_img/MyBatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B.jpg" alt="MyBatis逆向工程"></p><p>双击之后，就会生成对应的mapper接口，mapper.xml映射文件，实体类</p><p><img src="/img/ssm_img/MyBatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%88%90%E5%8A%9F.jpg" alt="MyBatis逆向工程成功"></p><h3 id="10-2、QBC风格"><a href="#10-2、QBC风格" class="headerlink" title="10.2、QBC风格"></a>10.2、QBC风格</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMBG</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>        <span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br>        <span class="hljs-comment">//根据id查询</span><br><span class="hljs-comment">//        Emp emp = mapper.selectByPrimaryKey(1);</span><br><span class="hljs-comment">//        System.out.println(&quot;emp = &quot; + emp);</span><br><br>        <span class="hljs-comment">//查询所有</span><br><span class="hljs-comment">//        List&lt;Emp&gt; emps = mapper.selectByExample(null);</span><br><span class="hljs-comment">//        emps.forEach(System.out::println);</span><br><br>        <span class="hljs-comment">//查询员工姓名是张三,并且年龄小于20</span><br><span class="hljs-comment">//        EmpExample example = new EmpExample();</span><br><span class="hljs-comment">//        example.createCriteria().andEmpNameEqualTo(&quot;张三&quot;).andEmpAgeLessThan(20);</span><br><span class="hljs-comment">//        List&lt;Emp&gt; emps = mapper.selectByExample(example);</span><br><span class="hljs-comment">//        emps.forEach(System.out::println);</span><br><br>        <span class="hljs-comment">//修改</span><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>        emp.setEmpId(<span class="hljs-number">1</span>);<br>        emp.setEmpName(<span class="hljs-string">&quot;张三张三&quot;</span>);<br>        emp.setEmpAge(<span class="hljs-literal">null</span>);<br>        emp.setEmpGender(<span class="hljs-string">&quot;男&quot;</span>);<br><span class="hljs-comment">//        mapper.updateByPrimaryKey(emp);</span><br>        mapper.updateByPrimaryKeySelective(emp);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="11、分页插件"><a href="#11、分页插件" class="headerlink" title="11、分页插件"></a>11、分页插件</h2><p>limit index,pageSize</p><p>pageSize：每页显示的条数</p><p>pageNum：当前页的页码</p><p>index：当前页的起始索引   &#x3D; <code> (当前页的页码 - 1) * 每页显示的条数</code></p><p>count：总记录数</p><p>totalPage：总页数 &#x3D; <code>(总记录数 % 每页显示的条数 == 0 ) ? (总记录数 / 每页显示的条数) : (总记录数 / 每页显示的条数) + 1</code></p><h3 id="11-1、分页插件的使用步骤"><a href="#11-1、分页插件的使用步骤" class="headerlink" title="11.1、分页插件的使用步骤"></a>11.1、分页插件的使用步骤</h3><h4 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、在MyBatis的核心配置文件中配置"><a href="#2、在MyBatis的核心配置文件中配置" class="headerlink" title="2、在MyBatis的核心配置文件中配置"></a>2、在MyBatis的核心配置文件中配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置分页插件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h4><p>在查询功能之前开启分页功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPage</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br><br>    <span class="hljs-comment">//在查询功能之前开启分页功能,比如查询第一页，每页显示4条数据</span><br>    PageHelper.startPage(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br><br>    <span class="hljs-comment">//查询所有</span><br>    List&lt;Emp&gt; emps = mapper.selectByExample(<span class="hljs-literal">null</span>);<br>    <br>    <span class="hljs-comment">//在查询获取list集合之后，获取分页相关数据</span><br>    <span class="hljs-type">PageInfo</span> <span class="hljs-variable">pageInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageInfo</span>&lt;&gt;(emps,<span class="hljs-number">5</span>);<br><br>    emps.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><p>此时查询出来的结果就只有4条了</p><h3 id="11-2、通过分页插件获取分页相关数据"><a href="#11-2、通过分页插件获取分页相关数据" class="headerlink" title="11.2、通过分页插件获取分页相关数据"></a>11.2、通过分页插件获取分页相关数据</h3><ul><li>在查询功能之前使用<code>PageHelper.startPage(int pageNum, int pageSize)</code>开启分页功能</li></ul><blockquote><p>pageNum：当前页的页码</p><p>pageSize：每页显示的条数</p></blockquote><ul><li>在查询获取list集合之后，使用<code>PageInfo pageInfo = new PageInfo&lt;&gt;(List list, int navigatePages)</code>获取分页相关数据</li></ul><blockquote><p>list：分页之后的数据</p><p>navigatePages：导航分页的页码数</p></blockquote><ul><li>PageInfo对象相关数据</li></ul><blockquote><ul><li>pageNum：当前页码 2</li><li>pageSize：每页记录数 4</li><li>size：当前页记录数 4</li><li>startRow：当前页第一条记录的行号 5</li><li>endRow：当前页最后一条记录的行号 8</li><li>total：总记录数 27</li><li>pages：总页数 7</li><li>list：当前页记录列表</li><li>prePage：上一页页码 1</li><li>nextPage：下一页页码 3</li><li>isFirstPage：是否为第一页</li><li>isLastPage：是否为最后一页</li><li>hasPreviousPage：是否有上一页</li><li>hasNextPage：是否有下一页</li><li>navigatePages：导航页码数 5</li><li>navigateFirstPage：导航条上的第一页页码 1</li><li>navigateLastPage：导航条上的最后一页页码 5</li><li>navigatepageNums：所有导航页号 [4, 5, 6, 7, 8]</li></ul></blockquote><h1 id="三、SpringMVC"><a href="#三、SpringMVC" class="headerlink" title="三、SpringMVC"></a>三、SpringMVC</h1><h3 id="1、SpringMVC简介"><a href="#1、SpringMVC简介" class="headerlink" title="1、SpringMVC简介"></a>1、SpringMVC简介</h3><h4 id="1、什么是MVC"><a href="#1、什么是MVC" class="headerlink" title="1、什么是MVC"></a>1、什么是MVC</h4><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p><blockquote><ul><li><p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p></li><li><p>JavaBean分为两类：</p></li><li><p>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</p></li><li><p>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</p></li><li><p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p></li><li><p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p></li></ul></blockquote><p>MVC的工作流程： 用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器</p><h4 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h4><p>SpringMVC是Spring的一个后续产品，是Spring的一个子项目</p><p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目表述层开发的<strong>首选方案</strong>。</p><blockquote><p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台servlet</p></blockquote><h4 id="3、SpringMVC的特点"><a href="#3、SpringMVC的特点" class="headerlink" title="3、SpringMVC的特点"></a>3、SpringMVC的特点</h4><ul><li><strong>Spring</strong> <strong>家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</li><li><strong>基于原生的Servlet</strong>，通过了功能强大的<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一处理</li><li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong> </li><li><strong>代码清新简洁</strong>，大幅度提升开发效率</li><li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li><li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li></ul><h3 id="2、入门案例"><a href="#2、入门案例" class="headerlink" title="2、入门案例"></a>2、入门案例</h3><h4 id="2-1、创建maven工程，在pom-xml中添加打包方式为war，刷新maven，右键项目-—-Open-Module-Settings"><a href="#2-1、创建maven工程，在pom-xml中添加打包方式为war，刷新maven，右键项目-—-Open-Module-Settings" class="headerlink" title="2.1、创建maven工程，在pom.xml中添加打包方式为war，刷新maven，右键项目 —&gt; Open Module Settings"></a>2.1、创建maven工程，在pom.xml中添加打包方式为war，刷新maven，右键项目 —&gt; Open Module Settings</h4><p><img src="/img/ssm_img/springmvc_%E9%85%8D%E7%BD%AE%E6%AD%A5%E9%AA%A41.jpg" alt="springmvc_配置步骤1"></p><p><img src="/img/ssm_img/springmvc_%E4%BF%AE%E6%94%B9webxml%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84.jpg" alt="springmvc_修改webxml文件路径"></p><p>修改完web.xml文件路径之后，就会自动创建webapp目录：</p><p><img src="/img/ssm_img/springmvc_%E4%BF%AE%E6%94%B9%E5%AE%8C%E6%88%90.jpg" alt="springmvc_修改完成"></p><h4 id="2-2、引入依赖"><a href="#2-2、引入依赖" class="headerlink" title="2.2、引入依赖"></a>2.2、引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- SpringMVC --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- 日志 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- ServletAPI --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-3、配置SpringMVC"><a href="#2-3、配置SpringMVC" class="headerlink" title="2.3、配置SpringMVC"></a>2.3、配置SpringMVC</h4><h5 id="1、配置web-xml，注册SpringMVC的前端控制器DispatcherServlet"><a href="#1、配置web-xml，注册SpringMVC的前端控制器DispatcherServlet" class="headerlink" title="1、配置web.xml，注册SpringMVC的前端控制器DispatcherServlet"></a>1、配置web.xml，注册SpringMVC的前端控制器DispatcherServlet</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置SpringMVC的前端控制器DispatcherServlet --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- servlet-name 名称自定义 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 这个servlet-name 要和上面的servlet标签中的servlet-name一致 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- servlet-name 有一个取值是default，处理静态资源 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 被DispatcherServlet处理的哪些请求 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>url-pattern标签中使用<code>/</code>和<code>/*</code>的区别：</p><blockquote><ul><li><p><code>/</code>所匹配的请求可以是&#x2F;login或.html或.js或.css方式的请求路径，但是<code>/</code>不能匹配.jsp请求路径的请求。因此就可以避免在访问jsp页面时，该请求被DispatcherServlet处理，从而找不到相应的页面</p></li><li><p><code>/*</code>则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用<code>/*</code>的写法</p></li></ul></blockquote><h5 id="2、创建请求控制器"><a href="#2、创建请求控制器" class="headerlink" title="2、创建请求控制器"></a>2、创建请求控制器</h5><p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器。</p><p>请求控制器中每一个处理请求的方法成为控制器方法</p><p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过<code>@Controller</code>注解将其标识为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.springmvc.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、创建SpringMVC的配置文件"><a href="#3、创建SpringMVC的配置文件" class="headerlink" title="3、创建SpringMVC的配置文件"></a>3、创建SpringMVC的配置文件</h5><blockquote><p>SpringMVC的配置文件默认的位置和名称：</p><ul><li>默认位置：**<code>WEB-INF</code>**下</li><li>默认名称：**<code>&lt;servlet-name&gt;-servlet.xml</code>**      servlet-name 就是在web.xml中配置的</li></ul></blockquote><p>**<code>webapp/WEB-INF/SpringMVC-servlet.xml:</code>**（这个路径和文件名可以更改，步骤在第5步入门案例总结中）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--1、扫描控制层组件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.example.springmvc.controller&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateEngine&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateResolver&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 物理视图 = 视图前缀 + 逻辑视图 + 视图后缀 --&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 视图前缀 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 视图后缀 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.html&quot;</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateMode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML5&quot;</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-4、测试入门案例"><a href="#2-4、测试入门案例" class="headerlink" title="2.4、测试入门案例"></a>2.4、测试入门案例</h4><p>1、在WEB-INF目录下创建 &#x2F;templates&#x2F;index.html</p><p><img src="/img/ssm_img/springmvc%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B%E6%B5%8B%E8%AF%95html.jpg" alt="springmvc入门案例测试html"></p><p>2、在HelloController中编写代码</p><p><img src="/img/ssm_img/springmvc%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B%E6%B5%8B%E8%AF%95controller.jpg" alt="springmvc入门案例测试controller"></p><p>效果：</p><p><img src="/img/ssm_img/springmvc%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B%E6%BC%94%E7%A4%BA.jpg" alt="springmvc入门案例演示"></p><h4 id="2-5、入门案例总结"><a href="#2-5、入门案例总结" class="headerlink" title="2.5、入门案例总结"></a>2.5、入门案例总结</h4><h6 id="1、SpringMVC处理请求的流程"><a href="#1、SpringMVC处理请求的流程" class="headerlink" title="1、SpringMVC处理请求的流程"></a>1、SpringMVC处理请求的流程</h6><blockquote><ul><li>浏览器发送请求，若请求地址符合前端控制器(DispatcherServlet)的<code>url-pattern</code>，该请求就会被前端控制器DispatcherServlet处理。</li><li>前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器(Controller)，将请求地址和控制器中<code>@RequestMapping</code>注解的value属性值进行匹配。若匹配成功，该注解所标识的控制器方法就是处理请求的方法。</li><li>处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</li></ul></blockquote><h6 id="2、修改SpringMVC配置文件的默认名称和默认路径"><a href="#2、修改SpringMVC配置文件的默认名称和默认路径" class="headerlink" title="2、修改SpringMVC配置文件的默认名称和默认路径"></a>2、修改SpringMVC配置文件的默认名称和默认路径</h6><blockquote><ul><li>1、在web.xml文件中的<code>&lt;servlet&gt;</code>标签内配置<code>&lt;init-param&gt;</code>标签，这个标签的作用就是设置Servlet 的初始化参数</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--init-param：设置Servlet的初始化参数--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>  <span class="hljs-comment">&lt;!--contextConfigLocation：设置当前DispatcherServlet 要加载的SpringMVC配置文件 的路径--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>  <span class="hljs-comment">&lt;!--表示在类路径下的springmvc.xml，也就是resource目录下,这个文件名可以自定义--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>2、在resource目录下创建springmvc.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml">&gt;<span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">      http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--1、扫描控制层组件--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.example.springmvc.controller&quot;</span>/&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateEngine&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateResolver&quot;</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span><br>                       <span class="hljs-comment">&lt;!-- 物理视图 = 视图前缀 + 逻辑视图 + 视图后缀 --&gt;</span><br>                       <span class="hljs-comment">&lt;!-- 视图前缀 --&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span><br>                       <span class="hljs-comment">&lt;!-- 视图后缀 --&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.html&quot;</span>/&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateMode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML5&quot;</span>/&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><h6 id="3、将Servlet的初始化时间提前到服务器启动时"><a href="#3、将Servlet的初始化时间提前到服务器启动时" class="headerlink" title="3、将Servlet的初始化时间提前到服务器启动时"></a>3、将Servlet的初始化时间提前到服务器启动时</h6><blockquote><p>在web.xml文件中的<code>&lt;servlet&gt;</code>标签内配置<code>&lt;load-on-startup&gt;</code>标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><br>&gt;<span class="hljs-comment">&lt;!--建议将Servlet的初始化时间提前到服务器启动时。 Servlet的默认初始化时间是在第一次访问的时候--&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><h6 id="查看一个类的内部结构的快捷键：Alt-7"><a href="#查看一个类的内部结构的快捷键：Alt-7" class="headerlink" title="查看一个类的内部结构的快捷键：Alt + 7"></a>查看一个类的内部结构的快捷键：<code>Alt + 7</code></h6><p><img src="/img/ssm_img/%E5%BF%AB%E6%8D%B7%E9%94%AE-%E6%9F%A5%E7%9C%8B%E4%B8%80%E4%B8%AA%E7%B1%BB%E6%88%96%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%9C.jpg" alt="快捷键-查看一个类或接口的内部结果"></p><h3 id="3、-RequestMapping注解"><a href="#3、-RequestMapping注解" class="headerlink" title="3、@RequestMapping注解"></a>3、<code>@RequestMapping</code>注解</h3><h4 id="1、-RequestMapping注解的功能"><a href="#1、-RequestMapping注解的功能" class="headerlink" title="1、@RequestMapping注解的功能"></a>1、<code>@RequestMapping</code>注解的功能</h4><blockquote><p><code>@RequestMapping</code>注解是Spring MVC框架中的一个核心注解，它的主要功能是将HTTP请求映射到控制器的处理方法上。</p><p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器中的方法来处理这个请求。</p><p>具体来说，<code>@RequestMapping</code>注解可以用于以下几个方面：</p><ol><li><p>映射请求路径：通过value或者path属性，指定处理请求的URL路径，例如：<code>@RequestMapping(&quot;/user&quot;)</code></p></li><li><p>设置请求方法：通过method属性，指定处理请求的HTTP方法，例如：<code>@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.GET)</code></p></li><li><p>设置请求参数：通过params属性，指定处理请求的参数，例如：<code>@RequestMapping(value = &quot;/user&quot;, params = &quot;id=1&quot;)</code></p></li><li><p>设置请求头：通过headers属性，指定处理请求的请求头，例如：<code>@RequestMapping(value = &quot;/user&quot;, headers = &quot;content-type=text/html&quot;)</code></p></li><li><p>设置请求体：通过consumes属性，指定处理请求的请求体类型，例如：<code>@RequestMapping(value = &quot;/user&quot;, consumes = &quot;application/json&quot;)</code></p></li><li><p>设置响应体：通过produces属性，指定处理请求的响应体类型，例如：<code>@RequestMapping(value = &quot;/user&quot;, produces = &quot;application/json&quot;)</code></p></li></ol><p>除了上述功能之外，<code>@RequestMapping</code>注解还可以用于设置其他一些属性，例如：设置路径匹配模式、设置请求参数的正则表达式等等。总之，<code>@RequestMapping</code>注解是Spring MVC框架中非常重要的一个注解，它为控制器处理请求提供了非常灵活的方式。</p></blockquote><h4 id="2、-RequestMapping注解可以标识的位置"><a href="#2、-RequestMapping注解可以标识的位置" class="headerlink" title="2、@RequestMapping注解可以标识的位置"></a>2、<code>@RequestMapping</code>注解可以标识的位置</h4><blockquote><ul><li>类级别：可以在控制器类上使用<code>@RequestMapping</code>注解，用于指定控制器处理的请求的公共前缀。</li><li>方法级别：可以在控制器中的处理方法上使用<code>@RequestMapping</code>注解，用于指定该方法处理的请求路径、请求方法、请求参数等。</li></ul></blockquote><h4 id="3、-RequestMapping注解的value属性"><a href="#3、-RequestMapping注解的value属性" class="headerlink" title="3、@RequestMapping注解的value属性"></a>3、<code>@RequestMapping</code>注解的value属性</h4><blockquote><p><code>@RequestMapping</code>注解的value属性通过请求的请求地址匹配请求映射</p><p><code>@RequestMapping</code>注解的value属性可以接受多个值，用于指定多个请求URL路径，例如：<code>@RequestMapping(&#123;&quot;/hello&quot;,&quot;/abc&quot;&#125;)</code></p><p><code>@RequestMapping</code>注解的value属性必须设置，至少通过请求地址匹配请求映射</p></blockquote><h4 id="4、-RequestMapping注解的method属性（405）"><a href="#4、-RequestMapping注解的method属性（405）" class="headerlink" title="4、@RequestMapping注解的method属性（405）"></a>4、<code>@RequestMapping</code>注解的method属性（405）</h4><blockquote><p><code>@RequestMapping</code>注解的method属性是用于指定请求方法的属性，它可以标识在方法级别上。通过method属性，可以限制控制器处理请求的方法类型，例如GET、POST、PUT、DELETE等。</p><p><code>@RequestMapping</code>注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p><p>需要注意的是，如果不指定method属性，则默认处理所有类型的请求方法。如果指定了method属性，若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错<code>405：Request method &#39;POST&#39; not supported</code></p></blockquote><h4 id="5、在-RequestMapping-的基础上，结合请求方法的一些派生注解："><a href="#5、在-RequestMapping-的基础上，结合请求方法的一些派生注解：" class="headerlink" title="5、在@RequestMapping 的基础上，结合请求方法的一些派生注解："></a>5、在<code>@RequestMapping</code> 的基础上，结合请求方法的一些派生注解：</h4><blockquote><p>这些派生注解可以更加方便地定义请求方法的处理方式。以下是一些常用的派生注解：</p><ol><li><code>@GetMapping</code>：用于处理HTTP GET请求方法。</li><li><code>@PostMapping</code>：用于处理HTTP POST请求方法。</li><li><code>@PutMapping</code>：用于处理HTTP PUT请求方法。</li><li><code>@DeleteMapping</code>：用于处理HTTP DELETE请求方法。</li></ol><p>这些派生注解都是基于<code>@RequestMapping</code>注解实现的，因此它们可以接受相同的参数，如<code>value</code>、<code>path</code>、<code>params</code>、<code>headers</code>等</p></blockquote><h4 id="6、-RequestMapping注解的params属性（了解）（400）"><a href="#6、-RequestMapping注解的params属性（了解）（400）" class="headerlink" title="6、@RequestMapping注解的params属性（了解）（400）"></a>6、<code>@RequestMapping</code>注解的params属性（了解）（400）</h4><blockquote><p>浏览器发送请求的参数必须满足params属性中的设置</p><p><code>@RequestMapping</code>注解的params属性通过请求的请求参数匹配请求映射</p><p><code>@RequestMapping</code>注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系:</p><ul><li>“param”：要求请求映射所匹配的请求必须携带param请求参数</li><li>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</li><li>“param&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数且param&#x3D;value</li><li>“param!&#x3D;value”：要求请求映射所匹配的请求可以不携带param，或者必须携带param请求参数并且param!&#x3D;value</li></ul><p>如果有多个条件，则必须同时满足</p></blockquote><h4 id="7、-RequestMapping注解的headers属性（了解）（404）"><a href="#7、-RequestMapping注解的headers属性（了解）（404）" class="headerlink" title="7、@RequestMapping注解的headers属性（了解）（404）"></a>7、<code>@RequestMapping</code>注解的headers属性（了解）（404）</h4><blockquote><p><code>@RequestMapping</code>注解的headers属性可以用来限制请求头的条件。它接受一个字符串数组，每个字符串都是一个请求头的限制条件，多个条件之间是”与”的关系。可以通过四种表达式设置请求头信息和请求映射的匹配关系：</p><ul><li>“header”：要求请求映射所匹配的请求必须携带header请求头信息</li><li>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</li><li>“header&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header&#x3D;value</li><li>“header!&#x3D;value”：要求请求映射所匹配的请求可以不携带header，或者必须携带header请求头信息且header!&#x3D;value</li></ul><p>若当前请求满足<code>@RequestMapping</code>注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到</p><p><code>headers</code>属性只能用于限制请求头，不能用于限制请求体中的内容。如果需要限制请求体中的内容，可以使用<code>consumes</code>属性。</p></blockquote><h4 id="8、SpringMVC支持ant风格的路径"><a href="#8、SpringMVC支持ant风格的路径" class="headerlink" title="8、SpringMVC支持ant风格的路径"></a>8、SpringMVC支持ant风格的路径</h4><blockquote><p>Ant风格的路径匹配规则如下：</p><ul><li><code>?</code>：匹配任意单个字符</li><li><code>*</code>：匹配任意长度的字符，但不包括路径分隔符<code>/</code></li><li><code>**</code>：匹配任意长度的字符，包括路径分隔符<code>/</code></li></ul><p>需要注意的是，Ant风格的路径匹配规则只适用于路径部分，不包括查询参数部分。如果需要匹配查询参数，可以使用<code>params</code>属性</p></blockquote><h4 id="9、-RequestMapping使用路径中的占位符（重点）"><a href="#9、-RequestMapping使用路径中的占位符（重点）" class="headerlink" title="9、@RequestMapping使用路径中的占位符（重点）"></a>9、<code>@RequestMapping</code>使用路径中的占位符（重点）</h4><blockquote><p>原始方式：&#x2F;deleteUser?id&#x3D;1</p><p>rest方式：&#x2F;deleteUser&#x2F;1</p><p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的<code>@RequestMapping</code>注解的value属性中通过占位符<code>&#123;xxx&#125;</code>标识传输的数据，再通过**<code>@PathVariable(&quot;xxx&quot;)</code>**注解，将占位符所标识的数据赋值给控制器方法的形参</p></blockquote><h3 id="4、SpringMVC获取请求参数"><a href="#4、SpringMVC获取请求参数" class="headerlink" title="4、SpringMVC获取请求参数"></a>4、SpringMVC获取请求参数</h3><h4 id="1、通过ServletAPI获取请求参数"><a href="#1、通过ServletAPI获取请求参数" class="headerlink" title="1、通过ServletAPI获取请求参数"></a>1、通过ServletAPI获取请求参数</h4><blockquote><p>流程：</p><ol><li><p>客户端发送请求到服务器，服务器接收到请求后会被SpringMVC的<code>DispatcherServlet</code>拦截。</p></li><li><p><code>DispatcherServlet</code>根据请求的URL和配置的<code>HandlerMapping</code>找到对应的<code>Controller</code>。</p></li><li><p><code>Controller</code>中的方法被调用，方法的参数列表中可以包含<code>HttpServletRequest</code>和<code>HttpServletResponse</code>对象，通过这两个对象可以获取请求参数和设置响应内容。</p></li><li><p>在<code>HttpServletRequest</code>对象中可以通过以下方法获取请求参数：</p><ul><li><code>getParameter(String name)</code>：获取指定名称的参数值。</li><li><code>getParameterValues(String name)</code>：获取指定名称的参数值数组。</li><li><code>getParameterMap()</code>：获取所有的参数名和参数值的映射表。</li></ul><p>例如，以下是一个获取请求参数的示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>    String[] hobbies = request.getParameterValues(<span class="hljs-string">&quot;hobby&quot;</span>);<br>    Map&lt;String, String[]&gt; paramMap = request.getParameterMap();<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>总之，通过ServletAPI可以方便地获取请求参数，SpringMVC框架在处理请求时会自动将<code>HttpServletRequest</code>对象传递给<code>Controller</code>方法，从而可以方便地获取请求参数。</p></blockquote><h4 id="2、通过控制器方法的形参获取请求参数"><a href="#2、通过控制器方法的形参获取请求参数" class="headerlink" title="2、通过控制器方法的形参获取请求参数"></a>2、通过控制器方法的形参获取请求参数</h4><blockquote><p>直接在方法中声明参数：控制器方法可以直接在参数列表中声明与请求参数<strong>同名</strong>的参数，SpringMVC会自动将请求参数的值绑定到对应的参数上。</p><ul><li>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</li><li>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</li><li>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</li></ul></blockquote><h4 id="3、-RequestParam注解"><a href="#3、-RequestParam注解" class="headerlink" title="3、@RequestParam注解"></a>3、<code>@RequestParam</code>注解</h4><blockquote><p><code>@RequestParam</code>是将请求参数和控制器方法的形参创建映射关系</p><p><code>@RequestParam</code>注解一共有三个属性：</p><ul><li>value：指定为形参赋值的请求参数的参数名</li><li>required：设置是否必须传输此请求参数，默认值为true</li><li>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；</li><li>若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</li><li>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值</li></ul></blockquote><h4 id="4、-RequestHeader注解"><a href="#4、-RequestHeader注解" class="headerlink" title="4、@RequestHeader注解"></a>4、<code>@RequestHeader</code>注解</h4><blockquote><p><code>@RequestHeader</code>注解是SpringMVC中用于绑定请求头信息的注解，可以将请求头信息的值绑定到方法参数上，并可以指定请求头的名称、是否必须以及默认值等信息。</p><p><code>@RequestHeader</code>注解有以下常用属性：</p><ul><li><code>value</code>：指定请求头的名称，如果不指定，则默认使用方法参数的名称。</li><li><code>required</code>：指定请求头是否是必须的，默认为<code>true</code>，表示请求头必须存在，如果不存在，则抛出异常。如果为<code>false</code>，表示请求头可以不存在，方法参数的值为<code>null</code>。</li><li><code>defaultValue</code>：指定请求头的默认值，如果请求头不存在，则使用默认值。如果请求头存在，则使用请求头的值。</li></ul></blockquote><h4 id="5、-CookieValue注解"><a href="#5、-CookieValue注解" class="headerlink" title="5、@CookieValue注解"></a>5、<code>@CookieValue</code>注解</h4><blockquote><p><code>@CookieValue</code>注解是SpringMVC中用于绑定Cookie值的注解，可以将请求中的Cookie值绑定到方法参数上，并可以指定Cookie的名称、是否必须以及默认值等信息。</p><p><code>@CookieValue</code>注解有以下常用属性：</p><ul><li><code>value</code>：指定Cookie的名称，如果不指定，则默认使用方法参数的名称。</li><li><code>required</code>：指定Cookie是否是必须的，默认为<code>true</code>，表示Cookie必须存在，如果不存在，则抛出异常。如果为<code>false</code>，表示Cookie可以不存在，方法参数的值为<code>null</code>。</li><li><code>defaultValue</code>：指定Cookie的默认值，如果Cookie不存在，则使用默认值。如果Cookie存在，则使用Cookie的值。</li></ul></blockquote><h4 id="6、通过pojo获取请求参数"><a href="#6、通过pojo获取请求参数" class="headerlink" title="6、通过pojo获取请求参数"></a>6、通过pojo获取请求参数</h4><blockquote><p>SpringMVC可以通过POJO（Plain Old Java Object）来获取请求参数，即将请求参数自动绑定到POJO对象的属性上。</p><p>要实现这个功能，需要满足以下条件：</p><ol><li>POJO对象必须具有无参构造函数。</li><li>POJO对象的属性名称必须与请求参数的名称相同。</li><li>POJO对象的属性类型必须与请求参数的类型相同或可以自动转换。</li></ol><p>例如，假设有以下的POJO类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br> <span class="hljs-keyword">private</span> String name;<br> <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br> <span class="hljs-comment">// getter和setter方法</span><br>&gt;&#125;<br></code></pre></td></tr></table></figure><p>可以通过以下方式来获取请求参数并绑定到<code>User</code>对象上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br>&gt;<span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserInfo</span><span class="hljs-params">(User user)</span> &#123;<br> <span class="hljs-comment">// 处理User对象</span><br> <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user_info&quot;</span>;<br>&gt;&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，<code>User</code>对象的属性名称分别为<code>name</code>和<code>age</code>，与请求参数的名称相同。当请求参数中包含<code>name</code>和<code>age</code>参数时，SpringMVC会自动将这些参数绑定到<code>User</code>对象的属性上，从而实现了自动转换。</p><p>需要注意的是，如果请求参数的名称与POJO对象的属性名称不一致，可以使用<code>@RequestParam</code>注解来指定参数名称。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br> <span class="hljs-meta">@RequestParam(&quot;username&quot;)</span><br> <span class="hljs-keyword">private</span> String name;<br> <span class="hljs-meta">@RequestParam(&quot;userage&quot;)</span><br> <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br> <span class="hljs-comment">// getter和setter方法</span><br>&gt;&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，<code>@RequestParam(&quot;username&quot;)</code>指定了参数名称为<code>username</code>，<code>@RequestParam(&quot;userage&quot;)</code>指定了参数名称为<code>userage</code>。当请求参数中包含<code>username</code>和<code>userage</code>参数时，SpringMVC会自动将这些参数绑定到<code>User</code>对象的属性上，从而实现了自动转换。</p></blockquote><h4 id="7、解决获取请求参数的乱码问题"><a href="#7、解决获取请求参数的乱码问题" class="headerlink" title="7、解决获取请求参数的乱码问题"></a>7、解决获取请求参数的乱码问题</h4><blockquote><p>在SpringMVC中，如果请求参数中包含中文字符，可能会出现乱码的情况。这是因为在HTTP协议中，请求参数是以UTF-8编码发送的，而如果服务器没有正确设置编码方式，就会导致乱码问题的出现。</p><p>要解决SpringMVC获取请求参数的乱码问题，可以采取以下两种方式：</p><p>1.在web.xml中配置过滤器</p><p>可以在web.xml中配置一个字符编码过滤器，用于将请求参数的编码方式设置为UTF-8。以下是一个示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置Spring的编码过滤器--&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>&gt;<span class="hljs-comment">&lt;!--设置请求的编码--&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>&gt;<span class="hljs-comment">&lt;!--设置请求和响应的编码--&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在上面的示例中，我们配置了一个名为<code>encodingFilter</code>的过滤器，将编码方式设置为UTF-8，并强制使用UTF-8编码。将该过滤器映射到所有的URL上，这样就可以解决请求参数的乱码问题。</p><p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p><p>2.在Controller中设置编码方式（不常用）</p><p>可以在Controller中使用<code>@RequestMapping</code>注解的<code>produces</code>属性来设置响应的编码方式。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;, produces = &quot;text/html;charset=UTF-8&quot;)</span><br>&gt;<span class="hljs-keyword">public</span> String <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span> &#123;<br>&gt;<span class="hljs-comment">// 处理用户信息</span><br>&gt;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user_info&quot;</span>;<br>&gt;&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，我们使用了<code>@RequestMapping</code>注解的<code>produces</code>属性来设置响应的编码方式为UTF-8。这样就可以解决请求参数的乱码问题。</p><p>总之，无论使用哪种方式，都需要确保请求参数和响应的编码方式都是UTF-8，才能避免乱码问题的出现。</p></blockquote><h3 id="5、域对象共享数据"><a href="#5、域对象共享数据" class="headerlink" title="5、域对象共享数据"></a>5、域对象共享数据</h3><h4 id="1、往request域中共享数据"><a href="#1、往request域中共享数据" class="headerlink" title="1、往request域中共享数据"></a>1、往request域中共享数据</h4><h5 id="1-1、使用ServletAPI往request域对象共享数据（SpringMVC用不上）"><a href="#1-1、使用ServletAPI往request域对象共享数据（SpringMVC用不上）" class="headerlink" title="1.1、使用ServletAPI往request域对象共享数据（SpringMVC用不上）"></a>1.1、使用ServletAPI往request域对象共享数据（SpringMVC用不上）</h5><h5 id="1-2、使用ModelAndView往request域对象共享数据"><a href="#1-2、使用ModelAndView往request域对象共享数据" class="headerlink" title="1.2、使用ModelAndView往request域对象共享数据"></a>1.2、使用ModelAndView往request域对象共享数据</h5><blockquote><p>SpringMVC中的ModelAndView是一个非常重要的类，用于封装Controller处理结果的数据和视图信息。它包含了一个Model对象和一个View对象，Model对象用于存储Controller处理结果的数据，而View对象则用于指定返回给客户端的视图。</p><p>具体来说，ModelAndView类的主要作用如下：</p><ol><li>封装Controller处理结果的数据：Controller处理请求后，会将处理结果的数据存储到ModelAndView的Model对象中。这些数据可以是任何类型的Java对象，包括基本数据类型、集合、自定义对象等。</li><li>指定返回给客户端的视图：Controller处理完请求后，需要将处理结果返回给客户端。View对象就是用于指定返回给客户端的视图。SpringMVC支持多种视图类型，包括JSP视图、FreeMarker视图、Velocity视图等。</li></ol><p>使用ModelAndView类非常简单，只需要在Controller方法中创建一个ModelAndView对象，并设置Model和View即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@RequestMapping(&quot;/test/modelandview&quot;)</span><br> <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">testmav</span><span class="hljs-params">()</span>&#123;<br>     <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mav</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">      * ModelAndView包含Model和View的功能</span><br><span class="hljs-comment">      *      Model:向请求域中共享数据</span><br><span class="hljs-comment">      *      View：设置逻辑视图实现页面跳转</span><br><span class="hljs-comment">      */</span><br>     mav.addObject(<span class="hljs-string">&quot;testRequestScope&quot;</span>,<span class="hljs-string">&quot;hello ModelAndView!!!&quot;</span>); <span class="hljs-comment">// 向请求域中共享数据</span><br>     mav.setViewName(<span class="hljs-string">&quot;success&quot;</span>);  <span class="hljs-comment">//设置逻辑视图实现页面跳转</span><br>     <span class="hljs-keyword">return</span> mav;<br> &#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="1-3、使用Model往request域对象共享数据"><a href="#1-3、使用Model往request域对象共享数据" class="headerlink" title="1.3、使用Model往request域对象共享数据"></a>1.3、使用Model往request域对象共享数据</h5><blockquote><p>在SpringMVC中，可以使用Model对象向request域对象中共享数据。Model是一个接口，它定义了向request域对象中添加属性的方法。</p><p>在Controller方法中，可以通过方法参数中的Model对象来向request域中共享数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@RequestMapping(&quot;/test/model&quot;)</span><br>&gt;<span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModel</span><span class="hljs-params">(Model model)</span> &#123;<br>&gt;model.addAttribute(<span class="hljs-string">&quot;testRequestScope&quot;</span>, <span class="hljs-string">&quot;hello model!!!&quot;</span>);<br>&gt;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&gt;&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="1-4、使用ModelMap往request域共享数据"><a href="#1-4、使用ModelMap往request域共享数据" class="headerlink" title="1.4、使用ModelMap往request域共享数据"></a>1.4、使用ModelMap往request域共享数据</h5><blockquote><p>在SpringMVC中，可以使用ModelMap对象向request域中共享数据。ModelMap是一个实现了Map接口的类，它提供了向request域中添加属性的方法。</p><p>在Controller方法中，可以通过方法参数中的ModelMap对象来向request域中共享数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@RequestMapping(&quot;/test/modelmap&quot;)</span><br>&gt;<span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModel</span><span class="hljs-params">(ModelMap modelMap)</span> &#123;<br>&gt;modelMap.addAttribute(<span class="hljs-string">&quot;testRequestScope&quot;</span>, <span class="hljs-string">&quot;hello modelMap!!!&quot;</span>);<br>&gt;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&gt;&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="1-5、使用Map往request域共享数据"><a href="#1-5、使用Map往request域共享数据" class="headerlink" title="1.5、使用Map往request域共享数据"></a>1.5、使用Map往request域共享数据</h5><blockquote><p>在SpringMVC中，可以使用Map对象向request域中共享数据。Map是一个接口，它定义了向Map中添加属性的方法。</p><p>在Controller方法中，可以通过方法参数中的Map对象来向request域中共享数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@RequestMapping(&quot;/test/map&quot;)</span><br>&gt;<span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModel</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span> &#123;<br>&gt;map.put(<span class="hljs-string">&quot;testRequestScope&quot;</span>,<span class="hljs-string">&quot;hello map!!!&quot;</span>);<br>&gt;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&gt;&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="1-6、Model、ModelMap、Map作为参数的关系"><a href="#1-6、Model、ModelMap、Map作为参数的关系" class="headerlink" title="1.6、Model、ModelMap、Map作为参数的关系"></a>1.6、Model、ModelMap、Map作为参数的关系</h5><blockquote><p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</p></blockquote><h4 id="2、向session域中共享数据"><a href="#2、向session域中共享数据" class="headerlink" title="2、向session域中共享数据"></a>2、向session域中共享数据</h4><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@RequestMapping(&quot;/test/session&quot;)</span><br>&gt;<span class="hljs-keyword">public</span> String <span class="hljs-title function_">testSession</span><span class="hljs-params">(HttpSession session)</span>&#123;<br>&gt;session.setAttribute(<span class="hljs-string">&quot;testSessionScope&quot;</span>,<span class="hljs-string">&quot;hello session!!!&quot;</span>);<br>&gt;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&gt;&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="3、向application域中共享数据"><a href="#3、向application域中共享数据" class="headerlink" title="3、向application域中共享数据"></a>3、向application域中共享数据</h4><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@RequestMapping(&quot;/test/application&quot;)</span><br>&gt;<span class="hljs-keyword">public</span> String <span class="hljs-title function_">testApplication</span><span class="hljs-params">(HttpSession session)</span>&#123;<br>&gt;<span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> session.getServletContext();<br>&gt;servletContext.setAttribute(<span class="hljs-string">&quot;testApplicationScope&quot;</span>,<span class="hljs-string">&quot;hello application!!!&quot;</span>);<br>&gt;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&gt;&#125;<br></code></pre></td></tr></table></figure></blockquote><h3 id="6、SpringMVC的视图"><a href="#6、SpringMVC的视图" class="headerlink" title="6、SpringMVC的视图"></a>6、SpringMVC的视图</h3><p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p><p>SpringMVC视图的种类很多，默认有转发视图和重定向视图</p><ul><li>当工程引入jstl的依赖，转发视图会自动转换为JstlView</li><li>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</li></ul><h4 id="6-1、ThymeleafView"><a href="#6-1、ThymeleafView" class="headerlink" title="6.1、ThymeleafView"></a>6.1、ThymeleafView</h4><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/view/thymeleaf&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testThymeleaf</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-2、转发视图"><a href="#6-2、转发视图" class="headerlink" title="6.2、转发视图"></a>6.2、转发视图</h4><p>SpringMVC中默认的转发视图是InternalResourceView</p><p>SpringMVC中创建转发视图的情况：</p><p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转</p><p>例如”forward:&#x2F;“，”forward:&#x2F;employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/view/forward&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testInternalResourceView</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/test/model&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-3、重定向视图"><a href="#6-3、重定向视图" class="headerlink" title="6.3、重定向视图"></a>6.3、重定向视图</h4><p>SpringMVC中默认的重定向视图是RedirectView</p><p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p><p>例如”redirect:&#x2F;“，”redirect:&#x2F;employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/view/redirect&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRedirectView</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/test/model&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-4、视图控制器view-controller"><a href="#6-4、视图控制器view-controller" class="headerlink" title="6.4、视图控制器view-controller"></a>6.4、视图控制器view-controller</h4><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p><p>在SpringMVC的核心配置文件中,配置<code>&lt;mvc:view-controller&gt;</code>标签，其中path属性代表映射路径，view-name属性代表需要跳转的逻辑视图名称</p><p>但是当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：<code>&lt;mvc:annotation-driven /&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--视图控制器，为当前的请求：/ 直接设置视图名称：index，实现页面跳转--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;index&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!--如果使用了view-controller，其他控制器的映射都会失效，此时需要设置：mvc:annotation-driven，代表开启mvc的注解驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7、RESTful"><a href="#7、RESTful" class="headerlink" title="7、RESTful"></a>7、RESTful</h3><h4 id="7-1、RESTful简介"><a href="#7-1、RESTful简介" class="headerlink" title="7.1、RESTful简介"></a>7.1、RESTful简介</h4><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p><blockquote><p>RESTful是一种架构风格，用于设计分布式系统。它是Representational State Transfer的缩写，翻译为“表现层状态转移”，是一种基于HTTP协议设计Web API的方法。RESTful是一种轻量级的、灵活的、可扩展的架构风格，它将资源和操作都映射为URI和HTTP方法，使得系统具有良好的可读性、可维护性和可扩展性。</p><p>RESTful架构风格的核心思想是将资源作为基本的概念，每个资源都可以通过URI来唯一标识。资源可以是任何类型的数据，比如用户、订单、商品等。RESTful API通过HTTP方法来对资源进行操作，常用的HTTP方法包括GET、POST、PUT、DELETE等。HTTP方法与资源的操作关系如下：</p><ul><li>GET：用于获取资源的信息。</li><li>POST：用于创建资源。</li><li>PUT：用于更新资源。</li><li>DELETE：用于删除资源。</li></ul><p>在RESTful架构中，资源的状态是通过HTTP状态码来表示的，常用的状态码包括200 OK、201 Created、204 No Content、400 Bad Request、401 Unauthorized、404 Not Found、500 Internal Server Error等。</p><p>RESTful API的设计需要遵循一些规范和约定，比如使用名词来表示资源、使用HTTP方法来表示操作、使用URI来唯一标识资源、使用HTTP状态码来表示资源状态等。这些规范和约定可以使得RESTful API具有良好的可读性、可维护性和可扩展性，同时也使得RESTful API易于使用和理解。</p></blockquote><h4 id="7-2、RESTful的实现"><a href="#7-2、RESTful的实现" class="headerlink" title="7.2、RESTful的实现"></a>7.2、RESTful的实现</h4><blockquote><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p><p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE</p><p>用来删除资源。</p><p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p><table><thead><tr><th><strong>操作</strong></th><th><strong>传统方式</strong></th><th><strong>REST风格</strong></th></tr></thead><tbody><tr><td>查询操作</td><td>getUserById?id&#x3D;1</td><td>user&#x2F;1–&gt;get请求方式</td></tr><tr><td>保存操作</td><td>saveUser</td><td>user–&gt;post请求方式</td></tr><tr><td>删除操作</td><td>deleteUser?id&#x3D;1</td><td>user&#x2F;1–&gt;delete请求方式</td></tr><tr><td>更新操作</td><td>updateUser</td><td>user–&gt;put请求方式</td></tr></tbody></table></blockquote><h4 id="7-3、HiddenHttpMethodFilter"><a href="#7-3、HiddenHttpMethodFilter" class="headerlink" title="7.3、HiddenHttpMethodFilter"></a>7.3、HiddenHttpMethodFilter</h4><p>HiddenHttpMethodFilter是Spring框架提供的一个过滤器，用于将HTTP请求中的“伪造”HTTP方法转换为真正的HTTP方法。HTTP协议中，除了GET和POST请求之外，还有DELETE、PUT、PATCH等HTTP方法，但是在HTML中，表单只支持GET和POST请求。为了实现其他HTTP方法的请求，可以使用HiddenHttpMethodFilter将“伪造”的HTTP方法转换为真正的HTTP方法。</p><p>使用HiddenHttpMethodFilter需要以下步骤：</p><ol><li><p>在web.xml文件中配置HiddenHttpMethodFilter：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在HTML的form表单中使用POST请求，并添加一个name为“_method”的隐藏字段，该字段的value值为真正的HTTP方法，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--put请求--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/user&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--添加一个name为“_method”的隐藏字段，该字段的value值为真正的HTTP方法--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PUT&quot;</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;修改用户信息&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在上述示例中，使用POST请求提交表单，但是添加了一个名为“_method”的隐藏字段，该字段的值为“put”，表示要发送一个put请求。</p></li><li><p>在控制器中使用@DeleteMapping、@PutMapping等注解处理DELETE、PUT等HTTP方法的请求，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PutMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateUser</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;修改用户信息&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>使用HiddenHttpMethodFilter将“伪造”的HTTP方法转换为真正的HTTP方法，使得可以使用HTML表单发送PUT、DELETE请求。</p><h3 id="8、配置默认的Servlet处理静态资源"><a href="#8、配置默认的Servlet处理静态资源" class="headerlink" title="8、配置默认的Servlet处理静态资源"></a>8、配置默认的Servlet处理静态资源</h3><blockquote><p><code>&lt;mvc:default-servlet-handler /&gt;</code>是Spring MVC的配置之一，它的作用是将请求转发给Servlet容器中默认的Servlet，通常是用来处理静态资源的。例如，当你在浏览器中访问一个静态资源，例如图片、CSS或JavaScript文件时，这些请求会被默认的Servlet处理。配置<code>&lt;mvc:default-servlet-handler /&gt;</code>可以确保这些请求能够正确地被处理。</p><p>当前工程的web.xml配置的前端控制器DispatcherServlet的url-pattern是 &#x2F; ； tomcat的web.xml配置的DefaultServlet的url-pattern也是 &#x2F; 。此时浏览器发送的请求会优先被DispatcherServlet进行处理，但是DispatcherServlet无法处理静态资源。</p><ul><li>如果配置了<code>&lt;mvc:default-servlet-handler /&gt;</code>,此时浏览器发送的所有请求都会被DefaultServlet处理。</li><li>如果同时配置<code>&lt;mvc:default-servlet-handler /&gt;</code> 和<code>&lt;mvc:annotation-driven /&gt;</code>,浏览器发送的请求会先被DispatcherServlet处理，如果DispatcherServlet无法处理，DefaultServlet会处理</li></ul><p>在SpringMVC的核心配置文件中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">   <span class="hljs-comment">&lt;!--配置默认的Servlet处理静态资源--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!--配置mvc的注解驱动--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="9、SpringMVC处理JSON格式的数据"><a href="#9、SpringMVC处理JSON格式的数据" class="headerlink" title="9、SpringMVC处理JSON格式的数据"></a>9、SpringMVC处理JSON格式的数据</h3><h4 id="1、-RequestBody注解"><a href="#1、-RequestBody注解" class="headerlink" title="1、@RequestBody注解"></a>1、<code>@RequestBody</code>注解</h4><blockquote><p><code>@RequestBody</code>是Spring框架中的一个注解，用于将HTTP请求体中的数据绑定到方法的参数上。通常情况下，<code>@RequestBody</code>注解用于处理POST请求中的JSON格式数据。</p><p>使用<code>@RequestBody</code>或者<code>@ResponseBody</code>获取json格式的请求参数的条件：</p><p>1、导入jackson的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、SpringMVC的配置文件中设置开启mvc的注解驱动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">&gt;<span class="hljs-comment">&lt;!--开启mvc的注解驱动--&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>3、在控制器方法的形参位置，设置json格式的请求参数要转换成的java类型（实体类或map）的参数，并使用<code>@RequestBody</code>注解标识。（如果有相对于的实体类就用实体类接收；如果没有，就用Map）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-comment">//将json格式的数据转换为实体类对象</span><br>&gt;<span class="hljs-meta">@RequestMapping(&quot;/test/RequestBody/json&quot;)</span><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRequestBody</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user, HttpServletResponseresponse)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>&gt;System.out.println(user); <span class="hljs-comment">//User&#123;id=null, username=&#x27;admin&#x27;, password=&#x27;123456&#x27;, age=null,gender=&#x27;null&#x27;&#125;</span><br>response.getWriter().print(<span class="hljs-string">&quot;hello,RequestBody&quot;</span>);<br>&gt;&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是，在使用<code>@RequestBody</code>注解时，需要确保HTTP请求的Content-Type为”application&#x2F;json”，否则可能会导致数据转换失败。另外，如果请求体中的JSON格式数据与Java对象不匹配，则会抛出异常。</p></blockquote><h4 id="2、-ResponseBody注解"><a href="#2、-ResponseBody注解" class="headerlink" title="2、@ResponseBody注解"></a>2、<code>@ResponseBody</code>注解</h4><blockquote><p><code>@ResponseBody</code>注解是Spring MVC中的一个注解，用于将方法的返回值转换为指定的格式（如JSON、XML等）并输出到响应体中。</p><p>具体来说，当使用<code>@ResponseBody</code>注解时，Spring MVC会根据请求头中的Accept字段来判断客户端期望的响应格式，然后将方法的返回值转换为该格式并输出到响应体中。如果请求头中没有Accept字段，则默认使用JSON格式输出。</p><p>使用<code>@ResponseBody</code>注解的方法可以返回任意类型的数据，包括基本数据类型、集合、自定义对象等。Spring MVC会使用对应的转换器将返回值转换为指定的格式。</p><p>使用<code>@ResponseBody</code>注解的示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@RestController</span><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>&gt;<span class="hljs-meta">@GetMapping(&quot;/users&quot;)</span><br>&gt;<span class="hljs-meta">@ResponseBody</span><br>&gt;<span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getUsers</span><span class="hljs-params">()</span> &#123;<br>&gt;List&lt;User&gt; users = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>&gt;<span class="hljs-keyword">return</span> users;<br>&gt;&#125;<br>&gt;&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，使用<code>@GetMapping</code>注解标记了一个GET请求的处理方法，并使用<code>@ResponseBody</code>注解将方法的返回值转换为JSON格式输出到响应体中。</p><p>需要注意的是，如果使用<code>@RestController</code>注解标记了一个类，则该类中的所有方法都默认使用<code>@ResponseBody</code>注解。</p></blockquote><h4 id="3、-RestController注解"><a href="#3、-RestController注解" class="headerlink" title="3、@RestController注解"></a>3、<code>@RestController</code>注解</h4><blockquote><p><code>@RestController</code>注解是<code>@Controller</code>和<code>@ResponseBody</code>注解的合并体，它的作用相当于同时使用<code>@Controller</code>和<code>@ResponseBody</code>注解。使用<code>@RestController</code>注解的类可以直接返回数据，而无需通过视图解析器进行视图渲染。</p><p>在<code>@RestController</code>类中，所有方法都默认使用<code>@ResponseBody</code>注解，因此方法的返回值会被转换为指定的格式（如JSON、XML等）并输出到响应体中。此外，@RestController还会自动将方法的返回值封装成ResponseEntity对象，其中包含了响应状态码、响应头信息以及响应体内容等信息。</p></blockquote><h3 id="10、文件上传和下载"><a href="#10、文件上传和下载" class="headerlink" title="10、文件上传和下载"></a>10、文件上传和下载</h3><p>Spring MVC可以通过MultipartFile实现文件的上传，并通过ResponseEntity实现文件的下载。</p><h4 id="1、文件下载"><a href="#1、文件下载" class="headerlink" title="1、文件下载"></a>1、文件下载</h4><blockquote><p>ResponseEntity是Spring MVC中的一个类，用于封装HTTP响应信息，包括响应状态码、响应头信息以及响应体内容等信息。</p><p>使用ResponseEntity可以更加灵活地控制HTTP响应，可以自定义响应状态码、响应头信息以及响应体内容等信息。此外，ResponseEntity还可以用于返回任意类型的数据，包括基本数据类型、集合、自定义对象等。</p><p>使用ResponseEntity的示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@RestController</span><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>&gt;<span class="hljs-meta">@GetMapping(&quot;/users/&#123;id&#125;&quot;)</span><br>&gt;<span class="hljs-keyword">public</span> ResponseEntity&lt;User&gt; <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>&gt;<span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.getUserById(id);<br>&gt;<span class="hljs-keyword">if</span> (user != <span class="hljs-literal">null</span>) &#123;<br> <span class="hljs-keyword">return</span> ResponseEntity.ok(user);<br>&gt;&#125; <span class="hljs-keyword">else</span> &#123;<br> <span class="hljs-keyword">return</span> ResponseEntity.notFound().build();<br>&gt;&#125;<br>&gt;&#125;<br>&gt;&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，使用<code>@GetMapping</code>注解标记了一个GET请求的处理方法。该方法根据用户ID查询用户信息，并根据查询结果返回不同的响应结果。如果查询到用户信息，则返回包含用户信息的ResponseEntity对象，并使用ok()方法设置响应状态码为200；如果未查询到用户信息，则返回一个空的ResponseEntity对象，并使用notFound()方法设置响应状态码为404。</p><p>需要注意的是，使用ResponseEntity时需要指定泛型类型，用于指定响应体的类型。此外，ResponseEntity的构造方法和静态工厂方法提供了多种重载形式，可以根据具体的需求进行调整。</p></blockquote><p>文件下载的示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/down&quot;)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取ServletContext对象</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    <span class="hljs-comment">//获取服务器中文件的真实路径</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> servletContext.getRealPath(<span class="hljs-string">&quot;\\img\\1.jpg&quot;</span>);<br>    <span class="hljs-comment">//创建输入流</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(realPath);<br>    <span class="hljs-comment">//创建字节数组</span><br>    <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[is.available()];<br>    <span class="hljs-comment">//将流读到字节数组中</span><br>    is.read(bytes);<br>    <span class="hljs-comment">//创建HttpHeaders对象设置响应头信息</span><br>    MultiValueMap&lt;String, String&gt; headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>    <span class="hljs-comment">//设置要下载方式以及下载文件的名字</span><br>    headers.add(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=1.jpg&quot;</span>);<br>    <span class="hljs-comment">//设置响应状态码</span><br>    <span class="hljs-type">HttpStatus</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> HttpStatus.OK;<br>    <span class="hljs-comment">//创建ResponseEntity对象</span><br>    ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; responseEntity = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;<span class="hljs-type">byte</span>[]&gt;(bytes, headers,statusCode);<br>    <span class="hljs-comment">//关闭输入流</span><br>    is.close();<br>    <span class="hljs-keyword">return</span> responseEntity;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，使用FileInputStream读取指定位置的文件，并将该文件的内容封装到byte数组中。然后，创建一个ResponseEntity对象，并将该byte数组作为响应体返回。在创建ResponseEntity对象时，使用HttpHeaders设置响应头信息，其中包括Content-Disposition，用于指定文件名。最后，返回ResponseEntity对象即可实现文件下载。</p><h4 id="2、文件上传"><a href="#2、文件上传" class="headerlink" title="2、文件上传"></a>2、文件上传</h4><blockquote><p>MultipartFile是Spring框架提供的一个接口，用于表示HTTP请求中的文件。在SpringMVC中，可以使用MultipartFile来接收客户端上传的文件。MultipartFile接口提供了一些常用的方法，如获取文件名、获取文件大小、获取文件类型、获取文件输入流等。通过MultipartFile，开发者可以方便地处理文件上传相关的业务逻辑。在Spring Boot中，MultipartFile也可以用于处理文件上传。</p></blockquote><h5 id="2-1、添加依赖"><a href="#2-1、添加依赖" class="headerlink" title="2.1、添加依赖"></a>2.1、添加依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-2、在SpringMVC的配置文件中添加配置："><a href="#2-2、在SpringMVC的配置文件中添加配置：" class="headerlink" title="2.2、在SpringMVC的配置文件中添加配置："></a>2.2、在SpringMVC的配置文件中添加配置：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-3、在controller中编写接口"><a href="#2-3、在controller中编写接口" class="headerlink" title="2.3、在controller中编写接口"></a>2.3、在controller中编写接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/test/up&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testUp</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;photo&quot;)</span> MultipartFile file, HttpSession session)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取上传的文件的文件名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>    <span class="hljs-comment">//处理文件重名问题</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">hzName</span> <span class="hljs-operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>    fileName = UUID.randomUUID().toString() + hzName;<br>    <span class="hljs-comment">//获取服务器中photo目录的路径</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">photoPath</span> <span class="hljs-operator">=</span> servletContext.getRealPath(<span class="hljs-string">&quot;photo&quot;</span>);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(photoPath);<br>    <span class="hljs-keyword">if</span>(!file1.exists())&#123;<br>        file1.mkdir();<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">finalPath</span> <span class="hljs-operator">=</span> photoPath + File.separator + fileName;<br>    <span class="hljs-comment">//实现上传功能</span><br>    file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(finalPath));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="11、拦截器"><a href="#11、拦截器" class="headerlink" title="11、拦截器"></a>11、拦截器</h3><h4 id="11-1、拦截器的配置"><a href="#11-1、拦截器的配置" class="headerlink" title="11.1、拦截器的配置"></a>11.1、拦截器的配置</h4><p>在SpringMVC中，我们可以通过配置拦截器（Interceptor）来对请求进行预处理和后处理，比如身份认证、日志记录、性能监控等。拦截器可以在请求到达Handler之前或者到达Handler之后对请求进行拦截和处理，可以对请求进行修改、重定向、转发等操作，还可以对响应进行修改、包装等操作。</p><p>下面是配置拦截器的步骤：</p><ol><li>创建一个拦截器类，实现HandlerInterceptor接口，并实现其中的preHandle、postHandle、afterCompletion方法。这些方法分别在请求到达Handler之前、Handler处理完毕之后、视图渲染完成之后被调用。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 在请求到达Handler之前执行（在控制器方法执行之前执行）</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 返回true表示不拦截，返回false表示拦截</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 在Handler处理完毕之后执行（在控制器方法执行之后执行）</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 在视图渲染完成之后执行（在控制器方法执行之后，且渲染视图完成之后执行）</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>在SpringMVC的配置文件中配置拦截器，并指定拦截的URL模式。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-comment">&lt;!--配置拦截器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--bean标签和ref标签所配置的拦截器默认对DispatcherServlet处理的所有请求进行拦截--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;bean class=&quot;org.example.springmvc.interceptor.FirstInterceptor&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;ref bean=&quot;firstInterceptor&quot;/&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!--拦截哪些路径   /* 代表拦截/后面的一层路径；/** 代表拦截所有--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;mvc:exclude-mapping path=&quot;&quot;/&gt;   不拦截某些路径--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;firstInterceptor&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在上述配置中，使用<code>&lt;mvc:interceptors&gt;</code>标签来配置拦截器，使用<code>&lt;mvc:interceptor&gt;</code>标签来指定拦截的URL模式和拦截器类。其中，<code>&lt;mvc:mapping&gt;</code>标签用于指定URL模式，可以使用通配符（如&#x2F;**）来匹配多个URL。<bean>标签用于指定拦截器类。</p><p>注意：SpringMVC的拦截器只能拦截请求到达Handler之前和Handler处理完毕之后的操作，对于视图渲染过程中的操作无法拦截。如果需要在视图渲染过程中进行拦截和处理，可以使用过滤器（Filter）来实现。</p><h4 id="11-2、多个拦截器的执行顺序"><a href="#11-2、多个拦截器的执行顺序" class="headerlink" title="11.2、多个拦截器的执行顺序"></a>11.2、多个拦截器的执行顺序</h4><blockquote><ul><li>① 若每个拦截器的preHandle()都返回true</li><li>此时多个拦截器的执行顺序和拦截器<strong>在SpringMVC的配置文件的配置顺序</strong>有关：</li><li>preHandle()会按照配置的顺序执行，而postHandle()和afterCompletion()会按照配置的反序执行</li><li>② 若某个拦截器的preHandle()返回了false</li><li>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterCompletion()会执行</li><li>如果在拦截器中有返回false的情况，那么后续的拦截器和请求处理方法都不会被执行。因此，在配置多个拦截器时，需要确保拦截器的执行顺序和处理逻辑正确，以避免出现不必要的问题。</li></ul></blockquote><h3 id="12、异常处理器"><a href="#12、异常处理器" class="headerlink" title="12、异常处理器"></a>12、异常处理器</h3><h4 id="12-1、基于xml配置的异常处理"><a href="#12-1、基于xml配置的异常处理" class="headerlink" title="12.1、基于xml配置的异常处理"></a>12.1、基于xml配置的异常处理</h4><blockquote><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p><p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver</p><p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：在SpringMVC的核心配置文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml">&gt;<span class="hljs-comment">&lt;!--配置异常解析器--&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionMappings&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">         properties的键表示处理器方法执行过程中出现的异常</span><br><span class="hljs-comment">         properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span><br><span class="hljs-comment">     --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>&gt;<span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment"> exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享</span><br><span class="hljs-comment">&gt;--&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionAttribute&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="12-2、基于注解方式配置"><a href="#12-2、基于注解方式配置" class="headerlink" title="12.2、基于注解方式配置"></a>12.2、基于注解方式配置</h4><blockquote><p>在Spring MVC中，异常处理主要是通过<code>@ControllerAdvice</code>注解来实现的。<code>@ControllerAdvice</code>注解标注的类可以用于处理所有Controller中抛出的异常，包括系统异常、业务异常和参数校验异常等。</p><p>具体步骤如下：</p><ol><li>创建一个异常处理类，使用<code>@ControllerAdvice</code>注解标注该类，同时使用<code>@ExceptionHandler</code>注解来处理具体的异常。</li></ol><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span>  <span class="hljs-comment">//将当前类标识为异常处理的组件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionController</span> &#123;<br><br>    <span class="hljs-meta">@ExceptionHandler(ArithmeticException.class)</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">handleException</span><span class="hljs-params">(ArithmeticException e)</span>&#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>        mv.addObject(<span class="hljs-string">&quot;ex&quot;</span>,e);<br>        mv.setViewName(<span class="hljs-string">&quot;error&quot;</span>);<br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码中，使用<code>@ExceptionHandler</code>注解来处理所有的Exception异常，将异常信息放入ModelAndView对象中，并返回error视图。</p><ol start="2"><li>在Spring MVC配置文件中注册该异常处理类。</li></ol><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.example.controller&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>上述代码中，使用<code>&lt;mvc:annotation-driven /&gt;</code>标签启用注解驱动的Spring MVC，使用<code>&lt;context:component-scan /&gt;</code>标签扫描Controller包</p><p>通过以上步骤，就可以在Spring MVC应用中处理异常了。需要注意的是，异常处理类的优先级是按照声明的顺序来决定的，因此，如果有多个异常处理类，需要注意它们的顺序。另外，异常处理类也可以继承AbstractHandlerExceptionResolver类来实现异常处理。</p></blockquote><h3 id="13、注解配置SpringMVC"><a href="#13、注解配置SpringMVC" class="headerlink" title="13、注解配置SpringMVC"></a>13、注解配置SpringMVC</h3><p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p><h4 id="13-1、创建初始化类，代替web-xml"><a href="#13-1、创建初始化类，代替web-xml" class="headerlink" title="13.1、创建初始化类，代替web.xml"></a>13.1、创建初始化类，代替web.xml</h4><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它来配置Servlet容器。 Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了<font color=#3271ae><strong>AbstractAnnotationConfigDispatcherServletInitializer</strong></font>并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.springmvc.annotation.config;<br><br><span class="hljs-keyword">import</span> org.springframework.web.filter.CharacterEncodingFilter;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.HiddenHttpMethodFilter;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;<br><br><span class="hljs-keyword">import</span> javax.servlet.Filter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用来代替web.xml</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebInit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置一个配置类，来代替Spring的配置文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SpringConfig.class&#125;;  <span class="hljs-comment">// 将Spring的配置类放到这里</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置一个配置类，来代替SpringMVC的配置文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;WebConfig.class&#125;;  <span class="hljs-comment">// 将SpringMVC的配置类放到这里</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置SpringMVC的前端控制器DispatcherServlet的url-pattern</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">//设置当前的过滤器</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Filter[] getServletFilters() &#123;<br>        <span class="hljs-comment">//1、创建编码过滤器</span><br>        <span class="hljs-type">CharacterEncodingFilter</span> <span class="hljs-variable">characterEncodingFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharacterEncodingFilter</span>();<br>        characterEncodingFilter.setEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        characterEncodingFilter.setForceEncoding(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">//2、创建处理请求方式的过滤器</span><br>        <span class="hljs-type">HiddenHttpMethodFilter</span> <span class="hljs-variable">hiddenHttpMethodFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HiddenHttpMethodFilter</span>();<br><br>        <span class="hljs-comment">//将这俩过滤器放进来</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Filter</span>[]&#123;characterEncodingFilter,hiddenHttpMethodFilter&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="13-2、创建SpringConfig配置类，代替spring的配置文件"><a href="#13-2、创建SpringConfig配置类，代替spring的配置文件" class="headerlink" title="13.2、创建SpringConfig配置类，代替spring的配置文件"></a>13.2、创建SpringConfig配置类，代替spring的配置文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.springmvc.annotation.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Spring的配置类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="13-3、创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#13-3、创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="13.3、创建WebConfig配置类，代替SpringMVC的配置文件"></a>13.3、创建WebConfig配置类，代替SpringMVC的配置文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.springmvc.annotation.config;<br><br><span class="hljs-keyword">import</span> org.example.springmvc.annotation.interceptor.FirstInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.context.ContextLoader;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ViewResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;<br><span class="hljs-keyword">import</span> org.thymeleaf.spring5.SpringTemplateEngine;<br><span class="hljs-keyword">import</span> org.thymeleaf.spring5.view.ThymeleafViewResolver;<br><span class="hljs-keyword">import</span> org.thymeleaf.templatemode.TemplateMode;<br><span class="hljs-keyword">import</span> org.thymeleaf.templateresolver.ITemplateResolver;<br><span class="hljs-keyword">import</span> org.thymeleaf.templateresolver.ServletContextTemplateResolver;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用来代替SpringMVC的核心配置文件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;org.example.springmvc.annotation.controller&quot;)</span>  <span class="hljs-comment">//扫描组件</span><br><span class="hljs-meta">@EnableWebMvc</span>  <span class="hljs-comment">// 开启MVC的注解驱动</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置默认的Servlet，来处理静态资源</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> configurer</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureDefaultServletHandling</span><span class="hljs-params">(DefaultServletHandlerConfigurer configurer)</span> &#123;<br>        configurer.enable();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置视图控制器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> registry</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> &#123;<br>        registry.addViewController(<span class="hljs-string">&quot;/&quot;</span>).setViewName(<span class="hljs-string">&quot;index&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置文件上传解析器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CommonsMultipartResolver <span class="hljs-title function_">multipartResolver</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonsMultipartResolver</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置拦截器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> registry</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        <span class="hljs-type">FirstInterceptor</span> <span class="hljs-variable">firstInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FirstInterceptor</span>();<br>        registry.addInterceptor(firstInterceptor)  <span class="hljs-comment">//添加哪个拦截器</span><br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)  <span class="hljs-comment">//拦截哪些请求</span><br>                .excludePathPatterns();  <span class="hljs-comment">//不拦截哪些请求</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置异常解析器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resolvers</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureHandlerExceptionResolvers</span><span class="hljs-params">(List&lt;HandlerExceptionResolver&gt; resolvers)</span> &#123;<br>        <span class="hljs-type">SimpleMappingExceptionResolver</span> <span class="hljs-variable">exceptionResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMappingExceptionResolver</span>();<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        prop.setProperty(<span class="hljs-string">&quot;java.lang.ArithmeticException&quot;</span>,<span class="hljs-string">&quot;error&quot;</span>);<br>        exceptionResolver.setExceptionMappings(prop);<br>        exceptionResolver.setExceptionAttribute(<span class="hljs-string">&quot;ex&quot;</span>);<br>        resolvers.add(exceptionResolver);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置视图解析器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//配置生成模板解析器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ITemplateResolver <span class="hljs-title function_">templateResolver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">webApplicationContext</span> <span class="hljs-operator">=</span> ContextLoader.getCurrentWebApplicationContext();<br>        <span class="hljs-comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span><br>        <span class="hljs-type">ServletContextTemplateResolver</span> <span class="hljs-variable">templateResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">ServletContextTemplateResolver</span>(webApplicationContext.getServletContext());<br>        templateResolver.setPrefix(<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>);<br>        templateResolver.setSuffix(<span class="hljs-string">&quot;.html&quot;</span>);<br>        templateResolver.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        templateResolver.setTemplateMode(TemplateMode.HTML);<br>        <span class="hljs-keyword">return</span> templateResolver;<br>    &#125;<br>    <span class="hljs-comment">//生成模板引擎并为模板引擎注入模板解析器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SpringTemplateEngine <span class="hljs-title function_">templateEngine</span><span class="hljs-params">(ITemplateResolver templateResolver)</span> &#123;<br>        <span class="hljs-type">SpringTemplateEngine</span> <span class="hljs-variable">templateEngine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringTemplateEngine</span>();<br>        templateEngine.setTemplateResolver(templateResolver);<br>        <span class="hljs-keyword">return</span> templateEngine;<br>    &#125;<br>    <span class="hljs-comment">//生成视图解析器并未解析器注入模板引擎</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ViewResolver <span class="hljs-title function_">viewResolver</span><span class="hljs-params">(SpringTemplateEngine templateEngine)</span> &#123;<br>        <span class="hljs-type">ThymeleafViewResolver</span> <span class="hljs-variable">viewResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThymeleafViewResolver</span>();<br>        viewResolver.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        viewResolver.setTemplateEngine(templateEngine);<br>        <span class="hljs-keyword">return</span> viewResolver;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="14、SpringMVC的执行流程"><a href="#14、SpringMVC的执行流程" class="headerlink" title="14、SpringMVC的执行流程"></a>14、SpringMVC的执行流程</h3><h4 id="1、SpringMVC的常用组件"><a href="#1、SpringMVC的常用组件" class="headerlink" title="1、SpringMVC的常用组件"></a>1、SpringMVC的常用组件</h4><blockquote><ul><li><p>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</p></li><li><p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p></li><li><p>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</p></li><li><p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p></li><li><p>Handler：<strong>处理器</strong>，需要工程师开发,也就是Controller</p></li><li><p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p></li><li><p>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</p></li><li><p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p></li><li><p>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</p></li><li><p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p></li><li><p>View：<strong>视图</strong></p></li><li><p>作用：将模型数据通过页面展示给用户</p></li></ul></blockquote><h4 id="2、SpringMVC的执行流程"><a href="#2、SpringMVC的执行流程" class="headerlink" title="2、SpringMVC的执行流程"></a>2、SpringMVC的执行流程</h4><blockquote><ol><li><p>用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</p></li><li><p>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</p></li></ol><p>a) 不存在</p><p>i. 再判断是否配置了<code>&lt;mvc:default-servlet-handler /&gt;</code></p><p>ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p><p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404</p><p>b) 存在则执行下面的流程</p><ol start="3"><li><p>根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</p></li><li><p>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</p></li><li><p>如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】</p></li><li><p>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。</p></li></ol><p>在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p><p>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p><p>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p><p>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p><p>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p><ol start="7"><li><p>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</p></li><li><p>此时将开始执行拦截器的postHandle(…)方法【逆向】。</p></li><li><p>根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。</p></li><li><p>渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</p></li><li><p>将渲染结果返回给客户端。</p></li></ol></blockquote><h1 id="四、SSM整合"><a href="#四、SSM整合" class="headerlink" title="四、SSM整合"></a>四、SSM整合</h1><h3 id="1、ContextLoaderListener"><a href="#1、ContextLoaderListener" class="headerlink" title="1、ContextLoaderListener"></a>1、ContextLoaderListener</h3><blockquote><p>Spring提供了监听器ContextLoaderListener，实现ServletContextListener接口，可监听ServletContext的状态，在web服务器的启动，读取Spring的配置文件，创建Spring的IOC容器。web应用中必须在web.xml中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">&gt;<span class="hljs-comment">&lt;!--在服务器启动时，加载Spring的配置文件，获取Spring的IOC容器--&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br><br>&gt;<span class="hljs-comment">&lt;!--设置Spring的配置文件的位置--&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="2、整合SSM"><a href="#2、整合SSM" class="headerlink" title="2、整合SSM"></a>2、整合SSM</h3><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><h5 id="1-1、创建maven工程，在pom-xml中添加打包方式为war，引入依赖，刷新maven，右键项目-—-Open-Module-Settings"><a href="#1-1、创建maven工程，在pom-xml中添加打包方式为war，引入依赖，刷新maven，右键项目-—-Open-Module-Settings" class="headerlink" title="1.1、创建maven工程，在pom.xml中添加打包方式为war，引入依赖，刷新maven，右键项目 —&gt; Open Module Settings"></a>1.1、创建maven工程，在pom.xml中添加打包方式为war，引入依赖，刷新maven，右键项目 —&gt; Open Module Settings</h5><p><img src="/img/ssm_img/springmvc_%E9%85%8D%E7%BD%AE%E6%AD%A5%E9%AA%A41.jpg" alt="springmvc_配置步骤1"></p><p><img src="/img/ssm_img/springmvc_%E4%BF%AE%E6%94%B9webxml%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84.jpg" alt="springmvc_修改webxml文件路径"></p><p>修改完web.xml文件路径之后，就会自动创建webapp目录：</p><p><img src="/img/ssm_img/springmvc_%E4%BF%AE%E6%94%B9%E5%AE%8C%E6%88%90.jpg" alt="springmvc_修改完成"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--springmvc--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Mybatis核心 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mybatis和spring的整合包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 连接池 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- log4j日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- ServletAPI --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--文件上传--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span> <br></code></pre></td></tr></table></figure><h5 id="1-2、创建表-1"><a href="#1-2、创建表-1" class="headerlink" title="1.2、创建表"></a>1.2、创建表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_emp` (<br>    `emp_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    `emp_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `age` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `sex` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `email` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`emp_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br></code></pre></td></tr></table></figure><h5 id="1-3、配置web-xml"><a href="#1-3、配置web-xml" class="headerlink" title="1.3、配置web.xml"></a>1.3、配置web.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置Spring的编码过滤器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置处理请求方式的过滤器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--设置SpringMVC的前端控制器DispatcherServlet--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--配置Spring的监听器，作用是在服务器启动时加载Spring的配置文件，加载IOC容器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置Spring配置文件的自定义名称和路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-4、配置SpringMVC的核心配置文件"><a href="#1-4、配置SpringMVC的核心配置文件" class="headerlink" title="1.4、配置SpringMVC的核心配置文件"></a>1.4、配置SpringMVC的核心配置文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置组件控制层扫描--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.example.ssm.controller&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateEngine&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateResolver&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 物理视图 = 视图前缀 + 逻辑视图 + 视图后缀 --&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 视图前缀 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 视图后缀 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.html&quot;</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateMode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML5&quot;</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置默认的Servlet，来处理静态资源--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--开启mvc的注解驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置视图解析器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;index&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置文件上传解析器 id是固定名称--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置拦截器--&gt;</span><br>    <span class="hljs-comment">&lt;!--配置异常处理器--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-5、配置Spring的核心配置文件"><a href="#1-5、配置Spring的核心配置文件" class="headerlink" title="1.5、配置Spring的核心配置文件"></a>1.5、配置Spring的核心配置文件</h5><p>在Spring的核心配置文件中既可以引入MyBatis的核心配置文件，又可以直接对MyBatis和事务进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--扫描组件(除控制层)--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.example.ssm&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!--通过注解来排除@Controller--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--引入jdbc.properties配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置数据源--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--整合MyBatis--&gt;</span><br>    <span class="hljs-comment">&lt;!--1、配置SqlSessionFactoryBean，可以直接在Spring的IOC中获取SqlSessionFactory对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;/&gt; // 设置MyBatis的核心配置文件路径  --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!--为SqlSession配置数据源--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;typeAliasesPackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;org.example.ssm.pojo&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!--设置类型别名所对应的包--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mappers/*.xml&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!--设置映射文件的路径。如果Mapper接口的包和映射文件的包一致就不需要设置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configuration&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--设置下划线转驼峰--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.ibatis.session.Configuration&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;plugins&quot;</span>&gt;</span>   <span class="hljs-comment">&lt;!--配置分页插件--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--2、配置mapper扫描，可以将指定包下所有的Mapper接口，通过SqlSession创建代理实现类对象，并将这些对象交给IOC容器管理。就可以直接@Autowired了--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;org.example.ssm.mapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <br>    <span class="hljs-comment">&lt;!--事务--&gt;</span><br>    <span class="hljs-comment">&lt;!--1、配置基于注解的声明式事务管理--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--2、开启事务的注解驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>jdbc.properties：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://主机:端口/数据库?serverTimezone=UTC</span><br><span class="hljs-attr">jdbc.username</span>=<span class="hljs-string">用户名</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">密码</span><br></code></pre></td></tr></table></figure><h5 id="1-6、创建log4j-xml，引入日志实现"><a href="#1-6、创建log4j-xml，引入日志实现" class="headerlink" title="1.6、创建log4j.xml，引入日志实现"></a>1.6、创建log4j.xml，引入日志实现</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">log4j</span>:configuration <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;log4j.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">log4j:configuration</span> <span class="hljs-attr">xmlns:log4j</span>=<span class="hljs-string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Encoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m (%F:%L) \n&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;java.sql&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.apache.ibatis&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;info&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">log4j:configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>视频地址：<a href="https://www.bilibili.com/video/BV1Ya411S7aT?p=1&vd_source=e710048bca758289bcc6b7e0e07eec72">https://www.bilibili.com/video/BV1Ya411S7aT?p=1&amp;vd_source=e710048bca758289bcc6b7e0e07eec72</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring5</tag>
      
      <tag>SpringMVC</tag>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谷粒商城</title>
    <link href="/2024/02/26/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E/"/>
    <url>/2024/02/26/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e6fffee2d88d76516102a28ce67db668f62158e9348b19f9b5f033d179722456">a22b4d6ba16f62f5ce50bb41f7280562951b4bd069a0a864a547df1a7167b4a50b224cb5de30e82448355444b181828e9667933fad6eb47beb74fbcdd69cdf1252923af34b2b45f997ba6805425c1a3034d879b847de912511c296703feb6694678371bb80ae761f9204c0fb70de4a872f16c8a2c37d83badde9d39e605a61fd6b3b353dc8603305b4b7115f5efda2469a345ce2dd933eddecd81930402e5098997ed504b7c49f9295f5a9c927dc41b9859f04de3aeaef3e59acf9bd0e8a9a7a0a5142c590b9da6d7bf5f865bf8ad73595156731e54e6351bb7ef9333a287951ff14f6059358b6662df65c4ba0da8f4d39017063fecf438b1bab87c4a8eb9ce551e98ce6f5bfa19b70ab05a0b084bf4d7f88ba29b6f8797d881e4072e944db1d124e6f30591a308f8f157236beac6dee54ca6e65db5dee189730de463d0f1ff9c092853db8e1eabfbb2764c0204933bca1b0c15c0263e7b0177d29bb207e56fab99b5a49fda45e37b3323369d311e3291c86150f7c4371e6d1be74bb14e1c71b514061dac97596b81f1fc6b035bfb83223294342472a6e2a6c67f2cfbe80155358604248b1f38f14e796881273f4fe688cb8e4df8d59082f0b7f145abbeb81234ca995ade610feaf54483510c70cf12a26316a3bdbb0433860397a23cc5c0ed0033608ddd222eaf3fa9c238fcef48070142a4daf3f031855b0d8900501d2c45ca32fdf984aa79183659f99ae100624cfa2a2ca9fffa0d3a7193fac4662d515c85a9ad0c8b6fa10c91e1e60a3c6f725078c67ba1b37a7ee464cc1eda54e73e31f9a04c3cb8121e9abd728e83273934032e787b43d31dbfaf96e911f43647345c7b644d1c653ebdeaf3a36734156c34502d99db0becf176a9d853a87963dc460a7fbb2fb69426ec762664acd0c706c7ddfa632d4b857a10476b2a0ccfceef7322c4790ed9214d9dc49b58ef75aa3fb3f07c8100566322140345c5dd5fb6ef8c6cf36be0903e7a98c3fc81f60d1c6395d52ee802c435190a36936e8d9adf9f65f1ff2f7ed1b4e29bce5ac9ec8a3bbd0f9674ef13d5a0fbca49baac274edc15e42b9d2e65b755601999d44ea969e2a1a5c735bd5c3fde35131e2b4b7617f61314399a54f82e87d3374862c38dfc2ac73aecc8c2f089d7604684f63187d8f8b4a228cbcd997395377181296db8599a99fd0ac1ad65b2a7be7291c091b229a4e66d7555bbc4edf375b1ad9f815dfc42d87f7a0ea6926835355138066f2aac3201dc1dd60cf35e25f7755adb4f6b9de24bb72ce8c66f645d383ac1fccbdb553044f8634c573d1c836d96cc98c596155b05142147112a5b10c874621f7bc728747295e4a0db5cec39e685be913e787978069128e40d381c8fddb23d0eef8b906707b5ac64f70273939197c825ac20545d1c59b592a123bd181aab33358fe29a7b055357f141afb15947cf9171c8d10692227b2b6f157a4a278e0d30f887f2d76541c36460835bcea7b453355213ba6fa4d9ad0466039d546f9fdcba6b9296d1df8e29417ee6de46e33eae670e8c19cb62b506dd329b933b8bcdb7879220e07497c495aa61f2bc5d3998b2d378257c4b17d6aa6d6cc089baac1bc9eff5a87d3076490acda4407be15819b324dc695456044bdfde3e66b226a99ccd3fa17031c3a0a10e6d7c6efec85e4ad238bb8f7561eef08522641f63ed42102561d917622517088269e800fde12dd8eb6fd32adb9d4d8f594fdb75b1b490c04055ffa7e2cdf899e2e9165cb6fae0e647948b4099073177c8898f66d74b324e0d5e668aff429bab27cb329a0bc42fd7924ba61fa2da3c20f2f5a6c276a7db7f9789bb1297d86df07626d9c4c9e6093057140babfc82560906c8f7bbf1aff14dcaafc5c1b6777cebe7136d1ea1ea5525c86f45d43bfad9fbf96ba2019726b60fb9aea4a90e4b1221301d929dd22df25dc22b0587238e1e052af34016e03bf847b871c148f014c15103255ec12d9badebab2070e1c0a6be6a365d2a74cd690c65255048e47dfc9340df9ac44dfd0b98ecdafa3ab3f2e4834d60ab9d3960fc851c64a675fde2bf3da75847e0bfbacf8294bc6b85aa24fe81e7ea026f97c517989119488541a9115a4b7ffb4643dba4eef5083e2190599d0dc2628651a77f93a25f2f6116f84f9406c7842fbaaa826086271a64c0d7d281c053881ed7fe8e590a08116cc221fc495a1d1662ecd6570b50a33c9820f3d836afb9ca748c8a84c8bcb68fa3db8ed706ea78f8032c951e6c4c6293d4c173660ab4e88d136cc2f1154eb06d684559311092b00ef07ddc521645b449ce809fefa5d7b3a52493ea5e20738f3a38847fb4ad004b8ef8da479c0dde403c2aa94a15aa048f48024bbfc81f36fd48cab2c35a1f071e1ee863a21bf3578983c1e707730611c325eeeabd62bbeebc0060e827bdbc2fe1dd061b3a30be34e64d347908cec1776d805d113c40a38dceec965ca2bc74bf9393f623e39d6039e36023d64cb0aa151733e533d6ef31e2ca9b1a11c48d3542e260577cd51ed5cc6287f262ea7c419df36c0f153cc6cbb243d41b31c8671bf8700b779286c77da7cdcd06689c461a5f5a5c64ca5c32a25b7584d5044de1adb446d24f56f10594c7f4979aa184227dc099c0819f6089ca5192c5899c2246ddd9c98843a6c5e15cc1d5d054ab2ac0fa691086ebf6896f7939160bed7e01799735ff1698003097afa2502372f7777b2b36198a3c4c9991848ff8b5dbb0fa950883c9614349525e05eeea99119e0db1dd5993a5509fc02ab74161b1be5dc6ae2676a08632e9baf2010f9b441bee29b2dd8d1028acb97aa08eb7bb9586ded060830a745a235199c2fc5f8b3f094715ae3f3f5dce25311430a38fc0fe97ccf87ea90fd61af7536cf7349dad8186538068d3cf74c1284cd38706bcb721cce2fb92b41c1a6d8616c675831d23765216954ff87ba91b160113cfe106dccc38aa0a9773f413e4e6b74c550fc57072690e09360d571fe674319906f381497619e94e9756d53bbdf0f5375a4aaea51607d150bec4f89433ed81dcf79a950eff832a555e6e29b31e1d53d0ef14676fff29aa3725f62244db2d1cf2f8328f951fcecc0262d293f793a9e9676f9e47e985a9eadf2272c805afdeaacc35431d26b01791b4bd084963c599d0dea2f4b5c318f2fc6a24e9d7e63d8a01b07b3295b0244aa945f5085fbc9d4b066a79ecec6cc5d67b489faea51f4c39b1fd777bdcc558cbd3e85ff840e5a401ccfc6c3616d2a3f9af29e96154211075464eeac5d6229cf1357cede878e2727f228c84c6851b1f65f838b8aedb4e9b8d7c3a828d2a0578f60953159013190c6ace100c08b5fcd9ca8e4952d8aedc432c1d00678be4d74126d067a80e1f35dd3a5856b132f90e218c9204e319c151e16152a935da55efb200f74e3b2cef9be960fc7a92acef5e288def571beeb59a7e6cc3797b0e3c21e1398bb68d59fad0199daf55e15bf03a142bf046a5ee40af09132bb31495879a89bb27bfcb94e3ae3376cd1ead3ae508ef3272b7623ffcbeb1ec11ce872063b898931e92e7ec5a4896d0f05296268eaeb06337ccb33dcc23febed8e48c5ec3e38783600888166bc9eb0c58fc5e713c34fa63c68ddc4768a01b78eff4d54ae5400fc9429676c01609b26c2a682a5836a62d59d46b3657fac25afbd94720848b3b64a6033a1c8a0e1e5e5707b309cf9d3d1ff4603d83e394d1b8426e0d05c01b3b0d64256de6963abed9b9515dd6e820b70e61b53bca46128929df864cd9d3e3a43754d511d374e892597c79b78c5578c8ce6a056313d8da015f8ee761f240a341559364fca67a3c3a61e4cd7cf6371c5d8235b0d98dd1ddb49d3defd8f41fa5ff89b9a6d4cb364db3469a844df43ee3b5b66d340f299ab8dd78605383ac055130a0e0e71d18247ac764665b641c3442b0c13b47ae0430f2be7704de2299b7b1738481e942c59d893d41b4193262059e5d72063cf8da00db238fdb05a2b3fdff22bceb1e937201c829851d57bab1d72b190a70235d4a0d62009949317d2dd14bf754746490e2baf052d71833883a073d6eb0cdab91dda7a043cd44d58afafc306c44504f9c6ecd22c99ca8f72617d9d9446f16eea1a003b1cc86c8fe921f65368c67987b78c253309e814d6d1b4e09109b9eb689ee7079f20bcf5e31d1e390365b01c180bccf92feac3e50765a5d49680dcbd1f985b14be2981587f1f56593f4a228367560d0228016287bac9000edf6302dbda94dc6ae4f0c465583749637527ef76b45e4728cb465e91ce81d757a5490a02a98e6479ab11c71e2c42fe091c252e024e346a4066aecab4ad9f8d22cfd3abe9fa67681acd73e1568cc6f06265564c705af855fc588e8b2f543addba11451b36db08ebb5fdb186823700acf23c22ecccdf38a85e8b5871c90034f8c97cf7fe8cc44b58496bb99d1f3b463d5f4988c895433d302b2c1c6ae4324188fcd227b64b18059f444d393927b56f88db81236ccd58fa335d0df5e3d7ffd4fa8546bfbdc63d3cd4dd24590944d736d6da35cbaf3926a377b6596eee9c21b61a0f4ee5b18fa6f6692c16faad3f1a357b1d771b4eac81388be67ca8399be5b1f025e3dd0a012ea88c66a852cfa261e54bef38d12385126809473e37abb9366704cf52184b595fbe1eacbae70507463ff302f38bfe71fc2d8767e63a5e0f55729cdfeb530b43a1cdc6b497b8c8729606646d192045ef297ec47bd667fcdb345666407c39a5ee208528017d7686997b575c29811ff281e4b782dd514c5bb64aab7b576941afa33aca17a7e39ac482b892022ec092ef7e6d397955f0e0c9dd847082a760fd725a32c7f0e7cd1eb9d7f13d94fbae528ddb9b06106018bcb58125254964505ef5d0588b53e85b296c39f60a3542c7f85b6281cb0103ac2a7551c8defb9f4fa48f6fb01a55bdc01ce1dcdaaf32c3e56ee425ec3666f3478c43b242b2466db512f99f3fee8f5dd3c11c0d7e7e136718361b7cddb651932e310ac74460cf4bcff77d5378565758261ca75dca488d08d259d7817845c13caba427f36d2b182ae56349f572fcab1bf706c0364f93ea0de6386bd5b5fd87d40f7f9ba4f3022156f6327b0171d31003b0b6f71ccd67b0b429d4e6bd015e8f598f4cb48eb72e5bf7895e5e691646a26e4833230ebc78d80d3f22a058eddf32006095430ad60c667ba2ce89b0f29e0063725a0a66e96c7e14dc33513c6ef6e915466cf02860c2aad779a9d290e51897ac3cfe6a1032b381f1d30a5fda070194b2787841c7c65c31abc08389ccad77e3156d55a8804cc94d16d9f057dbeaf75950cde358e2ed011850e9a4dfcd335fe770fda5bfbc07ab0f79c0a20dec8a2c33f5785c375d4bc11c9cfd5d985e9286379e4db5181497c9e778f7427745bd059ba8f3c856f26ea3b2c054cd0c806d2d45a90b5fb4433af5cc6211964dafb277b553ccdbdd98ff71d1fa8721fa86e7d00d97070b8ceffc12d10eb475ff88fbc88c81cf5ce0e23acef440b4c7088e12802c7a4ce050df02b07eff9a8d93abd0fcbd895b76a4a7677d6be1c8acbc177373cf3c9511489c50b422cd795aaa71563a9fbcc03efb659bb9cac904dbcec04e201453adf9442a8a60c0b238140e7864b61ddb89e5dd5ac2f48650bd8077cac598b772f67361944e809ddc91aba6457236abe708fc8aadf4708258bde437fc7342b7cf792948b33caa45134b0d6135e14eb314a8b56c05e179f11cc9f7afcb00c6805422b89b27713244eb9707ac8065e82d18172946c66d9c246a42b2c3b84f8c447bf5c3747e80b76aada8acaf56dc071f321225d30f1a71fb586b10a9c420d628b8610d0ee4c292e7cc4c253ea987c7dfa132400418d5a46ab07473c45c235034393af54ec36e22471579dc032bdc68d8b974e80b1fbe5615c4cbfe29932ac92a9ac88b1f018b001479084a4a0b8f8038af034db6e00d6fac90139488b0e69739b7845daea5ba8e58372642acf619f6ed928594b3768019bce50a6d4443916115424c570a44a8bba474747adb5aaf6f7b8705947d91c735476494ccbc027dc5062b3ea21abd6ab06e61f4bc686f652e61e852217f904d7863219e5807274c43571611ccadf23f542802b8e232d62419f705137a05512c646993c13586716c5db7bccbdf0ddc1afa340c46e5daf93a5b9a4dac485772f0ffb12052d9372e146d895400d992f1b222c430dd6aedb651150e3f4f4e4db4842e918ba3d2d0eb3be041f3c1aae6e62ac883c98cfefa22519946da312426fc20f74908e35ecf27da9be224c9896096b5549ae80f5951d6695858a4cc2aa88b86da4583b7c014f707f8e9e0c4f234ecb707fcb0232dde49e410b4baca24f8078c30683540c450c4201b184f7e744d3f3877d5ab40f2ff8fda4d70ca90ea51dfbe0203af2c295e95c05dacde46d597ba6f3b52e739cea9d60a95fd3934875973e45880ab8ff111abb23d36f37d665449c96eeac83eedea55598e0963f8c0f0cf82d8355721dda6a251e9922bd26bd4d735fe8926943c7160ed8407e3aeb7348f2d99297970ae94ae856b2d0698c7d277f628370d385ffb189fe4b2551cb0c864aa27303c1d78445678a0cf2e6ea32864b639a62d4a0adc988698be750986961f7be42d8fd88650c5a6b28b23365d0a5fd88d4e740406a8819f20493838e9533688dd20a4e2b0a89ce862c32c151792c56cd9862c8982e4f9536604c5b05d5a02297cebb088c6c99599ee4f22022706ea1bc0c62b1e8f0876b5665410be8bf6e297063cbda658ef672a44ff38d28787ebab85063e25955e88bce060379bc078804356d0e09aea628f48189b0bc006e7ce04e2f19f3936609cdb782d21657fe59fa9e577e49b19109bc09fd086d4ae93df959b0256645a505bf4de93054024a6965b437fb62295d328ea9bd174b6b7e847a7f663bbb79740557af26f7c1cc59de1af256c245140e3c26d102b4179e583e2232b4cf8c5b316f079ef8aa0bda91073dc68e30d9494dd2d16c482427837dcda90a12b449ace83fa4cafb1fc0873ec7b0f804a38cf3c8b12f9a07f78f37e1a9ffba29d47b9295da723094831185f46487bd0db42297e74aa044025a80ea50fb1b85a97a486ab9cafd3673010b5c175e4ee60f63db0553ac79da248b135a59c34e57e749ed14787cfa87d11dff4bbe54cfbabb75c6c22239f13192146032438e2ddc1e3f6c629b83ade0ccf8b0cad5c13a93cbbff9839556de2ba42f3b422df5731a4bbf3a73b92f7454402e5ca3a731e8eff5aab03b1cde184f6f42b6292074df60525aec27efdc9a6a365f189ea577c8c6b948495162b825cd617e31616d0b3baaf26adc4f9c30263537952bd13b5bf8382efd3a538b3b49bfd505386a70311f11fc7f6fe0122f160f4ce693e01edb38747b2cf776d0cf2b3cc9180a690430a1742adccc6fb12b815f58a3e204a9062aaf3c33a3bb422ea373dad4351d1f5a53e376ce1704f1398a6cb568e9b7e2270d2f136484507ef383e1b3dfe42063a087d669924597d9fc19199aea07094ebb64fb3c28f0df01bf185185eb2f06c436995827018dcd25e7bac90732a652adb2b1abc4ac67493bcb012222513378048426ad52b0754c1dee9aff1d1373d295fa0973c504dbaa31e970d581fbb66540b37d78e6a9c2b88eb81e686be6ac29ecbf5c56e9bd0416bcea9a6774ead588b44f119a408a794e97d8dbd5700e25d78102e1db9a6a22fb87521c6e7465dba9f0ae943f03c7cd27f085e32082224c987b9fad127f93a480e3b1fade1b5ee87a2e7bac81605da02fa74814673b94fa0eaa142de1a36e286090176f4897a7db666f9cd20210b518c69efb967358607d97dced6fb3879b853e801f1f01b15ba6d885362caa7e4f006d9dc4e7bd2e90de2a9ac7f3cb7e019470af5e6f82b8923b6fa5184d9a2a687d266684babb017e6459f36e1d2d9558949774d8c9e9b51aace39aff7ab71999ba2f728d829289075fccec9dc2d7d3c832af113e3949c5914694d30583c77c517394e61b40a48d9af794d5bdfd5dcd20d26e0434326d5df5aaa4fff4765b7ed8fa3d424cebc9af8aa532998fc06f0b7ce95f11e53e3c22e439e921149f5e0b894e816ea0bcdd0b5e958b0c6446f13f41200b4b2f14b48adf979b2ec1aa3409e3fa3f1b314b4793a1b2fc3d57f350685a190b67a9d6ec643c9858ff0f48be6b1a191fa0b5f3f90237999e032c857d5838fd8185cdbf52ec99fafe59e814e3084f935ab8ad663622863adad5be78b6c51ecc1d19d8ab51b87cee5e10216d9b3e387d7af66251360c4a589ca48c1c91826d844c264ec5c082221fb32167469e96fe1380297dcf2d306558116a53caf38f3140ad4a94643dac99d8791032a31dff447246169a928a42f179d913ec0629067925a65786c365a235b6b1c683e1d9a24c2d3bae902f8731f68e3447e6c75e5e670b656252b1d30bf2bb3a45fce1f09d896fa7c11cd2aa2018e0755db9a5e98c30e586875eb54fb04ffa6d3abf65738a7f08ab0cc5fed21a82711201a502fd4e19aa64f2e7cbef7863239020f407d22d585bd1501a334db11c1d5f813fbb6a33403d5605945e5ae777c7fb3f87b48aa8c65d4acf7f83f8f7b01e728cbf261c8ae3193e5552aa5fcfc117c2ab1ca1af50a407fa85fa40f84858fac51b356f437346a69e5eb00608b6e3045c84866f92ed48bbecc977cc7e3badc402b7c91adeebe1edfab1363bbddd34ad7c390dd92f09412e8d2d50a946bd3ce682561fda15da015a26fbfa3292b0cb3410b697ed032b588e4a54c17b7d2779dea30f5eeb459b08a65446058cfe8f706271c273f71c87a4b91c562580d8c77ddcb662fc9c5b76a97e8cf65acd3f7589a513985dc379d9639789ebe008fb1caacb569fbc2eaa8482138b0b019373176a147a0a161f3d78b9b39c6f196a5af0d46f254c4e93289ccccc7577ddfde9d6a43e14b41072ecbaaf076d81f6b475f274d05079233f44d6840ffd1e10ad97e87f100cc0025917abc69c1af8971711a6cbcd50c80552d7348f93ab1e3d5f5c491b97cc4f01567cfec2de3beda8a0f7a00f3e04bfb029d0436b265f32ad28dc0605d0007b51dd1260c38960788672e65cb2e0679d17dbf8d30ef69deafc9ebefc56b3873444948285730ef800a09df6513b15d13bd3b7bc5880e6ae40be7ae2de4f5c5d337a459f3ddbde2bcec666613e23b783983db3cb388fb39c909a9d49d65462e96ec05cf4248055f24f889884c5808b27fc090ac893f43c4ca7f259a62f0012cf13d46881183b654221026d00adc24473d4ddae841f09571ed35d31fac57f4580f4d2802b1a0fcad68273bbeb0504967a3745ee69ea554ae60f9c72136cd8c173cd4534b44d8e7946c26b7bdaeec3c761d8d1db0512cf9251b32eec6461a95b8ba8549bd39860622da125163e24f40d83dd20a33291fb95bf10d8ebf0c72a5cddecfb38f5778938052876cc4391955fa9796bc4c4ce9c0f268cdd5f04908d365ce9b0b93eb1e817d21f60482122135bf3c81776f1cd750d825bb30d05e60f0b31538f289bb1e0e3e052028a4e356ade663e88e092004f9a5034ace98c65bf34db25d119d0a5414e317f59dd436938024344e045a3d5db3e05f46f549f702b8c49b5dd7009544cfd2271403051ae87ff553e068a77a2b21b537baeb3fa6ed4f0b28d9558f142ef884b6556b3849aa9677da97c574eb62b568d7838661c892bf99f9f4995884d2e80f4cd6e2cc1656215a20e8a1df09c67515e012ca87d6e31bfad37cebd03f037d9fd32280044f21df1dbfc44b4406e38e51d670994aa7252443e2cd950d5f6af591d16e65f610c253be32ad532c50b5b131af2cb7854c7d8b70aff2702d73cb3dfe2cc70d4e17d5b781ad6728abd06736c8ed337524543584db99ac0f978bad7eaffcb8f0c3dade655b809cb5facbddf581a6956b5790dbbc11b14d986212d920a1cf683129c954acc76f0ea428b27643a651613e0fe7ee18f1345eb073cb980394d5ca7c208d3b4284843ac5bb431f9e2ec658dcfe200d8818a0986bf5f7485a4580beef0bbd3efba2dd1eca5826274316dafe56ecd19974c986b2bf3a6dabc28751108ed559bcdf4cc09731d1e5b64767d43c2bc6af624c19e93fc607ab9a44fbec4217b72ada1bc8399943a844fbd9dd0dfab3cc1a1a79d3ac22210b8ce1ce36ecfb255d2802e46b05e505c0bf3e4beed9ed6e69be0f715ae082bb5a2ccc1e9f932a317fa61b4c3a1203a8fcfc7ba8c7cba51a8cfe1283e1c3dbc8809a924922de66714466c5530c653fd321fdbfc621835aa732e20c35ecdc5ca07e4a342cf5bcad9ddda7dcf1034d3c19cee7a9cc90b969c5978c25e0d64b2736b4adc8e5b5cfc0822e6893818af769a90674b95673e30f7afdab365b8e1fcb4eb909a5b9cf9ed3cb4c88e816cbef71d6a8f79e2ccd1da72f5b982fa05b96790dfc7831cc908f071fdd89135b35703026ad9919d19934d2272cdd628a11cfc66e2220332ad2b6ef572fd0f89d086adf952bcc82c7bffbc3ed3ca0fa84a387404eebfb6156b0c2b70f8df73f47239b28c3090bf8bc399322f255069e1d59f910dc0c9d48f97d73eb1ab705ff8aebcbc67be6dc3ebe46906e23b02a186e4aaeeb6f4b205766e127e8931f3fc525d1997c2f4e7b613db0125760b8e1e798f60374ddea6a25cec9ebf4b4a03e863d07af1759e986f796a94450fe218d6119ad43026928acdc828054bfca8f351ee4515670ee7d9f9f8865968c699008f94579c4e46569654e9cffa4b63ffcb44f26d5a2af8fb3f3798bc5baac48888527c24ea64b0d097c23269773e5b41e89b6b6460edf07a4644c07a4c25f62e0dbf2820128583597535ce54b065406db83ce97f183ce685ead558243bc8fbcddc4c3ed8b94be0a7bab69f354d81714018958c35b990795b077f9026927a6b23f8cb68967a4543451993b6ae586c87bb99cf7262a874d01b7b85e04be0ac02f582d3189c1a21796b67a45ee5acdc76bc128152197443a0cb8ac42fea19d2c47ecb669ac6bc473d6c9581a43930ea0b24ebccc1c70c736301bf9e45d9b7e40a11d3dd2ff66f29bd01d90a8ddc076136ad0306dad9fcbbb3cd694cbf92f13a38b43defe8caea7f30f42e6b749f5e10709bfa0078c8cf116c2aa38797b15db385e04c8c333774edc09cc4de7302c4c8259bc925f37ddb7fbb034fd1ff6204577a5a06a18b7462d6e06467cbef68c809d52b8658afe675586a4e6539503cd403c329e2360c340e9e7bb20acd80bec4e4c826d9f7c877980e345c27ab93a28a83ee1b8bdae1d65fe87b4ea2b6e709acff0e6c008761f4a5161a57b5ba8975ed0b9b09ec6006a81ef0bfaac83e313c27755642c08ac9161332fb6883a180854a5e6a24453b8513f8045f698dea8b9621be90d87b7df36b786d25607905550f76279ebe0b88019bd1719c33821e22e4ca31f906b09da262fd93d3dc64a4e713b3a362f8ba3048e8ce87dac0275cb0821fba7454a081d01e02cd797756f4bf78161a45a4289fa3f08ab74bced9ffa73583e1a010a8426ef16a99f7d0029bfe9577d306676ea8414203e2b1f1bbf5659459bbb6b43e67a642f0c56b3a84acfa9ba36c63da62e9a3087b64dd470e350d614089f4b1cc64deb70f137e9a04fd588eb9704d92e0ee180ceb427dc3db93feae0e967a2617dc2274220bf3f2559b5637db675345eb0a156735c3d6625815244693741b781192a39891207596f0be40797e1ed247e9584bcfb151a6dcc5a1131ef62fc1106866fdfe181b41026b1a08e5635f1ff27e76e12e0960388fa496a3e58e44f31809c69cc34edd5bb3138f701c15af5ab067414b1499a50c1f92d1585d51356d34d6b69dc96f91bb768c5cebc97e65ad22f41cfbe88a13aee9d60bbf0c6aee8186310b1b3903a2af063cbc742bda30b3897ce361efb1c26cd57341aeec415e1263be0803883969aab01ac810e56635d150c4761769c485ed88bfc2adb4e04723bd9925c26f6f4bf7c7654af4293fc01d8906fdd93635bb3ecc4902b92ff3d27ba59dbc5dfbd14c464cbe58f46443f003d7ccd76cded071a2f4e21d836508384a357600e0d94829157e11f427789723b735596504a7c390766fdac1c5a9afb09ae2d53365885bd8cf97f2386396d6755bfb22a1d48c936c88ce160632f4bf747e2e11757d27f0099a35fa5170f7430c7c05b7e5bfb0f617e8917888af813688df4dbd97f13719d03f070a04b61d112e5cbd4686c1ac341ff473c4415fb48df17ae96f8aea7e6602b8f34863418e87ee0ee282e6c62249bbc84240ceab164290a350e97ad402d8bd7a18864fe6203a9a3175b3841b6996a94765b679c6cd58c70225a2093a28e3454a86d7771fa7b78e50844c0676e7cdfa62da7917f1f8a7017249a79d1bd0ac09ac99d8f42842afde0435f812a523f0ea261ac1ade912cd5263667cf77e2e192ecc7212d0557101bf4df6f067a0b1fd3b6a32e7e718b0e49734eba783e822b23a666a0dd3aa83633498f710fbc013794063a993fbe3be66e302886f626632dfbfc938078d22649a66b657695fa2c23ee4a2dd173b76a33ec3729e0528b5d5e0c83a9a9d73f9687bac80ec4a4858b70fb203e320a1c6b7c6308389a484cb59d891021f8abacd1e69f01894f912ea1476e922c8799a79b5b16835c3b46a992e9660497e55ba3a4a9e0ea0e74181a53cca2e0ed3927e076eda98bbc61e10c4a768cd286fb995dc8210d74dc11e1bf4f24c3c1632ed9aece3d73f2875f5995159062a92888ee3444032ba852353c3c43f9ccb9549bdf93a955909d7862af9bc78620edab29012389be93a678e8a439e33b8f1fa0d22ab40c3222acb33d254dc801827314dddd9502a41795e1ab82a74af9d549ceb2b6ed95758011f73da386ae8537d3314937ad47ed499fa28a6af1ada12746eeeaddcf08828abab2c46c1be9c491d305d466b1457689ddd65bfe537ea0cdf394b80aa4972b254eb1ac5d3456d56178938e8ad2aac68deda7a397c676dd4efe81e7679d20c62c1ed14c9b463ffc83e857a0ac2158f38e4bc429a2b66bdf3096ca0575a8cbc258d936c714235159b5e284857e7153a8d7990cee9fdc55922cca9e0f7506725afad23512f23c2651586060e99b48e7b0c0509445f1d5606ca9a3cec98868dff1f6c9f8305ce04b1e7c19279ae85c757ad9c5b85439176087c6e525c09f7b4b8e284350a6df49a99a25be1f8761e14d6f33ab9a2ea0b0c4b9bc4d18b2eb0abae1d097ac2169ff41cbb848220aaa7075fdf6b1dc88955d63ba5d24fb601e23cc58ae8565d7d6aa71873d9265c9bbb5b3c9e946c8eb6bd90ed24a52958f7572d8f9e667a76f058bfd29dadaa0d3561b643edd0fed66f2ecb387948914a58e5f737d5f53d11c5281e9055358300b42cbe0abdc400954d609c0cd10948d906cc333f5f08a3af31666bd12ff865fc786fc018e918a928cdac963f564938e392bc845d69e9d537fc5ccff33ccee237b2d04980ace6db660c28f9ef3dd9ff929993c40a44f2a44c395db8005f0c87324db4cecdfecae688de6dc10977cc7946506b09f26136bec5e5cf4216a087f8d80ed94c1342b2ebb3947e6ae16d6614aac76e58dacf50d60240ecf2a998ce1a5d694645b0185ca85a1b2e84c1ac8c7e246e12d9393a96abd049c9363f667e06f9bfc9083f7e51d873f3bfbb06aee7780f675cb951f4d6339d93dddd3f175a41913f21fc3286baf115b6b9d4291233c90ece3f2b858120d60153f68d63ab79c689ddb089b91b79f4dc57882a4e2e506b8b50b0ffbfbc8cc1b34d775aebee3f142e1512de65775eaa3f630e985563ec7015ab26fa9e643e561da38db798826bbe626a9b20093e96d18d3877301e524095d82d14bf9f9a3aee5f9ebe9888c0aa95d97071fdfe264293ff257fe474652d6d5d24b34cd6ae6057d416862dbe1977aafb0132983dc69b9f34a5fc9ea5476ea1fefe1ca89563ac139fe2db3d671307169c647e382a0ab5a75b6bc4451b5901fd0a8fd07e8d6b73fff0d734a7819af0afb97b54be3dd0bb9c8c7316ff229512ac264e06c4b16c43105f7d7d29545cac371ddade10b9b3b23a3353d6af4cddd70cd390f1891f7325c04580f2de5eb12df71c4561f09d148f8c8e36dd9b31cfa4ca492ee4bf57322cf210c61975fa960f5811e62e6319d4b01a8080781f2d9deb7544c08e70c1f8200b081235db43f25381a75ff644a5272cbd44a465d7007aca8f46feaf33cb173fd60d81af8394f82e547430e4802772e79b7a02e49586f5e563a47e452e0b752efbb20d07217907655099613ecb525aebd799a8d580a1f3c46cbe68abbf706a70f8b578056376f00bf966b2e151f90770f7590753d6eaab159efaa7cbbe0123c47fe4a33d608cd94aab6898d6cbb6821e7ec498b8d9f0ecd7f7705b60787a6d2b90b5a041825a6ae26708ff1d6fd6723ac5758a093878858a3c773f9967e5987d1e2e3492d8601f2d5cc805386cb0372ac967f8fe513193c667ce29d5f4bfef3e0723d309b3c6cffc06d23f905f5237b1f213df94de790496aaa8593f43abea48f8f6edf1b14a257087c752a42ca04c69d488f5f713fe191bd3d9091b91176c59b1fc146efe3608505ed50da4257bcac16b70aa1e12874b7860d316f75a4214485185dcea8c6bcef340f5ff49d3b4df89056743bb825ba20f060cabad7ed7f7f9f355288263e1fc0df4d0c94be9928cf2d434bf303e5f3c3e3d3ab10135907199f49cf920b1a6b93bd3988a2919f7f0915310666f29fa4cd52be5c7e1d14b031cc4ba2e8d363f85fe2fa8907278635c7fcd0b1a4c106d4172dcceda9003a495eedff8f32775b75633fa6ab89c272152a7274130028e9f8fab122da113aa4a95a2ca82aca14c30f5b8b4e7dc8a06b6afc21004294011f8abc9dee4b9a35acb76d4c523ba34432b60e1bf7d97cf836728c88042beaa88bff5db378cc294546c3cb55893cacc7fed951c519867abe04dde8c536e58571857e698deaba1e70f88878063d864438e3203a18be12c39a4f445f1f824177a8a70f3c323b14937ef27ca35b4a39ff332edc9f8ae2d027f39c09c5a73c93e38994b7f772359ba8daa541f1194639937fd9b5280bd4d598bbdc1019117edcee7885622d526e31e79c96fdbdb1ac1e7c8993fe61b40f649df86d5e45a8fdc65bbbde9df93724f801811aa0ee5e81e37691c2027d61c5fbb370770927f11a07dc1fa2e84fdac7d90fb7d03326bc7d3bafcc9e77f1a95ede68174ed5de6c6eeb4386007fa48cce366c2ec8858a428e67243a9611d84796b3f86d50853366e80268c4f9419819bcc91ec14029a12444e018bf27516d2ea2ed90574bc9b022e35af475cf08b4aee0da518e8ab937bbb2ec870b96d2d423899d5870774910187f5ea72815fbb27db24a459347a1944fb4fd0bc12ff27615cd4d1c374b24f3290162563f37efea8a5a26897efe048b648125f5a9a170fcc45d6720beb70abbc528e4c3937026c2507f7afec0310fc306caab3a0fe250290c47921751aa9fed6ca3a167e3c7c1714b72cf8551dab7faf5dbbab77c1c3b645848267527fd589814e2710284d4efb934e894cc6a51851bae264953db37c7c64ce0d85b0b679963e33926b1eee6805e44d2792568982ac037867d52ba455d6f9f65685300da055339274739fbf7c8823dd368f46601760b28c47475e314cf299499782e1b3a31ff72771775d036a92ab04b25e01ac512bc6cfc48fafc58b3d2a79200abf7eba76285e82d90a1a3aaae2ca3eb86b0ccd4384a5cf42a76f6a0488ecae2576ef5d8b2f3f12fc71f43d059069751133f7eea1d5f0525367e1640e1f0e67b0784715281e26acad1544566ef6e52c7394fc03b9b517ee3460361ec16d3f76c0b47217b3ac497bace0167e3b39e1e5bc701aebc54d917d1aa5476a96478045a26ed6f51f49df690974cb3d2a90f33a8d4feea13065ff984d34026e9e5250b17154531878b4c8463e0605d14568c731e72cd73f7e0ab44f1e75bab8018d4f4d7a7c786b8ff3ebcb9a3f67563028b80347e7e09129cc7f1c31d0cf87b00af51cab8d6dcf6699be06f80b1b0b5596e4a6bfd1a46913b482785cd59cfa6d74927d6032ec3215017e019e78e7cc541169d680b040d4c60f00823cc1b408ed304020339997ae7214da06b16e51ba311c7dc6f898a2004c774c1f4e93a33d2a69c22637ca72b64734a26dd32ebfb578e22c425e4004c032c900f11ce624e82848ead6fc087f9bf8a36ede3552466045b8af7c0afbc5a6557d40501807269b11be4ab7bfb40f6543fc43e9e131e64b5411b652d569f95c992ad4f1978f561cb44f6e6196e6d9e51d17bc3dcf935f747cc2cd2a058eef502a8b76043daf48557d4bd0264d3a9910bcf32299583091933aecd3b9ec7dc715f81b50d01f45a63e44bcd18bf4ed9b6649349fbc1645e34962c7b5a431020905d5634c8fa8eca667a99188f42274e05e5f7948e9e3222427ef3c2ea2db9faf3116d3910411577a980fd6acb36354dd0dd37d2c1af9f0ef1cb7b92d64decdc919108c7be5ba9b9b8540a472b94377fd85a61ff600868596d019796b9dc94e242d074c361e29418dfda4160f5222ca2862938f460632462f899b72eb7f9607b8b9370ab90ce952eb4b59cdb5dfe2c16a3ba450f6c179b32ef4453ec200cf38505f30865784514da8ed5db560af8036badef5be012ec29f4626da64773ecdabd37de20c1c8fd4133ce8d4e6c7b9a01435515f1abd104bba175236c456f7969eb2d097a5a920236bd66b4b57b05a32facd24f78a0efe3d20980ce70fda8e3319bbce9fbbdc2277de63228065ab1c6f983dbb495dcfbfd0aeda9d1b1733bb755deed7e3e31539268826a44c3006a77dd01cf7675cb391547b92161b2e613451289e0dcb8c6d1a253054ae23cb353db07e7e3d660274d0fb11c46ed0dfe45fd10f2cb3929e0649dd53f97762c8a940e9dd9bbb301b9af5974c2678d9831247942dac5446a4a0e7f5f78362cb3aa910c0b72e7d1a4e953456d1ab3cbed8b51a888d84bbe640f3f398cc8320913aa5117c20cc29dbe1201c7fda26643ec5c8198931e71661752ab6fb23bee0fa12982357c019bf57262a3accaa1c40d2dd3d37aa19b304dbd226c1d2a13d3bcd4af844f6dd0cc478179d536521b7bf7d97aea050d4cf7b74d999129a45affb3401f4ca3cdc79263c12e62923364b0ace86a015b4fbfcd1c7e2cb0e1953803095cea0d4951337cead5f9a28b32f1232b3f7bd9faa135b2b48ccc9322f0b119eb2489f8cc44a7084f746b0cdbe94b4703a6ea5d52b5f32d2b7647413a7aaa49b092cf21909fb7bcc471c8772d6a345aa9cfbe03ab06660a6b028893eb70cd7dbb5e063707f6b8e9929e8078a390b72b10aa89bbc7082fbe8518886468ef96d06bf8e6d64694796c3783a2cabcf285fa73ed767a6050e09509ed28ec656934ec5e60d194e4a99256fa97828cf1af6fd6ab46e4d5bb85e00a8a7fa1d5a5b1a7863d7dba47f9dfd4b8eacaf043e251a3511efb29d84562781036016f347b20b46a0de083a7a7bbf64e6dcf60e6faa2fd0bcb91f73f5d398d1b2141bb8b216cbf67ddffcc0f8e36acdf28be8a444e68e9902dad4210fe8f8d51ec75d13094a54de4646e174aa26ba08a4ad9de38a9c1562c3a68cea89d1970830d5effdb153fa40883af06550012bdc2fe9bfa486e4e65486a5820ef14f4ca3316270203a2f4df2924443c2d20521f698f96d027a47b5bd00c4f1d0f6d366a747f58a2416cb582d86084bfca8b6e7a7bd482ee29e4e4026d0fd5e48ef1a12c92b447d85e6e2f230643b0a4e388bf3daca3cb1115c0d2e3cc78e4407affe56bcce38845aabe659489fb7e82418a251fab503743cfe645f9e40ecd3b4792763950819df20559b4e284ccae157cb3555e95fea575f098ce501e3809d112613784af7dcd0d7819d931c22db64f5e8d8ecb86693990e57c53195f227f918431da5abd4619c4a0bbecadd26535ef35f07ce3dae59bebd0da0f61f1a6d4a94eee25e5a9000009f5af1c9ceb3bf374678af41ca72f407b07d7fa4f3834afa7332851145b8f1a79beba10b600c1bf8f371c00629525cf8d9e009038eb1986b0d83f2a1dd66272b543682e54b8a1d6b4e2a9260a64bb5d1ec580986d206f927eafd187422eb94c71d4eaba3045365a9d1e9c833a073a93ff67a230a886b542a7416ce93421d52aa4e56bea4ff9662cab323faa0aec68fee5f008821eac16bf9dc40a555a63c5771e447d78c5097532738d44226bbe105a7da5615dfdd0a331bfbe3dc74cd4607e9b7caf8227fd8d58fa65e40d674ab331760b751186431559e51124c571ca6a7815c1b84472daad07cce9c9d36044b186b8031c6263da09c42ac2d9af08e578ab20ca6eaa8882591c4b343c3544a89c2e8ecf6dac8236b65f996bb87f4adb1ac86212bb1bd9487dd9b10ac130dfbd4a04e3948b42d7a2d94b04f8701f51c4c8ebef4b85de76c2a167ec4447d6c60ce8f70c686140bfc976906d941260ed37e12e1ff936579ab5ff39b36b172fbd323377374bf26ab114d56a7d76c259d2f137e4de8d19797e13355eba243273837f6d18574dc693abb2dd17aa91c24c5ba9801d4385287b7fa6d386a763245b0929a0636b6fd8c66a914baf7a5c8f44e97321621dc443ed97ec12f6ffb8ec860391f2c802c6d43e3d797ed9c2ddc4f6065420670ebf651f3cc0ce774d2663689b08be156d70a214fb01c27cc17654d0244be4a2fd8ba2d308ce2e7b1db85b580de8dedcce57c3beb2d2b119e01bd03f93f0a193a9525c56f38081add822469ccb4795c61dce800e666fcbae6be1c405c5199f7085ce3fe4991343c0571775cbd10949f820bc0fe23c0c5cd985d1d9cb7cb3c1d9394816c81672bdba580168b7fff6d9d848dadd92b34b47ca4e2d8185b3adb30728d7925075b6d7665370a58c3b742c7208befceea44ed01e4aedd948ecfad0a6b617f70603334dfd987e65ab4eee34a1a9796e6755c7084578a5e07534f56003d363e56d582a01fff19fc123ad94dc855b84743cbcbd7823605f7a77b0249ab6a5c5a5c9c32723bd5ae79e6abccfc0f12cb47e5efec7c42346f0ddcd7a59202abf6fb99d13ac8080223630ee511f320cfaf073fd6b44975dc97df2297ab6e6dc5dfedf475ccb43dc01de97ac40e83dc3ee0a461e0ec9d01391dcb9426002636e64e4e4a110865295d761978d60f2d8152ca0d49e4f58fc8041bf166b7a7bf2446e4c61d99c4580c9a684b352c077af92aa09a05ddd9ccbd79aba63b47c9da2ec55eb279c3c0cfcdfcc51ab82d6f246764005df337c2f1eb02fe63e15c801c1ebe73e939a3dd88fa24c5789d86132125791e6a35093ab415c1bef9645470a46ae393efd4ba63274aa731c51cc44626d9acdbcaf6de5a5a4ad27a2530e9c2e95e172f72083faa381736a4d404fde1da0e4af985c5b224f1978283ad10ca65762806bc165ffba432f2a474b986312afa9fc0d174c94a2151358ca407dc455684aa01f146e0c8f69380936b29d5db799b3835a6e4287b92fc380d75c22934f96f9b8cfaa077d5800ce54e6853e39b02312115c1334756532aa962795e3e3ef17fc3cd671566f92d189eecb6a76566d7ce44eef7ea1fda5a1a29cd36276dcd892eed1dc5dbc1a3ab4419b03ca2f3779da35a01fc1ca754330124fe39abec1b7cfaeda013f1eff3b9c97aa2c90fc84eacfcedb8a1b0087876f9b5d22d08bb83a60e207d94293b5cbeb24b0466398f44a31cd25d1cbad676f4679baf69c38b01fff9ef009d19236ee0b76efa8bb165199d08b4a70a97479fcf5583f2fd63f689bb2303ee393878c9d40cdec40096689293dacf28de6e9461d021ab85bbd4dfac66b119e851bd2833992c7b805f6c87c48618401b109bc1fd8ace9355f54dbb0e659d0bc356838f250ffd61fb1f70f4f8dfda277ad4230246c16ec8de36f376cc59447c46d79cb278f4be71c1d95ce7e59c3aa401fdd3659b5e9de4a16e51a3f443316a403091d85bd42c601d92de0383514262c278bd7809e6dd81180c9a4d4b46eaa7299b083ef3c4aaacace9bcc3c018d57ea334ca7b14bb0ccd29d25d36d90b68e5f78fa4c1eace6fc672655fe67dc35628f712aab48629ab3a74b27155f1871ba8e69fd0c26bd314c5fdbe01bd6007aa7b325d7294daf1babf1ebbfae0c328dea58d842c42822cead0c9b4d3ae2d8bc4512b782df0e3bf726313859f36a25d70c433150700bf652a6cfc7cbabec7484d8639f8f8ecc9cde1762e2dee9aae710cb41baa66d3406f3375f5c6bbca05711c20d9fd30f94383a2ac0132c1e91ca3096ef93f4d619e37f6ff95a7612147b19963ea59ed8d2b04f8f48295d047a52f080da3128bf2113f6753c8782f2ee4d8146af803ebad1934f024441d55005d137d7afe9c3bffc804324b15b571592c28435ec98f4deaea3ba5c8f57d060b718a4f2e73c451ee4467dcb47652db87f26ca70f99565593744910cf7c9d5cf77c73abf1ecba2cc84cbfc3f153a78fd566ea6324e4e0859880260e4ec5ffba5795edf5cdf590e284f3ff9f4cc888d4a13301a35a4043fe7f4635f2b5a68762be7cec1914d32df64ddff519da3452488817f1c52111681c808c2535349febd10e312353dc82f29428c09aac063abc2b1989c18e186d7e4dd3b23a242696845265676f19cbc53c27134ae53951734262ff16a48f1a159f7d9794e286ab464a15fd551246c537e8ed124071d339918a20094be99655209dbd688244aebb57259f3b7c3f0d7db12e1ca868d826e7f3a7b2b0221f10a0ccc8195feece36a279bfd85a8c54cf46c853ea22028767f33cce182070def315fbd118c3e940acbcf9a73012885a8f7a1c78ee09bccca5aee9ab6dd749c2e6ac5bd1cd4c2f5aed0ec93b29486893b840ee91e608b370cb765b1f435fa867f5e2030b28e0e8d9db752f937bbd856095b9e4e1800bdcf3817a161efd83070f239ae64dfb89bd9fb67f1253ee203e11e34c6a7bedc1aadb49fc46efa7af3baee6e5cf995ce13c6c7d0e80549342841155b2efa5b33f234d3b128893c1c6875ddbaba4bb7994401977cd55749e993a27c047d9445739f38af97813bd1965aedc17149d7e1bf0cb605092c359bf1412edd3eed797016310bdd4617d3fa90e5c077ff7c694f7ea067f5602d9dcaa98ed91034c8361b9d61f52a2a2e4ebf2df3a49cc2eb1911e8d0df636057501ed050d3a9a6f4642bcce0dc7235a802470f191a58a67bfd8a91fb41a457412a6908f536e628cc06bec8f436ca5e779d8f489612dd5cabdbd416b4e360d6c1c21244b3a842820532c892777873c28614b8977bf88da523e1d7eeb6c94b2eec3b2a94ce5a351ddcdd932706e5adb63b7b1a4637237b53f79bbcc7c4a55d0d9b1c2ec99f3a3360675aebd9cf1d912162b25d9f1ec0663e9fd6c0abad320eb49497c26f9ed7ca091578b34bed1b415ff43eb6da21ee952b8f5e5bdd5107d624ce72d0f029c72d54be6f9e1fcf875f54970b302594d0ecb4eb1d59bd4bbd5d9bcf9f3d52f712dbffceabb87578f6c802048cf62b15a3a89d5a9d5ca21c510642afc54aab612e75a21ab6e04550e796390f7c5c98c2e845014c3b34ff0fb3c194545f41cb9604a3c327145e3315bea4814fdbee2a8cc0345fa2921a2fa9981fdd23181eb718f1b8485c86baa1c85eddc623319ab818a20290737474013c3cafc8750efc374acbccd89820d2a29acc9a357444da642b4a2204fa52e6a91ca18b6ddc5b669c99a7c5181eb7bbe2567520b9b7933c9aeacd66be86a6315f4c7ad097b3fa3f9822cdae255c57b32b5eef5f6aa0e7f4d91a2d061f42570a199d164786af02c16b94b52d23384228717e9c91881dbc302812bd1688ad8730f5ca7ba6d31307103e953aa4fa3de962cebf8fd3ac884949fab2384abf58b603b5a3c79d0ed043e283ee8e6c3060f92965fb7913f489bc388d5ac573e7a0471b13f1cff0bb5335582d688a327c41cfc7798e2df96b50c51dee52fce8d55e3653443753344e53c0b7342b30205cff25274cf6ad074603e5af822a986e2d122077da60007f108cf00d4927c3aadfce34b91eacbbd1cdf0b52bd28e96bdc3ec9e06340c2cde9bff71c1672957fb7dfd331ec71503780707278a7dd36b0e0c4ece7b18a22e3cdde643f0dea4498d55ba66a579e7bc2c1c15c4eb51d7660213de27d7abd86a79e126b38cfc3b3524417af49472cfb2d70de50b22091989e988ea6fe205f664fb349cc300f4ca241c6ad37f8470d9437061f78f5fee16167b2772fd923441d273767b49c29ee78797900e30891a2a8bdf8405e3dedb78fadfc724038f0e8b3816da12d5c0572b2d28c29200a1e01590f9d162abed1409ca02bd6787c062c6029a2dab49ea2c94019ecfca8af5a9e6f025774cceb99c9d851c88b30a53874f7beee7144955c7ec51520e8ded122a781eb4db456bf635783eb4224f726c718dabb4dd1bc7225dd9d313fb59944a206f3acf0642c95e394f14832dd70afb27787082a68df6686bae01e02c3ec4cbbb6328626fdcacb8e49b88e01b8fe98d2a679077d3219a006a77f653ef409ff6b452886d8f81261fcc90d246503209d2eaeba89bd42cc2c69e5adae3cf70e415c9e07abdb13d1c19eecf3d035f350552ed99b8954e37a156347b789f96da1e9b426d84f6aa44c34411c327594e473397c56b418de9988c0ad594ac13c7b23946d48c480586eb825f5c291e443a7b7f2f6b217e030fc1635e3d9b4683377ca1e1a9c74dcd867c9a2ef4a057b6da23fe7cee2289768c6001b2c02cea47382eb4d06a86b2ebd29f78e9a429cb30864701c1b72ac0c47393441db88ec13c6a075de78d09af9e431d93cafe85398ffcb264d64c64a7cecab6afa6d55d6263b44062637f13381b0188f3111744d850eb5754b929015ce7369c9b0757f0b4fe9e21d643f74d0fe0a3d82003ef4a941747f4875cc7a78aedf1840f50457a493d25bae10fad830aac476a7693ae21ce97c132fd79b49192cc5ed91e7e7da96900d04384fa9a1ffa32b850d944b566bf77799f052958e24089340e75cd178f88e71e49f616bb6a00ea57ad75b26f564993538713b8e33fca29bc69969930d02c93ff1d7f48a88c1da0349adbfc170cf32f7c91b4a36bb0a12db789757cb3d953d5207be87bfbe6938eb43d8e5fb05ed1ed19abadaaf5e1754e09c57de3371828580836b5ea46d30977af0bda3c4e5b62b3edd3700936e1cc9deb7c22d45824d897057a623d9587b7ff6f71dbb45de3e458659da2bc0eb6cabf67388221d4aa780606ccfc7581a9d5b9a942e7539f0cc1888b12a16b10f0ba4ec86c740671ae98f8a977a39ea52fa045245f4b09b03bbb429b177e610b182c969c06d66c9cdf31c20c80dca6c4da916d58ae13ccb8dc65e35fc924408af47333a204307652a77057953bd2c8aa201beba42314943f41b037eaddf3755cf01ae7e21b37853a2669782b0ac421b3fc9dc597e142bdc96da7b9e7c635e8816818fc1da9aa6653751e87ba142babbaa4c924659f615623f8e374759924e385a0ca5180dac938fd0a9bde07f8de2dfa8c4ff499007e63a225674abb3fb4abe7747f7ada6b624c1a89cfebd83eb28fe31b964baef547b842cfd47453fc4abd09fc407564973c5d17687f2c5847278969d118fb42f44460a26ffd50e19777a2a11f1747b0bb6ebe570fe9e8f2a9fa155163af045edae044d3472023aac33bdd7d0446cffb4aafcd86474a835511076cffedaa2b2f8f5ed95e1aaa7e79addb18e70dea8380d16954c20fa7876af237985873675b3a450de735a1586045929f73ac62d62b7b81f23ca9cfdb7ec373fc67adb84dc5891ef63e88487bb92d70113ec3dac9f998e9a2a11611cc1b07c5697eea727b58b27550b0139dbcd5834f9f37be201b3bc87c59993532f785fd96199cc806a977ec4386e3f472aae51cfd679c6dc0f55006c2efb5e56fab413f18e278b193de714444ab2f2b54c72ca11b44f68365b85a97f41310b4485bdf35d1f85ab73b04cba399ed9500b9b07e96396b02fc2c9d6954f88383928381a023b412074966fa1302b262556c1b434bfd5ff94d202a6eda1702866cd32a0e51f473fa2a58917543bf64a7e2eacc79d3ff65d2ce91065b4b0f555fcc8711f78d589603b30f86e2a6d4dd14b3ead7c8a456e9f94e66bae086d82f5373f124137aa99f9cb8be22417486ca3a43aa972175e4945f74318563b3195a02e2e33fd4983942f5c0911544f3096a1a05f0f9dd0670b3519e66d38b22d6f40c19edfc50d5749c63845e365be6d1d8d06b8404cb03ac0609efd9bb46e92e52be52c39159729286271d739128a73ad0d72c6ee80b994259670b8fb0365fd56a68d983c310884b135e4ba2e8330c24195d7f4c06c92e7ac14898c83f0c04c093d12e036a858ac478e51717bc7094098feff3920449f12f01e49eb66e1c9944ecaebc060e2904053058cc568023353715558119ec6d619954138583d0412b44c7f2119d087db944fa157898e9aa5c750e73de64d5b2483f7f37b013eb41463c09173837f0142d2e08ba293a9596ceaf774593775416693d83b56e34f7a2c7e2a85ec527756944ea0fd9848a3d2ba623b0169831cee2cd9752e60238fefe7e407ad61301e695df2df0fa84988035ee71b21e6ec130d88d1d237e2c56271acd8166918b1dd88194cbf5b31e044b64fabb89a46d9d203aa927983d33e22e15d856eaffd54615926ade197c888909c75cdd5d31c92cd5667753df8ae9f6ef70faebfa587ba55c3f12723b6908cfbad95d69d67e37acecaa7004b0b99351dc71b459c2c7bc5c29f41f31ea67c515f72f39962f4c53e635f238ec6812a4166e79cc545268af4c5ac263f47261f62eaaa987348048972875011234cad4ea6ceb65e5f4cd46b1b4867551b0922c6e31320675422679faaf536eee5bc744a138dfbdfc125f8402c2db21aebd3c008fca81d2488e42c44e7283665316e08b06715a55a484c2088d69a779050eaac88a9dc3cdbc0db76bea09f46bd64c720faeaf7babe41adfe7e323a8f52cf610b69da7878f9a6ee62d2adae7b176a771cf05fef690d8fc36388e390ff8329e684a8f6223dbff288db2ed89edb240f7ed9e9706d6c68f8fab2b600d74dfd9e3e648040e63956c68cbe66064bb03fa3b29984ad2a174ee9002a1d08f99b14145c97831b96af997d22d37434c6a0a84107b89a1083f13bc1e5c015b2cd9adfcd0f0bac4d25d3c2f93d417d17598a25514b59fa24aa6bfad4295cf011dfc4a79b8c59f8bbeab391f0a8f6cd22ee9f2ff97266f567c38700ec0f6670aca1b9dddb32181dcd9f817c734438c05703dd798a18d006874a6e9e5589a8028eb7cb25193e5e315fee0b5db77f893331910fcb89c255f5d2ec51e5ec103c7cd3f5123155c11a613222a68c9e554fd00b2797f4a9917986d4a62ffd7179d81a5acb177287ce514ae44f23bc44e81e6ff25ef219aaab3b1d60d46108e3f2adbceeddcfd58a9a6517a527af5d20eb35f1e9cb263b77a2cfa911c2cbc71dd2b15d483e9de2537f6454ecbf8dc91107bcdf9a96a560eb0344d1bb18aac8e0f685612ae80789ca1f7fcb3d5bcb00cf162b3550637026f0d42c258443fada9b56404d33243ec196765f5e05f540738136ce376ae8c4cfcb80102f3262b93869e950c1159f54cc16ea3a9ad5a9ba5be6ccc84df5a8ddc360dc5e0ea122e6078d845328c26d862eab040828109dac99ccb14b16215bdda17b3a325ffc99c485c47fef0dd26d59cafc1abfadfc42ab2eedd6506183d8ed9a8616ae1e51846ba18acf7adb513dc987b2ed7a38645312d78cba99dd86bd57f9b720263a884cda089770cde7805058abef2c3925c19999968935e3760bd81240b772242ed55a0afdc7aa286a5fb1f8346d09046b91999077b913c2b46d153c5253552fe4d5ee0f6cacd8b7b8f7206625167834a2ef2d4c55954a89ede705c0ff04e733fcf482f10ee807d92bcc295deb524f8f720bbd69d08d6ebaec5527da65abb584fd112ac9a00b090ba6d331245a609a3e2be59ecece06a251786438f14f44def0a829c14e03938a069256436a289eebb280d14c6523fef5f1a3b1c98a898a0e256ff2e7cc2435958afa815cd6241a27adead836bcd03bff14e4703738a834c2571381d8ee496c2f731a8c36c7a8f890dba80aa920b3ea8b3393efc95a20fe0fc2b371edb4d517698e01d3a6a5bae4e178bb3a8fc8a95606c015d82b960eb38a77136d4de43e60a56dfa299607f297fc3cc8228df540e98db901390ee8991ed528d9d6b51455b1a77bd1f10db5c6dfbc600451f9fb066a6e8d1783aa9b7d647e28f371f7328efc5d7d44f06877804169bb47e03020b965e2b0cefe108581a81b35306a66ca885684943d0ede37542f1a24990fe8461a5bd90bc63b0f154dd5525dfe8c0a78eb5640239f175d2dd22b502c9fa04441284740dab56734e6f4d77f8f68161079cff3e978d404e6ea687854173662dfbe2a6910b6b0722a62d8f42cdbf04df079e899cd7c4a2dbc7d1b8c165a8f63a5f9f833133640091444cb3b2eaa8e03ba7deadec1c61a1d749331ceff2983c881f96a69fd57916203f4c520c9924592e4957dceaa0f094580d8048e9b4a8945812377517721987e2a3dbcda245c80139188c46e0febf2a43f8c35d47fd17b3167bf9cd3af80593e45cc3db4998c3250429c72d8575b71555201c3830d9b6cb31e8bfc4ec3d9b535f11e20d4bfc0ddcabba99ed21eb08a45772d2938427c7c33b83f1272fe51f969b30338812077c88723d34b764b3f4a8903c2ce4a2b1d6f30522656a44b4dead4f33a190c7c4af38305d44a670d987c753c5dc574c6061decf7fa58972dacc06198b7eaf486ae67f04a5bcbfff8396ad28045f85598b6eb46a3603cf5ad21ec298ad1d57e53073e6724d268018c57d428ab27c7cd2765e2f0232d6bf9be42bc5a80abd1553fec4c7799067c963fa44b104d3e9ca68af0c5d5750d52455debfa81beaf1e504ad6aa16fe4ce33337f28cda5cc6aaaeff8fa6e328d07d429bc23d94329809708bc9630a7a21efec6c333578c31aaa30fde77dc76047d900254f46762a6f1f7727ddee66313a19c89c7b88a67521ceab7d280e83897f7ecd62eae69534c32971a77ba36bf3f8195e5f00fa3891240b6dafb08735ec250ff23e8f492404e7a39d8441d323b773558d0288f28a6db3bd64ff239f96501bd90929d065050295a8651f0f02e2406f52dfc26ed3de39f99838b5aa3f5b1a433700c5820c4f26e005898fba8d1655fd5780332fd325eb490889e974712c944c593e1be7c7336b4a9ad9b2d1872906b2b0fb770ccd25f6fa68321292df206d35040c808fb860477dbd1c89b6c63739da9e8caf0b82a5d839f41a15af3b47ca12113ecf5f1e5d86050b3390156988b4ea1a85246f572e7704d4c06330533e99a4bbc8398c582af8a24a0f561cd2ae9db79ae4566dd03bf42d2c497c3ef5bd9a9c592226598766a3e7932ff6e49f864e81a98f1b9c7813db6da34675e1d1afbde4f14b5497cc0945f10c36d0adf4f7a6d28eabeb8805d600148d927247ddc36e2eca941e3b16db0c736c17ca5b99ba716b65bf961f1cec2ac2f6eaff72d5c1c27b3e00bfc2f57d458111028ed14676c662aa2b2bca28c93050d100f4c655101f635dfddaba8e0647defe556967760c77de962bf05a3af0c668b690b3841eea1c8eda2ad66a26d3f5c7a6545bce0c566cc856fdff5e5f62cb2ff977f1e4dc89831f518a085339dae8a4857d9d4c252c46bfdb9a0fdb24032039f91796e451c4d6227ce6473294144f243de0a1ce20e8cd2e9301cd0667107ef604f77c5fc7d59312baeb22e882b7d3cb89a8e6614531bb6f13ad09825852710ba92f071dc75dfc5bc48b13cbee154731d68a363830d438d03d64af92ecdf6b7e6b597a047e8da090882493707101819ffc21c9df270f4f1d78bcc51f6933d2b1fba7ab3b38cb61b17ae0b479c648679481d658e9d2b45c7ba85ea8b06b720aad886520a0bd992550b7f8601a48cec5e67f06c403bcb4238fc049bc45971fa7d68963ef0499789896513b703f05546359e6ffa55b02365c55b1010d1e5398e308d580e90247acfacc13c86cd7016be23b02db9da2136d6da90899e95f26189115e31670147636f549184e5e5c5fe475dcaac66170e78e94512d1425ed582f16bbf12d2bf0a034fa87b6618273ba7d9f865aaae28113caa8893a4a1d38ad4bab9d9b8193f09aa83e9f4fc4430e603939b1e97083bf95d5b9c45777de67ff239bed18980e6a28c00152c2f5dfaac049d3954939af9d9d7494087fe1a985d5c97d09dd0eecf85e69c7230ebd8c17c7f366d689c9a9ffaf825d12e69c9fe1516e36faf8ebed9b0a7c167463f4da98440c53345427600632c063aec3d6b1b1956406630d8e0e11fe6ea5146bbb6bb426d65832e2aa0e1e9dec6fe4dd9ecb92dd323b30840d65bf1ccaa2df99180ce2408279fe840b00fced9ca0c224ee72a9a378b630f7bb586eb1f5baa5fd9d5d032e3999fe12d93d993e7abf2629e5fe7e940d5121eadff61d2523e2d8a547a324ad38fb45a899efc7ec5054c9b28dea68002d19d90570be45f01b6144ecd43bdc7fce1a735f0e9a9743fa2a88bf71b0a139de80ab4f639dee40908e395f6d6e41a75deb74722e4053b240f804259e1fd039e307e953aea4a18375e255b4bcfd0e01b10aea0db20f7ce2739b8fdbc3269649f8fb97b3b065d934aa17a10056209c59db953a49e6c80dae4b3bb872ba5499c81ea69cae08f610520923d986fda73a85119ed35869ac931c664bf781dbd092b076a5aa2b1e9df9d56c0c00f5665dde280c576fee520e236c757119dd307ee2c86c881a2fa3f40a85825de7494d5c5b6f48024d04beaa6a90a76ddb11e1fb4e2eb050265bb96b6c2e342417f49c79f21eab313f6b770b249dce63643f69b2b55406e8d30fb317036fb3f2159c715ac0ea085f267e42237e190831c258350a7cd6b07cb1a1ac20e313719bd6ee57a07712fd1e520ccffe9b92b5c4ff99147bdf919520c8b3717051396e9cd4f8b7b3550fd888f52a9899713670f8a9d2f7f8a50326a1091fc7c3799993b2c1355e127bbe204ee7fef6bdf728da50f664a887572f7aaffbbb119d0be3e6436eefc9d4df4581ba0bd20dfae1dfe1b6c0af1cd4cda42a5205b06f59603ef720e1f8e293a5ddfc6d4dea733c8547b15769737e96b7943077325acf9dfb678bd36d0934e2570d678fe1254a43b14029c0d442647e23fd56db45d637d716cfd2364ebfdefb7e4f7c3ece34340d73d9a3d762cb8afda3e4203ebd1833f98f64d1af891ebf08a2344af7fbd7a3d20245b41b25978d47ce06d37bd11d2b39ac02dc43b1618d4639a18642e6bf2bf4b3933e05ec479178621c1b602b7acb733b2ba3606e2e061275a74e4daccf66acaa8b2218dcfb58a54f3de301ae9bba49fc2bb15578068859e0ba89adc130b34b9883ae1981cd0a8817fbecba19a92450958b15ad6505b9e750b50c97f71050ff524ecac4c6f1bf1ad61af342e4c246cd4c441dd88fb23573fcc5cac34ab135eaa628d57707e4554d1008ba2748190150c2edbdfc9759720a3e891e0f0ff628f2eb5ffae0345e9b1fb1e9f9952636ef7362bba32603ce529c4726648da8a0bca3108346ab80901fb49e9b70216efdbe004bad015f91f08d40f430dc08b11c591d913bc2223c63c13aea67222c58e8ff380c298d0cc1c1234e4ec3e0719c6570d72b27b7afce96b5a7538ee1e0216f0841a62e21164aa0d18f4ce144442cdff70e536012088531c7c187c64d2c326b87cbfecd9a2c906d5fef6c3e465370af2c70d07dd25922a9a2ec6964c2d1f6f4dc5fc2cc7699ae0453de12ef5f3e050e7764b5b1d2f9f9e64b83098e990499b0e7b6f692d4ab8557bd282b8d70f1d65c8bf6dbda9eda47583ff51356b06d19e7ba0126c208288fa2d7adf269a1c183b38e701d226bcdda191f12132830c989294b433f70d00f10c5875cb280d214651f2a1fb0264adcbfc3c0526ead4bde7f8dbf7c6da6869935a7f46f88b5a7cc25608c475d3afdaf6e10deea16d64e5c26775bc51318de7ee70d81f6cb3a2aa87ca311183cf70cbce72e62354675584e56401e98678db833c2825ad7c433c5aa615490a4c58ac7ca04044252bf4523b332a366721a1d8ea82a16b8c5c050816e844110e7e7a5fc6e4dff518d5f385e6872523f20265bbd80c5c1684c5238423db678c7a54c4111590fc58374658caacb6d52a59ff6bc5d54cbb0cc8bd9a2e946dd396bea45a923544347ef8b559aa173dbdaf26c2b46adea879bcdaa7f775e56b14a37f6fb9c27c59cbd8324effb1214b341fd15b339c3ab081a026b371fc40ab783177514d831cd1f501bbbf163c0410bda89b14a705e4d93d0627d238ab61ffc89b5c5919b620f92f01726840c606f0cb784851419e514bb87838a18982d87042559ee6c6e4869520d7a6102aa53729a0314733550ef74adf4319fe3c546f428d6a2fa583cecbfb2a6aaa26f69aac68302122f8fb0f81d3253d8de6ccb2aa66ffb2700c5f3ca16c5cb7b4c78ab694f51204b4d287b2e4758d5ac9e4e74c6bb48e0d9a466237d82570cfd1320736bd7a64068714bb191580e4d05057b117ac5c11dd3dc8063def5a9b79d1088154b19e0c6d8b5797bbd9c678b00aac55de053220526dcb1cbb451c6e8be417a9fb45365401d770d81d1bd3b8db1ec3daedfee72028eac668324e51afbebc7b7a88e6c0de526abd33c54e6f289dfafc66bea19623a19f28a092a3e2d4cf35930a9f982319c6160eb6a49d85200bb13440d91258091dbe2017431863e4bbd71c183340bdf7598fc77690176c5b822d72369e463f6a630f61867b3d87753c611a08f1e780812da7e66fc544933c25ad11c6dfe2f92fb1d5a9fa67794781a52575fc01079f6f8e21f4d0582b6f441a0a8d2e91cbf3e995a1ff00aba068f2477dc6dc6c8f33133ff7c981a270e6b0ffec5edfb7ee073a9df002a4ff42cc858f5c1a12578cb2e9ad5313cb32b52c6218864ce30d31ecccdc45402ebfa358ec2ac621170030ad118ff0d12d87e0226fc2186c80de0acba30dabf2a162d71f72c36f2c1ce31182fe95119a03f8f5f5fd0843cbe56d813f494aac0436d447c4c10c4d0f5656b5c99d5e3769fddff1c59922dca31fdb753ea1605bceb350f02acbff406e0261bceea5098ea837ea49e58367122ec907b4c6fbc80334e0eaf7a79deae1d65864b06f9314776db8e63c03bb8d67c7a9934a90bcf2479be99566a5b592fe16b81c55de3cdc676a7ab2364831bc81f52ff73746f2f7d7b481b8c4407b622ee1d1c68d3778aab296f8fdae2191586f0075ec89b0da47c7a960146a6ee5bb4f4b62a8177b30aeba5ccfcd7140e00131c8da7e333574144b5bcb8da340048536b8717b4b17813aab390fc29afd2a440706016f55702f51f66e0570cdef24cee28792ca00b677be6c1286527e04af42f472dbc5a907d698186ef95c904ff3b175ec013ba5a7519b09754c95f4bace0d491a1883f1b183d79e288c4e4e59649faf69b9ca032db7b4c2e9889859939a32feac3610bdff5a4438fb9cb485fd658aaddc6f220ea8e4e08f769ec5b7f621878fae4848f810c413fdf3384b3f165c75d04c89bb48734a2fdacf525461a6ff2a9518ad6fc3c6e79435fadba493630eaf9ea61e08ee6344080485f826c600bcef00c2523c528b7c4fc0de0ea0e9178d03c6cabd89315fb9f93629cd2b99d11dfdf2c7ce75e68a1f6be0c044a1bab4b1b13c6d777e431227c064fbf98d4a3b78b3da060dfbdeccb35ab10ca518236d04e7337ea42a2f59a91b3dc621861ba4c07976855444a444e19f7c151291187b9fe3f7962b3aceb7c97ae9f8ba6bd149363dbe867b622f48609c06c3f505c7f5ba798fb45f0e7535478168dc21e0e8f23aeab8b6c3640bdbf81acda308111b08822117bbd25ed5d8ea569dab48c8f12ceadc4f711043c4d3312932107082aebf7ddb5f26dbc330903c5749f03ece582f421d9ee5f80ec1f149e5fd7a3eb11c1779f56daa10dcfbd9b0012893ce25dce83f2ebf10168ab6f6e65b089f666115a168bcd1b9bf9d89668f71a2305b3f8a34d5b3992df57fc5b130a510d19167bbcf9c2634c95f02fab36700ea0d0e13b10373d92d7fc941576f97ba1ed8c297c6da60309f9e5a4e4d70ac3f86cfa18bb82f35335864addc29df41c5a41ab7c40cfe811feba01e356cf08d3dca56ca33d5b9a3a8d77b944ff720d4765540c41cf7187a1fbde974aa230b5160ed211feb79b65960039c1fe7dee703c0a5eba0bfc76e6fd08ada0a643207ffa6735f1a3acd0e9b5fb892d62407a161c81197eab0eb65065e8c8f3e477047df1d2f49926a394fbbc244705a339883af109494f759069f577055f117bc104a89318159b5fe10725d0fc659a3c5c4aca500395debca032a82dde81455ea1f9202fed0e9c0b752055c777a4c0600505bff568132505b46b69ba4381b8baecfd38ef9e41bcd2c14cc62619b2fe3c30873470c61c8ea6b893880738d492746b3f0f7bfa3f972d59fb495a35eda781cb9884c63e3bf6f3f3482495737ab892c495a6093d6504359b312e7ed29e25febf9f292c84c4c86147cd755b09c46fe0e5d23476eea97772d3dfb9347d250c5c2590de9be43ff7ff76b4f577dd4f711c7dbc0bd149a4f40046df1174d05b2c3c2d67f29ffe01c64efb505a7367b50232dbfe8b18f0d6b924ea265f858b833b076377a164de33c06657d29c0611f986b7c5131b5290405ddba28c460adf14cb5e955bab19bdefe0ae548f5d61c2d33980b7c14203a06eaf06c9694069f6a0eba5e749642d342d88cb9c99ee2070d3b6e429f62d21f2caf8e0b9876088163a9ffef8eff79392d47069b6608391989f8abe84dc2228f139e466ea8f88a01efc8e1e7972d12638bb867e32c05647d778312c23ac06029cc87eb1f511a10b247bb76fef5852f3d75c49de376955b145d82f5678371e2c1f3c09408e9a2d6ed0de0aa336f63630238f0e149c2b2fd827d480ae41ffe418609675b8885b6ca5775164a95ba4a50f7686fabbc1e153073ade9308a95d7e1f2bb064ea667ccd6015945a6b498e303026b9adacd04ff8f29dade0ee5bb94445a366d078e741bee7132ff513f8ae2422fcb208bac7e878a2138052f3d1dabf19a5c1deed798caf8a47ccbf7c8bf0f71e056bfaf6411b1602e25b0e59d5d881e4bf2f3a1eb70bc07c6c1085d623062b094fda3ab8716c5b0892b1be69d71c08470cfaba6cbbcf0371053ee472ddeccb1739e1931bd18393138414b30fe7c175f173927ce418d681511e1747da6d92a0c7c29d541eadbb331cfb5fe6e939e29a8b84eb249d29eca839cf9963a8affffb00179bbe17abe3778d99c7025cc410cf02616cbbca88d239cfe1172d36730033a4f6bc43eb2f3e48e1f48ee7ec74a824a54ba4205e5f345bc5b5914ace0fbc4b8f478443b550195455cf6dd5362cb95cc210952fe65aa0495a71de8aaaddfd9fd6ad7dbe60220eb8946dada6e0e775ea608cba489790d17616895b90b647f603aa1d5246aa84ba9dcd7831386908ed8de2f55548c405255d95b08a92d8ac739bdf6fe11894d8989d5c55cc7fc5326c653e51a32e145bfec857ad5aa13dd6c44d799881c346204bfe3b2f628c7ea68aca0574086dba70e1f1971241a98daa8a41321d1028555a9bc244b77c893e9162002a70d3de1684bc2286f43f5c58cd1fa4cac1301c25a87870d3351fa67018642f33f714fa287a0e90927f1403b8b073ac29b3c61be1bf9548dc10505198c6d3cc9afe89c59bc08212c8fc6581c4eb53abb5c7d5863803b8c5e1063df21fdfbce4ea837c5ff98d7c1904886edb3b5a282820317d5ba8a040d6d96ef552041de9669c554f9d764146d9f5476bbb690bc89a54a0f6c0c34983530ec97cfafe24dbfa79449f841e3cfee886bd851861fbb8ad82967ace266084eb68bf27e533272b94de1b9aeeca24feb128f333f6afe2398162d642dc0f1a8ac97b82d4ec2ff00ba9fc2a0e212cfbcfa7662169a2dc610f30cb418bf77da153941a1e68e5416b370f0d06671289d9500cbdcd8daa2c3174f223617948c0d1bcdcbaac9698a7ac35afbf01c6e46d095dd6f679be72850f53fc608ab063134ad13ce20cc8a4342c3d78e924466e69b28bdebeda8575eff79873ab182246f7288c8186d0b02b6492552bbaaa28bab66e703e260145a70cf07d54c3610d1aff5737159d65c4fa2ba44b25daaff8fe0079aea41d89e64d60a48099d1d79a341d3072942250b6f6dbb64bd26cdea011123d18d08fe3c8fc4762bcd913ca30ae72e4c6edf819bb7281a8f401b28939065fc627fa82f9efe480ba295b43ee2d2d052be79f54c013d9de99d3715074bf3d38ebafa65399149d1e8d885584a1d48be39bf1d405ad18c3d0c05845a0971f886d52f19dc5f40bee318c247f6d4872af81026ae3c0cd11466691ee8ac8527ad490aa5987e276f2cd518a055c29f15a4db7b72c18f95c91b0b080d0134caebec7909704f562fc59a674a554acee1adf757d191d5743c3b4436acae41f9ea70979bde211294285bbd3292eb211d72f00dd149b811f734343d0c1beb6dda9fdaf62d9b942de8de227733777e9eecba9d2d5dc67b744034062918de2d31b83c0a3515d11f0533a98f54705f79bd33c3b88da67d633e5b0fb63a61229352001cd0f1157ce5d7e62af893da1992a6a7a5d742c1182750b3c2f17eda2d2365aabe57095c9d6df4d95601dbaa808b1d53e1f48a127e8f118b2b5a5270f7221ce51c910858b7737c4ec06ba759b6593e8341dc85d12f737f975daa27be3ae2920c5b45e2c1a639c22f1d24217f3c10890aaa8f44a33b56d23836555c5ff6d3af201f92d54150f323b38ee04a94e17ce2090dff56c0c3e9dafd839ae8a0d42b955b25d1b920474076b86b4c5386110cc1ecd6f6a26c0ef36c14a6ad0f3ad9945ea2674ea11412f5c3c805767a9425808542259ce994107a325993bdf489aa0b0ccf796ef119a5aa98f4f181aada01fa4dbfe56d60b81bd7c5335df766d6e3beacd041057a7f8971ed063387493a20b1aa97de22d015d9f9063dd3a89d2782a78637d5beb55ef767617e80943aac6cdd01b5f5112b70fc03312890cb810e31f02c28442a213aa66c641c6c73b46a053ffafda86fe481b8428150d89c9265f6b484ce62db0c0afe9143abb2a3246b0229f424acff8959da7dad90a09f293ecc718fe32dcccc9bab2129924bc5d594eae6b53b77ab15a9f19db44b81800016f0fd98272e639a0aef82fc30114c1e74811e46384d8214fb9c9d93282141670a3631591be0a88f095dc0b1cb49c056844494f286f552972713a0d53d3b09077fc24fcbbed7688e05f438c1deeeb6e72d4d4d6400c300e00ac7997f6e4825e5a8d6f98c8e3f58129893b25d372db812fe8c8ab35a76288d4444a11df5d38b81cf89b2a4350c63d908460697b2d44e38257beb1e71628e072ce98888e127e900cca1941cac089d2a4f8a1dd9df28e013d9ce53f8dfcf612e028857098a972806630ae691719ee2c2f24bd79d8f71437b6ece907f904cc09da43866d0777c1a929dac90141ad980af9608b8aa34714f2a78b02e4a0137789052d3b4b2d3ccf7ecd0a7e52b90299e6bfe3f31d0982e714a2aefbe5821fc830a4f8cf4cab1ee0e0e813f9ee8470a0157662c9a839f1522b1a6df92f0f81e7dbb780c4807eadb8d94e5b24a8be1066f3ddff595e63eb8be235e0d2240d429bef12cb55d2858e58e2c7ceb83ffdaf2f828a440094293173527a1286af1bb4f5ffa0dc527b5b547e74218e6bd057b32095b9cddfe7e5406763685082b9cee7ffe7aed41a2706f282a0fafd3bb3925846203c6ec306f92c857278b2380d0a96d8eedf6835c6f3e8b692920e25b7f1993c27cd39e652adea08bc31e810b71b6e03a4d05e6e9d470d15b58448b2a47150435ed266ac504fed7133296c591ddbaf953f3c81d9a3b76adc93fd6eaaa1b810902c5643b39636024989036ee7e2f5a996369f45d309b17ad5baee378b0343a7d1979c9040bb51056523a8c8f2929f8d67faa629714cf02519478d352d366dd2c851b79c96e8c0aa8211a5003e06fb83a64ba3587c85c12cf33f190485b3b2d1d155b07e0ea452a7c94000c9d72d9316035f6dcbace8229d9630031971504f726b26b7abe3517e4feb5ef2c4f8459ee10d124cb9ae6d819558bc1857031f3f54df04d56de00b70395a34a23bc8770a63029355f0f271c663293a191693b067b524bbaef2a67279013bb8f882b63ab8ca4e6d498302b68e80383d547144c2a24f46ddca7d2d0f9b0788db9d8ffd9212ecd76475b8506607f4064122c297a302a7846a097fe5c7445cc290c2178c0b60ebe8f99ba425c384262345a4de2b8da6724b3353a4f88b650fc38baedbea91939bc0be0d40ffa54e4963124ff81f9f43e0a34b610347109317e9abc3e1be92c57ba4475c37b892b0d343f318590add800adecc27416bc2cb90804bf5a3db3f2172a6ace786d7653316badef75c646ca49673e317ad11d1a30bba88d6b970daa1e8f0a2dc5d4587ca74ed27e164ef415a0c58e416e7670a5477ee8385e75030664578b518dfc7b5030b8b2dc4b1740697e26f732b0f955a6d4e7e7cea41afa6907d8219a908fe79e5e7752e7174667e8b508a66eea216fbab83fb29b038fdf524f820fb3b2add972cf972bed2540316c8525fc1dda1be4a4f7dabd6a2dad1126c912e020442c7d852dd5e6f0017c0e1894dfb16d3bb6665b80dd1ec28f2166c7d1aad8c44b7c60d4ca70290cc45ae032e6189bb1127e4afea057a217110367832b12278b392d9e0c8a1a72442b6096a758c9b54a772da0e7001534d8b421e00634e5680e8456b1fc51d5bb27721b958639044b94a6d9fb415416b41b54e201509f5f2ef2a0c571ae54848fe38cea980e4ba2fa1cec24ca7d42dd1fbda0f7421148559169ed365fd446be15843a2f4015f8a62dae2fcc69898a89200e34026473337f70046926ce07cdf786b2fcd0b1fa322e0316fe786673bc43bcfdb296e3b3bb76f4fba8eda60bf50a7939bb47c2ade5c5308ef4efb11501a0bded1153756df4865d2c43ab0d881699c7ac251ba6e79e157d70155abf014abe700e15f8f360580028129b62438348a61c8b54400beb6b9943a53a3e624810c65e7de902777b959042870358f0988ccc35bc495ca942bcc0dad1b4530a8e5ca74ea0604949f9bda39233eda51d0241a19a57aff35afcaf6d46aa3121a9ad5aab208a7a8b641c21b0c9782daaa1040c09634348e1caa8d27310140f8f31a53d4db01bd1fe638a63133b2af9e8fab44413683e8eb495084b4500fa8f0dfd7b5250e781c264c13575f39f64f7147b09fdcced7e7e76eb2c801b934bdcce0fb70ac326072baba710262db420b96e5469dcfcd3a2cc486abb40a34e1c164af2df0f82522f8f0d898b5d490076507d3ce123833c6bcf84d97ce05cf169d4e511763a4f3c7c753dd709cd786a228d5b67fcfc86c5f5b3b0053f7d3aa4b1cbbf1badbd568c26bc6c6e917e558e9fbe6287b00423f0e99b566c9b5cbfa37e539fc2b0a358ea96db4415cb47e75ecb5e06ec8e429f22f2ce38154e9321880a8b5161b6b7ae570ee7757f7a82cc7f8bce2fa3a5c1477071c1183ea544844c367ab0d9bc2dae812c7417f55275f4945347485ea45c8b5e99ddb86f31202e27391baedb67e7ae56dd6d3451c665a5db97c3c15b79ea5ff4eced40f94d7228e612de282a3217c683e5f45a7f71568f17e80c90d6cb4976e0d02e5fd38a4cd0d6f6a5cabc04966ed40c62772a6287027c7937fe62113544a4cded2eebfaabbd8f03b20581c708e34a4f62f26b8e4783e7e27842ec29e94e733e90e5de902f45b2cfa25e32d3b8835e50e94ad1682c4d9fcb966405aefb4daf883ace3d6fec42e5aaea7a9f5c23152d09324af66366b43f0a07d8dffa2895063e778047d71f7000e5f25a998f53fcb21f1dd35a612ff8a2aa9e2b6c591947fbe4c36cc5ee34ba4c614151f6ddf3a3bfaeba20636556fa6162b017e9f9668a6baca7bb36af599f5a7f212d2f4dc91dbfc8f985cc124e58e28d1c83f46b7d5cbe5386ff1a98e5383b458c8adef9965887e17f8f806494b56a54f70a54c267bf1dfad1219f60b8586b7f6f346daa7be45d4a6c35d9baefe14facfd007bac80184d0551d3f1fc074417be47f54672cdc416fa182e93d50ca912e5c5582960a6f541e1396dbe3551c29627c8b3073f6aa3556f3e28bf015c57253823385f8a5bcea43d499da7c7f6783733b0cf6426b722fc018558dc30e6c0362376947d46180a855a5a1f4af629e64c009c65957f57754b5d981b59e06928c0eb3858923678aac08efc37ced891b682843cfdb0812cfbe500ff7c8d3ffc914c76c8dd6424eb5dfa8d6cb6b7058103a8c5033c71c19546dafb1ef80794fd849b9e26d4448f0b44e66172ce2b59dfc0a8543469173bbc066eff8a666083f08e375ceece932b557daa9b349a8eefb306fa2c2e045f6092e6b21476bc0ee932daf14715e5cb016aae5410600c1a75ea294e09d1b2dcefe1f6a44e4fd04e04eb889d11629068d8862e9c9e05b3c8267656efe4ecd35337feec4ad00ed3e8457d2787610d39057d965e1485936a35112389343add92863b9d5ea8cce588c256b8309db2d6b5eb9d2a7763126d2ccdd0516d3804bfe5f1a3b9a289c0a2c4f25aa9560e43985a7eada9eb3107b1955be93165186b8ff5643685b61c62271eba04180971ae6fc262bb5658e087a42a2c91e826a6c9c53440364995482129f1d2bf4018bcf582a061d5937df39620eab003b67853bf71f4e6019c367fb70dd10373092e1323c2ac5eb3050a8270302eae559467a4ee4eba11f3473b6c9ce051bd3fed79b6d85a9e1c0dc530c0bffa555a3c1014bbcf618b0bd785575d0172adc28b7034b9dec69fccd8fff04e85bfbfedc1d04799e669c5dcacc6067dafc6318666ace8d485872e6a4d5aca88189174a1b135d4c761e9458667dc1e9508822b9d0f90a9cdd4f64473aa790ddbb8d58140c2789d2ef5010c864a7f1d8ad36e7e0246faac1b4504212a0484e02b21871921fada9c166f75c1bf79bc2a76b06f87b9dca258c57884e6c4e74cc7aefa2e97c397f4475d43d5c52822a0e3a0ef24bdc07d60369260c2c9fcd660541515b11e1d3a2bf36a386f604037f4c46263a7a6c5989bbc9d3ed597d2ef41d4172c87cde13a02828b7af20ce5bbd55911e944d44477d9ff8c1ba0b06936b225ef63adef27f65268871bde17741438c5be941f0a84306ac855c151182b8a70c7621e42d17465aeb1b08dfd98913029a6e71b0a1b26f4cc0e813617bfde32bc2d5381372d91fd33aa6e687ee5dc1bd863f03c75ef84c7093da5f5e2fdcbfd3044cb22b3cacb82774c39fda68e6f812d28097dd3c6b3ba28612bf0c188bcee3d7df9dcd294490b7ead66a8b33f7451e0eeb7fbacfe7ef6fcbed327d2681f640e4c2c5f5715f89d2670fd156e4923161c3664cb463b55643c7bd81b08f7aa5db78ea00a656732019a473848537f4a1b53ca14d39b8a0bd318655cc4b8157d13f99d9ff4de87c0a731e472ac4d40e683a891f618936ae0da97be7dfaa6aed40b5e082b395fa3127d85097815a123e57cfb3d9ece717a5a6855bab6fa1ee0308a328e1361795a8647a67c273a200050f43de2fb9a4893a88efd5c5df76aeb7aec45ce7c15678a0a6d37d5c6295c3a9d5799f4163afd4357187f873167105815fb30b2d08f9c39d57bb9af8dab34b7ac732c644a2d5ad9fbbf5c7dda47076f27c23878cfcc980a8eebb29fc8e7e806011728bd13f1c015053c3db259a971d95f7057a4e663240d5f8c23e6f55f89b24be7900c791be945a7d1591a44c15e0a7208bd1fa7d0b25a1468310321e0e87b9bdcb0f55ed34492daa77cd84469810d633e9115c999223bdd6f314a3b1766a343244c2872312aac216514157c85552c9426fa7699d13c45a22bfae3bf915ad68132d0056c1df4c1c08942d4ad3ee05a00594cd3a13762610a3beb8b16fa186bfe114d0b117b4d584462a6575a5f4452125c13bf868537c1eef460cb60483c6c60e3ca5f57714d48bba3f6a07c946907dd989aea6c913ae394dd1fb60a7ecda7107949353295ab6a77465beedfaeb309e4de0b077444f83426879e1581f58abb2470bd720a88be2a1f935a76caf3def4937aa17b0f15c0572263fdd39f18ba48e90891508c531e0487bb56dc99635d2ed59c2e53141a9121dc241d318108619dbb94baa01d232e135d5a529d9b9bfb07a807076677b78b08affbe437522f3240008e63ba302a3e5d478248e3607802e56150335e1bcd6a24d60a7993953f35c4124f79d093187405db47565bff9961f7e81438041505b65f58d6a0e8732d719b47ddc14d87ec717e02a2370c2f00a47728794ac99bfb370a4bdaeaa2ed15bebcb5c7e7220b794aa35bcfdfc542fe360d7187ea18d678eb39b290c6a00e116a19b1f429c4481cecdbcc8c924395e0f5c24577f1aaddf70d579d266c558e135710d0a5010389026c4a863be7493fcbbe34696187bb10720e5eeddb582acb074fdfe1ebcf96f5cec6964c2a6b70e571f38305ae2f51e810ddf153be962b1427489a98b08386bc68b10b8db6cc7b8b4e1fb94957ac1298b255b42eb32d4d287ecd3546649ca11190464958c7f7d283e884552fd03cf571062ca6e75f4540ecd5ebf1e8f5cee038c689740de79d6e8390b9957bd3ad1f1110a65801241fa08c85e4e6d2ebe04097f3b1bdb3e726f0cb2c777c29d350667062c133952bba3fe78d3d2077ade0566ef09149aab144b8a52a6b049d759c84f3afdffbeece4c7001d83d18c445534c04cc491928a4106f649fe67cf7029618d104944d1a6cd2aa0d544c8f001c86f8223edba05872b21c73f974e52794099e9068b4c46df15d708ef5de94f9791454ad934eb6350b0619ab4c914c88499391366dee854fa7c1441cbc893591a2309ed4b86381116a08fc23cf56e57f9f3b05c743f4d9457880691bba6a605065dd56d4ab2500775d0a61bcf62131ba9d75fa73d0a6a1a6c24d8f5f0fd1062b15fbba117ac3183570fc5b2f7deadb34f634fafa7b8ff78df628ac55faa3b70ff9c91f6ef28ed3f689bbd34cb2b2bb4d45ce347a38a9c9e9f6a4c852742d349848f72de3f9ec23334b2f4832c7493f249e3d9b530d0649c73505527a7cf44d4c989126ccd2e72b4e8438a2e568e5255516b4fbe9e50eab49e384aa7de2b87223c6131470c6ad15a3535083a41b0ad14a1cf7e330de1584bd2fe7578b7d74f39e8b2ae7011382bfa69627c64e25c954c4295a99df8d874cf59303f24087850b91dd192d247746f84274c682a8da3c1d746ab2dd05236f34f4422e8e8db812013d4c341e9ac2994257a540679a684abbc19d5a609da741f72616745ebf57a0b8a086cdbe33d5a3f0067b1410afa5378b9faeefa99feca26a16e7f3b611e4749dbce5c958d712186287c170cc20eda4129f7dbb79f66a2874f671708f33b17f493e364ace230ffbfb085cb9c2eecfd11438575c619a419146cc2ad04ce8341d75c6ba1d275364f3926c26db02b9e062e444510945faa4b9c60bf77053c42df9f1ef69eb6307114c5cd609138f1175ecd684e756c570d681a1515df8e2fbc2c9beec57250ee4d3724d913db96669b2661a9cf8029be08d5545a2f1d6775397500e8cc65d359bfd0d4317e39e6f672ff2e05a673ef2e3233a28449e8bff81c2f33a20cfe811d68739d44c0b11b2731ca74e8c34352f7ca0643be037d26d1ef2a109c6c4da52800e8da61f299ac4fbe0f4e19c78c77749711843fec32a1d090a95f3876675866979719f638ff7da17f168141bf92a8e0fd9b823df2edcd3977691c78d63f4f63f9ed80bcb15cfdb284fb7c1980364b07d29716036dfd274bf470454923c4745fdeda3ab4bfd123a4adca2fdbff217643375c7a7f355e05f28a79e4a10f6dc5f6291b97142d8c79d08474b80aca98b2b071a10b038128a1e8215a242fd39746a39d888c477abf8cf66d0abc9301cd7e742151fece9b151cd13e437e99f2c3d623904fd9cf2de0f586d48d949e7d173836b08781f9f05471a745ddba5ed575f5f763cfc3e945a49569d05e9cc912773e64bb78ac02c90a8c0661d3e707135222d2ad7abd8af72e3449d621936d69e7661363ed7a10c8eb0f4e0fa72cdcb2ba3ed3f661f966b349bfa9a41bfb42321fd02ef15c8b0a65d4c2a4b14d005cb546ab4aa061c811afefd7d50331045eba74a094f5676336ebc4e3dacf3d1bb7c6e8516c517b6e814e0249e03b11523ec6880559db15164a98d917454db21afc0524531d09d37d400aca7ed23439dc75c64bb937398a2eca3b5ac0ba578975dd011df85a47a41c37a6e1e726081079048be428d0f6a55e51ec095ee02d2ba163a8076af64f657e91cb9c9e70c88dbe3405351a99c9e81da70d9892076c59666869c60531e7166d2a47ee1e755078d75573642d6cf5a7133f12c3af851597631a75f2bf6c9de61f5e85ff3d843def73b8df007f2ed7708b1ed667d1cce4445a6da4b062b3154857064233ce4a66970034cf6ce7f46c742160e32a1c8f58d9e37050d42a9ed6fad26a7f8a4f8746b0bcce863c934522885fb3a3136ba21ec8c6ca85589a9ded999b4f93ce3ed6ffbd126d2637654a67667d73ed69ecde86f61701f21a411506133a66ab15fe20e080b486d7008553a92dde3f7a522693fe05537e4f82b47dad8294a15cbd81651e09069f892fbed75816a072ce532c9645b05705f74fd27aac34084469935aa4279b2f94703cbf890f3a600166646460696463ce5f1bf802b3acd43742ec8f31ae6cf372289b91272862f71ad2e44747f060c9b212432d925d6f2f3d547b16360924eca6e5798ab7421afafb9acaacfe0e72f66dbe4871f918dc9406a7e36203163953bfa42b483305ca44845a4b002202362770e563a7dc489a087f9e58e9d48535fff06dfdf5217de677a824f802ce28ffc7cfdfe75d53b9b8d603ee187b7e1b31263b2760a138d7c2e578a423c9950814caa6d0f1cf8dba1afecc7db5d2eeb29404064b5a06f8d2af85a2a8c49ec30eb6845c3e976bc072af0913469ef1a0f6be5340740dfacd94108fd534759a545a6193ef1ac292bcfaabb48642cdea412d84021fd57e59a97747f90cd17e479815f5e71908389de9f80196765e232408a29a46bf713eadc07aa83d139747bbaedbcb8396643a01518e246a887b92ba8759ccc08dffc069ce8f6f6bc1577684d1cf858678f8a00bfcd519a7c174b0f937cdfb489a12d74e1fcb6585de667088a94b5e365d379bb427a77d3185cde50f62bf36aa32a6ab3860a566731439cb704cd8514b2158fdaa723e0c4b05a4b48a1c4af22e6482fe6bf5adc934321ee37d67bc3bac30375bc6ef2d80621516e81a0b2fa44ee0e61e957de1c478f4ee7069142526543bb89eca5105e6ed1a564b33f9e45548db12f22373f9792b0463d89045cc9fd284c44c3462caa476bf401b15382503c065668911984c8b91ea88367ab3aa16af55745aa4c4eeeab35f3550d1dc1d60a28aa0ef7e609b422345db10cbb42bed3b924ebffbbeaba3ae9bb5dc1039db601603da6ea4cdf8f0dff9df0c2257091992d50b553fd612682efc2719689d06eee931e09c61d446b3f1e4bac631d5f071909dc0c16473bf319aed82f8278f06f8bc49c35489c8e91c67f61809a404be4c49fdd4100aa5a6cb6aa6c9bd52376d54e9d76a8fba0ec5ce64693726370aa8753bd8517eb718195f480c3bbb863fa052c4a78f7311ded66340b007261351a8a1cd6cd20cdf3d640d7d92c8d4b31d0d56cf388f7c940d5a9b5677389cf59ec1be8a2704bbcc2a98004c0f74053f0db96aea56d09348e084d17193f617d0d7c05ec765e577894c94e3f9f39c7f20ec201dca44a05aef98ccd6fd4a851fb07c3b3def2af71e38111ad5d2a0e4cdc3c318107b15ee014f631f0bd9d6c6cfa1758e7675dad9a6f883f1f814653a6cd47746191d32a996fc1a797465ed6ae3cc32a0ede6255bc50c9932de1150d617db4856b391a885429ced891bd4d8d1259d97bd4f5e5b1f4f861a2b6f16c6d410168b902aead3ded41e5130b6438b8a8667709f552ba2aee8a9b06d4f5d7955b81748556105049e228c4232fa9b6ede29be96b8fefb1cc11b3c926e467b5d4809f05d2813ce62e860baa6cc7cc92e3bd31f1f48c2b9a44ef4da163e376908efab3c3f9258f010dc6669d040b05ca6a4ef86d8edca1a82d80af7bddc849819bc451504b9c62c782811e538209f677cb09ee92303c3d60e7b695d488e754bd565aeb4822b4ae74822852afffa30660324c382be06daba91d3f4eccb26e929c3f91abcdb78458d3b41a7148482ce69fe4d2e5bd930978cea6f1f56159f550c5c2962eb9593c98ba81280b825d31c93c4e16f5c0af069b676eed35c93b00584b3b4eb3087621b907aaff7791c61eac3c6513f1f0cb299f9cff3105305e741a754bf215907dcec039bc4eda4e7f252f556a8779b3f36055185ad8a40358223cb7c552c62b8a5ea44029ca2cf0add798be5e6536d0565283135ec48ac57ddb6eaf07d33ff01689a92eedfd03c981372441a3581baa8ce4b7af8215b27a650c40a1b938e36b32a7266a27a4ea71d5fae03dbe73a5be0d94cabe74c8b98d24d7ab748b2ce5f1c2a26b32a0a7127909e4810c47f7c085a796e5693103f5abb0083f811409dbe2a25fbf5c2b3dfee8d11243591e489d14301f65445c93f192da78fc49b68bf4e304f86f8139b3dd360b050931c184681fee63613f97bd6b481d80c8898f6259f4b9225c5ac835fdcf0a67c57b53f6f28dbe85bb7663b76bee19c78e26d325722374b1570acbe9b46a45df53c25b0735379288de2ccf675f04fdfe8b0d8d0c333adda7a63e015c8b296b91d1f25d924eb7ac817819d59793cc3af9eb7eb1c1a1a93394cb0aa1369646b7131bf4389f6ba6d279323d04958bfb2f07968d8da8b3f02b16eed5d351b1585c6a10372586d237745e2576e7009a2c2e998de1d08fa315adacc2cdbb10e809dafd80c747a4e8c642cedf1cc0e82e8f6cfadba4127e396217d43a3f0869d5c00c1d5fc8d487861a95fa587b26448ca7366a2aab25afe078a075713a8d0fa35df6637a4f39def247df29fbe7cd6540fdc06112e0454ea353d3e9808b3577fa360cd47ba1d73cbca5687feffbd434afc49e72282b64be3820681fa3571afc1e06df929baf72ec7cc50ff1f4c8ceebaca0646744b8945f0671290b3443cfa0e44069a4b575bc5881c9c0ee93771a8ff24f26015fa218f413e65a9721b9d2790f5be6b401ab649e431e2c2928fa3c89472505472d2998d6c8d53a0e279c91b2a431474ce20969e88bf7aa089ff683369c1e10022744115ac9783dde77aeb91d227a48b25676c576b3e79c747440d34869daee2d040148729e2083b0e03c855dc0ba46e2443dc58a4e6df4095e4c05e1fc92c987c487defc92968de60519f8c7f77ba73054e5ba7d1b430d6df5ac16a15e11517900e2ee7a1689f08f22a57a9a00f5ba698c21ec9ca76d2f07b717727c9aa2e1f63c6eef9bab8008d159d2e76c305485a32185fb94a35ac7fce089d0ffa7f1b6e301e0294d1730beb0060bc81c02d69b0e284c8159eae3970dbcaea1ae1026177e0a6d3387d4e43a1d45081cfd51a60eb86dc01d312dd8e6a832431a5d4484becc415a52b26548d51e4349cbe6cf2617d6bf811eda5de2e2c423bcbd67ab38fc68628e7dc2fa3e3a92ee53bb3331a4365e0ac03da736cf6f6bb2320e7ba8d3d389e6cd95ed3e904d4738108262a74c4ab5369cee2f3b683cc0f5a1c0e98a9fd38fe8a193b805b5be6380002b6cf0dd8593684963f4ad3b3cca2a6ce3f116b366993b6b2d8a2b1ed269aa7dd332cb89837ffb8606fabfc6638e569bd71b1dd0e044405e07bbbf5ce77364d7455a20f899709c9b34a7d8d780511a8de102f19662aa038de050504fb5955423c2d760eff44d847f3bb51005dc8b9e49bd2a9b638cba7e34cab7d91f90c5e8ec00e71f581f5bce3d3248ce13fb6b21ed01187178fb3301315dc13971689422d29a6d19269820c492a863863ad16d80d1681687a182d7278ea68909e2c8608f152a2994f8b89320789710aa7340287c9d60dd18cef19aff76fbc09ac812708836a05f7860f1db7abf0e8dc2decd1f27f7681751c941a88b39b6a39120aa20d8aa758246f4b15681b9d7540953e397022947799dd39cf0afd41db27e76ace04986fd2dc3df183f316413a9160321eb8da9af2f3ac7aa96bf395f9419e38cef43b8303a79b4186451f6554f24fbb48819eed1b9221c4203fca23ab472d280732e7bcc1060b8eed3ef67435c86f1706c5b375c951fc75a7d4fd99eb3ae32a857aab34a4f2d57a2d59cffa5cae3aa8c3ce5d6b90b795f68886d9fcaadff170350a2dbd8b947d5ef0766c32bd2d96630ca82d0e05fd147718781af0321315bc006427a70c75075064376fcdad6ca41bc234e7bf28ce3f1542b03955c326390fa5ec649b4770f5a457474751bf92732be3eb04eecd74fec2a49ef9268abb3a27c17016df7dbca14045a362be3a8db17dd074d6b274976ea0d63435b3304bd181b2ebeec9cf5c21557f7343abb45a9cbab14cbe7d40c280d46092908f1d4dcae8cfb0b566a175bb895674650bba8e3c0fcbb0dcf40c377ade1b84ce8746d788ceb862611326f4995720d49d5063603e2c030e7104b2c9ea66a1be8e278ac3f97748945954b44373e1f11e6c15e8a6b1cc91d20278d2f7fad24b91ca0e161a3e3153edb81c4cf1eb595947072c46ff32e3737f9ce4f3e72f6f783bbb1cd7b97ea567575d5f44ed5c8cdd803f0846b23a6cdde84b2dd3f12c9802c8f1d8713bf410610531a8e5ac38f616a3bea092f37044b9431d32a2c366f86a59018846aabd19edbacfdb5faba5bc6a11992dc2a806ba2a9f71b0249a3a713aa7412455b5ca7591ee6144239abce6b7e7184c3440cc4331ff96cf07646acf7129f03306daad215bb1e3579ceda7f7e7cf6671860800c2a590f998129ea61a8a3ffa9caa1d209ef3b9375ed24ef233f15d52c4abf06b4ead516eab64fcc56fee2d36a547991e968cae7dd13f1f204443b2fed62c3325250830ba533c361fccf4ec0c9d4e645ffb3440b555edfc041b9959adc0dc1e9ef66027911e8e07f59e8e84bb6c3765b8e5062ab6a073d8b0d9811d3ca72c7ef2847a649d76b25db3b1b32c6b9615c3d9561b893a475a72884506dfc72cf4b510bf673846a442c6b38c34f83852f6b299f7a2d8798523117070fef06144a49ebec0349d7e0ce76229bfe70244b6a249ab9d4a11b31c8541fdb1a7339e7c9598cb8e95d3aa6b9308c419461c1a809b041d76fd3715f4ffed0433eafdfa3834d61f9ea253910ac9f078f8ee32df91aa66091fadc246afa13df41beedcdb98c52105cf2e5834a660c9fe0fc0accdbab56eea83c8227ae1134b64c43c099af350171cad7881a016e8eb2be3a75b43b8fd1a6673d6709443c89ef3811eacc18974e594d6063d6ef2648d0da52ce4ed5bb48dc2c7fbce175a5dbcf0358de5a22010bb1a0344b17a9c85b9f1e4d56bd6712ab2a4161e16ef27633b2782f39d09ecb8e86d19ee68830be964a52e789e8880adf3abaea41aef372c7452fde85f48edb91a80f578024c86e44097e29aacfacfc028139f52ca5fe9ba4773dc31a4b9d0738c879a07970659f0b2af9eda707b695467ef41a9034d9e8436beb133c836df279ca8e3213ca43ab8c52438b4823312313c3ebf12f6de799d08012f07e95d401ea8c320c48c6ff440e78bbdbc2407c524b5b7dd68546cd030e920f42c8c7e2706d950e4ad5519fa2e908eff1df374ddc537fa7b309e7f08aee0d527ac77618c54ac7127ef7bf5ad122de9b0a201a8e72bba0d73ea3b999496e74bfd2b5e8027bc87a160bca1df57abd075154f9e86e6b7376cf44222364eb10be888ca26e8ef611549227b90955c5c1782c93c70025a46003111984bb847ae173362c2451dd0831d6c797a33a18ca5cf691ab5690bf2302192ff0d24f10c5e6394f02fcbda6f961e974b1a6bb15f0ad59941a39fcdf8908c03fdf960c907715b396701e8cd459175a9b3ce9c77b8179562c729c2d53a4e1d8fe6325ba788f9292f4de9642e02241ea29216fe56745066a062b007a6f0c9f3daca03921bae82c7aae2ddc5da05f4d9ca9289075fc240cb14e546e6994e49467a1108a197cd79ee90e1767a5d4fb11db068ef87243d21d13d255a531cdf40a78cd4747e391d8501c58f7120619039127e0c9bc84d07f758f8d206dc808df9a692677cfa33a7bda53c540bf1fa7d608ec99e4d475bdece10fde102415ca2ae28043c0d10356e17d6cba4146c1e56624585898c79f6b0063aaabfcfdf6b42ed3debb999c7cbc3ca603b704eff67e79baa87e3fbbcea0b1df99c8465029a17c2dc9b80d97f0810f6b4857e22d6097a9f1145aea4174ea52ef36dc1c7a6b8b32aed43cf0fe07f47d4e0fb1c43713e1424f42818a8222bc08f119ffa88c6c7e304ded5aee1003e9ea6e5b8cfdcfbbd455c93b685d654e1c4ea3458c035adf5e3e3ae0d51fb12e54dfdc379ba368cc308ef4c21a1df605c9a8bbde3718147eea3ffbfcdefd79b720423b03ebfb27f976db66f9219e97217a86b5a108e1026abac3ca21560d9500c4661f674ee4e7de2bea9e4cbcd022802c5b43df3b2c0c2e7a8b2d190e1a5395a8b3ce9ac0b48c83fb21f0ec5ff184fec151a63dee13804ec8e987c306c1331daadf1fa027de1a7c95af195cf5b433fb3912c9efe669872a1103dfa9c51853f96ccf7aed85ef4b3259f83bea7dcd46a75268a8edab37d05c8a07f0e733b15a7874668417215f5b5b3e5bba5315216b06c67fdf83ebbded212ec28b4e0ab8bf3b4d6eb719d74d1bb8e2db2a4718529f1e3972ff987d3f3c828bb6e775e482facf0ebd53b24673e8330410f60f6477377aa6e317b7280c2b61d79cf9ab9bffbde89298ee11f804df871a1d75363d87de8e0960b0a7c8d11d11396ad431f61c3a1f122515aa8537a58d0e4948a453c5edbe7450ceb5cd7892599f1075578feea459b03c11aa4284a1349180c24a7df9272d33300b4531e30c1cae8e43608248d2ed7efe8d6f760fea6adc63c8ed176d1299697b33467b82d92748d6aada8969a3c3255218626922f2b7b0ca39f994ad38e5156c1941fc5ae17740da84b9f2ce4c341b4dd662989cc7891ad2dcd068764bcefd1cebe563e4dea6f506154dc8b1bd8ded8b2a85fb43e6a91acee544ec8fa8a9ab4296b0fb0919fc69bb600ab4d2fbd461ca965afb935af836d1372c3462d9d25b1bca34dcae72b7791739fa5667c689d613a2ebfd23e99f65d7267747771644440ef82a8b242903eb2dc21957924af7b6928ef82ce96849a1ed105421611f0b8a20f26a60b6f110ed04916650cee54d66a83cd71af9cc9d7925d3427da2ef057ad674e736137e43e2d21b677671375779ba29c4c0f3c634b22d450bceb0a77ef664a5eab99668ed63286900e09a7dec88040d1083d1c0d247243c0786f389125e4567671bab48a818795cb8396347a4c856ad1b7c000f6c9d67398158228a6b2b5d47dd096cd49bb1d4829de4eedc8414bd1423d76cace82bf91db48ea45e2435a07b566f8c2c93c2063e72ce51aa1b16bcce171316fe6d13ce75d3c779954bb49fb2ad86672f96c20387af70c55e6a4c827eccbdc27c8e13a8bc5eeabb70e80bbf719ddaa63ad0345bbe3d686a8268c537de02a6d63b56a3dd0f35390a279f2cbef33276e3f90a459cbe38a8a53faf6407fe251286eb26ccbd1e70d21a3d430195b01268ba8a834447d1288a2ff24ebfb7df0a2583d63f8f18b0cf81bebd8c511b0960f1fb3960977f5af241a29352a347dfe2840f311f88423d5fbabe0bd9911da20a3b5d854cb6ee19606121ba88b37cea6fe963574979835476538d06413480e284c11c194771582545c40d2818bb2d55051ae24efd4bedf07cf682bdf6e017a570fc5c3c2b0a9131afadf03f830cf3cf65069c6f9456e8266fc81ba069fcc59281aabcdca87f0369385502500875c13839de0f400cfe465b3142dcfde8130c6d9d627a174de086a5c34c5fb2c8dd3540c182689afc1810c5b1bd2a0d4ad33fd88abee971533da18c1ea567c38053d98fc010db999663df196b87899b48f2926057d64f8d6acb5133c1f256e4ad7dce5dcf663c381161b39cbf56b21586f12d2c4ad1a7c82bd5620e232e339241b3278ba1629f569e337140b20903c45b0b21b0e1864f0046963c5e98e1c05823bf24208261138c8091c457683d2b6ab3f30c3f726deac141cc025fade57fd8fd80f2f00762ed1703cd68671796578b674c8a63eb305c61f83f164e29694fe95a0cb1a8e15fbb74964b9d7ad5b366bfcc12fcc7a05c5a3b81d7ce9c2c9eb5dfd34c403fbe4e730f7bb46dc7926bfee8742580bae5bc9842f946548cf02fb1bb0dc9abc244ed33562f69544191d9f9b3ced1e879fa4d3cfc56c1724d43c25a5488cc543b8055455696f9a3bd04553b57706c5c581719b4b418f171b52b551b6eefe81c7407b44ec62067ca1ceb5b74441093d6df8517528766a192810d40309f415287f7cd6a7d5841af30d1021ce2ad763b8aac1a0e527440b45dadab0a6bfa4ba84e94ebfccb0c3a2f43e8f6c4731c52d60f0cd77772ba32a40f7bf20f318a00a1032c449fd2a4d98f838de2517b143ddc20f82d1fdaf0bdd71dd5f93afeb20fcb13ff01a24935e46c62b595d380f7dec43c0e30078ff1bcc0565a48d524e0d75d2f07dfaa934d19850523f628e28a88dd40459d8422531f9afed522550d8d7494f83166cbf41a5009b3c43270d5550b91ca66878884aac04dc8df01c439d4f14817810260545a332d5ccdf26a47b4c6f0f6f470e87d2f5c3dd34633af994032f440c9ed017460abc4978bb99cae8bcc7217a58591905bef76c54f58e95771f2ef0b24df155689231108171e4f5179be7796dcf5b405eeadaa876f0c79e98193f81c77d63859b8addaed1748d5623368ec43bf7d06ee48841314cb8b2f37f355bf5156ff581d64cbb8e261bcbae92631c138a9eb321df7219278a0e17be5a3e3d1141310fd5ca73ec6a3df60d660230152882de165306b06efad1e744ec56a59fd8355bf5368763c9bf743e16979db2c721e9de53ff0b16966bec3c2bd15d137077da7bff98310b25ecd1924c44bfb01e5b2effe51063b7ab4ef77bc988193d83c3f54cf4f4c66c6cb8a29e4cac908f3b91f79e6e5344f7562182b64a78c2b5d629aedde4fd37aa87fccdcb4accaf158138a90b843f0f6ddc35a98c0ab4ffdf078152ea94246b2ccb4ff0a7f78ef7a5a4fe30dab133388b6d271aa7aee8e36d6bbe3637489567736bf3a41966c2e8fc1d5038c813e06531c73df06133f59a5114e2ee254bfcdb9298b3490f463e13fd77a03d57d8b0889411507b370b6a44db09f911c2a6547c9e104b4061eb486ddb740c30586c59edae388b63e1dfc4297ba94191c122c01090deedac9e3707d4d83d47fadcbe3cdb101ddc9535a7059166133946f59164d5706eb3f63659e8563aff1b0cb1b344f7a4e062421e01aedca59256d26015d6937359229d95fa41c139d2e18e230e2defde64b58ad07923e4622fb7fed4d8ecdebccfe5dc5eb3c528d0021aed510db87fbb7197b052be4f7eb593469cb8d2da486554574839c50c84d81835b5eb5080939e87d04cb3061acf3fd883c72c7c739b24bc0cd112e4c4eba80b0208b0f9480790f01de888ad25913a1fee3aa97a869d9bd1585e4fce2a7d029f2d0388535d1bb0cca0d6924f19dadea6a879b421d89a85ac459aad6294a8dc32b8727120e842236cc63ac74e2d0c05939d020e1ae5c95481f83fe26deac1a574e6393dac86c7d3d618092fd5ca5c607810dd973c42dd5fc24ab702acd192e63c0efc1a80699d8e9bf74e34631709bb25db01f69d02ba8d9516e9d01d16fc63796b0921e73df57572d25d1151710476376ff7dbcfffaba2fe9a3fe261ba22c6f76d68ef8815a78edd7e49d9a09a5e7fa6c47f883b60cb5edc64907b54d31ff12670829eaa74ad3f8a086880f89c7b4eddaad605ed1799dadd140dcc0bb5e76777ccd80d4b2b8ecc1411f3eb007a52d12e8217f904c6f14691a62b7833d05a2fee274703ec1aa65f1eb9f0a9d6726fcdc2c4542ae137e8e400a54da17796f16d2b90fa4c3aa6c778d97385d92d424eb1113104049b0367077be6e07cb123e3efd60827258064ba47e22b2126936d0e8cbfba220e9687d8dc31b2588795d5ed634c62698109eaac893f93d2c6841efee3934863c01c248b94c77c5203dd7e5017e2bdb927409e934e9f5bb64708fc97329ac3ab0f5eb5e21fe0ad119a58253c139dea213925d4f759b9d2e6c91fec6f70923012386778d8fab180f5947ee3bb01df959f301bb4a452d67d45a08bb162b6cdbdbb9c4c0bf7cda1053ffb648d9094d102340d8ca7ed2142f3db30cb700527e4f54bc017b56400f3a026dd9aea0663cfccb04c8053aa5605d90598a2822fc09c09f535b831bd5b642d5dd721d5d7d3b2b5ff87586a053b41c89fae19900f98bbca4c26d498fec93bf26c636a25364b39081ef9dde3f536abba2d600bb9a9f426e1149ef6cdeed85ce92fd7930ec0ec32485b8a5ab90bbbd16664eb6e76faad49f397c4ff8d570a5694408411ee5fbf85771b8029e135dda1a365a6bfb6671fe13568b7851da88099d3609a635824792bc2a343b8b16f7171514c00c93efdf82f23e6a367d212a0252c6d15db8093e32427c597f8770a52286cdcc673b3c910cfa3c2c1239d6451233b0d13e9c4cbd248bdfee90d348c21ec94b6ac6d679b5f8ad00e41cd472f5e98ac040dbdd2636049fc73ade4562ac6467d1b2baa999954ba3e12863b4f4b028d217cd7ce0c71760ef2f98df7ce0844bc0e295221fdda929f28d37d2d7f25df79857e090a05b64b211aa0b1e37d9ac089910cbc4aa2a20e325910e5bc6f3e03f760be444f87bf6a91dc5cb4182afe0122c9dda347f90bd12fed2bac7ba5fe03891dbf616ad3975cbf3403ac290d6147ab1d72d7b68b9ac862a4e7a66fa94c4e223ced32530bb08fb24d86a643de99aecba955f91b002c8eade05efd403e80912baecbd18b040280bf7ca460abf1b26c4f50434e6d171a6f59f03cf65840b8c672a26264e62df3a39b2c4b79d1f72522e971e5804aac15971b7ce641feef45f79e49410ec7c10a3688cebb3ef897edc7def780fb71aeb447b7b34f171add25546fdd460bd3053ab83b670b70dc481819c664b688fb61367947832b6a24742d0adbbb08c16d396427f2b99eb478304c7d44c2f22ec64426f64c883b3f526041680098e82b08e4fe7f2b9056090ad27b861e3d851c525da1a72c07b5d3d7695cd452e47f6d04f3d1c3886a1805d411d8ce84f2b0e14467ee44802d78cac7147e37a8c5e88051fae7129b2d36e4b1f26ea9ca66afba9a23e5a77021eb91ef6f2e7f71d92254882ec3daadd9e9d1d0523b3f1fc09df2e6fdf0150fb5c43cb28d6db00c8cb890397b8d0461a097379a7e85426db4821fe6aea0aaeb01bfdada7c8cf9539a7e82241de4ca6581737afbafb577e5a61748fe02eae4952fd9a5132b55c844a2a644aec7fe232b9933af67dc2b73de6817d0f15f846a14d062466dee1ee0be890e44c789fe1a0e9f603cd2763ef9f60b09759dfd8be01c25927cddf40a42b73ccf4b3317922584e708d4878b1e6d08dcac8c2ad0a6f7c0bf47374dba4629df8e589d321665b79100ead6265cf3c0f3d0207be861cddb73fba1f92923cfcff6624d6403823177a15511f805705e5354a17709d0283e7b5e7be120488d1d4edd4fcdc55ff093289657b58806cb6b488ca75b5c2419c9afb78024813ee49fd53defb4c6d1558202854fc0f60593803f8131dab5e61ee6ac26d549ae02c8020e888007cc3fda94e21874b8f336e055e2c45d09c482cdefc264e480cbf2d9dd8f72b783482a576fa484ca3ed9b95d5bf6a0e95a30b7923672ae3aff05de97819a1e17fa877bc5af1f63f8d89038a084a529b588b0fc58255ba7daee226e23b2d32b872516513b4b93a5d04bb1bb254c60c5c7f485e0e31eb67109035086bcbb2ed002e64778ad7b7e94a02524ec749dacef189d910e213db219754c142cc6e7a3006584f9fada0afe8a1dfef3b1dbd134253bf6c8850bd191162812339a5bafe6efcbb061f04f4c697f6d75067fe80a1f57372ac847a610db071de27d79980cdb0ab6dbfed9430907dfb09510f006a4b5eeb1807616083b96e40405e49c88332236e23a2782d9cdf3112fd3bf7d2bae824da74abe88ed51cc9c6b3f9134e541d330a403bb044b3b5a0bdf3acd474585465092ff4c24128e283e1b8caa2ef28f298dcd4fb2714e090427d69d6cd079888d15dcc62330ab3fe1a7de1105acc60650bcc939bbc76ebade61899d9a6a9f7d646d70f2b81b43c746f26ee92010b1acad89b8f65d7ee7607c334ca2cf56122e6ce69c3715c5da1410e4831fca8da069774275322eb803c03bf466d4f984e0c8967899934b885925b1a1eab2ce922c82dd6863d92b11a332adc3743071c4311b4ec38b97d897608cc72ef3729ad660e6e03cd5900152263d8d6ace5e6187776ff6be4d145e7976fff210f34e30714cb526ea896308ebb052f546665066491fb233e6e69589c7a793594326129ef3d230523630329568bf66ea95fa3b4897bb6d6a073a3a22be93c4ddfe176c1b1395b6208230e4cceaf6210efd26f6e79fe27d84ee007b88de9bfd3ce3cdf5926e34b938a58bfcdf5ea33fde0fc1e36033c7250600cd840908da37b29270e03ea431532a1dd4e5d33611914042a2c32bcebd4b4c4f6c2a524a4a8236595179ab4e1da04e8d10b0550826b0ca41c832d4b88e60a6993fb924bdacb3f56156bc2c35ef906b01981a3ef712252afeae411dfe9b1774df22628df33b93eeaf5824b2e6a786f38367d87becfd2ad3c3f4523985ad5be2a196b089957b19a78de55093ee5194794be312ad2873888015d71bc84cfb9b492915955b1767e4d4b67df1f7848e8a9cb67c58b73b12b563c35fab51a955598bd3c6a0a14a61d53ba22a29d5ebc3990528b273564d9c41829b98d21c7d1d4c58bb00edf2be8cc4f0805f272d0b0b04fb5abc1a4b86320349d6f18800c602aafd02de6cfadc28ca75db660b9a956d0bf5195cccdc0753e3f6d3586d3cc52d1304ca561cc165ed95a518999b64b000b3388f4323d4879ab682af5552e99e17d4cdac640cb38acdc14c8e9f90653ac2ff76c2ab969d1e7d15a1b8d1fd4e62db14a117b4b7810f3399cda9890d7af42fd78f1e034b6071c6fa77463df7c95a772048953f0929619db9c546f8d1fe641481b3474a4811fb9314f04ca53cb4e3565d4940fdeef481a9315e0dcf2aa84f8df8c2e153549d913c90da6e0ac0a2c3a3d0fd85c966c008bad3856b453482a0b6f2d5703fe6095d4da761abcbf95e09bf220213deb8566d935345ea960062681299eea79f73c8e9e7247786bd317265cb3a1776a1e599e4402c6a2a407da5a32e4fd097bbab283d0685fc28b7ee0f96c4b7dbfde08e604099e7ef550245c1faa24b9f345f7282f7b54217485950725d366cd5847e72b58a2b50c998b34e33fd30305d40184cfb74cfa98fec6cea727e08a3d8629a957c670b4da3d89b980be7361bf8cd133573d7a6db5d5374b848083b1c8f71ea9df6b1309ec722587e2bd23a9e3a3aaa796006a71c9304e243d181feea7ec2a02929ea85831de86c3ea9f7e3b511a52fd18055a47b737425e3b1588d46fa1129b014fcde1610c728b0b59e552d0e8b4ba9ca2d1f3dade138e0ad621782add776009da8251d84861772f59524a43a96f08899dee1d7b7580b868e5eb94117e35b705b2094e5f6e2ac9537f405952412aedbd166c8ce159b837be03ae09bfba86335f32fd7197c1d3a192b4f6ba50fc341477885e5501e5b77963b1f0710aa3d11016d85a161946f5c37e149392684eccd0b733464cf1f07acb14dd1193fd05aea68fdd81e101e1f57837562d19a608a118fa2d40482384ad07317c49c711f82eb4680ed777cbaf4860b0cbd457b92e20fb397590d67a76ec7af7a7e81773a739f7154645f783754eac1cc8abf56f8b0c5a2b5455e37264cade94dbbb9319b138b88b47d871c37339cd421c0068c55aea4f9a59d7583b2531035764969a52605df4f0723869ff6d18f50b6b04fb2ba884467f568a6803c2926c9f56a0ae9d310f7a8758ef2cf0f8c8a5f092a9814f38ff1e46137c39638358f39915d4f117b0a48cc99c24122137151706ba9e141d5ecee0f0cabf246e53779e9abffefc33275c8e29ebc1e59aecea924e31b1e1e3ca88a70339d80524b13c5a4c2338db7aaf702e28d99ef8638df95c0dd43b97be39283cc547bba7ff0b09fa544f0603a4e291b33fdfba25e7f161b527c7c3b991086cf6fa43bbe11d394c7e5465a66bec5b19be47a89360a72e22e38c9aad04851d04cb719761da114e4c65cc02efc030f821d83cd4d556470c0d38e7d6e161cb8ab1330a863dde7d4a5a2f9d8140402c3de453d4abeab65a6c74d28f3d8bab49da581d804266f6b45f1ca1c1ba1e4cbe5afb1a6500c384d31ac83e4154e5c2f6c2c2053737bcb578f325c42749a5f7a6a3b829988e5d7b8620ea45a5b63088f968069ef4d6c88acaf81d1a68912b145f7f777075b068bafd63ccda32daf98612a72e30cc992316fb888e9cdd46b050042bf31b7791269a563dd0fdec6cd60a3464ce418c86095541360fcb10db8be6a39783d49ee69032d7d3fd7dff2e259180b0ba073f1fe946f1f7eea2ab6e25a55d527f573d099bbe1e37e6ce6ca8e7161a7e5a39b4faf4ec6d3ea37f51ab4bbcbc110e17f130946f4804702c3fc14a3590d0ded303f0693c375a3a0398ebf3df6a7d1e0d1d80bd441998000c7769a8a07e7a627c72b45d0306425165ba518d51f23a32a0ef7e6e874b946f122c617d20123061a36126bc3b8bb33c24a560f650357605113c41caa4beeef88c593a2b7a9d3c12b9c86f3c65b47428c3a0b93765c6916327e9b37d5d749a4c0b84def5e533d6caf7c94c07b2f2bc698d0654931c6ea6e5c583e7b5decb0312017b705393540fe03f8e875feeea16ac850d4ad1cf457dde03b2dc03a8fde773127a58ea401cf219bb3be85d7976558bebdeeccf8d611752968af47d0e7cf82128789081499c1825d377a5187915a6411565f6544fd0e66ffad37799bed815c491aafed5804535b89b07cb92d5328a1c089c978a3e60c69070e567e706d3a3d4b53a1979eb30cc94f4d7406729bbed22bf062f51f0f6495b768ee1d4fb7cc7400fe61855dc1363f1c7e584fd1e456a9f6a07d3789a31ce5c145d02793a2ce9e3882738e08f2997836a4478607023bf8dfe88f1f215e2990dbb0d489bc383040219d9a735d265f4547a11990bae75507676bcb3484f14c6876df37932391086f5b45c995295c531fc65c49952a9b48a6e49319e859e7ae82fbeea1da33e0b53931d787754e1ba357c5dd41ad25570b4acffb18c87831b99e8debda3ffaeab88f73f408a21a8bbb17ee7d55ade7bc10072ca8837e2c7c0520680e3e2625dcbf9bc4f6cf8baceb3484cd94484002ebe242c2905b6a0a823ed5de770a8a9971589afac0a1a15b02fb5a345f7163e56454a587a623c62bdc3585f1f223a61619dfe17d82249250fd37f71c5d0d263e88ae9a607854507345b737b729fbaa4d2e570e7f0a4afcdf6f0333cb40154e166438a61f06f459fd5bdbdf682a8a6ff6591b0a4f70fd39360a5af32b62b4194665384a9485b73aab8c949e71fca36e465ac691d9f2de64218b2bc81d0079ec9b9a27f62624eca97b968e6efb1f4daf8d1d255449148054d06afb56bffd9b06785232e66c59a3bcbb8de8a13bca48146688d278a1983cd4903b98319e9e838819fb28570fed76bb12fb18653ef3f960ee6f4001353c8f8e62017e8d2d436fdeaa2eddd60e7583c81ce38f7ee5f5be11dae596e71befe86c58f16303b0f7181dea896002f0cb5bf4b5f8eeb9dca6d8dff24b27bcf0b56fbc70e9b99ec58984540ab501377b028520f13c5b2761db1d57c5ba4f1746e7ecd0851dd0c401e49bb065ffaa9b5f2c0e8d9caa5c8ccef72c2b79b611cf8818c0ead3c43d4857c03b8ffb938670135b7cb9d8c5bf457a0450fdf21e605f5f358e525c857552482eee1a9028a153f761f343b87e908fb26d86d623b93c605fb27b27aca725249311582d3b4e367c0e79d648ccee99b641281361e8e22a0c3bbb0f1f963f506a0ac63a14132c78c62168847935f1e9cde8dfc6fe9f9b8381bfa5098f42ddb3479115cbd29055f48bf25214f9c020d3330acafb441317465dd40b47f297c78c9ba17c062bac00009bf43850e858c04474ddc24de7a41af2e6fee0f945213b1fdd3c31e908f138382f06347bc708d63c84cdd15411f86c500efc3b14e532664d82699605d8dd99218c728da403e57e80a4a8df63f0e3045da7fd7eeb9ac479270c79e34a50fa40ee87487cd5cf0291614844e4bffd84144ccce8a36ca781a48f8604560dfc90ecbac6b4bfbbf08e5cd4e69b8a7b123f509c11712a886598a7ab36c4725c84a0b7da4b154682aa9be1ed025eae01de215c609358f48094d25c6ad3713804429f772d805f5c31e54f06c65d4cc673bd3e14b93db09159d3cadb647eaab31d985e0a1eea98ca78804c7699ab169279ddbf0d380a81b9e3379c4cb697c1201b14d11998a1a044d321875f6becde9d0fd5d256316c8bfad8ad89850967a1ff3707280c1b359eff4774cd4fff3dbfc619f0210683bac7fbf211f07ad06b08053a130065e6168f076fe619491a36ba0eda07e1dd6a254f24facc4761e583a35a7c70aa1394f376fc79af0037dd23dd48e55d57a3a44968272a4da83916a0170ebb5354abb4715720e4baecf46bdd45ddcd82c1883b8087a5e95421cb7789b8f2f0185df8f036cef68bb7789e05747ef1d412f8bb80c30817269030e5ec72865cef623c37aa055f6020e4bd7aaadade3bb7c67c8ba465bb5a0becf6a154d974b13b22543713fbb26296d941b50c330b9a539897073f8a9e27637a690d73b8352ccb6b578ea7c11acac5fb98ca515b8baca9afedeab498eb5e82b5385668bc546eeabf76cbc65bf6336f52651ff0d669556da77af6404660c6c0299b1897ed9807a52b04735b2618356bf1041ef22efb0c852bfdb90ffa4463cd37556e837b6c55c3918c0609612d523257a5f5c3c27ba7e51361296ac4184bd9c94e46611610ccad2084fb95be04c4b50a2cc3c9049816c56c5fc64011ee52921cfb9a3959a4f7e4955948c3ab5130cc64296659f175295406c0e8f8665427beca202023c14bffde0d0dd44f056b70c76c50ff4e93cf8b4c200ffa8d83bcfe9015411b0a3bce09469c1ef116c76970130058825b280cb1b7bdd023242cd6939fb3404e66ab4253b2da1ff032db4fc0bace9831a63080175347f1892d09cbd884a1a05ebc2a363ec4b1b1847df24888a955b5dafbfed8241481a5517145d6ed66b38f0355e6a6c9f14a75a1a1cb5e68949288f6b8fb5c297ad70b411e562a2799c7b3587488cc009b9d5a5506fff2658216dec0968a6efe3b27de4e9f54b0c0c89e79e747ecb2ab28bbba58e85bff60885a3c66290f228d8ad73beee70c9b4e1a490af21bc157a79e171ce444de60d67660bdec29a1dc849f620179f5cd686b9a1552ffa92f936d84a450ad459ae425ec91f56d5f60386e3f9ca59125a6968aec1a43686f89162bb6d79d2f42ba28f742c7f980199e4b7944c295bad19cbc4d95a73762cff86bea79b202da38c795cb6422d3033c305ffc3200d108aaf49c111d70469dccc66731e1417c59188868c75c559fa4ed38afc8dfc40769c32f2ba1d86e22f49e87d88a940ebee120d5e51b97b2c3202892d1af8ca938037aa7be11173abe1b7470278fb847c7f2840164e578f76f3d226fe695cb5cfab770acb1afa183e08fab98b9c68b4105fc5f337dc949afbadc58bbe9be1ddc83cabdf16970c9adcf82dfdcdd5b0836c8c485bfd7b3e0cf2d3ea64355066019db4e87ed6c70b5c2ddadb287e0d5fcf29f0dd5848db3e64f622454fd9bd80c7e985737f9e311b8d01baa5d361412b6708f2d677693d25167ebfd4ddeade7c82959eef71405d6edf6710222de4862e096d40a64563465db4df04eb265e9fcb5570e7822161beb66228fe6240edadc715a6d11bcd7bf856a9e353918a3d5e42adfa8ff9d9d8618f42e39305dbd3e91134761acdf7e56f354cb33e76e853bd10679cfcf83fa2b65d4723d8f52d9788b1893dfb9c8f603367d245ec989cb2f3752ea4aa634f5e1ed9f34ae01c6397ac933c52e460beb8dce0c09a1d7a75ba35667540271eb1a79b90c131a4a0b1b92cc717294bf60b7f174a29a57927db488bf9d6a834a28f83b2e4f715756acbbc6d15c02e30da4ce300a0e693db9b124a17bce16546bb1395e69667d0cbdc42b50a96907b7f19c1101de59eb98267b66e7b3a658727e9d5765f889930350c36abe15958d45f92561212861ab4d33a3d385d7ddaa6dfd74c1b98ad9f18850584b54c538036535f643106643e9fea86ab71e1cc7ec48751cb28dc1d63181a687921040c064e0a939b2b6898bd3361d762cd4a63479484872f772b771975f4774dcd50a7efb4bf2459d5495cf313b1e07c7338a1a3d6bf9fde82cea3975364a72054f5b47941cbfc933c2ed353dd8d1442813770ef852709d602c572dcca5789b6aca7faa495259c3bde43af89c70368ac699765e65d2c6096f77e4825ab41f90a3dce8c20bc12680dffefda5cb4c832b76a3df05ace556014f31a78a32d0177c85bd439d12fb477b3cf3b5423e72c69881bd15f3b0615116805ea3635e7723d3843ecbaa1094f36c76b574a3447037d756ab0610852853ae40c9257758d35209761bb932b59b3d142fa91753359151b7fac005dd2ef66ba7c25332a6cd45b301f38528f15626b597db605a53c65ffa3a3b4748dd2cabd8cb00d6d517440241cad8e41ecb12e2f85196f0e6cfb96022733d4224cb4d68802b981ce9b1f13517eb966dea42ba204cf968849d81873ba42750d22c3bf3af96890e11dcf0e04f64831cee44b09cba22407dcb22fb35fe545734c79cbe2f19814e5f163d4b388b5257a457fc55fd4c627994c2826c80809c034b850d248e596f5ee09523c7df7f7092de8c0f047f0597c6b8e47f558ef56786efc282c26a6a0c9241a0588b04841808a64e30b432bba87ca8cf09479be5bb919cea610a7128782922b8e1162a8794a8372aac2cc1e98187f8dec0fe0c0bf6f107b0bd1d597d2e1193e8128faab506ced9802b4c97d4511f8d21c890dcfd8701778f45406177dd4d4301c21e885ba7dcb2985774a2e8cbc223366de36de42ef99da249973d3f72cd43abb196eb83b5ecee63fcbfecc71aa00be2f6da7e6752bb723bee5a22f2b732abe7e8a9c309f7d846e2ad70df7af755abde00fabc98075eb73bd6b2154d30d9d90a3fa27d88065fe166b54d04d1da9e013a22e9e6c039d2cfd980e71f610593e6a74499bf9b962229b9607853c965d4be514cfa89ebf43803344de494e35ba12a4fea655db7928042a73ed0b0a8193dec92bd242bad6d1546b9312d8937e71c3ea2191b3494b8d7410cc38ef358500199c29a52d5eef7f864b28b7a250d50ef29f301fa4a1512615a9fe9ceaad3cf0fff33d1c3976a5960e8c784961cf7854477659f97edabe991b3278b55973b0f72c1574b81ba87c8c37eeb9f1dbb45e9dfd148a22c041a06f528084b52e6e9c0ea515ee5868ee1f6306f80d917bd5a2510baa28c8aeb7af65613f260dc367ab284e8a25f5e1f833ce0acd4b279582eea8e5406979b6b9c4e5b3aeab67bbd513f9460041cb76ce735b857e03d50870d8ab6b61275b24a76403624df593f35449623366a805ef0a365d731f0d61b511c25770e9109058b630d62fe0391fdfe8dcf65bd8166d9c899d1c9e4729cb05f1d58a1c011a6f3f46d1134489881d325a99d92dd5a7ae14d18834023d545ed388441a49eb8c32266191816b3274308e798fe9ebdccdd4bede02f6a27de68faa609d2c788173071bf727329f79b45dd6236ae2871df6bfd0c4d8d8318980117f106f9ea8f5d385c2fc469c34548e7336995b5f33d6d1b9e5ef66089a1d26ba82d68ab03729e8f3b06e16849d56bc3a382697a88e8aa41f82e883228dcd0e7e1da8ca21cbfdadfc8a929adcd5c5edf2ca983ba9cea0ea8ea8934fa124a375cd14447e23e712b1125051380abf2e57372d3bf1806f168ee9cf4a5e9e6b748772c259398a0098b38cda3e48cd52a55d42d04c284c7fd3ea78a1aa016f2f7d52fa9ee24ca089dc97e011af2fda56b06251de46444a279c528c618ffbf518a3e2ee8ff5d259935cd40fa4701253b5abb6960ffee273b872bbe2e6ee720dbdaf58e2f8440dd878369047fd87f3ca41006cdbe5251de3efc99c17c6ea8a06f20e1b9ecd991f71758b45608abe8c576117f78e58d7760ddbcb57ac1ba4029b4209c0f9ee90de16b77d7046b9d25e99b67a547b59c8fd3abcb63607c704339d8ff4affe823b44cd405a9c8edfa81e00f34c90447e36101669c4b967a44733bac1d9890430cedc8432dbb48f66a85030eaf59bef4eaccb50c8d7f3735d29f757223038e785f36db547dd1d4d8a495661a15b2280f445be6f0a61c507e3477a849b9b291ca7206ad0f1a93d7572035d6af9827de743b4171a1e09f20c5f3d567ddee01770887807e4558962211169d787e3376bac3299c97bff3852411ce2d2e08a84529ed25531fc6c2ec4c7649cdd8e2dbd7a5a63d438feadb0f023baf896f4f572eb6b33425f7843d639007604f6d96f9d40d438e576e5401182a5249196b92a5e425c74cba26aad9b28c4f017651acff11b656323034bf59d42369cc1f7ea8dc4219e2f659d082836ad68309d7b0ee7f34f1c4515ccaa864879b218d84af5659047020a276520f5a478ed0195f6ef067c028b261d2a94a846e77b1283fd5ef04384d41d0c7fb32fcbd8c56856f9bdcbf75b8ea8cae2197c0bf81ce8c83a764dd5ae576d920d5d53bc55975b5136650714c566917757099ea98df407d5858eaccddc6a8a0cfbe0b54d4accd465d7ea77a30243999c52dbfe57ceb87f51d4741654a284b43f33a0d85ded95a73a973a4a48f2d8de76f013b3e2667d5dffd22a8e989cc6aa8c68b1b0e65f28235ca071e444a09b266564be58373baee05a41205095c7186106c3862a44da5e90f5b525f195eb8938e641cbdc1a9329f50d8a83f9d120acf2c4d52f0231b2038fed2a6fedf350c3e570c9337b0f86c72d786ab257a0d9234f64635ecbd3f1c537234b270108dc78368ecfa419a39d475f72f778c1f2f74d60d25fb74c6781fb18ee78e1f1a65f50d61ea7ace3b772738c37d0238f840b6a24a4f21dc6810b712096dd96ad6320ad991be4e934de2934cb512ec296bce275359479e9ce99d9ea24aa191a7128371ada2abd3f9102a66653e4157419cd7e9521f069791d3aee0c44c27b922e96863dd1bf3aaf8f5f743957b1404b2ed5a095c7eec87a9291f780fe07c7e080a6ad5eeabadc866c07fd088e01a624026e5d4cf2d57b2b17ac35b58e5d1aa9883b3ffa706e2287917cbf4a51510c22aa96d7f4baebacec417c9fd586d4e48ccfded966b4923de5eae0ce3fa5ef6817d8405164796731061dfedf9d7e45fc3395d966e00326461ba5461ea72d5f766b14cbe9dc772dd64c6ccc0a23ab79c7821bf0f660b116e2816a8b8be18851c4fc4569add5eea1cea164d1856b68da1b1b290a948d1ccf9f8323bab9cb2eb4f3248cd7a3b3e015c7c56a9342d1b62d60bfa00e912c211c89d3099e997c06e6ca5212eb2842179489fb1bf4d17169b7aaeb6fcad8bf87b2eb0afd844551dbc2c40cbe35497632c055e6f95d3ec714642cd8ab431a9fc87f51a0c72d5698054c775aa04a5b728dd997de58909bc5c3788548a44d13bd722179af60dfbfd846ba13b198fa3ec2abb2aa3aa83c2d4c9012893103c2a75d49ba670009429b07b898cbc1dad8cbf19f9b77d025c4c10812b1bf2c5f6f302c576a13ad22eacdea70095321d931bc7d7a9b4eaa76c7d34465d134321b98d484ed1bfcc22db54149e53a6577b80f87a157346d81810f310c3a77723819e8085a4baa5f1170878d13564eb84d71dae7a05e5cf58a9117e59c702e1baedac2c87196b6cedb471893ad3e3fcc52860bfb7397e62802dbd9d279cd32fed82f15c13bc63d30cbe40644150c1677c6aa46c172639b73b9286b4737f3beb5e7e36d0ca8a5d26f4903afc289a69c33e4d52d2dd1f457d3674134e9dfe4ff0d25786b4cc68f5dcba209d6039b634148c81669bac1dc3d65b24c55f1b2b93b46184ea51396ae0840379e6e9520647a924f8bef98666f2f025b0b2f361bbb80ae5201382a0a82a6a4274b6f4d9eff5348f695d177a0c922fcb2a535718c41f7b3695390c8c476dd47cc61d51ab66bf071a6176d3280ec03b50217a0b6fb66f3936899562e7ef4397186761bec4dbc5ccfeaa81d83b94a59e3854430910b97821aecba1937aa7442437078bcd016f1aaf67fd6b2f17df7bca1e57debc75124249954f90f05d5b20dae2820ce90ad9916d699ca2e28efff99abc41350fb84474dc8e1cfafd9773350702301f2713d603ab290a0a7661ead98fb3fd6aedf81534c283b6fcd82f10f71cfc9e1bad9958a4d229745638b9721c5c77a2b0deea77c51256880283916fae2ae846cde851e2ed9a842b4af325735b7aa6b7213649ff8e0ef201898b228ab0eac8ccb1dde9cc206c1a27e89587eda137da2004c17333e719eea49a371286630b23b384b6aab17bfc9e2c7b9a7d9413c0d2a82c4f15f0e4e47461b026b791cf06b018eb56075b062e5ac1f7e91b0b52d25ae9f5b878e7fc623814188ba53bd82e8dddfbb28de665e83031b3dd2a4a3c32c40fddd91f57a630c98601d49e55f78b6b1742e2d9df6e105aab5ea90e8af3122ca76734255b626cc1e1ab21e726bae5506673892dfbced04d7f7d394c735d1fd13067c2fccdc751789f2ca6e29f360c28c435d18404869851d5fb23a50b5deab762b8a669b0f5ec0b082bd178f9ed1388c22f6c1d6017cab247b3f18f333d8036f7dd76e0bcb218d85d2a9775cca12c1f25ab147d6d358865d092b76f22d2ae01ce6d04df64ca35cd480bc961784898af2864cfd56f1bdfc1620f4ef09f198a7b32967cb192d751e1339f5e948e824e3b8a0f3629cdd77882bfb9598dda99c9bb6caba1420bbf365aacd23261f6d943bf23fd78361fdbda5ed42335f5e11728eea1539e3c16d6ee5be3b873bbd07a73a64742f9ea4267d8fee80efa813feba1576b606cf57a06e0f9046a76b87a5ad630cffce5de3bffa9ecbb0f653ad5c1517bfae7c3d7f13b4e4ba615adc29ea9235b801f2c99b21e695359aa4e4e4857a173960d05f0755e41ae0c39358e3b59e9ebb3d2cd392841e2aaaae9399e1d02f127bfba1e420991eb9fdc92568f968b0743944d6da26cbbeb281424b65f4bc1d8f702827333eb175c8ca4d5c617fc899a0183509495f026f219252aeaccd88257d2eb9c5ca5d3919473c15889d916d01780d56a4f6b8ca66644485756ad6c211fd0865ee50c771f6de9d38b6bb433732d7768d9bf5d3af99e7eb9c5c360f057da371c3a7ecfa3e4f7b790d3881f7d655544611ff746f62772d6896e3492f770705896fb1009982944dd7ac4218201b720bb1c1c5b176dad6982238ed70b6559d47198ab876c8bcc249554d4d078cec5dfa9b5aa0e970c54fe8b6cd2ac9b37ad0f9c4e6747a7e8f422ffac50f0bb4869d8a0f6c83c7ffb0a2c426d8d103f74680a75e3faa399e2e11b783ecceb3f5cd58bfd2b3ba5ad8e288f0b1b162bb9f5312b1b079aedbcf7325be997682d8a379387dd24ce0cce6d138a8e94e8dba98db0b7a3abb1e1190d5bc2a4f58f34e27352053e552e10485469e4224e3d3fe2982fb8baee7cc2d61697d1978d7b9cd549e41b5865cc003cade8e6c4ff370c5151fdb9a6a836f6794f340aea81a6763dae0ae22cf1b595f2f703eef327acce4687a76c7a01b7bfa8ff5741c730e6bede0237645daea303acc49c99cf397ed5e769f473056acad462e2a3f75807f118c4cf1f076de29c6454b07ea789a2d680f8608f823ee64568193071c3106b34b766fbe1679ffe1ab2b9b4d9cf5050624829cbd661d45cd8500be4c174e0ab5884d3490a1af78a889fd2d76be2c0bab33e56cfd6a74b93af980b257ee9e92b6d0a4aacdc70bbcb4f53f610431238e44661b0c74adcb182cf1c5b59c3b9d1523aaa5ac99bd2fa10f8a162d84b19e43885023ae1014b82051ee7acedc0d3320fbb5769fcd61ca16ca9c5d8ce5e010416480af9a920cd9cacbf6df1c861db0b0b0bfe3ff9d79de26e41d21b5624f61b14fa6e4c4c8b094bb575036f4eee9239a9d842686701c6fb3588a129389c6ca0950f7f89df19da4f5abbb80cf17bfd4746a9f09751ffabbe81f95ffaf73c6707eb1ebacc71a06649318ba8b8f4dbeb68422b4606e833e6bb7bdf3ddd0a3cfd982320f2eb7da69bd5690eadbddbcd2932a50c8ef2f036fcc221ec6765d4470a35e58352ce8c104360647139e0016811fd65173daf911bc009d93f5609e4d3c8b8c297598d3647d776e0e11ae73d97c25464858b0c22c2a9fc18bc268a394b4d7ab21ebbf3661b45c61de97510baa1be9c0287e1c3c6b4a1eb60f4f397d206daf993f3d4d8278c552a37703a81feb0ab81d73d577dcf13b12e4032fe919f97f916b6206a45dadcbe43c63b81f7476879c252c3e1b12d9b9f6a9c10dd547eeec44ff5e15e7666a95f71cf48c8e51f9f35f34ce01d05845192f9f585c5557c0132bad3450787dbce6f3178eb156509a13555dc82408e59e6de4858fc14ac027e38eaecd1f9fff4d5b7a3972df3c0cd4189494f5a5870bae64f78a08078c6ad9943c1516af313d48effa87dcdd5a87ccb9d8eb9cf40042c13df524a32c571cd106759d1ace927875401e390be400e489517b5def366ff3d1bbea150dec34ee3189b1ea623f7d70f78440c4766c9a149c61b3c3f12a48e38bea4313407a21a33a5f32ad65fa2c7f20fd5420d44e669ff6717276111fdd41b32f51ead755295b3d6bbe53ce5d9b50ce6e9b347e682c2cf99c55da60f7009e350dd331230f90c711c06ee55e18dc8217442c5f77f2acd0a3e2d523be15624daf2d7d19ac0409c150324e8d771da43599a94419d2ea1094bed3e5d07b7b76843154180501da99597103122e34db278f462478ede03745c1fe6b4334eb4c73e816aba5e17828a2c5d91b24d6db928e4b4641061f37f0b6ea902f001675441cb3a7a19d88dce95a7f5d50a41c09ec18d21ac56817265cf26b47d30b8049f726cc12e66ba038a83f0ee9d3cecd84ee9283f64179cc62681a970f15a4263fe8b33d2d2532e8ce8a461a68de1ad64301994e41f43415407a49da7d530c58005903c3c6cbe0175d1a52f7520eb0d503f1d209f7cf9b582e7f75600088efc2541952b04ffe7ed86fd5eadf8bd6c177a6ceabbf7e1b079986938f28c14f648ab2c1618cc66eec324ae0ed7f8d0d0e7bce032f19b0371f146da3772e1a8f20ead6d45f07da29aa1beabcf5bf3305f946f47965ed1760cf96ed836f7b15a01a913a8ad46bb5e3555d8acd85d3733b95dbe5c15062dc5133342f00d0d36ef250a70e12d2f62b40d1c75ecdb0b94da98ab1daca0b496f0b340060b0a13018ca9f7b0f2bbab0567b5c3d00cb194d9247c15eaa429effacc7be131a5a1a3dc5cec5c6aa724d83424e47f03d9962e6acc7ae41f183812838ee1618763722d463bb7f3ae515bd32a6530814c9de6b3fb61aff3e3ff02d7d57b696191514e674c1a0229e1059f4b64900ffcdd984b09e19432ced3c0934ef11123a45d459ec43e8868ee7aa0f457733295b4507c25b22ebdfda71fe7ade38bf240854acec415c1a959e0481924505ea7dc1fe54d7026c099b482a3c74254b297fe718db204933ae8e39a4fdd4ab46d09b512462ad87bea3db57f0059e875a6d92a4a7cc94c3d07592df2069c76b58bd54bcfe7520beea37f3c8f68ea6f8035d4d87c1faca5cdb698a36036eb9c97057255cd105b555368eb411ca3a9ad4242fc4154030fe93c4e23841ebfc91e50f70e7f8e19b2ab14ca2f067d61a313faeb727d6376fef8dd4bc2ad4944e3541af8c7b381b60ec136dd1fdfe85e33e264588c4a1f8f8767f20acf130698f010037613727156c4d43ab51b653babd723f2fe59fc817f61c6354ac034d4e992bafd5262d20e327027cd6f46eed1845258ffd5bd3ef34958199423e1f292b1a9855fa305b36347bbe3b3b0c8fb4ad10f426837965201e5cb16a3b0ebc00293ae5e3f087f027edb87ccbf846c5f0b8a44ee2cce9d03fde96451f379ba84698c7adf34059e20b80c3bfb0c4fc6a3f86a561c3fa29d8041a42fe77713f13810ba964918bfbe388c608ffab0057d7ff269a3968a96bcc6b0d0e60d03280b7ef4188897423cc924e28f562c5fcacd2f86e40d036892ff2d5a0f468be48e8a69e226706cc989937cc53c9002b2749bd1cdf6e823fd2a529a3aa98bce39cb35854c8698e3f27ff1b0b3968e6d7f94a1d63d66e124c325aa928dd556af269c7d2334ea1699398dbe0a63cb11ce1f8ea60f551a66878f60e37b9b39993e70ae349b3037d6f17d4b8902c41b7863f76148dc3966b75a66563947be43b3f9509843a4491a73cae9d2c7e5bae2c3c0ba21c6f17173031e7e3d1ed3e20a94b25896565e83217476d9e7a658ca3d7d4f38ddaea8a81847dad60df9ff5db1ff2f68d3efb76169735afb5cf0481689515c46be057d02d42f6d789df32bf170d860c57f5f9925986368ee8c3c30883f5e1f5e6046688223fffb31f083b4b30af99d52b0836dc0f682a88c6c0dc6aa052ac5c4d0f0c6c6def266f4aae466331e2c2569355ecbbc456099150515e6516ce3c1017f8b9038a27d8d04b622ac6d856bf7d7016237050802bd478a0e306c1fec457504cc65aac79c12efcb20abe382b01bb9e1a618ef6d0ab775f56af66d906e762c5f51d321669aaaa8e81fa5d176976de316f3fa2f628b1d7cc96d64d338679085d52cccc99607ce30e7a387b21dafd6f8c0674e74d97bde4349dc285233e46c6291a8167758f71cb2ae02a1ffdb1c4762d4b471294e54623fddafe4a7e4fbf5e2c68cc201b95f64ded675246ad4daa0db84339932e0a79d8db48d24ab5430fd3c7d5f6afe94f5b2bc544771a25e888d2a500e29adde11008c340f1bf6dbd976099190e8efe5b9210ef44d6baa33071c9f1b30e10e14edf7c79d247e7848209cee1d5881ede77aceb63ca680ab82c4066c16d7d584860c8e895d34dccf314616a2b240cf70d3c4cc42efc03c464482f88f57909802d40df822f39ac82999f5578f366913da5838543e8c029ab00bcdfd250c172627458bc7878cf5e0d7daa81b5d45eb9d51c077b17ee131b162c39fad3b0eac8c74adb8efefd1ba65aab4776d5a599724a750bb2eb148c1ab09e065bd74cbcfc4e980760f049bdac06c6bfe6a4f4083765430fb6d42e94368aaf9c087618b18235eabc1b925a400021dcea534482e98ec70bc3dd6c8aaa5d518bdbee5f89919d3a079dd3714fe8cb264d5cae11b2427e2336934642fd7a8208cfe171d804849f3926ef515db9c738d6ba06d51bbb59eb930e7dfb77dc793817eb4cff9805e8553b30307aac84fedeb830fb620b9610504fe1e457cc40af8a4490e64ce8cb87a7e139ba4c9e3b19cf98a6779c1849177abbe277e5538734ad12368dd29d02c15a5fdf727ce4bd21aed31349daa0f0480124dec972371d4c7057b102411caeaefd955515663494f5b13dad8c12364efb10ecf9332516aeab223dfef913239ab3927e4ee76a1875c0ca426f356cf9f838c7545ae49ae4b2936aa278e9516f91c62aca872cbf10239665553fa5589639ffdb9508539e0984c8df392362a6379a23e0c252efd656f64a27df3c94d790a8ceb5990d035e39d5e06fb097629a8d66e178cd6a40387c41938f11898e503c0db2491eb4088a9bd9a827367e8cb6b4996d0e0f36fa3d51078f86abcb0894710606299712f82761ccb93077abc1626edcd0d7439daa09566c94c58a1c15bf55284fb45ced0932b20590bbee7d9868b7a82fb9a86da5e34eb6d7e580b77e124be586fe4d6092ca1b3d5ecea7c73ba7e62e3734e0941f202c344e34955f1fcd39f60bf245f7f8c49fcb5b0bbc9220d30f64fb4d788f8b5a190c453f98a40c245dbf8792cfd7870815272208a17be978be6768b87a5f22d53bf63b0d5f4218841028a1f3d87368642cd8d33f82329a06ab1576c793f91a9a146919ca4fa19c353408cdbda17a4a4238dbf3983f9820bfb3364e43196ccd56f1fc336f92ee15e8eadaab36379f28920e7fbd521bf4f8375410e54d53f8ef059732fa299d927c2cb8760481f2d485e37490caead7c6cc881bd2936e54a8c15de2d02355bcf4c6b4d362253db438040c358f78448b3349aa9bb5e0eecc1bfb884cb1a8aee05128be1cce484e1306665c631278285ea79ee50eda7c644cbf4bc125c50e1b7f6b75ebbb65f5ef1afbcce90b3bff672adaa66a9842891f2b4d241e65fb948bdb36738cb7debda7e0b21bc74a0abc06ffb4bad23c51dd029b030362968d3f9ceb865e2fb15cadf5b9bc57c3e3dd18e150697aa0b418448efd55a58c37be6efd6cd3d47ef50197f8655e61c09b3810f9b448c9a25e487a2b2697f2b77f4359f528af2cab2c7b071391f1859c438cc29b590e417776589edd207e74a8bcdcd691897c7676fb5c11a128ba454cb2d49b288ef90c6a9702c4e94fccc4893f955b6b67ca9f6dc5e7fe26f96d0f1a9ed83cdff5a3c426cae5aa44e0b9ee980f37d3ba0daa390886713d53ccd50e61b0b2393f7cb9f7f690b3b69e4d4d1c87f4d633ab68b16be4d23d74cbe89d66a7a4ccc7b34c2a29e7484075b2868b949676fb7e59b1a4fed2c217faeb84d4b36c86af035c55cb5c3f6b3f013759c941605dbbb8d6a1fa5281d98d479e07aebba99429911f21782b1bc826ec7bcc81c84b52ccdd4df83b5574f38f0d67164377650a43ba95a7c33ed4c1900f1937aba3934dad2efdab91dc4c28b308d58f07735ea95da2139487427f1533c23b8a993ea7ce7f7784bd5a0c7113b122aebe07822da07f749dcdbefe44d64ebe35b9b62fbb99d5f47b12502d7a94442573efc83738c2218460aa3fd4afae8b19fce81671219ee0f99e3984f04375a49b9913e825bfb00fbb6ffc6cdea16328960589ebd5df1712c9c3c437c7708291c617ed620ec9b6860e5eca1a8d8e25b5584f621d6b5139dd421b0a60c47f15d1cd31f69dc60f2a511a999c6248a45290e233613f4c05151c3a70132b39885a8be16a6c39e11354fb00664062ba67a04c7663aaab1747d6eb981c8d4333b9eaa7e44007aef0c381b10bab7952eebd4dd2a46f6f558e6173ee7c20c1ee388ed4bad282a1068d3dfa129dd055615b15ff050e07a556e7a35c6d046350cd2cfe72f04baa91e769291210fd1e56a3c7285f8c90bfda2e1d33af49106bdbb476b847ceeacf7383e0c2a090522aa419fa07bd3fd9c917664aad3e0695d1eecc962e639bcf56711c8fdba8561a71e07afca8b1ddd3fdba32bb1a6427db39d69f76359879d32ba8429d1fa75d0681edd3b284fe721aaf188144ee62f8f3a612ed5d48324917b7cba4ec62d5b2e935f2cc427345b06c7e17d669c5d984a125a2d6a3aba0b4cd1ab931b86ccbb759e4203b2da664deed12ce5e7c30946b0dd3cab6ca0a5c0b763abb28fa5c6ea2988ed5e53e9bf660853e2f229b509f55735dcb271f9cc548f932d55cca47c99e20c9326862717696aa1a80120b9d51420cd5609c42b59233156741edf98b02d799199b7d0c8bc21dbf37e6b75579c4f071b5a5d51f25c31982ccda71080688dfc9db7f78bc089a478c71af08e338089a997e45da12941e3ae254b06423af58c1b6ec3353b40ad7875f0f076a031f1ecc9e64e563f9a4e567dbeb50574c03fd3ef5f41d576b3c6e8ca13fb69042784bf1e0c8854587c6602fce219364052ceee6bb8f8936a8468ed64d06f5c3947e7dc8f7251803c313c9c137ea701f06a08d4d6208eafa7f82239fe8aca06ff3049e282a4fc168887d877f755efa42854e73937f15c65e84e763f6c0fc13060fa7f752ed9361e42fdf6c18ba9334837bc6a55b959c426d1c1b50c8587c725b3b847e2b8ca1f03b9954efe1a3eac8894e967e4d4a06ff13d12c431dff2cbdc2ca2f5c4e958b37e26e1da4912c473fbcc146681369faab4d0d90d184ea7dc5d240bc56bc8d8d994fe2fe048fd6c195abaa38e7301d20d6474de7870dd930c1bf4bedca419dc60e940575ae55afe3c24a02a94f4da9af12fe1597e29250c1d2612c7aa193c81c7fc2c79207291e7f023674cc57ec2f48c4ae6b9c80e65d9c6a971ea777626769ddf23f6db58b9801654680b06ac7a1cc4e3a395e9a9dde5f52b81654560e445e7e4666ef2400b447cd2e64650401cf8d9bab06a80356e17120a1ba2c6085b0aa07fed5042f6f3b49222d42cc39d297b6827eb263583e6e5f35044fdf3ea9fb3783fb5e6822ec7c88007e31811bcb2870f23a3dd9bf27d42d0ec4fe1f4d9b2bf243d0b444e332b80107613ebc685fc52019197084999e1fdff332fbf8c9760522e485fe0f41ccfd71cd0404911bd9d34a109d405d74b26047d2c9caeb815f7c369c5241ec43ec7092e0fe7f3d813ab2d112f58bcf50f405d9dedf5c3967fa7c0760d86b5a61fff1ea3cb1d283b4c92b9b2a36ea368eda3f968194ab49956e02b5e364b7fb6df8fcceabde776ca3748b9cfdd5b2bf664eef3b6aa65a4c0c65885013495d2c7e6392c4e6087492f86e1f605d6e4b264e80fbc8c013c7b80242718685f5ab9bd43206b085e8f30acdf54c8b776003fabf22d827ae612a5d71231aff0d64c38594e81d190da43f6addbfb0a6172319097a91108b075a00433ff03db0ce2f23572fb986c6f0654e9f8d4da50c5f04ec813a8a95aaaafe957892ba9b82aac745aaa78e747b2e826cda99143efac672646ec93677dad561e09abb5ce058f317bebc58e4e46c534dda4820f8fb7ec8f68bb0e720fb51f064c2742ad280ea06c7349a7dc0c1d8291a450877123352c323cbc7753d5d67dc6485acf5317a16427b017b94e59a7a57d4634b44c577d6d630ef4b04fdbe982c77e3bd158ae3833886e1a17971744c90bb4c5f8dd66bab8b6bc409591f81373c3038510fd6e3afa093f46b2300d2c8e67be2267a7c13d1255ec1f8400f3cd449fc69a578de0ddb43c5f617dc191b5aace3180706d6cc48a16c5af1b5fb262f3e8e16fdc0936b9aaea4bcb911a76a5276b71d86261614e4c1daf1f4a522c9a0feae03486df0ee1adc68deaa1343c784c4aacd3e982cf81f3db1cb91aef0ccbc207dbeca232de5774a1e55c053b58bfbc14ed3d47cd73a951c115d083036c6bd2cb2cd2747312d8e511989c8c9f8f297059afc978ecfdec8499f9e7549dd024fa184c1fccc3774a0f02d5a02b9d044778cc142db1cafc1945fcd0ec79d0d3fadded0bb5030e48fe669c74cb092b0df41c84af50edb31e875459c5ca78965e59fa90fcf552c9db914ef368c26ad9e3beaa0d9cd8f1f6eb40da116762277ddc5319fdead0bfb573eea74fe83299e8dd331a08dbe15c5f11d3d4095b44f739a361a82e6f50a693b98c80c73a87512dfb6658bf60a6d9ae5a3cd0f42e2294d1b65065d762ac3c78be6a872acd9ad0d9f5aca82a4187d207d4a4db632e55147ed94b10ab224bc2653c001ebd999f01de234fbefe836930dd3fc39dace0a007478cf19126d279276cef475bcd08d31bbde989962cd72b967fa5edd4d1acbda799dce67f3de9c61824c0552e19d098b0dc770849d72e77d88e224e8b2099aea66a818fe7a97ed8d36e1ba2d695248755920a04942276a68c062de9c154d4a596c0cc26cec7dd90e5e50c049f7bcf848d80283ef530bc11483d4271dfc09f188b8ae3f98f71d708aa365d3b641dbfe4692c0d90dad7d700317fdb48bbb695118d0d71e641aad2ec0b55dd8fad728a041791f426b6492893ba0aaa0392b1bad41d8d658a91ce33c1dc1c24ff0492ba1cf01b5e6b15b946d59f9de2bc1179c4d16c8f3e9b19851ebae2516ec1678908c74d4845680c66de4e662dbc6ebc945b85b535c8dd83689a11a7395ebabb645b8f9b7c26090492ede4698d831f0c9991029e04393928345e70f2bf33c951b90a4d57e3a52a6d5142d198882fc9e39d0aba9390ac5e9c6ff8a180f3a93b7bc0b717225b1dc8c0cfa3c22ee50ab64aa74bd19b426dd81c50b7506456729e33b998f46ec93a510ebc0f69bc202da595e9357940f717935b030289035110162d94cd09983a59633e82278317c6de1c41374f0718a08b5048f9d8d0e1981923b859a184bd39c4ed55224d20f72694458145a2c5126f3c24d714fe7f8a3f92b5d8d2f50a8e2846df0c112dfe1a92c75a2f18bb3eb26f31fa799f50a9512d62072dee26e910790d4473a791a15a11dcf19a1fb80fcea1ae9e3f6545d586adddef8f8e27dc5b77af8f0e76faaa6227c8d55cd27babd47812747b349ef5358b4a088e71455ab003a3f56365f3b08615f4b44e9099fbd3e674a51783d4f30883f2bc1a1bbd61c27bc20d1a545283f864f06e6363d73691d96f318e5b0abcbeaf4e83d76bd36f59b7273a49f5be2557a51f345f6570ba72156b5bf9a295c61256ef0236b505d89f5193593ff23535fc3a38150165cf890074750e263292008e07177bf80b1b2478b6b26029a64384d1a3f4d1e002d52b55e7246f4032817cd72acfdb7366993d0a1a5c0ed461e14e94c167f6ac2e1c4f6b6320346cdde7f3fd8c56465dae2cc83116bcc660463bcefcad2eab0a3c91eeb01629ab229b67d4943a1150dbe5d603467b516245f283827a6e4e6ce8d5f26163de6b449cc13ed5eb536965780770262ce081b40db856a5c108255df080564f171e7cb36bbfec38153b5a90a3579671aa08ad0ef807155c6bcab7118bf4468fe9f0db9dbe7f8b3136d107026c5ad13594d2f75e15cc30df5f3045b47b3d80e8f67223e9eef3a33e7e7c24e7a3d3ee72edd221ca20cd5ce8dba892daba352aac1b984e668b0fe98a415748bb718645418b72ea3bb107caad79f60d6dd1fe6c75a621fa8cd11645f892ce21c79f6b7ecc353dd0f607f5bfb202fcf0555acfe4e02b762b06eba52a0f2e863ff12c206657b37b975d4e4024e71068e35457866ccbec3302f25b478ff6371a1e07470f248d1aed3b4ac63150726bc295a44385de09ce711fc8072b998e89b75c77d0c5fb2d758d7f81c6b751e1dc0c1ac86ee232773436f1c880233762ae4bb81c60eeb3b338b4750ea5f3fb80d9a91e1775cb31498db1bcc3a8180bc31dc42ab970d97fe9745e588adfce11d62e7f0037b0152205afa5c04f8973f1676673a7c23ab62c6427e23d2c78ebf01976990ea7353f38a9e988bd710190f234fbdb32f7ff9f2732c2fd7d53e18a62324f66e74828113c6ae342f3d02424bda089a52305a1e4ea0fcfabb5de60e1aeaca0d396ec7bcd922ecd87ea1352d4933840bacfb0493259eadb0c91a12d0f7316625f56bc13056610e3c7629fc7dd6cb4598ac8a7f17f474d0b84d227940d4364f0a3cb18876c926f0f157314b0e42c4ea3110060f53140a86304c5c71a5b9cb6cd576fbff08e922767e37cb3eaa3b8e67fd28cf506968f975447216bcba8579dc46d80d717eb45b742824d740215dfe6d503266b717e40cfbbc5019810df96fb52237fe5437c454c0fb462644b3a6d4a4e56d866b9ed4e96d6e5a30aa4446ed9145fff5b9c96090a71723eb1e64b934ea71990c365867180cf0b1ded175e816c6e35af365764e99afbba8c8e3508eed8acfdc35ecff01d24f261b04bcee034dade8d56b63d88c28f885af39da23806bb951fb176314728d44a0778ab6dc88de2cc9d91d0d86bcca6ccbe573afe323c2f4d0d2bcd95127f3c46b6d736d3f73ad8c40aa307a10bc032690a74868d9878a46a999ece8e3fc9e05f8dc3d96ff4ca6a754d862ca8e566340ceef53e2fed91a536850153189f2734da0fff6b22432bea2db7b64bd68a18c04e4ff2893d4581cec0951cb00cda74be9954b8cafc7fac50bae11ea28d2b74faf18c13e737b123b98150caf0343e8a95a70ff36aecb79f183e28d88d9757322f102a4c2315a01bc76106a830408b36b7896c35f80087c6ba8111081ec3529f16006d48a8c9ad76660902165e11f0d33e87f982ec1e0cefc71e2d26727e9f2f6bffa2cc98137f42aa111a40e58030e67d6d424040354b9553445cabcf65d95fba320a75ef48ca1c9a20a936ec7f87c84d4322c8f9960c5561ef80bd9e1980dd5492dcf2c13cbfd171d68a887efafeae52196cb9d4f14ca042abea4730289c53f223de802df85955ee97dc87d2fd694988be22cff56f28c63a16981b6769e7886679d349a6395132703dd29b2c9ccb5739156eadd83c0cce2c9d7fd95cdb2ae54e184016f24a31952fd8ec4288598f5e8bb8bd0e7b8d28127fe892e4961257904780b9de8a18c9620e5708bb6e38660e1fcd19668920748e28c570fdec7b34abc14655db2cc5217370f1fdc2d46a7f2ceafb1425dca5afbdad76f3be3f69483b4f367488221607bb049506f80e9da5664a49a274e9cd75fc1ecd9da95977edf896d5b726711e4a19a1b95fc2d2582fe7a2be64e1a493804cfa26f9762cae338f16cb6d3fc1a44eee8ee1ce1fc0cb5e0daf60a6f416537f64bab106ffcbdaec0c57d59d45359ffbbac49da2a4b65a1a16aae706d37baeb25442f78b9e7bed0fa0ef4409ae1707356c1beea68203f002c7521a425c55d0df504256cfaa02adfd286f1cec00d32adf5420fe47603f25845c6fd4ba81d602b0498abfc916bf596923970bf451737cf11f7de07208054167af970eac80258334fa43d4e776d2712b356e5f890fa6c8caf56b0ce8177a7642fcfaa55f221289fdb13c81a2899d595ba55ba9a89298f69fd9be8034026af0837f25db7693d103ec1aca27cfe38640d6a285e160122575822a3d7227248926ba0905320f8fd7e08b7e7350014c44bf04254ab316b2187b1e1dddc4ffd561684d4541c26599a46d1e1d8cc83b629b6787b1504b767ab20662e662a2f79d136b9777bdba0027a1b9b4603f30fdac054382a40f5e2bd49fd98c3cdaca7d084f550189559b3f5aa514109c2c06bab2bc97396eef08e23c2dfa938006cd551107fce3b27f769391c162c85fd933745bdb11530d358c7c02fcf43eabed26a68100c3a1c90900fbb31ba7e214db4af7a7d3d3960105dc6876e0cb8263cde596f2194b400b9a95f831b99b500b5eeabc71b37f75e1a9837125f813274f18ff2bcf58b87f389ec3fd70b09cdb047377cbbe03d5373f10296b4b0c2b98e732d5a8bd9662fb9f473082898e717c477ea080408aeec5dad03521c92b90eaa9af0ca45069ed780717baac8ca66d80d42b0c639a0e0c80ccc144eeee8e91a174d08228aeb3078ebe0743b700633827f2f4ac4aaac9a9003119170576aa7eb22a1c61ca3f42c07d2832d69ab5bb3a8364946423d7d9efd45bd8b70ba954d085b475ab975b8b2a41677aa9ad9e58955f5b062ee794b65b27672223b2c2b60b8113cfe30b63354498e17d51e9dff37428aebb9f6d034d4aadf130f8823af90fb316d25e7acefce4f5f3285c69303d0602a27d97c8910fbc0130bcd5df233d1d54c6e656d7ef1d7867cd220f7721beffbc7d365ca89473af4c81e33d6d0b15454e8b025f8034b9fa74877d2623307703fbd4f1d438ad68c25e0715a16daf9b62585c5d36012360b61b6226e4d5d9f9114f89ae4c8856d48812975543422f121334de26c757ce6d539f1b15b954f094085a48f404869da8a645eeac30d14755e2dfb1adc686dc1df7a7bbc9b30d90b08c9f3a48cb5671d48d2cd358c52e9baccfd110875d35ad8016ba26daf447b2335f57874daef2ee0295be913caf339176af13981080ab961ddd6af256c35ee0c05ad2ec79d3cf40c4a5d106ddf36da7203945a6826d863c40503acd8d56f3acdfa4b4133c751367862445903ba1427ea491419db58ed9f2cf067df17af72e214777e79a15e9f2cec4beabaa1042378a12915f6ad5be9be9c2721aba96f029e35d05fa5c135c0743563dec951e27ce35a50d412b1a9a8316eff4cac217ae03a6de27a21e05be3295194522786498c7831de94d9b53ae6e7dcfe9557590c27a4e8578bf5ddf1ff7c7131af1676d2e1a956b339f44ccf3f83c52e04124cb392ce8b50ebce74e0594c2902e847f87684cf891800fcc492c482b980ce1dd034605faaa98be44b242c3cf585e5df5a7857431a32138af730072d626888829ed67e1ecedf3397d6e437139aed64a32c691623668b12dda7cc513e182222b9cb115f6504574ac4c27d643b28642fb6d4512bb30291b2eae263f4132833dbf549020da6742ab85691db1d551a26e84f0d91500da2a9d1d9a529b08a1c0140e7099d2616b096cc436f5822ec8eb2c5b6e10fdbbfbf7a5bbe8594bdb6d4f0d97745dbcaad8b26e0d6c6d90269102ab8855ea36a970a2eff698a8a85d2df78168eb91d26a2171eee1a02e0850256b2dbaf4555e004de9abf3c253af7800baa59aaa10a8264bbd462131ac453dd51303087700346fa70cb3c489e5eb7f5d0bd3fd0f069a4bbe17f55ec589b7d7402ce0b07eb27feee815bb7f8861c7b37c92223d602b1939fdca7a93d4f889fdc499890fd1cec939f989639c500eb0dcd42ab7efbfaf73ef0be478155541e59142ef25cd033eef18ef3aa76f6d8e279da0e21b5f25154c074dc6e586493a44195fb272d77e0024757546346914dbfaa0dbb622302141e03e038f203d7d75051e05011c768959bc6f65d502b5251a19d09498420a1ca1bab2fe0fe40eb7c95ed38f9da6ca86f46274ec7de22e9c2c89e159cef31bdc1cbd23e9617b10ba256e391187de48329f533ac98232355dc3bef053e8f5b06a5b0b7cef3f62d2380416a41eb37cb6c1e60199727158003689c6ca6c770af6c6dfbd15c40b5d7e33e8a9e03e9ba8112dbd0516dddb66395dfe30be309ac9ea11603203f01b5c204542ce97cff72a4f34593ccb73af62d835270dbecb69690d54f456885688f2d2bae52a311fcdedd71b0a5408522b3f2c39f2f8871dbd75da79ed0598eb10382ea8b38b87628d030287ce17d046d132dbaeac168f79552bdce60ca0eb2d53a76cbda692808e22819795fd984745ffb14cb31559a6f4b684ab9265c5bf6b8d74e01edaf9eec0241e300ecde9a78ffd2d00c8df701ad6066d62b0596d48677c0860a9488b652e0c1861ca4d95f8d36a3980622e4e05f128479bb3eddda03d6b15c9d464e8a2f74d1708d0956b817460ae3653bf6c55e75a6e860dbcafd4d7917234c941cc2787457cf48405e34998a28b6191e61f8d13f2cb1a92f5347589d215ea2305313b68f784d0c160732915d86c255d275d82728bfc6274575fcba2632c61a3d6cfc3248f16b0a455c295e01fa99bbc3f5246b86d4a416453de34599c5f4040d43a63ef0330d8d830c4d632ac98a102a57dca1a22935e504a960a9530d1bf810654a36c50bc01f857a1468817f538174986eefcc3146a9394d91e6249e842dec6ed7cd18ebf7eb44c16bd44fa0e1cf7350db56b5f356f5d26d016602d6a4b9cd7b22cff7a9aa9c12842b6b23d7eec923c6bf98901a385444c5f9999a8c71f1a2361e2d0c0f0187a20646d7b710309ac9143952de561c51a4d554ffa81d264f3b355d5f30ef840acb1bb0b0be12c2ce96cf3caa4486317ff19e1f3a4a1c8b4f4f6d3f67c288d6ef65e5dc0220fd09ea843fda46a5d1bd871eb44e2beab233d7a41ab51822cd207a4f30fc05bfce6fc92f66eba55bd402be8e6ac20b0d6da8f02cb759f5ff1091d7750344d0d1ac26cd2d8ffc551a4e5f5573c54d06b587c7585da45232cbe7e8e0967dbf633665891c2b2aab32b4af58718552b4e40116ac274c52333e0cfee835cd856136c2182750f839755be4e9ae2b986ba74a4b1c009ffd7ecda44d4b6ccb23e7ded30df239042a0c2225b800c0d62e6885bedc68b22c8e560cb568e0e3f3038e6fca588c36ef7cf4fe94e73a3af7c0c3c1d7ccf0d449ad8c2e6ee71bc283d6ca43d76aabec1319c4b1fb2ffc77e5de766c94466707f08b23cfcff6cdc264f70be442c30c7d1099b33b5ac5abcfa227e002a12fafb635f059224f8e2976e8ac46f852cf4727a551e6dbf829e384e10f294d733be34019f190c9d7809a9b7510bac756a29010920eb19424c7596a5e6a2be187707fa3d27b381a2b68e91091a6d681e78ff8ce066aca59ad5075c0dcd6753265a139f2c815f3b6d5f477116ceb39e7648abf78e33701f7ea3e41ac0e7f202440ac78f31bd3843670e0c57d2af626c81bc38b61007b21116485e5c9098eb35d548047ab7ca5be49fe538e3b3e0bfe6b7ae34e8afea8676c9a3367a2f82a392404ee1884959c2cf097d478fe4774bd64d37cf1bcac3d84cb79b80de4d21812e7573abb6ce716929c389dac9df28281b8374909df9f026f29169c16bdec6a0da0def6e9e2c1993c97d7e1b9eca62e59edd292afb11abd13d317a88eed9860846647e80377305ed0d6a07294f5db2b37f08e5dc35dc809553556bb71b4ab050ab67e92120fb2c80a73472dab4e929a7d8f48b51e043ba0f48e5925187cb323591e2fb178c4b5e8d3ed58ab7ec1a4675f37e842ddc785cfc41958eb940abd6f8c0dd7efe229039dc4535b07eba308e08a95996187f3b76b97ee0fcdf482b9467779a3d3a57d73e36a48f0e55e97c99cc065cf791809314399e0e369781a1f03cebc78d75a89956f59c8f2c9dc739f7c5c83c48e3507ed1b448f36da651700bdecdab33fb1057c563c877dbe866defb325692e6a5b3a8beebeae9dfec2ba7fcedb50d919c2f837dcf07d248df3c0a107324f0cb0fdb0a189fc1d83b3aac5ab8204d7b234dbb3b3a81f49aaca102d17de8a1fd106acd02c00efbec830b736eb9139d528ce47cd1fb9d831b587f3e1405609eb2ba73b492f4433f8a22a7dca872b306c9b2812958505244586ed6674a2a18d14718a33f1c7d91cae02d77814fe61ce2bc82bc9d8df378c53dd297cb590edc06ff7be0b0678561d200e3ce448d4a0705d72347cafce9a731d6915f2da973be8cb66d4eea3944eacce2c4f1294624636132514f27c148a9766ae4f148963f537f6b309658fb5fc5d24cc0f077d2d36f9b5476b1d11913b90d2b1064fb3164e17c6db6dc016873d1f3964a9366fb2c28d524c721f4ab44ad59c53dfc6a96a7a54f3d6b88773fd33a8e9550f45d2992ecd2c73cd9cb94eec55b6a2b962e90a9b21442efb388f0cc12b5061f453297a7f491f1bf1a6ef4b99697e58bc029b0ddddcef24cdc8fdf39b587c4f69338dc1b4c04a42685094ca8db7a9a4faa08aadc14c747956e227883ef50dcc0dc5915c27d742b545017b0ec9ab69deac96539c1e860ed24dc4621c4c7707d1c0cdb31a5546a43a2728d814e97f5e8ca557d8dd952a4c62796cc1156ba70e1b755f053e9c37cadf7c80bfb7f15bfcf98e3a0b56043733d2a1c89f49ea6930ee39d6093d9a2873b8beef0da044d8f35dc1d1cd2c7f7b15fb34e0aeca8199600a70e65c68a1cfedc3838398fef33d946d9113c35b12afd8cd09d5b5f9b51d39d6e97754ba61929ceecd04cdc1fe791268a7e55de451f749840bb085c32ebce6e08ce1af6ce8b3fa4ee0d6a59455712d1200b5092ae3442b1fddc4de0ae3ce806063091a4d902f7a771c7b94f29a79d0fed08f9d37971741833fb9731b873bcd28fa324ec3f67893ce38f45d13049ea1e8962b8deabd5f1d4d80b9ab2c5aa8513dcf0f181741c63cec2328bd880b75f2abd6d7f8962ad03de19dffe82a096c3c4026c936d0e19cdf1f3bd709592f46d5547519300900b99a9f1391018812c251b000b729086a0496c9a4e5e330fd8b926c875412c464eb4403595b98353abfb6544502c4c50d64d3e16807bdc54a73fb8ec557baf175d17e634d2e71e4ae01d3106caa43a99baed2272994e0ccf0dd20dad735b7b8de991050234381af9b4e4eb5b8f727a4faad0f1bf8d504bf4d7c54a607edce05a44b44bbb5367af6e92d47ddc624ec6a8bfbba711d1730341df83fb6fef03cc62f6792226535f18cddd3d773711901733314f82c3e2b7cbcd122367be7abdf973e7e36561da1cf3b78f43e300048ce17ddf7e73c59f47c8f3c6125d62d9bc80d8b6232be956856b6cba6b51874fb4ea80360725f941fe5aa0764384c536d6304505abe243b1a463ebe62cc00b2561344f301941baebe9d51d65a0b6bad309af08099bc1c2a4b9bd55fdf764d1103d944e61674f0c0139b2c81daf964c8875952ee98df6ea9f6569bb19c44e1b1356061c56d5275e44c5e15d679b42c48e765321289aafc70c17fdf46a95867e68833c47120b76a3e87fe7dc52b5ed3ecacf11e89056b1298e543fcb4ce7659e29a13004b9eadb7f9a041ceaaea19bc4f2e80bf6dffc82d74d96c412db98fbc1a3f77b23d5e46b037a11cb9f840d1914e823097bb9f5de2d6b63e90a1b5be12c06488f5cbaef959bd6a9e520da7e790c446f3075a07b5d58e5c856a2734b443f582f3af356a9e03ee8cd04f0cd9dd522f3eb3c47828fc0add773b68952fc00ac4ec5b4fe44c2d8c6a809af7ce24380afe15d149bf6d5d5062eab6b7ff650b489a8519a42d1ee3af0dda1229433e79d791f1c4e643877761e0b8af5c558ba458816a000aa594fe35c3671fd7b4f243c205c60e669feb04f76fb2f0860dac96112596205d6ac683562affbc28e40b136f72b91cde4643e5a02b14f18331614be947f48e956d1a204b9ff2c2d5e6a01d66f50c639a75929fd9a09b5fe863b1f6d4fa8db13c5f6fa4a176f829026b59adb85e6ef000390098167e09055e2ce20daf08d7500bac5876ce7a9631e1c684e1ed206f2e09d1368c9fafa8b9c332c8473bc544712a6a0dbe48aaac992974c5f2b5addffbe530cadbd61dacb05cfbff3928e0837d897d91ab186984ae35d2b4e585db686666d2154c312098b1ce6a01937013067830b8b902a636083b2297454564f486a26e8f3d47a21c3ae2137320bd5407b0d23f0094b4182202e2ab0daa9a1ff306de59ec61adebb1528669a2eeab372cd9d0c6e0c582eb8b7ded6e3eae1e1954cc33afaa70df9ff75abe5920740e2321071a203a7e3d322b06a87946ab9cd5e39548ec16a9d6f2585f3b31686194d5692873e85fee0433c5bd329a8e473e6a3a4ee994baa5fe46ef2f400f6e66142518c7ce68f6006184a11333d19d92d500f3fe2efcda5481ec239cece1e6a156c831e6c888ca0bb84768249290cacf681625f248832b7bb9089bf596744cdd2410ef220d62f9f7c27ee0d0e72169d9b0c19bfe6f5673f23063348d6ef5d73df70d7a8e09237e787d1a40cd7bc13e43541b3fc3cf176ecc769cfd7644dc50a423cb8ec9b0dd724a6b35cdac1aaab4ed8b3bf0e00e54f3ff4dba1e9afeba9ce8662a62996f61ec696cb468e7cf1f6749481e669ba7cea45ed65d3437251bc971037eca430f3c5f424325bcf1816c997ad12f33d3f39e8bba1da112a68c3f48ff60179aebf0f7e1e1df32128c300f170620d3de6dd98e9c86776f12637cf6b56b8fb696a7c9dab46024aa68e2c3d7b6440aeae70789651154aa34b79c8b180469c1b8344f39eba7f2904db701851534f2a67d60a5a22c9306d87125f337a11cd6a19469f2c4313757f45bf3d4b0b19dfe026eb8d5323e5765f112c3c5cbf74820d8042837577418177980a96f1bc69d54d6939c133d5093023d68b074bb9e665cb365111a6722e5a38619cc49784d9a0e1e6abb3c89ea0d49a697970afeea266231b777c99a146b22bd9245837b483f29ddf8b325613ea87d021645e1bd4f477302d50d833b14c05c665c152c91985883fd1a637900d5592614b03b526b68cb82b01c61196fa33c4175f973e2571142ada0ce242deb51390663b4f07d00e8f58231255f32a8317f45a018f0280fe45bde5d329e9d57eb91901230e38e4740ee42e18cd846e8711bc6ab90bac624a7411320b8f565a1de97dd4c7be4e8c366e32a5a7c335fa28b9a2d1b60cfc71fcd2f57961b09cba62e6afdbc18dabd2fb4556c9343e505feb9ad5dbf65bd6f2052474c050c75f4d3cb16ca182866e4509bc79b4e8fe4986dcdf4ab73505a800ff7291ab832b4f872b4862687577cc11481533366aba14d1b31bb1a563b3f25c0d463cceb92a3c0a1f171fdaee734970e485f1255b148468ec39e3aca350ffd8a09db0d9f83ecf493d8621bd09b90aca6e865f86801d29b5da43281587ae7e773087fe16cf3516f9de927b3f1f7a7104d158a3e3b6d53ba64213e52f995362c62c928e9937c5540f12f88403a7fed3dfc03980128d5ef1e0e8586003854387183216a59c285d16ab014b404ef5a6bc52f14923c3f59b8e7a5caa35968d09989940789f7c80f3bc511b4d975f085d11b034b55bec9bf467cca65cceb37b0ab433ed9d89838d5c7e319fc47519293d4af046153ddbc2e8827903cfc7fea5a94a939e15331c2b79d59869434caa1c382d6bd45f6b97fcc8318b1e641bb1882ad0e49bfc11fd0ed915908cb01af499896c55eba5b3f7306299292754a7411a9ae7eff93c6b21c29193be9dc216b1b22ba503124a054899d17d5e415e9b95cb96047985524af4e4daeb922c40d706826dd9122b082f80015d3351b5e0ead50dee0d399bf84cd7e328c7fb5600c6c5b51a2136159027c398ecec32efb302146b6562070f79f3ee4dec325bf2b850bf4722220d8d4676d23ad095d8ef3c1afcc4939e78c7ef7947b8f67a389476210a95d4b0e5f209abc2e917ea535715614550a1afd476071d267b3ec366efc5c5a672c50e3b1506444d90e7a176324aac9e631223923f0c280f8e1541d2befe74e90d6ac021296035ebf707a330425d18488d3c0834eed059072228391b4be97634835c232e8f553a1a4de588c286f68499cb4cb7cf9df5fb47c9124ebf25ed6c7d57159b9291df07e50118b161d893b11a3ab33c10b4e08a74bdb8af7a10aeab8d7595e3e612dbc2961cca1402ccdfc1923e22090a5e8b66a0f962c2dc2bfd75884d6c7a3ebb543a75702940d8384fe90fe37b7224a997778791023ec65415b85e1ca57bc45892851645b03b1b73a27b44e9d266048aa1726479f6a926599334df8f8ed9fefbad6b80c7186cb6d083120f37d6aad08bb2af3ce6286bf218a918d594c63868c80d1e1c1d7b260b4479b400705b2dfaf7c0f2ecbb5ff7043f2c7a61a9f4e3edbd53ec68221a8b3d7acc2589eaa0b8142a70109db2b82bd0d62e934a4c829d5d7945fd213c6d14341923278f723479f1f1d66d6eab54f529a23ce687429e3e84776810fd895dab1d36c4917686f58afe937ad493926ff6568843775eb6653050d246e60bffa26f740fa1dda3d2bdd2f95831066688d5e8b135be7290a810eea1994c1e90cc7a3821441e3b5db3ebc812fe99430c286e31e944632e196b9d01edeafff65b28cd4838aef55772ea2be88e9f038adf29f8ee6339656f7cfadf5d2eac87dd56a3512ecb38b96682e26cf28994bc2f17a7bd4eb9dcfa9ae202500461f7a195f1c93c7c70cb165ffdc7d7a36d9be4ae18f06ab6d37c7e6011c105fa4a1c2d2537e27d0fb0e49058fcac2e5bf0dfb5d5bc626173868e547dc79e15b78b759cdd97d1e6a0a431e79c87c5fe36806a656709791f2606483ad021f43793bc427f67d652d84035a860626c3bf766eb08fdba7a03e6cf2359e41402de7c4ab6b93739471304af45973a587e4a15d43419ff3b47a57c55fff76a16c364bbf641d42f8bee97eef0b79dda516d1dcecf8884053ea83c8abfd792aeb245f55778d873d2d5a41131687618d5719f1c944ed7b88e6d18868524e7cb615c24ba10d57769a2b04bdd826be96c984a1051154e3082963a5e0caee88c26604321a30d6478a1e2f8018e6287ea62f90f52c6eb62df623ed1e6a93159ac590a472f7f0282322da007681b85f69bd11b94e1d3baf44bddab4a8a2fef2f8821187c1bca5656d9363a58d538a80950c40cdbbf22b4ef8a8941b253c2fba71b233e4a7c1fc3bd804c98901c1b575386397de539ba9798406e0b80cda217cfb103e6b082da1ccf3eaae93e6477f6e179bb64389afa10627856b978f3dcf03bc5a14c737ccc3ac3979a9dcae9036bdae55c14b258cb8d29dcbd7e52c20a8438737680722c7df523b8540795c81376a984f9e599e575a3fcb7e6440aa8f048f9601be1b2cbd74c2a340471e2fdf652d35c0b9ea0a1e84939cba7c0b8c6633becf0e8aae31a3e6081b11329b20012087ea8a397c69ac917adbcb875dd476967930f58381521c811ef2ce8bbf5ce2f1f776f6610de68da431967042fab6163f4f13c79216d41819bebc8b7d0e751fe140050aa2a9ac8c25b573e9b6639cf61e2f86be5603e75fd5238b1a2653bf73b34ecf38e1ea29cb7d92f29e2b8f1d4fd88d32198d2cabedfd8b0011d9bbe1260b404ac86d23e9c57e02f2a9e671917a85273028e08f7ed9bb6a07a83c531b49cae3e02992b821e29147364fcb481469c2f338fb7607c97a584575bb2d11bb6a4d588151f352c104abf9cd75e0c39a1e76d5306d85202826bca99f3ccdf4c75d6927a69cded6072171ac13cfc519d0999b372fe95713b77597470f6271d6263e0140636179f40e09d663a4b708ce1ed6d692a7e4f3a0c4672cf2541d3f6d35bf580d81e6bf86b5d5c7a4e5e955d403b2ecc6f771128ab1fd0af2c8f0f6b9607d8b196cd4d5e2ad4ee96becc8b3f4723f9c054b4777f54b1b384a8b697ae3f440dc3d46d586e89fb079ceeac58dc941d3ce609c0f84e36478eefae5b66f21fa9887979aa9c5fa3ffda92a6f4bf928c7f7623f1a704a5a4bb2ee9c7a5c2db90decd3091df73f745b92559ad2d30a8941371579d5648f511afd2764200b11242e01ce95d0e9867eeec641e6c33e735069314207effc4d0bdf764bb82b5fde2e074d48899f2c5fd8a3a2224a8dabdfa2f5fcd6a8321fd587db4e2820bd1fd09638b00cc543527bec83bd55f76f7c51b170974a7c1cad70d2135c1e745018d499dba2d40e1238882b315344114e2ed1511cca6c7df1edfd601ecbd9ad32fbbf8fb072dadc17f1690cd980ba85b108d1e4706d631197ef3b3eca655ab200dfab83083ae9ea9478843f2a419a295b8f61f07c08d4d3e85374a0ae170e50a1579567e3db9178718388a0c649da2a71b6b1ebadc2bbaa1e5069f7353eadd84691164a185eba765b58d389998fd68be437a600580027f4bbabecc6ea3be6ebb7f0049582c609ca6deeaa079bfe7a87f5e2d65e0af8da6761bf311ec569d3f3b7a6d02d1a675f98894b180f0a307922f8def791d0f9d10fdd5d4ec088c3fd3d5e847ff39aade1be7e52af5133800f2046dcf6571ea19737b84f5a7db5c8dae2f0cb1b6971b48a3babb5901d2473dc1d4b1814d1e25acd542bfb7071c728e90f00c9df8990eaba87e615306a20d51a5f0342c5d46c4f4f47bcb03c6cda90d72423d04ad0dddf83dcb28940d129129ccc34d47afcba254424775ec4411634714b494aaf88990e6d95d724cf8f3cb29cebd1d9a47375d69f2df60c17295b32a592712a9c3cfa53657a05a55eaf3547a76127ca137a4c434572118bd32aa69283fdaea5dbeb392860de381f60c6da365de63613a403b73cca7e4984768fbe5e9ba1fe784ffd95ccaab0a6663b5b4890425d51820b5d81739684aaffd3e2a484b0f7fbe7f98b579cdc09c697dbac856633d475ed9b59b533fc03198536eddb601d6e8af41e86f1db84810fb0bcf011734974ed22016614d31884e91ff018f8322ebd02553823ac20c789ad3d039bf633874369cf9eab9119c826dd9d2a39dcc9d895066fd04b0baaf035f4586612d3ad9e741aea776cdf5625e41717b77c30973a04a591f19b1de16e1de9ae3294e751d2dabaacd4ad47831f7a702e664767637bd6f898011af631019ad86ef41b552feae26d98aaf2a7410a4e51c3d1252e8b4aea36dfd35cebe624cbd37ae9abe6d9fd2ce7fca8afbbde3d40420d727fee25b2d87cbe3fbe2dd6c2735286261d60759ea5b9dbc436c8cef05cee84a3349d014dfddd75fefac2032728d143ac0fa390b07e4f7a588b70fae739daa4178bd0d6ec5e5e518b7120c26bddb99821789bf6114ecebaf179324b247d31ab9093bea5242767cf0e615b65e337457da5c20abfe31d4e557aad28dab08113a4120e8d44d16008052114dc055cb1e8a5c25466467dbdf2487192e7626bd4bdb74bc91f70f735d85a12b45d0056d3d09b7ded23b71c9dd90e0279267ca185276641912f838828a99a49aef14fc0730a2c41d3fcf15673a694d8073f3cd62df3e16eb8357a3ad37e28defc980a151a735ec105ecdbf8b7f00f049ae960b9ea1bea58c15e527de36e3f5959db400236369afc6fdb2e781ac0df46e8ac1a3214d82ca4294b9e779f536970a8e07e591e6d09e6abe8b732d4e757eec4ca570ce43826ee89091f8d67b76c5593dcdb2bf94893948b23f45b3f50ba9348f42ef2ca356e5792a95f80cc13bb77304930b88988b3cbfec79777ab1f876e2fcbea828c67a19eabc74a670b33202219c92787c28db8697ea3a04919fe2c52edd4503880fe875e62260da9c85532f9130219931c6ee584116c2fce4c6e828d1a11a95c18e14a1c7eeb7913f12f0bde3713d92d655d05cbfb47bfb7d93db70160f1380f392ec067cd2199c34d17c69a2195a24e2b386a980e811bf695420ef8679e4aa3ccf686176df80ac3be59e370b22e6e3db3d8872b2353fb019a2b2fb6101396fb6c5d1d02bb6353d66fd941e93b671495e8510a88a65f9e9c2e04985d3a8a501607fdc23895d75e42e87730c42c15e196bf17f9e20863f824dbaebab19cf1ed4689b6d1d96f8407cd1eb82096a298b85d74b98df9fb57fad5af4ae1d3a5c1b6f7d531d50381f9dc3a9617e3d53c596622a0ff5a9e6136d9b944019023dabf9595ed13b28acb495d92292820e91f5ef197a9332ded0a34329b03eeaf4835f6f8e56c780d208a83e6263cf8166819b8bbc57bd9123a2b50ef6fff0e2ceccac3304bb1918e5e80696700f0c24c2572a25e0a795391873a115454aac25a1aa07785cb158964214350a9efd65a4403b5672e929cb12913c62ae9c88f3b82cfd9d69bd05d6395740ab7dfbecc1cbc34e20c62dc9637fb417dd026d796e3302ec0e42abd5d33fb18bbb4145af83c42d1df6ddff27f78292996efdd53c2d323c5c87aff4485d8a791823634696db8d1e4ea00d99a3d94b49171f5f3f84cdd13b79147b78e488511193e655f60a685eef49af8df3fcc0059b6ffce72cabbca08995d227c0c56674b21a7c78242755a127c7704a9ab0885c7248e57bde43c1a21872b76df93d285aa8b3c63cc7cf68430b9dab082e2d0ac9093ed3dfdeb9190cc51b41052368f42f13067d66c9c3a3d976f34eb9e0f9d10f8d859e1e79b3e93dcfb97c7eb79f098168bd7fb75c54936cf76ac5c89144c0d7df0b1f3712d1f327b2ef6c6bf9102b2b764e8ea11dff1853eaa52d68cd888fbe28217d6631f1c451c9bbfcc3669de3fbcc38d4a079491b566691302a846e628e27a8a82a43c6576f77f63ff6d0d2ed2ab7bfc55e3a7c1dba71b645e31c2974808b718b1bef047890ae336b6747450e0a79618b59dedd104cccdc57db1b20cab492556066e24fb721ffc81e1a305840bef37c957ba860e989c354b376c34933b0b293380deff4260f6eb07b4c76f99adeead888faeafbd1fc630068b802cacdcfb2b80c1f37fc64856d5b907c2d3924df9f1014a2266ea387352c8e1617e32527a5c80c867523a9dfc23ec36a18c7c668cd615cbc2d953fdf36f87779f4923f738498691a020609f82d3def7e80aa622869214ae969a5c5acaee0c04baf9bdf7d3af1a5a386cfa38d349b543792746d7ac12ba1bae560b6f142651c9c64c8d489961c5d044d69d9045b20b12fd74d2c0da536d6645d3bf4437890bcebf50538c83f64cfdd7a39ab95d94e93ad2194db3f93e6c33d881f6cbe70aa9793757220a3925daff35124820caef6c9c0f57ac34fc79249e8fd04f9856d4c79bc370f784fdfaa3603a57ba6f612ea45483c88f3f1a0222bd90a0e2719a06cccb3fd4d2c232648e7fdbeb9fca95c6e6b951d7a76ba1c2fd5862c8bd742d02ecc1b25237d063e70c31c1fb7f97d6755b00014d946f920fbaf361746362f99acb0b6b632101859691725109a5d43e1b47a5a148e9a1fff976277fa2cc6620aa86d988b413f4c40656aed5dc4144b0bc1f96d0cea8e930b9afb54d31469a7c33bf42ab41e86854d7da84368c16afe307acf5f310690750fa41c3bf59daac0e3a384a56685ae648ae0e5350cdb03b4ba746be57a1355d5114ef1535717c201ba5f1cff22cffe2dd522227890860e949b9e75b6dc076c154dfca742947f9c3d366fbe0fe5598693b3ae68252f6e90d68490bfe4763fc10f19509604c154aff4241d91cbd7fef08b620c2f14fee32afb74eb273943d30e8d039a4f86d8a9b84db4fe68720e515749513d9601e1a14ea372266b254c477dd5e0dcc11cdfeae5381a514cb64cd13ff7758916ee945c96f8937ec43bf7d01ae1c196a0533237969c0c174a4e5016744c77725ee55f53132ca0428c09aa43477c83d285345deedc870f699e2c7c5c5f1a935f06b631f35a48b9a9b1e0db8b0a240e4321ede66fab261296aa5fdd3d341a5d105c38e59e7d83bdbea54603f9bdf51394dc975e03312e82cace0f85dd2bfba70354b9e12c708a7738a85f45ab109e24d731887526d1f834fcf131c2ee596037153611f2aa0be8f638d043e21427a6d8c485e2f2fc0c7d260ff2724420873a3cda5a403898a90e2bc7542c6ba17812e5e49a4f45b1f2049a26bf2385bb16e05bd228fd262c2f5ed4bdef9913e0dc332cda2700e68aa490cad8422ea25c8c8fbfc49d0eaa3e219b2584a7da5139cfcf85e16e099d14dfbd75e2892e805b923a6e38583b36924f89830d8fe7f732148f70ca7ce92f525d6338c290e8333ce0565fe878e3f8ac71cc72fce51f70a33b145ac8f09a78d1cf016c288e490835caf0ac9b5815905b50f9a06c80b761d20faa92f4472f9c41f4ca2ce60bfa6222c663427c5db21cab4f90f8637652932bed74395fe7436658ad410896ac80e76e65d506e6b8ab4b512d9efd8886ca31806fd9c93d1a6164e52ed89b988c894744c75e834684988572589450ead6b2e2959dccee616588a36fb28c2f0c8d2fe81aa20d4a502012a26121ab95b057e8c01c4b9e925dbbe333fe109aefe4a2d370b2223376a79102d03acb2483f94c9bdb92da8a7baf6c9d8e2fb9475cb668c58a4e50df59e97d0cb09905e823bc23337f58dd67e86c1119ca228de5c4b77d6221505a0802d9f1463e42271a4eadc8422bc0f681728f25b23be1adc4dd38bb40163d2cc95d3495c3dc43785e3506ea2acc814425802ac31fef7b4c017296a9632929f95c3b621df3563175a8337d9034414f1b66d8ffa55fa052c3aaa74cca77d2e350538eb1fde84f7ae74c4789d9a848f4ce70a7ef074ffd5a2a1c6adfa92aa897d1f7141b40afc798fa8ed125f0fc718d0f6d3c40003bc96b431b55961abdfd3ac96445231d68dc7871cc0d6d509a560ec54b2b8a44ede0dd0dcdb05f8cd83a8bb6252566dce6d1ab78a6d319f2811f823ad0cd0155e1f82d45cad3e0e378279d97f1095584b271d45fa50eca0ccdbcfd5d0a03af869b69241a558a0c137d7574e20ec90ea4dad67f676c65bf8ac32f46274e6240a40d57db8e350510ba1417454eb4a87e9bba8d6fee2c82a69876513c4da91c523b8d0c0f9df278d8d2ec68d4b19d8deca7e6a00410202e4fff603ae015e2fa7b549fc76079fdcaffa74e571a6032479ba55c2d31cfa39ec66f792c885deca0acadb71282976cff43ac4272ffefe2f25a143870884189e84e3df09056955570ae590947d390b7c40b8fbe01ab8aca7c434d2b7e611f578a9484a444fb11145f0b0a026d2f0ac75fef7889123f91cbc1fffb64219ddd88ebd2f738dfea2f1ae946337320dcc0518c004914e73a2af0814aedbca900dfa9d43a9f1c3a22cb98797ffc73bf3affd00630edceccc73184d16ae31b0c5abea57738df7d3ec6dcf192b7c5a9c328e4fdc09ae108d9749977cc1b499ced133912bb94fa495f25833a32f662eb390e0d804ef2eb6c35abd44de0b7ee4486c7309403a2e0df7079fd19c8f32c8966c633b761ff74a4f2de31da9c6b62b674ecdd2e03984a226768e81a658ce5371083da5129794f40ba80ce713788681b84eec900c38a1ff64366206aed7187e244ad20c9aad9f67c6505fca6a5328dc7d4f08ea2eb8a4e871eba4e165bca14a8f103ce6187f362b43be9abdc69db55112511ea8a5dd3bccfb20b356c15c753cbba5cdf8aa413284b2845a37186bea70d3780b0875d1a8f87aada372efaba7051748420cff19f545001a05ea94a8a23f4901ccb15f93efe9d4885a12479cce2c6f6de96cc1fa8a3d38834aef94e0c7ab20f4821aaee16f41369bdefbcb70077421460d94fc9d2d29ba1dbff3bf5fbbf0567ddc2d8c36a8c6146a5ae326bfbf77aaa83f0ed0051b8501e3298698d6df74b81837d321c6989b2054060bd396ef417b32b123e8bf656d9721441b227f9b66fe5c74a33425730a7ea37eae059e3b3409468abe2f231a9e7f6b0a93a5cb9506365dbb4101a475a7fc299add48ec1b677f5a7ea356ffa53e55c57419b10ef1b7719899aec50f911fb2266672139fd3a22db7110062a675193b59f5f6b7288db12680c06d120344c2d55bec5024335c9e9c61786261719b8730022e2d2373d9d8ae6b5a9b7015fbd52c452a06d93ea0f499c6eb88249a9b1566cf98d2bb82f62f2823acdef9f59f014513b20046d65d2695f263a3a0c7b6663746b209c8515192c0c5ec86899a774684ea0decd33754ecc2feafccc5d27c67308011a57b88b6f2bd4aaf65543d95518f77cd8140f62758d0a06d8b8b06b819032386011543530e88e44423b082ea6ebb1c1f3f37a41ce2b3550a075957a79274446c58b5cf51faff18232866576844f87abd08239d48afa469eee457c4edc792977a702268daaa6c3bac494bb527abd7e6583deeda48cf50006aa6b8c3b7336395089528ee7c39cbfa7cb44ec23c84e07058dba8a90c8fc19f328eb0fd991cb29052957c4a7b289fd67dbb64d0bdc87f7e0bcf27a4f45198dd3eef5d8d36027b4b6583b65f180ef955bd0a5f31669eb67baa3dbc54cd085b83de03087f91c2e70181a6c12e6e8ec9682c356c20e80c0b61d5289e2978a0ac808cacc4d1ba88e8312833de90de773e17fa692d5369340ac6f515d3aab8060eb0f491363d8a4a34dd093c07a6fc5eb74c160b8a7fb0051f84d4ca0750eaab1366cd5b013e327d0454abdbfc5829abc8137eb7c217c03488c5d87bb0644b54c57bbbf2311e0ffed3fa4f47da580e87b47f1adde42d01b89fec29a691699a7f3677ea321ed4f6f9d00bff25680d8a00da41b36b17f4055857476a2a7d9d57c0e8bc44d9b2c1ee41e1cd409e1644e4247bb12f31e614953c20bb7f31471792823436871b3541ef8b4e705e51684c2682757abe1141c214c34940ea496877856f33480eee12e6b41ef7c4a15df78247de73e45ee0e904c11c96191e96a4467bbf18a65dc684362a26992f74f4a9465f63a439523bcb112e5db7808419128a2a53ffbdb0a2ec421736dc70b471d00ebab939776762fb12521bc553c791a1b7ee7b0170adee4778c132c021b8c847cc6cbbed60b8acdcfe1da3f85f0385845a9c639ecd64bcf51da082c5a4db8ad8ab01a27ba91b51ba2e349d2472d872f3184267fafe261983cf56d8d6ede416d633f7d991c78ec1acf5e8a26279ef47ce21915989da0736506c254fdbe821b900b55cb33692b115d57c5e2a22272692d2fde5bf3f33eb942a77f6e26dab79850c0b66fd8f3dde18ac79a71d0cd98c969310c768993cdf67e226544785af4215212cb2cb05d31efb8eddc8e17e752b18b209e7aba7fa4d5c2a833651b0a7fc1c9e19a6191c4cb4d3413f8d3d8ab1b28f226d8a01841e0f4791feceb0cbdba42b0fe65f3efadcb6fd97155154c503b1b6dca11d71deda6109ee086f494a66c95d77b2c88690982576d344427474e51d85a80be52db268667a62d6f0c859c102ab33a32d8f5ff353958994926ff6d160590e49a250a69b305a774c0c3ee3d5b64d4966fcff3b1511f9bab1c22988d7f2573be7d0402db13b822d2c1285881c6dfcf6869758e40a3fa7af4239abd7cf22c9e5d256cb1415f32e80b8d5cf4453137be3b6af1ed3c33f5e7a20653c76372388fcb014bcfa5bf8d565b6487d21ed84a7f7df244803dddb3348d8767cb6e8b23dfd7de744b54d9231d45f434a55e1e71986c2d96334c50968c4115d8b9dc1399433347ffd610a99235fb46b03f59a80e3537db53610d0c4423da516ea977575e50880984c7b0936b0422ee281160fe7818d333de5cc17c228eb6d044ab42eb97136b157a2c194e7f00449f1e560e8ffd8b401a4321de5228b165e488f5cb9a8ff3f388cda5ec4d5a6ce4f82df1283b5f31752d7e3edee06a9d7e7bf064b1c40c0ba70380015c5baef636a3ccb5dce67379dc0693516deca3971f4419cb85004dd7c16fd58b17e50bb4b1c9364c17e10c676b27f14fa3693570e7e7bf0ef5795343903b11be09787f3719b8322fa8cbcd33774f49bd9379f60500d470adfd32a6918ebc616ecffa71f937435a5b1db55747950b11e61cc3e5f7c11f171a659f1c837d8fc3601511a82d1ab14f2eb3f096ad1eeea67519bffaad4426f985c5518043d499f812f73bf061654c4fbd83a6411805e5ab7e70adf209f796dec5920f5123aa9a13c44d730206049bf897a3404ff3b856e6abe57fb5984fbcbd0a0994d4ba177a2ec05f5aeef503f156a10556a84e4a59fc03e76b230f1ccd4301e87269d35621cfc36923dad7290a2def13378be53039814ae789946e52c9942fe3215310f0c1e3107e02fd5a12c19e2b74b4f2c098d39109121418a1bdfbbb949b40f443663eb35432fb953f10470e62be837eec845f7ab9278b0274519c7885a110f51059f192c1aad30f257247f6cd4fac2bf1b9c0f982be5ce2a91b5ffe1c3457cec770e09620a8aefcbedae1cb6b9bbe1a8a08355b61ef0362072de629b31e9466fcbe6d57c66dba55755d7c4768e531804f741d501b6f8c9877fce807c07d25528093f287e873c9806dbe63d168481dcaed8473b37fbaae95e8bf91b67e09d36373719e6fc7feb7b6437558100e5de32d8f0eb477cc797a79fbaa83284893784be30cd588c3f5b3cc128fe70099a0ae9f4cf38a87e07ffc55262b00b00f6ff212dc3977a280111fc35966d38a42bc14c9b9b2f35817a6cbed0cd05d9743ddead1c57ec8e6b2e759d4067cad55e740ea5fc3c6a50a9fb9a5f748b4f64fe84b8559c06215eb48773d3841023f639867778a43e3598bdf12a7f25c0f3ddd724daa937860be320705fa55ceceb077ecb776f95a26eb106db701e08a5ae4d1b7d3f00d1dbbe016526ee65c39e9aebfef87be8ff67f5e16f11d2ab4c4e82c44773ff8799be3ee1179b52c9ab142a6060bd26e6dc4d5ee848375aaadd5db12c526d131c03b614a2076286ee839cf918b90803f85657a98ed3f8ed68bc6421e122af9aed4a651317e2930de0910c9d9830427553d42a72622f39676975e650ee4c4193ba9919005d4bf5174958c2fbd4860b1aeb1a3383be98da4fffe9d92a2821719a3ee2c64fcf3b4cbece58ee46d1984f9ca55a6b0fa11f0bfbb2be3a05209c78c51c47a1fc114658942be70dea2c4d80749fa184a58d281cd587e9852452e224bfe2f213e01920a5cd37cd6f3b83b846496d45c0279d4694bc48a26f8a394a84a1612d069faf86e1e54b215a17f6c844bba34cd206e57ec780e14d60eae199ed17b73a8abf2dbf37ce1e1c688a380d73999dfcd55d700d876ad1eeb81088d8fe87cae614fbec295239832af4d17cab5ee8a264eb2c477b0e853077f8a817de5d1a4676a125706b17d7b11495ffca52bae29c59290014902c1b3216570294c92997afde8b1eb3734055b2f948ed69fcd2fa7fa4801ed11c01143deecdd5625fcd714011240b7597e2b3709604b675a96462392f5df25303ffdd06385a7fc3c393ea98d23afbaf801c532cba21756cbe131dc1c6bf5eeb4271ff9dbbb42ebdfc4f700b52380dff330818264a06bd2b055ac97f7d991764bcc77a7206da7650c36c9021bc8f75fd0f3bbb0497fbc80dcd70d7f28ac5104425a03b60f44994feec7084a76e35c71a6a9dfa2bb59e9f6d2a7a971dd9830ca43b6dab99aa091a47240d66fef46125e4b20dfa99d228c516ad658062fe437ea8c5e2935c956c4f9e54e971d467888907a0e8306391ada0e5601dc78954f94e6d2fe21da6fc9059650dceefb9f29783340edae3b1cdf702f481ca9076d0a7952d30bf99a22fd640d5680bcf333168751d768d69cc6bf5c70d93ed4e22bcab7949cdc0bf9699697f37c12b209c07c395652a90f12fbdf964c89a0e2e1fa3484672ba572883484193e0345d9b7a9c8c87103cd3558e6dbad53c535cdd8470c3000d96d9c8fae6cd97e936dad1bc0fc74db88e2209b1a3f686e2f9e6216e15ccc6b9f47e5e7719d9bfbbf763dabd431dea1a9a7647e57ba3d8fb39f3af96b2b347737ef03c23a378df14abd4f392b50ef153b5fd125db9883c02b224a8d03fa1c0bd20d8195c9ae0d1d06c55677906a55cd965047339aa44551570ff38226fb7f4095eec36cc3ce85455cc77fd4ce8bb5ecce58400037823fdfcbbd6bdf89f2cb34237ffe96ce26fff915db8c11410704b292312b64788bd8f0f5d57d1aa00cf8e2e10da2223633476b622d3494a84f0afce871088b71cdb99e3c2653a6a856104303f2ea94fbcc44daa688a405b2f89f09a3c798b0012056907df30d2dc17d316c32d59cd9cd3f34b3d03904e03648e14a4e2f33687bdbbc9442cfa209071725e247b201f7dd9ea577517e1528873a0ec08cb9a54c50c9871715c0bb530b73cdd5cf7175e13ca8e9db43948c319f796bd867a7117c64623b5f84552b5e55bedd767d3312793f6872daf1f24186ac56e01f53038555916233cb5feec50142dc5599b1a65648d09bb4079c74637db6f1513f342e6a7f1cc73866584f7f75c5437b23902c6472ce156288fc05a20d4f2380f5cedf1364215453f2a6b576b78c83227f79f5a6dabd77c131e1b57871a22e9e0c20a083301a2474990c287fee6c1b1ba06056fab00706534d6fcb65159676d85f0d7f52060daae064cac733752eb05839bd443ece7c674de0011cfd4750a85d6a0a0acd13ef29b0d72365b1dbc2b9ad9f288235d1bd14c8a1bbbc2208748f80005f170a639dc580ab0edf9a0cac23c76913b659c4c8841a5f7747b7da861d635598669dffa58680b7a8e0cc840e3c8221047547b6de50115e24888c237876e5b98bea79cd9d029e312998d0a2c389a71709227a59575821fa3cb144f6a3723d16392c4eb811bcf6bbc2483014f7f04feecafe1f0085de669f2379c3d9fb04a1edc91b7c8fb3d767f1d2f53818b5116eab80f19bd022a2fb58cf1330be10a84f165e0266e6269b494094acb72aa7528072198bd1f53c4916afd3b45dd092b1240e692e4fe3e9998d2bea6c90e68f99d350ef374a3c18c5dc9d46f299927efb66f0fe262f0fce232087e4f5bc0e0533eb749f84e5b2fab8c653517547908a95f4a097cc4ab24d84595f546e94c1485a6559e2cad1cce1cbf6f3e077726e85574c2e622d6fd561019d44fa8141a5c79c906727444080eb5442a91c460d63296344e6718340eeeea6282dfcf6fd2fa6612e2e79a46dcf44f744925b1b74f81c22149d1ee2bbe760d648388788fbb3b044b6eb11697b9fb5f71ec33acc71d5e02e9cb18482c3ca9ecfa917bf564c611cc58b0998f60ff9a22e7cca879183099b2257fc45a8656eeef429a19263b57e33a299960b96f9e398d9aff7ebd3d125269c1cbc7e832878b1b805408d511e8458049eeee9658f8b1371baa56de8bee3e33e12a845f11ddd8ee893cb8bccb042bdcd1e967bfb61d44d666670de9ca22b7335ef4dc26c0670200aa78ef768944bafcdfac98219e18535cb46188a32e659c35cab7b827cc00f42ef580b639baf11f6fedf3e551b80faaae51c17b6591239ed66d36547c2ac5f53a8700d35abad72b32cbc4c93c83366836eca78cae914a1f3fa84a27a9b197b415f5515362597a229698ce03df612f69a1b86f61ce6d795c11a8d08a5ef2c0e84466c1496573eaabc9c7da1bf26f1b8536da6245e17b18e7201d145ed813dfcd00344000595e4260ec0f078e8f6b54a397858271ac7bc7562232e353900c0b03c3731314d195cb7a78fb8990962ca826a3d1ddc9d1a9f59c2a31af61e4984cca999b06d589d613b0a002e0b96f629f80c8b576925a5991296c256d1a08bdf406e849d292ce202ddbfd99688f3ce1d4435ed1ce679c4785a7bec7246aa07eb0bbd88ddad8a6af0c6d782460218d5503a75c088a530ed3c6ec0510e14d869c5e04bd67baba2dbc171901f9b6ee6a149a9074af75ac0db9e6126a8e6724aafd1e2e6bd14679082010613a995f97be360b836413888d0dd54daaae3575b1cb07fca2c1105c51d13ad6fa7249ce2f4a02cf83978d827cb3fc3861d947dfbd61c2cfdb175e4e22f1e037a17921e451424025261cbb24134885bb79ab2a9f118e8951eb81b9b639198c67dff7ed1769b81557191f4967de7d815b42c0c62e01a771c0d74136b853dc64346ed220b660040dc9ce0215dbdc4ff94d3798d9266e6b50daeaa8a8b893da44c8b85f9dc6894ba85ccfb7817db717938e932080db71b0de0c1db2066992b197baef9e7a171de89be2a670139d64719a0517756ba91ec763da0caeecbd27765f0c8e85a15ed03d75e94cfe7d2f61fd8a4fe840b2121877c82692c63c01ac19b0b30be82f142b7c5b2efc550137223f846bd1b5a875087dd321fe5f4fe1f71a7406684a9d9c058de07594395067ad6f086944809d68b4ec2e32c0c3b0c47de6179ee944b33675ed2adbd04bbae97d139da96f24723d8dbab1c08443b31c2ca452e3a3f143e6129267734b7058a586e9cf362480f78c85965d935bf7806fb9e951721f5ba5f1ab6a84d66db7520abb3a42f4006bf46a6951b189d767e85d694d2b39909691476b0472b71c35539d490a5b5055391752672c478688b8991d9ed5e462628b3a8ce4862a57edf7fd6fa42a1753ed911940049d5f1633255bb929829138c18771703afbc232c2bc7d88774bb544477d8b4aeffa1b5975845cf13d17967aeac7ddfcf2a4a912380569d2431d2067cf4276e0753d2fc235409ba4dc65c144a823421a119b54b4f1c2518e9704539277304a407cbc64ea56d2970e0f5fb39732e287f248a9387fa581ce883ba35f77f1ccd0e07523b4af4ee459c0cd01bee361d90323d7495371b3626567cf0a5c8e17508217f45d3b40b80f7e9414a5b64eac1325a247730fe06958ea88054b1d3db6180aa7169ba66278030710e5f29d18157d57c37bf64274c9eb98f21e0b199c661578c87ff75210931cadb72e98832096b0d1e47391ecb3f8abb788350b3a655ab5dd8539a7363c2a69be6a9814591ea4938ceb0b820e12412a3b666bc4cb5eaaeacb52ff3aa5dfad5f30403dae0e8ba88fa83a1ba5073fcda2236a61976bfa14ef2dad12f071f615d6cd5ac75a3191600566f051dd5fedd3ff688c8b9a14f59aa2adc6f9748795c60c9a3dfbaad14715dae75c09f217e701af35eb2e2751d23660a530f9df3a26c665382aa3728f8263de58da8465a35407164c6e96dde8062c92570047368f3acb53bd6092557e2f40f4fbdc10ddb24e11e14a999269d24e9410305105506dcb9c9f2bc0cb8e190bcff1f675ce7774cb243fe2fe3d1300027059abf4ee2f0e23d7ac8db0169dfee3cb6b85d61c7c307eb1a0c4b52ba056d01c278dcc449a2a8135f5719839dbe82bbed0f94be5153d12fb9b1f8b439bb98cf45bc5ec6c2c8837d639377b8cbd695c92fd3f75b0d7682a3d01cbb2b853ec9384c5060ceb09b290be77fa1d92a5e53c4cd4de4fb450968c86bad5a0844405815fdb7f62773da9650e5b95b51b8cf0bbe5d88764fd7446480e2e44e2c598f6139f2275b9d6d694d9bfb04fd6a69062ad13fef853684080196821443dbff37d0286e64bdb6d07383841e82e9e22391e1f19e667f01aa7e9468f9cfe3165871e9011874df0d8c3c15ecb37bcb27794bac98a44a3eb468332443726a95e05bc79e7b2337df80d410fd6c78a118849827d5d8b30eb25e2fc1d75dd709ddcf510a37bb029d05256152fa02557c9d5dde1c17073d8fc30e31a6021b1aa7eff5d63f7eeb363f5fa48171c3df7e4d7e7002fce5521017956fef7be0147cb691bc00a4f24ff73b74a47e26fbccef2dcd0210742f02b91339d046b8bb10a01f541c98fe8205d04073031140dd0e2204d3bfc724f72d8066e277205ab4a2af152c85068a09ec5e394c38f08f6db63eb7301907473d618241e3665005b9a3a561f5d08eede7327f43bdf073ede6f8937ce83e30cfe13e218ed3c934f3e52f9d208e8b64169bcaa501a4f9c9d21c80a06a238e3a759c72dfed8edc12694a220534cce8c69119cca1c8b5a4664a9e33d6a8888e71378e3e0af3d0a7d938aea1f91b61e0ceffe0998ed902ad94d971d67d2e5adc3cbdfaa377d05cdf5b0c728d26d0d884d5b37c41030c8cf6ce9b6bbb0146e94c0345ff0badba536198e42fc84b98f4147871e26604494527a9c720b09a7fdcd3aed3d7bf8297fc1246cc5ebf335587f5e99a67c9c77e6abea269ce16ff1d82c8bf6f6c0b4756e1c7500f4836ebe6a3695712b75f254a212bfa09829b1ba84aad4bcbf22df9cd78e990c17fc107c0de024ce5e890fd505fa45c4349a5e25ee0e4472abd293f9bec4d8e68700bdaf0fcfeaac9513593b8c47dd36eb3886c6d76010bfe1fd8d5435ec04025a39c6b882345ce10ec9f2f226f97d68a1ddedf0d314307281b60fe866ead03039212717dd60a1f39737be8ec6166f41acdc9449d15a0deb00dff4186def0f71d0f454cc8194bb2b2f0ba32bec6e8c8e2334249077af53a52213162ea8be599406168def2834ca772998b5da1bc5189ccceccbdde9476e8702a22b82e5ddc49f37d86b9df2114e6168ed336fd2e0f789570c67a6b68132c77ee2d20757bb2f2442973a778985375a3f0f5381405b8f1937e2b076fa664735d3a00fae6b30d18417c53a55fd54bb457d44dc7bf3562e949b7a7c60b34589064eec25995453ebcf5816d9d40225875cc243c0b3eb70d274b706c7882c7b4a80693b10c077731e2f2d8870b68339450f9eeafb0058592735a2b58dbe54d4082b3e47fb9d593d1eea0c720b7019d367aa44e41f30cc0f4215333a498b05e58f4b776a7711796655b71259e0a3fc636f3e72b3f9373e91fcc0ed568e85fa2197b324ca97f98a7ca6d739101be27443d158ffc4888d3b52c948dd0450c56963ac82d468b1aedabe289c8bb01d6d6a6a92b3900dd26b76555a66cfdd52de8fff6271bb65763ddd3070fb11e48578d2bb474f1ac50b80f7eef69a5d1a6d9ad600b4786a69fcff75afe325d3b825725dfae15853900d1bccae942f9648462e54b5dae6540255342d93fd99a1829d4444aab9ae956cc354e85141ea8bcb4c7b73b728b897cfd2b61ce6662f8111d3760623111cc370ccc61f6b76424f0744fb8fe242728a11e61373422c8fbbaebe6144b4d155840f04264f0c587d4fe1947a0cacda3bf4f4f6f818beb23ff16f83d92239725b2bc60d26f672868628b95db6e1ba8811d7a2f048415935911f77ce0c159623151e2b9a1e57f2e7ac3f8207d60c8af225059dfebed96dd1f3373554d31ca2eef1d81502c701b52a977dca17f779fae23acdc034d4da42fadd09fbe699c3ac3d509578ccfa6669d05f41b4ba04ab83c88b86d4f16780cc8efcbb02b234b4a200cdd7b3c0239508d05986c1d6332377beb9e72d3b9dd9843057ca9c1209ef30533d3e5c281413fdc88ddc15f0e64aef42456b40da43090d500462cc5f9d386615dd029eb345d75901fa5e81d5abf87783983c4683f0628072f879e1f1c05e2742dc231e76902126ff7ef06b65566a59913822b330bd62858f7496473b7f8644df5ce662b946e1e5f7d6fba172f9779a1b05bfc6c18da56a54f9c42c683f1efe0c334adf3b7e56934eca500b2770043f42229aec309961f51a9abe2f2a0904e17fa216b70665e2406b0cbd034a166ff3c9ef6980da437bbbd0c0d23cde84be7f3eb028a625ab80075a57475618f0178df36fb908c4a184a50931e4ab34db1d00a39ac62c1ce00552148deb3be23d25e7f94eb4acb901d895d111f80035579dc298e2710f81df0f3daed69c399bc3534baa882bb787df76dfa8f09cf8dfa58ebb454dc599dfb1250b8f109744fa242b807f125dd3da98e7b2df40494e2ccf8dffa9949a3f77dcba126df6204663d382d078fe019102921956a6ba637e13d79a68afe2451b47584fcc31c6e2acef03351bbc4690448fcf96a5382f39caf95e157783e33d0964ffc177225475b2eb0b0cf1ee6a60ec453b35ba57db6605810c253b7ff99980bd331d6159241ee71c0be72e5f2ffc6341562fc745c2a81bd61c6a4bf2fd677bfce97371081ed12d4788ef59e662b806fff5601c8b07f6ffaeac02fa3c2acd6e4259870842a20a037b047153627a1926500c728c593a58def2f498d56704b01558e3e3cd8d2c101b98dff69005e911a2c91263e02c761e6241ab2c1bfab86ad0d4c307a11ccc04ad4ee290f927a08ef015e629f63322629b1f70db419b6c1bde9bd95763a862e5dd8de3058566d8a183697870feb7b3612665e971bd580e2ed7489883ef347ed695e2342b7698498746bc6fc95e3e813ad255f06041e5f1fb90984e556c3e010a6570f94bc133ebc1175df5335109c8c82143151d265b7ac00a47db21078eccb6a9dd2d896193cf75ef72a35e51e8933ac8103bc1a45ab7f465044b8a9b96b4428b0a8a7d18b8bb6f50b65658607be9f530e10c2abcdd19b4fd336e5440abbbeb82478b82e159608500fcf337ec0faddf6a02706e926476171e3a71b233b75baae4761d61520ba746465cfc809b93c20bfac90072e87c2f584ef2ff0d8a08eba7d4a9faabaca61952894c4a8481b4d6a7da57dffc96a1f124fdccebeb7e6f2d524b1008293de21315679abcfdd987da90c20aace5b0bdf175c4f3ef735fd14f6037463f001ce484dd42383d38d06805b1e81b1d25895b247d8f970162d97a49fbc1c574563fc5dd82761679bb3ea2bac1521b29c0bbbad2525abee4836bc260d5f45a42014bfcf3817173b537601e5dd825ad3094310b811c97291791a00090af6d4a86a002ad188b77d3ad676a1c8d11625ae52496d776ab1b58653c6906aa2fff02891cf9b44c6c438a2d2eda041fbc86eb143694fc9fe38f5c3e0568f525d0c26fec59d43cd9a0874b0e1b7b7cf841bd5f3672ea0f373f932be69cb36ce70fa28decc7bc14cdf65d6871bcf461a715eb12729dbcf96112ec58f7b7e3f4a2a80ecb539a25b96ecb7e544bcfc5b1e374fe52b31d360b01a2e5707d81844813b043db2e8cc5b5fcbdecc0a3300927d4c0f66e85abdc0fd0e73ffeccd8ba3464d668bdd85b1c1b6158a54e707455f2cd680bf3edddeb91a20dd0a9534b0b05121335ecc0bcc2bc3f5d213d321fc6abe4fa5ff9f17cecd638a61b2601c4c8baf06cf718338c976f523a547c8e16ddd7890063a67a57b8cb04a0ef06c0cdb3e578e9c6991dc7ed71cdebe2dfc43ae6ae0bc19238482e8ca08d193806397d0f05e43ea40931eedf487e0b16a224a72b6f7a48ae3e3ff7c046f45ba628bf178ec6b9a4d09dc2a80f88646a3d920535a1e9c8dd06ef31043c688db6153ed5aec35af35fb82398cb25e590e942f9cdefad0e8d2397a7ca1a3443414115e28f22de91c8033dbc2080e4e789f5bf3c4d645d02ff0553884923a24056f8c94574816c479717fcdaf1d8457aa02f72780badeb0a268f8ee3d9c470cb68baafcb4ac4c9b43f94b5d97e45af28633bc9fc808f7b029768d280df4d5834b260916810a65f9034ea61c515514f8f0471f65dda2dc92fd7392b0be2f802d796b3f90ad8983dc64cc896a4b898df809ff6d619f14efcd49a3e12010f52be179d2ff7ec1830975643225d27fc4c63e7d92991f7f82861bd98f2c5e5d2e4cdeb4faf0b7e99942ee274e97a675b12f04e65b0efdd6c2c29b8a551526f60de1b233cb92d7a8c43aec844c3f48153cb55b539f3b563447530e602a5e1b3ecb86c6a725183c9b695ba0e396e5dea521b878348af182112998e797c78e0fd31f2ecd70f7dda9a80c693925b25e6d6baa6d49f65606021fdb506e847b0a029fe67c4aa3422947862356569c6ce9e8af046330394d941ae291e448edc849183d4506c328d6d276c302a21595be75a134a1296cefcbda7c4ce37cae7157dd17a23b7ffd01bfcdf8622c27b2f9972b809a9d3c16faf02e18512b650a3e0ef013b7b0ffcb46b2bb8bf1db67eac859eefc7d304fc8bda61e174e6c6e1e810bc2066010ac30750d17431739b0d4744472e8fd5c55d798594347a8a0ff24019886493c8e5c5520b08d39eb82d551c30af05347b495c5111047c054b96d8a8b9fa966f07dc4982c089ef439a3556be91295ba2532f6abf971f35ef410c077d4a46cdd97ed41e2cc548e7df0d8906328d6e1f1d03dc154bd62206f96c0ec5303bfb24e78241c5129519753e04e9bfcf815ad0a7efe877b23dfcc01f644143b485297ac12116d83b6d3cac750b2f4b7df8f8c447f41a1b116fadf65795efa7944c7d119c558e58ca9b469ba04512e4644d124d3e47ccd5f0118b6267d672c356ea51705ddecbb889aec4ee898bec3cfaf2f89a6882309ebafa351beed828b5ccb838a54599db0ed4c96d974051d2970140293e7cb6d9ede98f6c889ca6c26e45dbbd5c7f1dc9d343bb441e937861c29ea2faa32d2df4d1b8f2276f05bfd34f97c4baa24235c910c9bf1cff6b8fca84993a4d272b4322606aeda26db9bd5025d4e0907d861426657a8ee6035a956ba0c13bab93ed4212263cf04aad75a33fb26df73c4c49ad6842a2baa02fba57e6c8e8c8ef8da00e448d98975e833b1663ad1eb264a4da31062a365b7685a306de1d4082e602cf26529a3b3bcfa130ddf4cabe8119e9a68ddb03d2b9ee66709b295daf2af43cdf611ae375c32e7b3527a8a8100820ad403cc32296572b4d05a81b44bacf3a70784f09174eea15b12fd9bb71c85ff87f8509b8dddce9165afb010f28339c409a37fcec62c20faf88c1f9da7dc98f048a29cb7a5038f8c555faa5461c1f9ea05cbbdba3762a3539eccefa13f44843d24da8c46e18d7a3ba9eb518f8f659ec48b9e8dbb9dc36d1acafbd728e3f43c21952a838c10de7ff728ef97ef960e0e3c3eefe568776afe3539ae2250601fd6872d7760dee51601335c0163ca8a2c4ce33bbafcb0c60430ecbe0663d07556ebd3b2cefdc81048f32a40d5c09af876451d56282b5b6dad5e92a024f0427d154a4ebbf5e9a35a941b1dfe1a777933980a2e6bccf83b16b8ca1cf8c35b51eb60dcc5513452655706165a015605ab7144b888c06d270e2cde769612ee1744ffc2ce99fb5d02c47eeb83e20980120c58f7c169ec15294141276b1fdc631480bad15614f0fdb1866ad07ac694a04f8e095a47a2331b53d6d595153b9d83768482394cc95e2473fd9ebe46c085477c997d3309e4b2cfca38ddcdf54b3f3ae6543d7769f62cff9755c8bf8fbdf47bec56832891d2ecacf5ed0fc550ef01b685d73aea72be3fa91cc072e89200becd774a58ceee0bbf90d49d2c365193848cdd93f8eddd03be83bf8c4e9acd3d242db07f5df9cd4bf19dd183e96a7262df67a3e496aafee496081168850f91b7dc47ba3c71552f351c3a55eddb99abed00833db85c760cdfaa94daab2c5cd69d60a766f676866b9074df176dc44eb6e9b9b17f46cdf9c5066a11c142ca6ef77ebbb84d722e6ca2452e182ad3460a79842008272e80fed9b2fa7591976b915db5ed5d08340775d08fbd5e17663541da95b226f0bf33b47c933b8bb6c51d3521aa0cb1d37efc2fb1917d149d796c3f141801a4db2855f248efcd86e7182064da9946ce295dee0a5cc1fd15c02b7411c1e030d3dfe17d37d4c4364bee797c247e3897ebe9bf292906da3d7b04ace462eb7b8d45f5b86a7e61f1b75f6f7275cd3420fbbb363b08bae991dab608c76a342a6441fee6898c31c62401aad04827bde1bdea6112ea22ac6ec4f38589b927021874dcc2abd3ac3ffbcf00fc2bc74e7a1a693f98092afea8270ace7b7847ccd74c3ae1514e92a27fc30659eafb2dec0b4c09ab5f6386929adfb6a18e6e3206cf3cfcffd6a99597fa92fb6835100a622593d188fea65ad1cda82e3bd7ca5dbc8d5b0d85f021eccddbf90e6e2e039dab37a40efe7c32aba46117c3d5dca62b31e288b6a7508928e5bc81079800c40232c0ed83603406aaa0355b0bbb25d7944344a668a2e439aa45edaa4135cb008a85e417bca62d8401ac68a1d64f75d8e6f4052c3257d5bca8614afa88ebacbc95ece5de1900cb93035123a2d8446d745d4c00766846e7c7e6b935ea06ecfb99fee855c85c1f786bdbd5db38a5e2529772b0c2e90b1fd8c18fe5ea04d0681daf63bae83141645baaedf4e3cd6e8843e0bb03a76b19bdc10a6dcf857f26ac2f28b7cbda9a812330085dea6270ba77bbd81c1b0ae8b9519d1153351d541cacf4a202e0b984db304cf684c0c92a990bbe5a817c139d4d0375ae225727bb5dadcda258c0ca89581e267475087ae39a0fb90449bfd0c33d93c74945b85e73414fd306d77a28060ffbc6b60bf0676d329cc03f65644957ef60cfd46c16c589434ab1fd0dc54a91cf85c15d8bf85de8616a17966dcc84ee20c557a7099f418c86b5aef81b5072b1616f87d7038f9f05f3b57bc04b57e66c9eda04d89f7e3af7c019364b8169e63064e56032b1fea8a0e8f56d54ccb918af2186b2464dfaea355125c6161234f4a58ec144adae64b557b214b9efaba1a4fd43afc4851822d1ecb9bbe2e58bbc761e889ad9eb804887127f9841c8a463c9dc6f4aea7bfc9641a242f198fc0407fc127843c042706b5d3a8032f70f2fb37ee812d215180040b43647125f6f35029df52168bd0bde727dca3e21291cf9d9de85152ef1a28f0dc005f040074b182d187d988accb8d659a3ca4de279fc244aed43d5ddd644aeaa8bfcd33942340fad7a2cac5d54915a8d119c5e1e9b51dd1d96f07c413d25f374d82efbd244cb1f5387deae39f4fbcdbb6191c56c7519e027923a6307dfeb122d04c2f701af8963e4da6f72fc7daef4d8f57ca6198e887d84daacd9e72509ce07a72ae30e901ad1811f8dd81f8e1f229dabcb4f1e8c439f305a6ef353c0f4f7b10851bdfb1c9abf87a13eed233525f2b8789f58b1d30540db95ef00e3f763352fa74a9b060b1388129e4abc18b9589a87aa6eddb37dcb16f37874dff8d8c2f3ede50eb5897f1760773af16fd8a6fbd7af7877882f4a52a8c98a31d22924254ea3cf15d4655b79c671c80ce89633ff4d73d3538afc0d4d78db124d7d8a6794d9810dcd0ebe34ce04641b3c6105b4075a5e08fcaa9db5ede3b8436042a2ddbb1708ae4a42d9ee276df308d060a977d2c5eb9607356a03f9175d4903d3514ade257831751f4ecc36b89cf258be941735cf8cc46b3b29a40321844f1ca8fdd470512f0d7fbf9e3bc580b3a953486d2ca207869144b793cb3f3c120abbd8c66b97235a4a47c5a72fd52074942341e151ae5f3f7295de9e2543fa8147281183d3d400d794fb446f3a3ccf468ab518953ad41befbebb5ee9bbbbccbad0ae0384c9a1a9655a7b85d847269bc1e35d62750cebf35e937035f76a9ee0d19378aeddd96c73f282c8b15fd898c09a94a2308cbd27ab23e2ef3f0902ae0ca5f655f1b5a4811c3186f232ad43f6df291dbe3d9a2fee73f8686ee33851d1cc90c64c219a2cebed9cddfadb3e6f52cffa58896ed5cc8fe76edb107bd42bc5e6aade3ae787cd6dba28e7f8d916c7b8106921c3eeac369b73560e4c443aca91977ad4ba2a0b5f5a593f8962c1e144713f5465d18575b90e5421ba87993f1138638ec8ac4dd2cb52dd9626fca78906d69ddd2f4c996840e2f6c780f706f21a30540fe3475a86127eb2e5fc99589e4ed40f58395388a333412f9e7ab43001b076cd45b2c2ee181325c469160fd367a7dbd6af948628775fb6138d2ab007d492ec09691498d6923e8b373b1ab9db6129e6ff9b6d07416a94663734e867b45865622d6c4cfa982524f58529af951ee3bfdfb1cb897b2cf5424388283f3d012d7e2a35bc8c7d616df4cc06f45e1bbe092b4db9d7eed49897cec62d24d548facab6c8c46e441d1dd7b0740a9500b9716906d1df8582748391eb5b851d7dc590e13dd14d41fe6cfcc07911a9057ad8165ea3f48fbd9b0729d9815d0872a9d1864448183f2ae41957989c1fc067da69400bda66db8b1ca9b5f523bfee220b184118c6ca103064edf3a63510c44f9e5f3405d60058ad4bfef9283f0d04fb5fda0eeeea1a887bd360df5e47283d91622357097a69d1d058636a275a44cfd30c2828f98e959ceeacc21d4f2fe89c1fe164992533ab87aac6c33330c76627d35c94d3d28280549f1cadef9fb7af29417fd23471678d29c73e087b45aba1e5b2cbfcc3a4903589af57fc7e9e5b2d7ecc0f3ba029e1e25afca5998365c7216dfc606869407193a5f8a56d6ebd864d04547c1613a4903ded926fa30d31909d8fea338522a1b7ab1fcfaf5ed50d965580e03f6e53d39edf376fb77c66d8c9b815ebc81902bc5f0abb0bcc5cca03aa863a361ab9346954ea8669f23ec83b7f411f205c4229e9e1df1dc89a7bf1d2d20f68b2659db2d9ea23489e463215a0718d59eb5e8984cf347e9ef21e07950ff0875f4f12d80f17c3338df2e0dd16eb9a54e012117cbc5de2d2e111b99abbd435da5a9fac392385c7d4d2c8a25dfc25d369a08f6fec49fe326b533478d1cc5fc26153eb6e986aa2cb1275088bdc79a76ac740bcafbcf0917ad412cfb41cc3f238aeb64b49c28862fd42a2baf865861bf38062f3eae0c0fdbbfd018d19ba9cce53bd99e5e0429ed2d88d74a50adca119490521d2c8c8344c15a2a05ccc01733ce75bf8d11d9d32c5352678771f62986cb9d36f64a760ebdde8cc80893b4649014a9ca10fd7352072c6f661caac192d965c84b69d9c725ed75f57e2161d960ee46e9d210ca077f58afa633a7c805ddccfeb1506c472990544b316500da63860570e46e246f16010fb3a4b6eae86cca864d6bc6cda01cb25ce9c684963302a0452f29815b76e02e1ea2fcb852d1f3b6daac6f063822752d111acd63798bc0e9106d44664bd03546cd432f1dd05ea1e653b3866f334f8dc6c49e9fb6cc429915c4a782352126ca19da038bd9ccfa3ec238fdf62c334ef17018e69c99358573c90675d5617a042d691547e5058423049fec5f27e76f0b98b481effac796f8c81fb7fcc621c205ec8c68afc14d30ed0b0425489ba9618b62dd21f7de46f6c5459af600ff807692a400b7540a6aa6cd06a29840065075350987f08ebaa73b09f920c56e0ed4995258b08ec225ab7ec3f86264498f47ec1b80b0bcaf740b4b80655f3bb49da31cf3a90d5193f44dc49b16c78becbbb6ab4275c192f912bf709ec5db0842d10d161f04caec57be5b7ca373186eaa6a95e33beeb813841eb5d035a62a6e14de1d8e8c936c1de951ed53bedb4ca9e31b34e80959683458dcc8778c214dceef7cfeffbab283370c124b4c3e4af803b12f25f37868529554e3ecae955151cc3ee66f897ee011fdced452fdb724a91753e5237f4aba6ea7f8c18effa93732ae99b4c52e5a285458544e7222a684b63848e669a7813899d4984ab8f28d2b8726347f4dbeacc961c6228b30a6f0eba0f1958684480d0c28c002a92eab8af5463e38677e7d197deb63df25d911dee6f7ffd015817da0bca03852eff783d13a19a869888d19c700eb782993a0cc0f8e9fec1ede182ab1a4f049a27b079387a29af09a74e591aacd7efcbbc3e54c30f5487effb07502f9c428b649c781d2ee178335df1b62f2205ef3ce8a5b35f57dcc2b9c777de19bc808f1c8fa71a10a783946ac8b5956699d579d00fa33015666b98b1e69b25e72d6fd0d7c040ab3cf34d4d16b416ea8e63a9fa3660327c564b5111e52a1fbfb9ea41bbfbbccb2f58e855f8f272856a5b2be8b6dc391b91ae08c4ecf001111019419c42f11d61d4141ef8a49ffc27357eb414ac40e6cfaba3eb2279818d514d57a4f3edd1f1f1d47800feac54653c0558a4cc2cd60d71406b252fd6fad2bf7bc60caa2a468960ab41f93c5a4db48d2d8840637980003319ba59218c6645b7dafd759495819ff60ec7a06d11e7327400aa6e4a5a87ef93e120664660348a9dc5cf0e840cb9236ad01434d77720d6388b0b62a7d2851b1e7b9d2c498ba8384555ebfcab524b8f9e8f628b596467271eec856db11df3ead28e30ae20dc8f9cc87942ee720a9e89c2ceff1b394aca2c8d4ac0ef51d5b1258c7657a17808f30b46348c4937f45d20b53dabc3cf04997773211e2db4a9b15ccd7c54d775f551075c0a43cdedbd0a81c222324301eba9b5dafea3d18c2dbf528642f1824938906de0c6a750403bb847c696ae7e287e895a247efd10dfe03eacfdb27886d3579d4877227fe524a56551743509f9a44498a3ac9085397dcf105b43d991a564bddb643019ee0a0c59f9dfdbae654baaa34666cd91cfb2db2bdc9a87e8d85fe4f01139e671fb3008803ff9fd08c21a802234caccc8866bcb84dfcf71324262375546e9155726378126ce801c670b5287c4a1ee8868a77795c01d094cded1c1956108df769794ca3ac9f36b2766cd1cf61f41bd2adfbe58e9d620084acd1d72e67b9d4794cd5e72d71832b22e389004e08c65c437173f5decbe3ca8b5293552737209619d93c562b80edd77293cd7be81320abfaf8bffbf34baef9d6986524b9f8d8fa5d54a8b298c2abedaf69c4163f94f42b6c3c8ac4667d8a20a8a5426c4ccbcc0f46eca32b520be871a14e6bbb217bb4f2af160f9bcf76e4ef3e02e4008a9aed025befebe84d94a1a42a9b3520e551ea3c5a4272cf7e0d123c426937cee9631766fc371c0dd0027432b9d2c349ef69c7b4028075db7f1402c9f0cb834bdcba768bc1dcf89a09b9000d18b7f8c0e7a456c5596c9916b22a2b7041c918b101d37c89b6fa75a3b0d7f2acf823ce83b04ee51b3f0f1c1a8001fa8feef889eaa94f37d70855125cd4f0e6254d0e0536c3c41d4321324237b009992aeff1206c3d2ed4cfaf01f27bf6b44d918ea79cf6fce7d100907941f1ded6cd296f24f3dc6166f9f3ee34f18f2654048e9db3b190759ef3b303ebde053e8d9a175d32e77cfb827e363a9cac498157578ad96ec29f6579ef1f96aecb56a1d6b04e83b1227669c88a42313281635aeeeefeb64fe37a376d91d67b9d7bf6a8f4dcebf331d50075f89c84eecfd8fd8674d2898539e66fe5db6c89c90b6e0b6ac4824dde048e4c0588066a390dc84cf52d57d09bcbb5afbd9efa3ef3e4f73283fe1229bf019164e688ba90a9a46914fac91f90eb6ef41a33764d2969daf7a87ee309a150abaf85f5800ddf72696794885ef3d980238535ffbce2c3e51fa229b6629d12c73ddaa349f55fb5f70e007fbb4ffe7c125e8043b328e6fe6061451f2349ad6ce0a8ccc26d5ab2ccafee3a564ae263efb123712a75a29f2b26bb9b62dce143b14f0eec7388fa1ecfae998cbda996ee787ecd3de47c8b8ed1d31be17ffee7a26f91fff1e60d0ce6b5b1e6c1458fb06e0e096152097a2a729fcac0d5f16d48ce42850f5e7c46c2df913db2b5cbf83dff329905cfff38a78444069a2e290c0539e384644e7d6c134162ea2297a9d6429a853d40d3ddf2d81475380c53b9406df7c4476bb3645b070cfba7b07719c8ae8c94217e6c1fb8f97cbd90e07f3538047a0a77da61826c9bbf14223900c40c1f1a0b3eccd8fe2fce083440c77dafc61e8b9f8c9727deb928bd63ee1d71cc59550c9c5fe9eeba1f7d539a6cc209435ac79f218d4fb3799988d8fb0dca7742e0a1f4399a921b69c788c6dd69cb92d696893d5458201b43fefef9dbed43ecbc77b6a431190c14562df90af5b7f27cdad8543c2312ceaded4d6254757ab1afffaabd6c4e244c07e24c055f0f84da3b6e051e2173511cab0584087a7701fce5e14bfae79d304e7f75b83e717ec3f8f3a75235cfc1af51b78d3954c174441d8d656684de8437521451722d3de546804ba97c3f43a04a87771f1a64f194f2dc30f1aaa8a91a23517458cededcd8ddb496fbbfb472297557ca9f39e5e6a45207fd117fedd5397c40d5d1b2cd64d072fb47d39b0d45c240544fbff63079fdf37227b6fedb3d58afce2a40c0c80e1d09f498f283082074086ed520663db38162414c5d5f85cf0916e9fde66a29b8cfe8fb4c9adccb1dea56f5c762a00ef533802d846e530eb38a2902ea02e13607da5f0cd0c4a1ee168b5f4973444fed691d4c3b9f9bd3a7d307dd857a6afe74549c763f9574d4761ff2fe74db1c64df1ef1b7a42debebecf27268c1953ef3c2ccca5539b86c6f2c80caeeb124c269565dab21346c7ac85367f16765df6c7af8160154a7171a2fd511eaae2b989b05b46d6762b45e564ef643dc439aa99777fc2247e9a72b315d05445c778bb063ff715f8939f0cd3370c59e851ea1e801af64a5dd3c30db15c040cd55000c61e5fc17c358f2a9bdc18f0ba7d76068991cb122cc661ec4407e80d3bcacc80a527daa3d1861284018ef5392bf25814e234e1da57ce7b217975a82ac128f89b58bef59b377249ccc71de18e58fafa54b906937386c722615cedb602613cb4db27e87b68a5ec064d7415d2ea6fe095b8490f30b1c30790b810f4aac4dabad90ff77091031379dfdad68d26c94994ea61b0abf16b56c262cf7adfe7133b89ae52df1664f17f52dc06b60c668e88ddad3eb830955a9c4bb9a26123d0df506aff47cb976564e53ba9d673e34fa1d0e7104e105abf1623d5caeca2f81c7302190cb437437f6af3f41968a729f49ab4f808866456eb3cfbfb14af2ea27f07d6362d2d0f6661dd26134d11f3563611eb6ec86d77b35d7792ddc298bd077ecdf7b8c0a323072e192b7ffa6535d33bbbbe74d840ba329d269fbfd572bcef4b4b5ed596098eb78022d29685e91dfc45fc9d2d3a38a4f57dcdc7d8864e2e443cd903b7a3ba1d6b017676385e43243fdffcd19143a0d55c814a5945495c19b5cd77ab1beda0f9379e0566226137a87adb5794ff56e955835ada49b7c91e50942f4cec1ced483bb2aa42592c2455949418698cbb73683ca5774d0c8d81ef424427ea87496b4073088eaca05d9af75558467265f24fe3a3b809cfbce041573ab0e908b5d96767741c646903bf580d977148b5c531b13e5f11694b56f3b4156a0b9204d568a865ecb7c7e811286905dac430896b2a31cbd921751287a88f66139ecceb2f3928f60a1cad12a20882ececb6071b3c5be70f2f924a3b574fe462067925f761b12dc1f418e3ee22fee3f27bb47d6b78f12cbe22821b5cefe0a06d7dce3c9f288c76adac09f4d3879ec944978957a1301017bafa9f41934f2d73f337f17bd1859405f160c37e4addc39b5218bd5d571862d230cd7dbaffc8c949b75bdbfa8eab9983ff63850c71f878e5b4d9cdb4c7d877219abd90fa97d28ff0cf0015f5db3829ac0742d301942382ffa4c4aa9391e7e8c6b246bfdb69069cdb67b5a07b324c2e1e567bcf66551cdf05fef1be58691cba699385cfa6976e452d22430f0e5138313fa2fd7b5d7d40b21daea9166766b8a5241faca43440ed2d63e2f092fa5ef783c9467cac67197aa8caf8f0540709d39ef7c5dd9a04e1bd3f58bb90d33a8d43d8064bd8d88b941cae7b6d8ab1f62752243833aea5e65ee8c79f7b9a51d53b1a13893bdfa3c5eafffbcbf3ac6b02c31c6883946528a9046183c3eb058d39a0658fb83cc123b70ebb70ade803fca67b25976a0b3ae557904eaa78e9fde93f45b35163ff34cf00cff8e3c91b1250fe06011db7581d4e486f221508e4c2f638b271a37e051566d0fc0ab4b3f3afb5adf17ff3dff1edcc0225c251f088ee169977d54b55ff2eb4c7dadb8716d98dfdb6403170a62165b570a054534a365ccb86c717c97ec8bb908ca647d8d23f975b14ef138a878d17e698308a8a605962af2853f9aebcd2e6b93dda9f39e10e096113681744ce7880efdb6cef7c7713689687e3cec0110b843e2f2d40d97d1b6104df18042f939685723332755c141423b7d23ad4b1f8897c506064d9176083a56dea0f2887838b029c5683afae066f5b6f2ecda70d97db88e5036a5fda62009780f87c388936f584482926703cd5c3a8283157a0503af751e10fa37a9f006cd71bcf3db829010a13a89046d82ec8afb398b06b8b8d0ce98f8be443e091eec2c5d00f16cac059151098f63714a0e4cfaa8d69d95eae84488b42417b6eae1428f7684eb9c3a243fef62d7c83e6c8b556619f1baa39c6e699e685634b0fd1ab78e1e8960ad5f65d52807ee38a4c773e59379943d93635ee7e476e2ff7725249bbbca10f4f8b7284e783eff2de36b742178887b41e007fb6df244dfd52c58efbaf2627e561f71dc8b8f52e4f0a85d60a12a119f5a4f95aa5d45abf293ed7613e3d694b4b3e654d39948d713896d94c26a1cdd622e257a1a3ef0295ecf3b677cd77a59e576cd3532ba262948d2df182628e4d9167adbcc556905ff2688e2d69f9a236f1571c3347356e8d3903ea1d63c1efca63c42bd9a7f917b50dc3139246fe6fd84ed9d6266136ca0ac5f5186061cd65ce4ea1c974a74166ecf65627c7b039d8d8223cd1d8449cd74f30f48c6e7c32d85f46bd26a398841dc2412179cdf5bea03a12337ebd93b5d665eba590c510fadcf4006a95b00bf6e4fa4aa1f679dee3956080ca6469243f780fef18abe899deb4311a8ef5597e08959b7fb9a33732fce717689a617d4ad125a42f429555f2383af3c557c05af2bc8d02f443c86fa47071d9f5a3b92d5bcc0019227de60957d713a3cccd69474550cd9fe6ea7d066aeec16be9ed86756510f2025b954966a00484bc17529f5592e4f4da732c8cfe2b7b4dcc1da1184362a8b17e7434d7ae87e55598ee14403f5a7b0fb52e0d586aefbb75e7d519c5bd79474c8ac2270f9c3f320bbd704bf8c39757bf0a936fdc65ce8165e634f473d917dd8eea6d6c1e024814536383a91efe7e90574cb3e62eadaf837951412d87d8d601420fbc0367497dc6640281870dbdbcb1e51719d41b9746cc9328345bab1ac47f8b1a880abc5c8852431c9434eed882c41ff7afa9923c3db563c0ad22083a71ce8ccdd4ab6ea4704d7a00ca004d56b999ca63dfc2c2523387c13bfe458d4d2c726f1b5be636a7d9c85511b8aa5de71bd14619729853b24e695b0fdde0f3adaadeb7bd760d434ba177df2fdecf7e3803d1f656d818d953a484b7e57f63de2688dcef63fcd28f4f58a987a126d8211a3525b5d058263e1eaa812150d024c62b871c6bfb467600435566798f8f9edff7f8742d695915c72b4c557a9357258592b5f88c9a33315e04f07f9b2bff89f534fcb43a053f1776e70305d785ed1470d1edcf5db383d70220d373580e8c25de399e6572f7799e9c9ea32d7874fe2c869c2968b38cd8122abb4a41072717abc79dc3e023486fd17aca9b1248cd4769ec51ba1545813aa79291b313dad79a4a4cbc69d1a5a20ca076b392eaf18deb83f6be72120d67fc9638f9c783065b1b745fce8ce36ad8699ae67604a8f3b16f834a57579de368b20ffa1dc23980ad4732c0808eff7d89e07633fc0cac9eae656810bfcac7807e3b91e0007c4d34fc0d24f395b314c510284329e5cc5504362ae4542e2b4d241199d3b5c8ecae45523ca794be09d43f17418c9dfb3603e19b480e716b2c75630f2a64983a98786819c633013a4077981d30164650e6e73d46715fc7945b4df9f931c7a47faeb8732a60b105fa84df3220c912d5c0784189595eebdb6c18a9448812d09943e9a386e2a1bc69ae42238de12aa2bf09c8ec25faf490cac4f0698e196f81b09fabbd0d79ce805c22add1f89e5bc3c3afbdc12dd356b6f570189b8406bf862665162acce7b8ac0c62e8a35c369e0a3dade25e647b9218a320c14e96fc21bac69b1cffa563843f429a79cab517ffc61b74f9254e9e1d2ac1814825139ad3f9fab742bed869c52cacdbddaf55ca7635cc055947577641b567f1fea60a9f39ca82781932304bdef7d1ef31e306f3d77ff3381d5a6b74ab232fbfa4ad61227faf63d0aec1a0aae16600b9b37d9ef97446345dfc17ac1f5ba6381476e2479e24fa2d83342f7150783361697f80d2fd244cc7005a386ef8fd010489fcefbeeda89583d71a1ecb948fe73691a4dc979aed0afcf5fbd8335349de2e8b97dc53d839c65e8eb2bcbd4f6eddcef7f15aaf8c56413a1bf3aebca8139cd9c47be1676eadd71f23f9da73a498e9b566da203251af878bb174df245f2782d36a659cc4b855d3243844fb07c7f1d9f5ed7edc0d9fbcbdccfe48525df421e25efd1e3a9c333445d90091f8c6041e1f00d9080e60cdb793d2f2d0e99f94508e89be81102691aa165297daa13e2bedc0b53bb6e22a68bb8073b88e085f8c5e0750ed8667b93a3eabfb05dbba2a3233da3d91c5c0a8e8d37b09d86a6ca2622b457bd5b726fb9af1fc42b3f4ab83d2281f9a08f74683cb4b4f9de54739fb374dbefc0c8225c04fc61c11f121d8acd4aaae649c3c879ea02d367ab2781984beb42463b28737b873fc8c9581cf9e046054395ce52be9ad58fbb28ecd826a108286f35e7b0d4fc7dfd8079051579d2423983b3819c9d6872ce937c54272cec3207debe7e6b79eaa1161a6cecb1a52c03595e803856036fc8ffdac8fe3479d7a4186822877d0970796e43e8e660ef5eaadb8e0f70ac918eee57aa45da2d7356dac521880c4302e3ad5cb9d8440949141d8504ced509567a59668cf5bef0c90d78aca806d13dbfc80827ce9c98622b46064bd0c8b8c41ed2fedbc82bd89396d795447cb2ea8141b27fdcc6bd6a8050d6a7461f5e91d3d4dd21d7727d9f6d96b2c991608b2bdebddfb89d02346f727e56797d659e46bcd36bcb53ba05a8bdc8ab037a9f7a5673dccdd40b3278afef7498660ac654641a57e0b38c614012d017cd5469c0581e5ab7e3444b9d97abc57cfdf574b6acb95179e40ca71089df1429e5a1c871f68658ba08f4725be92f7d376c7013bb6e1c72816581eb539abad17cb577cf96c6fb9e1f361f075081b222b6b3d50fbafa5354347c3da32474ba59d03b27faab56b88a8414f1d2c15b5e9a29136b01ece9f650bc59b35e68d9d29120961dffa212b8d66704c98607d4c21bf7661a445a24982a8ccc5a1e31a4ae6d28fc5885ce1c1aaeb2f41d6159a701f5223ac3ffb0ada07fedbc8e0bef87575270c2f98228fbc5928721024c69af23cca062d2257f5fc7599ae21ec352b8fd5c8e0920b6a279ddf31e5c252d5b0eca3fa37a876dcaf4de1e26f6beefc98450304d1622f72e9cd63ca12f6ff114c525126566773bfdc00605240adc1a36b0a85d5a8a6601caea28ea495b68cbc2ec07d34abc0fb58de2f4e2af846e6727e7ff048dba43a38cb151afda14fbf957194cc6c0ee05b39317b006e6df6cb0d97a8cb915debd8e95befbf7a89591f5416c7874989eb1ec68eb7d9a3df0668acc8e76242072775355fde83b9c0ca4bcdb63d978833066c45008b1d19aee9db5e2665df76ffba123f3f963667e8dd443d6f5a27543dfbed2e7c4e55ed4f548786d40c121aad410a34b595cd55346e449698b9c6019253de9c07810179e7c53c058966ccf3f72e15fcecfdf36b6c4451f1aa0e30eb26b4f23077358df3ded1ec3d7cefe89ba033c13a8ad402fe96db405de0d3e26453cbfbd7b334e14b62533ff80957b42a611c7cbb10da79d23b0605da7221b6c2881e84043f4daba52c9231b98ef5b99c19d24aef5540e36ec1eb8e06d9e01cc16a2bbd1d0685e288d3976c9fde8880a99ffa07156805491d4958f6ffa3da9fcde601e5eb57310fc1afb595e83b67bfdec0979fe7809202f5c29eea615954201d28a3f2851874c2ca291f84f7e60801257c177ce717cb135e324c0cfab7e97e580138b51fabf0fb980150e967d9307dcfb46c00ab962d4775dffc286a1a1f4c187f21795df78119e62a9a9f4b3c6acd612bd351ddd5fdaffc59932574f234236464ee0cce400a10588cfa3a708abd9ab1953b1471b86920830cc20489e4a5d1b0b3a132d867775d89569dcc22b79a07da96821f25fede02bd3f5d88d9fa46c7681e3cb5685bad7e295f52cb4d5105767c618f8b174d82d8c34e4e0190717b6e172bdd5dd52010890bf013416cd18490fc41782c4aaf38c082131a14e78023c176922a2ddc4a5e6db4c8fbba035a37eb5babf99e735336b5180ee22749150e16a60d5e560dd7ac587ccd4de2623ae1ccfee02be78366d001583034de93308744156ae6a18c60def41a90405a2f667c4c0177c4d48d3e30cbe0632a34377a1721747f73407e8db552f20ccb002ef07b0dcea11a87a173f5e2e9367aea8110f3023593dd7af3534cc70f54aba4c2a0305c5955c8c765c3213974e1f487ea3a1963ade955e1cad95f0e2611ed6eb0213397ecd61a3e82345b15ab9782e5fe313f2b58ebed27fac765dc4c8d0ccb9e98f26db6c34215e82d77401983210ddf19ee0e8609e8d01075a20c351d896273b7658057ed4f4982b1e4c7aa2a5583d28d76d7a770c7dd258f995fba8daa255a1e63dc7aeb44cae93c908dc66f32fdc86673467c0d1f8149dc813827b4039b12716c563deb44911ab498e03bcba8b3e6cad5a9e19bd8feb11f18d973411835c880a31ffecd3ef25131215f79ef9147325e6149767eaf43034fc3618edf22268710ed07063749f63b23edadccab804a67552a2b2bef779ed218df78390885f49493f2ca8061e5e90787458fe35158882d952446c1d1b53790f0b23da3d313eed1f0e53254f79cfe82c2d4c8a4c85b79c05b29cad16771a56f4f585b958d0e2c422c43263620f26e0431b6488ac8039548ac1f7730b9eea31ea9a601cf6c1961bb58a6b4744b71115f8aa769da0f261d4b8e057c8a028e2dfcaeb5dd280a56174088366e410d79c1c370e5d537446f4de7aacd5b19412aec614c048f841c08dc463e6d9043338e5ebbfea6f30dc59e8aecc223cdf38ba08f2067273dab9e3289e2377e374ccb07f83d7469391eafde90d37be008b605fa8fd3c9d2736d7c64b54499f5a13a138f873b4af5ba99020d2c292f61b42c8c10c5eb7f8986ff81ef15373c5b0b9b4d94fb404606d1c5981f582259e828cadef54554872ef389ca624b7d6f56608a2f65ef12354946503d1d062c785ce3d81557c26c61d75fe0d23cd7fab51fbb22d3dbbcbc13e5fa7992750c6bb5b5fb51f03214b1f606c5448bc663863a786ba99790a2036bca05dba7bfdaedced6e1757bd37719aba95f332a383081999c359e383eedad80897e4ce08a513fb2d614603ba860352b5a634564e7153f8b732acf0f7b4bbd8d0ced75072950b1a8b53d7e2cc5c43df60bf97ca03f45de625a25d294dce00f995da46757a062dc6f6f4525e21ff187c06e8e094f922f06ca8a6dd0aa34c32e5dbf82bf766053980e86f136c69ad3ebf54c6504a46493a764d2bac694916e41a1db5a2dfbbd9c7f607c94aec82732d0702e615376b7a24b1df0452e24f626357610e70d9da279c80e98e7356da7f109cd55a2b19691ebb75f03aec31acaed5ae8228d56293c2750b8f326c48a5dea4b872f976c4d67ae4425e64412d750a020038bbabc546aaeac08c731f86776586ac556eff4e2f04001189662186da94ea7a11f7495cf8c8500ea7173c58d602c171691f124620aaed597109ff53b8e5e1664a28ffcb17dd5d7214d4b21dd665a82292c2db1b3cb4ec10c52390eabc2a9a980b225a4167c6d4a13288d2221e9f29f3b2fd4beb8d1288b96851aacad5aa2aa019f1a6944fdae26d898f06442ac98c6a5472e445d3173ac8221a90e40d97832436eb8d64b2e2177e366e168499507597d8434bca650c53d378e2f28fed3d967f8c12e7a7dd081edeb251c78b8062a9fa8c7bbdcf6eb3394f4b93746b6fe47f71d9e000ff1b21d431368f8aae4861a1dfbdd6ffa64e60177ba63b6b679e8629c3ab13f634dd7739bfcd21eeb02631e3d1520289df4c4e7e559173e445bcbfb25655af46205d273194168b1785f69462bef3080148a33da97b44c8a35548b76c08635ab1b067ccc8c879a0d200add13edb6299a25488165c66ac9c5df2bba47d6a4d0297bd987831d7f9abd3aefa5ceb27bbdbfe65050e22a980191f2b2106c5de01278f5bb8627f71a70918f252b238e82187f194dfebdfbbf1086a319e2e18fc97b22373e26168bf8ce66ba5b2688b12f5908500984b0af28efa28fa49d35527730c467c9eb65d052b92fb32e206d54d825318d1a2e4d29c03ca430a98a1e28fa90b2e0c9872c31bf1d0835712c31f521191db4d70cf948cdcbca0830f6bef615da25652ca22cdf298ec39b062e3ccadb18ca65d6c59f09689224408155a93a5cc6fb4f410b74cd2296915151ff712f4391ec29717c0c23105e7364e8cdc91d3dc4360dd54616f31338674c74c0dcb7f258be6192ced9dbdec2bb61663b874e71e194b43ab0730b1500c875413a8da349e2229a808629b78bddfda6dda29b34489fc647fa35879db9916885afa0fcb1ef1eb5d12d62e1d03efbd6bcdb9bafa396305b6976ff495c3ae4c1d5f10042a50791c54b58f43e1ccd27ba5681b4b9f0548c895497aa9a44b1aea8d373b3c0ac8ac22e9e2c3ae83e11713fa8703308f69ac8a83ee7b4e8e9488094bc0593adf93623ff5c4a893eaa0647674a12250824e94e8964f2e7775cbb3fc74a004de6428502c6659bc3114a4b54a6c22ed7c0f7032a9c2cf5da88acafb4c82e60b92b5cf36c0f052c1905a2a61d388d54d0fbe7c0705b59135d937a182d72a3ed30c48c8d43c0b04a024005c6239e000076d90af7206d09f51d6bda8b4aa445b56fc209c9d001e09b825da115d72a880716d00ba051b0969d63380417802d9f32b14faac301d0420bdc95317eab1d9a21dcea755c0bdb6da048c0017ea509221fa80967841ecbf7b8e6ac2a1b9979c0629085d3bf5adc7513b7c603acf0e9ea7ce8b921fdb7fe92e2186db02feaafbeceaeba5e1b5226e1cce5a43c9dfcd3aacf163e12813055c57afd4c3d29a5a38a7600cccac2edb1f29597c16dab09cfd924fea1937cfb5e44622fbf4873ec704ef9c8da5ed914692a678a17d39201c8ff1ac64ae6536bc624461141d79ac09bf8da4f56d1f8ebd12a3dfff83ec3e1b502b117386a1da0aba43fd467857ebd7d28358df804e86408d237f1c7b3790a863e6727c42fb28b2b5046d4b48b7b39d6510ce94f6fe456c7e1acacb094ad11355f586c588c8d724cc5001ee70dc7ec2ed0c980159bf4cbfe85ac0262776e27b17cf5f706046e323bc55f64f5d139859e24d067f2bc6e1411a1c6ea2218c2c0de0bd544c1a0a328aeccf2b63a56b714c29827e7389daac7b9ca90398dbbf6782bbc99d748afcff3663736402645b5332f6ee6e8808dd2fe5b84df0e5cf5e4434767232467d28ce5fbbeef018658426d6d3303d977135be482f60d66464ba33bcad9a9d8dd327ae9d0c59294e54c1d09ed0f5521c4fffab737751ae20edc7bbe42fdb79458c915de474a2635bdfc0f4010dde61b962a7ad4f641bc09abd7db012c0b57ad1d330ce62bb651bc70807b9a028b4d3f8c4275c55c49f852d2c204c0f9179334b9912ae25cd5ed0e5cd72217a97fd9271dc141abc62590ff029400110aab21f05b3d7e63bee76046bf6609b87ba44aa86eb6485330097bf9ee6a9134bc10a7f19258da1b700fea3b5ed38194a2363b27a1f7febf7df7290a35bd6ffcc90256e441384759222f1570d8a853839543980e51c9554e840eb0cd8357d106644932b0409bac83a0653acadaf87dae6c908a725b606d7da0e57496f37c598ad477d8f0b5be8b12f68fbf6f75cc0d9feed99cf363475a909799ee9fe3df562695fdab1b4df580156e6155be4513925d12cb84cc1af2eac6b1d0e31f7f0038789851443ecccbc0ea48f4be79b027a99276679c329b719bfc0e0177677b852152dc15f5735c1ed40f6df549bf429f7d97cd9475200af5440cf8baaa252534845f3d715e90fa88eda142e5df9325d60bcd608e50d8ac6531785846455e759586c425f3412ec16f5c114b96763cd478218a9e153c6060baabf382a9ddda4872d3f3ea9fb9308ee0136006b849afdb790579be788973ed01c780540e8ead54321dd2a3fec58d7b0ed739fe3704bb250e797973dad6532a073107353c043bf09bf9444d65231407642e4d85e7b9eaa11245bef97f86d5c8428309a97d0c269f3bbd8c58ca98d189b75fe5306c27154f98f39c25c59d72fedaa0c1f5e574427315df31dcd464b0e7cebc256fb0541dfa0b8fb67e942702c0a3b49459b36de2c975c9c75c4be6dfce3a9f890715f2380172d038aafa464a15b36f65c27ebb6053482aa782cb41ae20e9377562b90423564a5b8c32d1798a9528ab8c2269311a6cda7c829f4013934c8792704c25127043480828867cd03eafd829ece589034198c48dd5080558b75c8b29f68d83a1fbe5a8329fd9c118529470586eb5d2daaa79d4560fea78dcc473e14a810cce23b0709ff52285d4bbdfc81665358d0ad04407e1d250e59068f1355010ed2e4dd4a6fb457f4e39f73a721ee423cd62aa0dde678922ecd144ea9ef9f616b241d4aa91c164dbe032add3579a235f96063a0b51b1f7ee98b8b98548c3c2bb387866f4a1009cfc49c3f20cb888f7298b2d6d7f4fc18bbf6c505621d18e99e96d41a8846c55f2cb2587ca70f43d0e79dea2cf4114ab8273d71e0d1c84a14377ecb420f0870d66626ca2ae8e1f0cf35fa4153bb0b3c459186683833a4d1179edc9ba1693a2d98e30201613b8bf28b5da42ca23abdb4b68ed50754109deaf7f959f59f680f3c239cc12f1d09451616ac1891f52a098bdeb1b724909d4ea780c4a0c661c1a7cc5128d591f1c7635edaa0042f221f2400cd1af396b41f0eec07ffc9198dfc467ae8d3e48a49700cd4934e6f0dd0b30ed63c308a6e3f20cd9458a784f14e0c0fc2a5ac3bad92a52fe236df143d4a7e04c59b79c20c16ea5268cabbc4dcec8ebd3b675fa720853c329b79cf2d29bc4b20e0d9c9b812a95deafb5e4461628c31b70b8e0b7195d620962127db6acd7a16f1b4a32c0b6d5bfe208c06d62c5c3ae50c168a5cdf58a12a5e0f61cb0765c8dfe6130b3e5bffa8d457e5e75bdbd6962edd267cc96a26edc3846941900aaec08f8ed5f8cf1aeb2fec007eb453fcea0a9336e33bfe27b24be73061a9a054e52ebfff94303d074e87d4090fa7b1c626949bddbe9d86adc83a97e91b7732f712f618bb4a8ed31f22bd022d19aa1ad35d8c4e697a0457e801d118d1ddcf86abf51479fe6bc36c158fbedad580432fb51ee204975d8960773bdea81d6b961ad6f1e52a8273ff2d92261b8f9e65aee681b3fe71ea47d2a82b07d9caca03372ed7354820e0b208004f4594320d20a3856f36b66a20625efa6427f2a9003c4a9a9026d0087a97a9dd80ee19786e1d13839bcd9cd03a13c77c3e86dae81e958103dd165a2ad0436b2c3c7d7cf149245f2c0f050a55736599b81a27e36308714443f2d745c712835f52eaa77f0e5de69278e74d8b2abf06d3dc28a475877df5e986cecf5dfce4cc3bdb91dff6e3ab8d58016f51e591afc17daf2f20a3078603272d9caced9cb9dfc04e6683e8820d85bd473b1a0244a5014a49c3821276b8fd19c2fb78136046a88ee0778a740367ed5687bad226cbfa9e85aeb35fe6751623b6448190bf42c6da7c49c436b9bb0d900955b0a81af932daa119f2e6706962d73125ae90d8127e8564c77a42aa26f743815d0dddfdea1f26d047f8cea584432789809f5bedb7a95b79c2b743edb17fb751038d538425903e11e65fb00f32b5803a611d4d01163d69616f31262fa87bcc836330490c8a08e11c3ad782c6b4b18f3094dd383e93c46c8748831c8e4394696e2ade5ea8a9775dc297ac2c11b8d50c4e1d7e0317d5c876b161b1f22d1423ef5d32b2e8e88631f1790bcd9ecae4e8d7f2ee0964512ae49e72a3ec81ee402f9f20a8a25b3581e4a5197382796836329719add721264f5eea2ff69f273b9d04921b1f3992853d2fad01b5db8e6d30a048e82f7d3954aeaf355d88e5c1e5f1998bab08b7e06d841cb6aa1fe24efbfee4bbdddccfd918a96930cc5dc7fd4679952a1a3243a5d551763bc9243273995e44d005f6c0be89dbd09dd514fbb8210267b019d293db7f2f199ee2e469a1e8d625301fbcdc21835019d97a8a40e941e2af49a025050aac303d19bd7a29d5f1a6f1bd7909bf0c58cd285c308602038b667c9e1a42f6db6a1bc9b17f1e03421c6c5d0058974a35eccb7667b603630592a4cbc2486443da646ac9949b3da645202246c0574a407e414f04c9799aec89701edc19dedc55997fe87bb19b10f96c28c9af3acdb6aebc4b9ae60bc9d9c005dca76d3a59b818eb7d09fb0a375d4889dbbe76115ced6b5b6343d3522d4b9eee2643b53e210d3de709ee5710f7385f4408747415c85ec324e8f0307cbeacfbfbb0173760f248b4c4429a3f02cdcf0e5602d46c8f00b98aa1191116ee2d60518b59c7dff770df8f0435e536de015e3cb0f101ec6b32c576f05187de146e7d071d599a2eff1a680bd20843720210457e05265fa9c9c450d2335418098e2711df13cc0a952147aecc31e2fe6022b41d140c21cc643a117e1c06234911172f22b8821b776128a7cc683de886a4f53c76f83f5ff96b2c482b07b6a4b4506e1fd7820f81e0056415c6d6900348e458a1ca005fe70785ac3476408473551c9e23a90e25d942d647baf74072e74d231bc64a4252060657ea2ce405b662dbb535fb69bf12e8ceb555d685e3c111893968f28ba72c85c68dd0bba3650dc4740b99199f2e6954330a46e5d4647bfb33d823a65323db3d2a096c9e8711d8c375055e5bdda9698f3bae06faca4bfe8752249264b0681212ac3447225444105cbb00b9282cab649314221a461fbcb860c675c84dc4a52346a8ff265e465e3510733abc3a9d967034e890e65a95202932fac5ad9d715cc63fff4979b974ce6c3782c728aad43fe1438b3756b563fd4419e1267f01a7c86b5372653ae2329ea02ad1421eb0d09363e3e1ac986d4cd2f20f0b8034f0f3670daa5c45d51f0abec322bb45dabe7cb3e1f6afc44a3aab709165948c349d8c2cd46a10f951d175a28f44bb85e4064f640fbe856d0d7f663986c9ab8e6ee7e90a56b7fc4d4eaba51b1a5238a8aea9c12b759a969b2012ce9104a82b5988b45635f99b53b126ab6d76a22326177a4e4d398cadf5e764906d6d07a956375f3c4e178ae384c36c0630c185bcd05fc3e165cf454a0fd923309f9a2992106436832a25efb3fa8aa3349b1450fd525d0425f1ddafc17b49fef5826bae21b78262dbcb2b0b307d8ae609a124405dde2a038855ff43ffdd361e587964a28b653d47fbaaf8d5e0ef61cff9ca1973ec4d2302d0f7f2d27aefde4529cade0b4f446ff4060f8751d8d14a70c0f217a29ef301ab7dfe53e057e3c92ea750b361f658dcde3c058687ca61931515f87be21f6f4dcc150337205ab64d4addc82a21c89e9714e047092d317d05e9b8e183ab771d45bb40609df262f075dbb164278d23231675730fe13bb8e46440d17530a310be698e418e460a521de898d7b844eadc254588740232803496ebddb1a6276f88d6ccbf9227c733b76fdb26b7cb3ee6df2d51bc767bc9534e5e34dd54259f918046389c284e5bb91f8a6cf7a5217c2b2d8279e70c86f4926bad879add1f1e432b3e8805f840d54bbc3afb34ca896bedc643e4d19449bf7f9eab9239d085af5c7b3b1af62d301506d533dccfa81b5008d3c530e617ad619131d1f1c55842b6d81764172d74835f8e0688b2a51001c2feecb9f401b51bead473c9dbff933525871901380775a15e85351cbcddec3bdfd584356becad109d0bed130ea4502079ff02904589d4bcc8a135413cb69d971a5c0facbc362ccdc714507569c16327a00ab4b9bc1c3cea58ae498099e8a011f662a0abf294745bd16bb91f51c650f467718663a970edf6f4ccc1a7e0d1b7fc0c98073f2b3133073272d5f739c1434c2d440a964593b39e73ba4cb45962dfacfe90cd76640b9816fa3209b665b3e42379c5704fd8084b0fce26689791c3a14e0050f346a949242eb9125935346a7b1a91cb07987146cfb8421e4734f2811ad98be49f9c588fa3154275861e4b28456e7d9de03871c60cfb8d6ed9e685f2d0aafd9e188ae5548c2da71b32b970bb4f957d4597cd23d8c7c00f5e8e122f553da6e1e13d3275c3aeb613d77e607bf596838e1c1e9e193364af05fbda39b8fd39bf4c96e7526342e71d846dd3f79084a598a886da5a21278beb3d00e3a1ccf77495e7dd9395cca41d0db24bba88d12fc61d7206ee4fb64669b0f211a9e1c43bbdbd98dfd71e057fd0ae1e32b91e26b91f78e472fa880f5d9e9166862991f19bc0e4f15a4c903dbd77acb39d4551fd89ea63012141346ce61756d85224101e2354e8e3744c5afd150e9537ccf6bf74bff4189b45a6b97c7ed89b79c1254154c1b9195037b55b3452a6a632adeb6011e94c23135b7b2835b5408fe66f5a35c2de5ee9662de81ab3b0dfe7ffa3c6b47d093a3f210ce4dd1a96c0f5eae545168de7b02e257fda2d97d8211d41c31e5ae3cb1e749039eb9c8e8cd38f1e22e477c3f6b7a771a3fc8375c73407f6a79423174cb596e2fde8b0844357cb63d02f7ada5ea04e373b0f2b2f375e80be234c413247a8edfe72ca32924ae5f5a0ac2698e20ecd632b9d4c1968a98abf92f4f864ba8ec08b66b2423dfc5456a2c63f770df66d6cbd1d34c35d2e8249e5631a8f114bdf6617eac7730102d44bea6714c1a6e39df3b1d4f46bf50e6dd85cb7b38ce954324a90c1e091f9493ba936782e2f4ae1903f60c430bc1da5853da20c05617d66d3508558391d9b53eb749b2c57fe8fde3a51b6bb09f9a47686fac38dbbff0eede39e943064b27b90ea14020fec64ace7bc3e432456599ec27bf781b512dfbe8bfc9722101f658957494a664c0ea19997405c5c9573264cb19659c8982a978e483cbdb8f70ef816e3fbc7f4ee415458f362ce9da316aa633beba939051f543263e09bd502a0a1aed1b4322ae6bbdd917ea1a6166b4f2e3d9cd836f044d8649a3f88382aa4946610a0828eb406571f88affacb7ae7747bab76f3355b8d58031aaf9eda34eb9c5dc1f35690d5cafcbf194faf5a562dea69b6ec5c0c26ed4b8346d0b87a06bb5e88505b48b18511cda679425bd01358260924af0378793cefc53b3eb1f14c81d8a2694bfee2fed2dc6880d995247fbf83a389e23866604051e2f949db6c5aaf67b2da7cd8c71b5805b3d2e7fb6d32e2ed15314e112d8eec61c968336e7045c823c97ea6de5e354dfb4848c7903b973efb729de74541c13a5b0e4a8591e0a430e3745f38188fecc89c1771b69f1191b037d3e06c65b8cc84ac5aa8f84fa9419747f17c3a423676ac2e87b525664437ea9c0b250ece031abb7224979914edcc296a9d8edce123e90cf211066d3a986c11ee2d727304ac5f6635b922b099c2215027fddf90d37dfdb3cc1ba7e5ca96171ee20be14dd56acc91456e6565d57ea6b47b3ddbc0484f57420f65929684a2948e01285178ccc190982ec715588219ab1086a84208a585d5ec369250de9dbbdb6890f128b0a5b254297bcfc68050f68247c34fd774ea6c16172869ae14803e809dc7a16f0bfb15e47ed66418d2b84881864542390ad74b2400f387f3d346db2c5087d2107f779e51396692d0fc988ce380c95b5362355be358238528c6d4a0fb77e0965f733fba04d34383620a5be6c3b551810d120bc4720f873e44670624f0e6deb414037a5ea4edff19a35610421c5d037114bd02d8acf8849926f1aefef37cb66f65b46411a108460b7c2569d8a0cb340171200889553d3c058b5bc16450ad5b0b03576ba2099a0b9bba4e0a86f80a22750e2a4c603d641e64f4aa761fe58f1362afb40334cbb4f0ef209f94eaa2212edd056796b161b481c21f9b01b39d26bb825ee242dc11343402e56be08b0b8c161c491f5c5a83ab7e0259ff64b7ec1f7973cf774bb868d8ee623f8f7df9b103c53dfa80ad01426f63f7a3a543f8f6a3f99a19f0708bf6f6b7e72f8d918163a6034a94fe0785ffae78129cc32bcb50e6c8eeca96601bacd6d18dac1b2f5b6d48e1c138fc87efd7064f7b59420a6e3825e36ca99aa37729f3dbdd01ef6315edd061bb88aa4b03244494ba61c53735fa3778f68007452ce4c9ab32342d6776492ba915eff2dfffda391e4799218c1b61eb1bb166f39efff93a8b5e9fd3702f11f3106ac05aadd4769f96a7fe7b5a34c262ac5987fe071e50b2bd85d349a725e3c20687604746dff8dd92652bbaefb48251d11057ba42f62373023c4886e7d9cd9f210bdd61b2192b59fcf913e6ece05f144864432fb7db47e2e4c1aa9aca36ca71a3d4bf6b488dae7068b90bcfa4c66ed4376981e6c5cc38c3b6fa2ec2fc063b3085e74ca707780e3d96cde9ca4f498a93f2cb4efc0266506a6d6413d6665e2345eb9c88f04a94baaf39dd7d1f754fb23e8f7a2075907d322934cdf9b2d8825ccb6d191decf9b9aef960d928adc26ae4008da982a838ddac229cacdb643ab63e3194e13419beb32e6eed0ff579b3206de3ea93537b8f121c70bc4e45bc7d61219fa5332263e3888bd36e3e60c286b86bfcc1f063efef33148f961bf6a64355b753fd41de8dceaf1bbaf289d1cca76c19921fa1912108dfce49a61fdc24af60909ce0f8d3e66fa81c7f54e3fe3daa079e2697f6234cde20a92a42738702e3a06f3355c6560a7286f0ebc8d2cdb4074f05d062c3fa27f9f36f0ad2d0b15117ad1f08240c29f6a717651fca1fc15197e804bd039674a187712d61147a89e7f4be3f46545fe0d4b4922dfa9781977c158259ceda22c6d4b8b5531a8b95ef5e7b1c5073c2f34621fd6a68f76a06724ca69fd782e8daf4098d9dfc61ecad288d6d176570b0d43e6d1d83cc62c7744bbe79d42595a7e6394c0759aaf94fa46dd3b9e2c7216faa2ea5bc6199c6fd117a71172fc2d7c9cc20495f78159d57bbb47e3be4b1f134d99dc31b2ef313c3e846d7209510852d9740f7be97511e53946e7d9379da353d42f8b3f1634302d840dea19b993e16d95d8f9d95ed942a42d380baf6703f9254e801cf58897713f782f72de25b712ac3e01ab46d228630fe85235858733806722b9e5e07fa3bb169ae6e24e0f4c898208f568fb35c1087cd82c0bf1af86975a195c128ab048a9f30f7337448461add4efb39eda9e6e5713f86d45dd5df78aa14ad0d74626f53d52ad1dd46fddd7fdfc318405d0166f27329005e67d4c927776da54ba8cbd79cc556e4d97a3a7a262232e8d172be55321a3caf0ef361a697828b636486d1bdab1256d8fa81e24a6889653ce7cf9d41bca90e9ce7c102b098d05c146200f9a2181d1d77a866bd171d0d4ad8bb307d21f0e7be1ffc66d5068b0fd3d0f39c172833d5942b874c18f0874d4cc63b1448a0acb4f8b46be38c78d4a61c348d354445f75d6817b3816eb07b4192e05deaaa334963a58fe8e3df1bde16cefe2adb1ac6661b8fb38649174f9812e09e1bfc344a2fab9ef13fed474454c07cf27c07f0a630c41b868af28305e7acf8b358d484249d0cdec81838a93a5692b2c47f33d2e60e09686f962608f11f04240153c9068fb9edfb3bc9150460e694be87bba22edb3c7c35f2af5085dedb57933452721fd3831e09612fd61bd32f0e4adaaefd78a23de5f61c7b9a4a9dc89eabc57472c7a4cb3e172ae52f55fa0bbc7226fb25a9b53be127f88b0c0fd79ccb60797277d09769e7ed0cef2f27e2f71b2b470e2c49de780213de9d437c50b1b38e75e21bf0a5afa5e4d4402d925f621eed882251f0503c2559bb5c2cab59994d069160edde3f8e7da291d92432b608df54b982f66a533676ea699303b073fd89b8f403dfcc228d8243b5a355a9da2c474f8538c7c38354dd7f25f46d7662fef3d7c004beda83e14d31dda5a27cc66bb81a3855329ce9db2d85cc32bbd438771f95218fa15228a2068f430da68046b1422cd842220241aba8072d551a40bb057807701a4909bb2ecee97d4b40c110ec0db860217406bc6b44a357877f758dee9211a090e12e6219845a18a86d18b388a9760d03df8febd3aed8286febdfd4b1ff63380a45a8774088f1163256dee834586caf6f2de7fcc810436f4328f5ad89e8d8832406e83b3e021794fed21ab536f823dde46863afe21c17f0027501327ffb582bdb941d1e99adfea3a684afceb3f17a8ddf9b61a1494b2e041eef04ba85d84c10e928243a6c3e6aca2d0db10650c3685133f6f9805b0855147548423b1258d6c247554accf2e9f4536b064deb42dae4dc0bc05db0b6ebf36a95ec2420d046f60e14bcf7c1156e23cc9d345f84ea91383219b41b46c97ef08a52a1c7f834bee1723fad6b8aa5adabc11739f02d9c795b5f7f6928a8f7b16eae248294d26ac3622561d5ad86e173bd3a64200cf3d7b274a988a1cf3243ae9442cf5a8393d091f616d775b9fb35165c171ba716f2b8a6088b6bba02dcb5734b69fd9c92053b156e5b5e7b214739d8542dc9fd23e8e0d7de61d8e350a7972e40d4deb43607f4e3081afb7262c25cd692cd68385d6fe8f0b29477e4ae776b6df60b599a6c99f11d6829ef992fffdb1f568a6f3f50901b6188715dbc96caf03b9d059c1d72b2f2268604a4f5b78f825adf4fa26d5a2334519cc0dd2d73920d3f57f82839c792b6c6c04982274752532f7891ee20d4381545a931eac5865d73f51b5962f37e9cb440f46b9d44d3458fb53ee432c6d6a84e7e031c329ed56b406b7cdebdb1e9a0b51f328e460c82bcf0fca9b7e4337778b761731a97d05029a784682854314463049d1c1a2b7ceef11cd769530fc0a385cd34c78bd33685b6b41d5d4156a7d237e9ecb7a26212c41b7e58e6fa2830be61a996424d9f91c16e25e0c704be34ac5485bfc2a114403d0d970db01d62c81d15b84b4df05afdb44465448616f18521c88acae77cea26d1811d5e34883b442e3e9d4c81224b6832134fd04959a290c5c8c80e5c17ce239aa77d64c8a8d20ed1ad231ac1847c06568fd18514fa550600fcc0e740e02162b9f239b0ed2cd303a8ad812c6b2bd6f6d43537a00913f0ceaa0df375b56aa3a0e1232ff03ed67c37545a7a39c230fe7d4fbde6dc1d2af72ab91bc7fefa7bcf8d4647afc724badbd7a4145ae6b1e84acd759c703b1a473ff5307048a1e8263831f35b1e2672034a8920ba7e167c52834b35125ec02b1c005bbb767773028386a57c3b38dd2470fd96a43ae2a51f79cada0c28b4b1152da71e3f88d2a62376bee4b8c363a05127de747abe02d9d1bd092cb182e7fe27ddb9a8b730cccbfabbda78e0ae6f1698a74ed6b0c88b0993b6ceb324357845f94c1c312b9d88913726a568a30b394e47c9989ad925441db754ba44aec3a71250efc7ab4077079238728f3729ca91e915c60e49144c58e4f29bb18422fd93063ad1154f0aa3acfec94aab18e6f2147e21aacfae93224ac4cd009dd3f5851aee589e536ae15b06e3d9331dd1324f9a9f5b2a8b5c015ff992e500c7aba7c11ff7f85729acd1e1388facc7624a3be7adae99ac529f464a6d7275a1711e7e87a0efb82c2c1588d8d0532359dea95f22910e2923a98a1d48e5728f9b0ef45369bb3db3976570ac71a23cce54a3caee8f14d7159c1438fea6b15d6051015c1dac6fa652995a5308f344804c41bd38e34cb6b37cade1057596b8747a74ee46641b269e76bd7251a2401571361cb9ce8390a7ae053b94a13ca5219746f8b23f08228745d4fb1a1812427f64041d20221fea5c83bd7839d10b4632e911b98d70c433a9ff16180f0e1965ea0cc2ff78ce85dd2f7894e870f85093afc6de602e711fe0a98340e59099f62ac31f9d5d1ba4cfd37c9a21d3a262b26367a3ccc24e590195768029365d059f365cab3596efe4e6c67170d4120df70ead63f93de86fe9e642f046a3302996e4fa393fdbbbbc11042c1d683cc527c506aaf98154963893faed115bfe2ff96f7a370a5c8402f1b293b4ac297dd4ffbad5cabdb3cb974082d2b8f080586f9056a0f47bc0ed8a39de2f83339a09446b5341478e659df567b3ea22e2c08b84d87a13422bef27c108063edb4e2df390f372ad412228d4d404f5f8f5642a31a7ceaaa7524ee391ce7dbebe8cb047183bbf3e69943bbdcd9632c07c358aed39883f2ad48f42bc2526a027120413b4cc3cd36a33c5079ef5c14463610985d4233d604c36d573f98af1001716bc7ec1be962db1061f3b76c3b86c0f9fa6e30540c6a2450e51ab5a3d1a7b6d728aa1d0ecdc4a4afd0fd73fe8e69815240d3e181030e221994055f4a1b09074935e1c44d048af389538674b10a98b0bfe66da2820925ae324dcf3519caa6535e976141289e92c1cdeda5d8b51afceeb1751d97ae2991556bbcf003c3c0b533c7d020072ea1c0b89238e2972c2074cd11abf724a019bb85072a69b5adea50bc7f6863161b3f876ac4aa33028ab9f4ddf3c52a53f432b36be3fc346a5babf2a0a88262793266ea9d4dcf383c8aa10aa588014280e7e15278e06395fd44d8aadf22cf37559f7a56978e1ac8f5fbf82b757b9d1c82cdd3fb1f9d63b95acc41bf74f7d3d6ac0525acd0678e42d5a1bbfd97b0bf12b042a236b94f0773bdfa0ef9dfb2beeb150d9e237918fefccdb5d36e8668f194c9a02e43796446a688276b67f64e41dfb74f2bf0673b21da56ab15ed3376c073eabccded21c958ef2dfd39bcb9b98ffe0fcfdc6616bbb891f3449fe600ebb17d43a8db5fcfed7ad68331ff20ddd762a7a3e47e10d23a7ced1e310364f5a54003ca51dc91b6523bbf00724030661c4970c388d5c83f8e1a487e758f5967f8254b1aa63bc8bd6f8c2c2d8024d11eb358d2ed597b6ebbc1894d9461bd5f1699e011b8df388a3d136aca4f5a1040391a91ef9f5e02ce310031a6974e10b48003319f0e60fca65247ba14dbc57b6eee328c6f9eb627ed81dcadac1bb3b1c73b2a5cccae9eeb936c716d712dca485ae378ada94702f258770faffadd556937c030aa91671df62ff4f0309ce84dbcd472e6690ae383be844a74b737800b5a106910de8c0c228c22168024dc0ce4d315170e3eca18b9f0f03e0eb72a28f05a21a262d537d39d8353db95d619726cd8eed685b9e4824ad6537c11836bd243c58291373efaf3588a47250517033df7d1931b097a5dc7e6b85ba098766cabf3035b5fad549978793f7e2f49a78cff74937ea0068e2d8c112a52614e3fe62d8a515ef0e855f392d29e6d249480d63e4263eefc8be8b86b4ec22309821bd00ae2e617cba8e946127ecf8abbfa68ad585dcc014c661ea6feeac321ea151c39877050c191b8f19474a5ef99b093efdef5975c23c753e5885b685ccd46faf47c85e282e4063cc123c432530e9affd950f0c830c0aa7fdd3d84f9b34e6d7a0bef2021cab4487a44ef074ac69290bf8a2c6f750a56f79a4479a422be0cdf3eb74d4a98b880450286e5612213425cf923ea6d4432fd9235b399a3e7d4e94d8fd4e5345c8f25e286e2654730c741b5a502b3092efbb3b5b5abde15304753ffbf371a181e96e295961f6207159930bdb1b7b2b8db342a59610f8a52847a0ffb68ad6ac2dabf7738bd1f1f76d48bdc657475a002142c2162a23a25ea889da19b8f41894e4e43e665f9a103370a4d3e5743d62ab09abaea2088a346ce6dea85e1bbe0b3486473a70899cdeeb77c525a3d0c037a6c5dab3b692208800a7e943446a963f27e1f46e63ebd113857ed91859a1a5455f910c1a02939b249494e7ac9d5623d17d64b59b9521afbacb2ecc7784970bcd3b5bf29a5a1fca89821a05e7a30049a4562c3e55f1629e22f76d3fd1ff74daf37cba81553707ce7a368dc6c918defad68b4cd817b89f9bfbfeee222566781647bde52ca1d0934e68f00578d91940a83da3e8faa98bb4a68fb577a4e1273da17ba247a2b412bda21cba03ebf2cbe614d3db40b8929ca66df1d47dfa10682baaf7adc7fa418285bd496bc1bca5e3d310efd619031dc3abf423b537913ba93059bac74965d0201cb93cc950d2e2d914cb2015ed8946ea714e9506c099f4547d5714a339bf57ab84f9371b400b48b72d126c5b03006999b53fac8ccadcd43b3bd14e0872f30b9cb03563f177dd43290b25c98978afd27e57baee6f16bca84d915e72e24ebf7a3d865e18619c9d116543b94a92ea543ba6dd0175e9ce49bfca44ff33c950f7657ba031bed4dfe598a44d6be1a2033f8814c9bd2e899117eeb02cec436505b45e7129e56484b566c9941b10293be93af12624fe18386626d6d42c685b9746f1fb84646171531b32f3222989358dbcaa84cb8c5be076b5e4cca87c106d347134ddb368117a958f99d9501bab37f61dc25ba933307d5ef7d7d123008f413719a2f4489eaa82358cf0d69dae062f74e86e867fc4ce0fe5a2f43e5b5f41109dcd6afadf00d90548b3e288827deba9df16d06c9e3dfff4df00200e876483dd0e215fc619f42be67d6669132c628f26c5ab75d96a600460293501c0ee31c5c07dae3cafe145001cc0ca1f18f03d6fe89695a8867504cb36f148bb931c6b60d8ad3b5c7982f21d9476f137675d136623fd3d13e8e060e780d14959fa8772b95a758b5276db7e4798f08653a47bf3154ff1fe2f31b1a307293aad8cbece447a317469be91bead6334b11bfba4a09933f92e700262a95b8185950919633fbe3347110decc6d1e6a9e21be3e43f8fa56dfa9260223a65f453079aae02c8c75a8aef9e6b248ae5565b97cfd51cc3e8f0acd0e546e3fedb6eab394b0175dd771cf0ca99f9417439b9f0d0ad58d3cab7472ccea8664b5c3924edd786e71c268ad54937b564ca12cb9e3ad8c104da2addd85cbbdcf7ac5721da4077c8495ed227174bc0ffff735ce7d8e674eb0debd4c0ee4ac155594aa82ee1c3d7606d3167f057581a077c0230777aec218691ba568c3a5c85072d8cdaa443a2bc69073ab89b73bc8358c1bba9b8b183be2e9011a6d2b8d455b68d7aae87deb1ae15ec0ebf8c96c00ac4f3bea932bd0bad221fae42d3df690b0ce7a737979c0b3bea3731968a21072c2d695f8d550d44f4e98e82f5a7b58fae969a5e732b359f7459797c7ad571c45db1fa5dda100534a63241f0b59dae0cda12f36d1b52bfeb8d75a038e6587fa1a6448876a5fc162537b671e31ef5d084dbb3e0445b46f4f255d4cd91cd4c13253217a9231f6e76c3d183beb53e2eecee5ec90c421132a92ec17b69c373e03b7dd0402a2f932752b4c8dec49d5282295f706010197c05d00fe26f2675e26f3ee92f0489c30f3d75dfc011d2b172953a94b21a38d5a1ca25184cd9b00737c14beda9cd7e7b88ff24a76c6263570040f256ee0a734f8080dbe1be081b963122da7322254ac6480d735e98b5caebb6635f2488b4e0c63653047a6f2ce8619d583e23d478f959833fe94366217b19f351333814a481dad444d1583ec89b97d64804048c8351f3efae988379cd7854a8e0c460f17bcd18d802a01c8dff078a50176e963db0defb454c104c3c1574586840002541bf754413f55df220b89ff9b41ba0b6a637b7f51532befa6f117664bac09afe5cc5e69b6923e78bc902cb80726fd4ffb6067b699ba6521fa36d44208499bbc90f5784528d1ccf79e6ba3945c07ef04d4c9d5a58ee22e10f5a766e15b1689dc83956c1e1ee596f80b0cadfbda8e5ac4312cb38e7799d57527a1f9a87f378923c871f48b4ecab9606eab88e355b33d639100b1d40b5e47764514eda2e75b8efd957e7f6aced9c3ceb78f6585d7fda1433d578f342322523c8440d26c930abccb0035c7c8148bb7fd37f4e498e7901eb24edbd404efef331e529c868720139ab0d477604b2c91d21fe52fff97832f852691d3cbc3eeebd0e0fbee9b159f486f51b18ea75347ded6ea5579e600a077bfcb6f24ec1248f635d664e9f93274d33873ac8bb3d6b03b29e7255326e117d517dadcb03621800b107060ac22994c29ac85416e8fddfef5337521570f540572030b723d37ed7c6b39848b7775d71b31c4acc6b70cf6cdfcd83dc4f39397ce5c3f0b1e345f6fba3310ab3f09765752504aaae758ab44e7a16182477e50e6af40ea391ff12c8f9046651ee85997c9c673a4099dd99fa327743a8d389c40c5577384c1adff815fbf2680b46df4fe1107d2b9ce1117ea1933cec7a095e680832586545bde5045613627710ec89b7ff15af82f6d054366d134df5062f8a9acd98d5ad2cbced9e188181ac048abc8bfc1b08ac467967fdd233f48cdc7839981ccafb18049c144d57cfa38cae34380aebf08ee9a6c17ac2e92ee6103be868cbc04f0dd8ebedbc65801b46da061e8dec393d8d81d7705fbece5306b67ecac0abaeaa02c1d9321ccea211b7a115ac621d54b26cd9b0a6e3ceeb5d745a962cf0f2720e7c4f9ae3343e14890635071a4fc5a2a49955e305470b5edcfe0f5b07d3d8bb3a19eea34e86b81813fb29f32281c3675ec3852074f59a8f7c8466aa4119400c0c0573c2d9ed7de767b7716bf29b73bccaa3714f1319fa1fcb67fcf73f4f067c0b0e387ce007ce748df4a28d2f85d50217aef9d622cd1a5efbe036cf0619addf60a88a0fbea81f023a92d8fc90ed665bf1d023452a53dfb2e88c63c5997341f39d2fe86671b6ba48344a3a29723092536730f6e82fbb07d8c90d336828a7209dc9cadfb785125e4e0233258e365b4b1582bb0e38bb498c7f7d227e36748bf007c13a38fd48c6fe6e55bc4ce6cbb53bdfd6306dcac694d49572ddfd542eb670faae750bff981b98bfb46848605a56f34cd26f7d212d52f19510991e3a00e0c5361e8f0890ff8746c2ba191d295a0af6edec142e7caf095673df8ba9bf9331eb7cef62bbd749e79a2053a9c438a15985da0cdeeb600311af13cebcbd3cd23ebd4158863e64597a6c7021a789d6c3380e01854b31f768d643a82f79bab51779811e3e23bb99c84438bbf5d6ff8811b45acf15214195e137536a6553dd2c375d6433e4c45d03af74d6edb85cc8b3fd2bb0e0786fedafff002882aa04d52cb01283ec258c11121e1967b333f1681a08e7c86975b90f35622d3171fe5e7c4703aa2afd665c50666ee1d63c2c0a1be7d4e1b585734279c6ae7d8370ba93e95e367708cc968529230b4867678be3ccc78d475f7401972877b6ad1e961a1f7c2f263482408964d5158a13ce1583a3ca8f36d7451e6d071c8cf50350f97ba4536e7001a6b0a346925cd6b9ee5dc16f2b2cf05a99f2e1554084a739961f1d5a11f3cc65e300c3bf22eba7a89a1d50c59c692e8eb5be0f4de6b1dde4913ee3934864128162b58686f6ddc587a097e0735126a8f34b9cc105c99b34ede8b68756f2d6deb4bf276897d3d6d3d6eb1b13b6ed2dc3e5bdab66ace0fe0757937e53c69403bf0dd8d7b191e47d00b28648e3283367a1a978f250d2d5ec551a5364ba21b03fce4905a48b9908d2d4881417d1cde8c41beeddee5a41dcc292018209ac57003e93cbee244942a32060cf051177ba34c26a401cde1e1263a33e30c3a88fe7b847a702da76efcb4932d5b9817838b7777bd80baf08ae44c28c1ca9b26d09de0715504812d3b7575042ccf4679a27df73276e09572145aa961479d5d535a064bd3b5f7a5cb207abb5ae56d87532870eb40c3f650779022fcadf9bcdb48153d34b9f9d792f600e826cfb1e56e110c34683345ada175b1494406d5fa37d9428031d6903efcfd0471270709f1c23076eb4ff9d328a764cc4d175d362e3705274e34ee9218dcb26e4bcd203203ed64a3144cc37f498391c2e0262c81425d0e57d971936ca6956299881eeb8579266845022829e45891d2ecafd857618f7b4d30c0e6491e7388ec2cf4f41c6385b755104756620adc701a2da54a46246b3aaafdc510c0d8d1a197e9024cd868a0f49c6ae14a3db190dc716543e591d135da2cf575c3bdc0c7b909b8da86c18b0194f1d5f48279de880e36e2c26fefc0e37486e3df3c8e38aff2474f11e974c967903d9de1162bb90bb53d7e230a3f4fd83414199aa60a39a1a22b47a9d579566ef1237583eb97bf5b42802c256b166765c7e08285b37d722c296bd2771494d3669efd99fcf1399b59e7cf9454a94e88c7e6cb79750d785615855ec1884573b00a801bd156839671c710c8308c8250e142dcc7a28fa554496810c724b7f973be7d35afeb719937d0d03f670abd5e225591d9a072fb5fc260668132348b24379de82ced70e5a07bb3b53016adc02901d1078f5f731a05b1cb9e35eb1e29cd1c3dd17604e33b75726870f53cde80deeba90d104e1d95a22db304a862e2439a85edfe462f817ad9118ea61f89f5e8273e6c4818a6e88829545f03af9c0c7ed5fdc8afe8b6f33bfc4a35b4d488dfd3ee64bb1c62cde038b6bd09c7428f306d7bd3d27d49cf39379c9aa7685a229b5b4a8437abdc70a2eea9f2c7670197f68d5fe4ccd7de97a5ce4c4cd282deb7b55014e38bb896d8bc0cd3a2dccff8ca50799fc0a67ec350fbdc46a81bdf64af315b06eb8631c112f19630d4aeb6a3d153d8c11ebd5c926b90665946e20d38f225301b4f82c117a0e4030237dc07464f4775497a72c327c72ca68005d2c87beee59ebfd9b91831a6b961044cb2872e6d4e8650148d53eb9cb71e4876a5ed3e7a6e8b6ae74872c88ab48382afaae92104f10b0eeb8da30b2fa47b998b36fff3474925a4f03ed54e1a12b8a69ba31b225798cd9aaeefa7158500257213126ae6a5eb95aef1ef7cdfaaec8e6e4649895fa619acfa90c40dc22fef7a7650f3fd63512baa0a69bc9d8cd2a4a227aa47aef7304c0ced6f32f5d54ba2f58604148751710e77f9ecbeba74093ac28078c76d8e24937c83b0e63f929c9f5feedcc655ce37198848b22f3adb2b2b0b24a7ebab3f7d0bc645f611ef17c62a9641113ca2d6613a56ae95a79aa92ca681c7019876db07eae91d7955d3304b3a976dd3172652c4829c7a5e1fed1d289e79f67857d24cda0c1d54ef1851ae505e5fb4321bdf88a13f855908b43f709cab88a7a97bce23f6df3fdd205b6c5b366989324ea2708e3772e98c41348c3d976bc450ab1efd499169158be7ca220e4cec1401c5e8b6d9c5c5838b84c4f817b960f1962df3aaa21e3e1c6d3f1f7b3dbb5a9b5051b75e3af810ac12c95f98c737870b5c4b9f05db961aea1fcb02ca2266c18d0552f7dd882f6c5bc2f473ac0cc541e5454f661d0d696e8118f1505bee6b47e630e2b0f138b9eed0d57c6bb4b9564bed2e4711769bd2f25238276769f9edfc6684e6b772a464edb53c72121fb4e7b6fd954a66616b195d4d3daac86a3c5f6d59acd902507358c8898f908596122b41d573e56d1bb2e63c1a33ec48c577480ae8c2d16dd523d3ae1d94fc34ca2f34dc8f0c5f3a64993676321a3d75566e170e9d33dc2ca3665f1cf177e9dad73ad350be520e61d09a199c02996f9c57f326b0481bfb39b409f5250ec702316b6b6602b7bdec97a9c63b8ae3bbf1c1a5f4087ab3156ce10f7d5f7f243afff470ff09ad8b256f7b33d8748da290f5baf255fcb48879dad90127cd39d2d5562370f9195fe01a0c26b505a430f6f69dcff76b31a5ee9f79248b541a77bc22982c7553287ab4444c66f22a729942256a159c740b149d12be8e789d044b70ac6cfe431357f4a98a0de6bce44560a0b1b8da909b29c6c6fb97e54a4f6d8d9bc3514d0462e57a709ef6621cbd75af203a01bee438d056c639404836177507870fe741b1ecd9c02285b68d20ddf2e0021232e110a170eca9225b9709e95f2fb59c93e65217cf3c97c0947e67e0a25b40aa8139f2a9eb93e4bbd2e0ee495c438580ae232bda34a707f6be8934ab9ae5c2ec8ad6a7da9ed18f3f3d3814eaebb22e85cc5292bab1d6afebe9a64344aa4c1d8f9112bc64879ef604ccfdca984c9c9633d0ffd1779a1e435cbcb92c24eeb28d58a5bc0c36723849d0b2b51eb0d07060777d78543d8f56b665bbcbd3d37b26d1f4d7fed30a97f4ebb868045996d46b0a94c393b1696bfb4f2b82a2d4fafe65c88738a2e670f342f9d5d458ec28c918c369d5bc52fbc7d73a0ab97d23324d8d8be03d5908798fc1f34359402a3d73ee66407318a0841d61e81a7d5a5c4a136223850c9da21590cbbbce19590cf14fe7c09686bc3b3842695aa5b49ae2819b9f9d5788689bca5a57397597cf13ad4ae5fd14996032cc7e25eb7ec5ba5144a82fc6c9c5fd11a484ba8d11880017f8163e7fd6399ab735cf57a5fbb850f6f0fa40cb50a6aec2c536c75613a86763827099e5b40163de4bde637bc1da3aec63b23fce7dd48d34b49c95c113c0e2939f6656832a5774759f4deac3131802567eabc3bc6d69e391a6d606ac2aa17dbfa6b3d038ab057445e703d389a96661380d3fcb0068ce9d6092fa445fff519f095ff8170c5effcb317e46fe3c23e4516cd58c807ce8ed67ef9a6d8b7ddb45237204c20fda918afa83963d94109ae441b14b8754be1cd44e4495df6ff8446478aaec305477f886090ef96cf952f4e1869e6717228c328beff160f210d594d1dd177498ea711b8a5b05d1d7d78d614a3fd82a70dbd4554ce6fe31acb3fe02fb8729754c462ad7325c79d83a975176707677ec148cfb59d552ca42f967ed10e012a15bb55e3dede939f83377ce2af6a26c4b0facb0472d6966ececfd64a6de1e5bf16acdb02822eebf2b0c58ec31472e1f27b9df54af1f1624da2e60f3936541b825bb5972416f2fdf282bfe757de1833d73c661fb46185b9418b438c9daaea6ba904e896bf324544b22faa1a265a6d91b19c9b89b3d5995a0f60a4117eecc7bd478680e35b31a0dc391203dd9537de31a9fd2e2c1a2dc4ac355fe34aecaa524c3437bc8034688d0fc1bc8f5fd447e41ae60ee4ffaf0b5bb294bc1a55a093b719cb63c3d75a29a7c00e6b37cf8e59fd8ae13a631b64fcb56ab683245d0581fff8f32234a1c68d9d156ed2f29c629cd527e3ddd2d687319c177f34b58d2029007ebce890d3b5adbb993bbea8f853577aee005129a48ec2d80a1fe305f22b1ea876c2c49f5e3cd71175eb5690b0ab4751702c4d654d916e0d157ad6cfa999b36aeea71263b80714de2a125231c4528c1a70ee22a83f96654583acdd3e7944268be7fee55395e1af31944dd6a879dc478efb881896a45f741574607ba44d9ff8e4bf7aac4d19ef586a588731400d8dd4ba416e3832927f09aed3f38e6570741e2cd7c4ec93fb81895e731e927e495822f32064c3d72432f328b818a4b63a2e240db956be73698f17d22567f5df08aee292abb0e5fb4938efd96e43910176036cb894c398894e189769bc20da6ab7b1f7e70489ef43f004a8e2ca860a3c1345fcc652613d9101db5cd3034c6450d7c87d1eeeb8279abb690cbbf6ae94ae3be7e35c5dafce8fa834669f96f85a6a04798ba848d079520b0a3e883c2e9b1689fe3ede703e235942c3f1e1a22e18381c52d17bbb1794deb42a44931eca1c58b1307991f6f58c09aa886e9862000f53ffb23409dd09415d633463b9508bc58cf8f927f1aa95a81e0cf2445bcc71849ae211830489ebbeb2df62a5cd1cf8b07d5981f4fec084fd216206bf8effc8c751f46bbe330f80ddff4cdc3b29043c6f0e1da38e90c116b1fcb983a366da50f9e471b83ba6f5ba725d910bebd3acee174b8334a7c54990b6a6ff2662ff0a410b643e228f52a2a7f04212878170b5f69b97aa3f3868da7723555fcfe442fb0e8f9a0391cb7069791804ba65993d3beddbbf4384e0b22ba7362a46fc5b85a79efd9c815d3af5631229f579fa5d96bdc73f5ecc143fd574bb77660c645a346a5354722b35aa066c195840defaa6d483cf32de3c3afc4b4e4f8bf4f7468d2f9fe8bb076a9ed8f1b796725b949c46703905c0e4d1a748ee7db6464bc2cf6e1a7102c746706a5e466689b066337fc4322c8e1def5212a0dffbe2e1d3197aa3d5ae84d1fa1647debd02c32837e422f018ea41d95bb5878db69335bc485d9deac7c33f9dc854f42b13fcb4232d891814ccb8c5b92493e0bea88e3bf659dfe231513a71914310668c793beeb4103baa79a3d76b7b696a6bcb6879b8e29c805bc3f1d313d454064ee1a83bd752a2d4061ac28de84731db71d0e8db2bf7e377b054529828ff8e417425cf428684104ba49aa1833a73aa56216c311bf0f4b6729fab8ff9c0dd50c97cc4793b915dd6b4a82100d15f83cf8024be4eef7399d260a25db0a5c1e4f40c61747f75e40cbe34665032fcee929961a564cc8dd0cf24be797b5075d190475141eb6754741d022c7bc66479e6e00b11af6b2e7d4a5c235fdf09442b2af8ade0f7ace833dcb26049aa8b731f963011bb1ca0fa908f833530a96d04d24d655a7b24a427949d4188ed396dd0fbb042943351b43764b9eb44851ae71d546ebf83282ec6806e3ad05b23edb46ae5a15efdf2358f64ffb53bef72011fa776c2a3e83f35071a53cb64b509780f5225a4eeede07e951f92d0c170bde320804799714cda02386a890c94e7caa43645dc31b3a1bf12f0a9e765fa360aaf202dd8d606a6f9d890f579d32f0b9d2782db35dd07a2336ebc923b7647d4b60813200f289704eadb4c03a0c7727d165d55ba59b1376d7a74c4cf2c7011bf35b9234bf1b22c5c106f27f0147a79400702c5290fdf3b2afb593ac2e6b58f3110a7ca56a2bdf2aef0148a803e0832f56777dd90521e92966b4bd587b643a37f331376d6ff301d90e35687b3d88bc8c8aa9447e2281d262572f9e1ae046ff586dde11b5d14e41f8e30c8aae20e53b602f018d25d1e0f2d2141e660b90b019e322ef1ce765c0ef2ba96a79c10e7045410cf58eaa2fee350b5730223e03c38e6b6f4b9bbf7d629dc2c1880604855510afc3e830707f7b96a25c815d59bd52b026aeda360508e35ea04b73f78b530c32f01785f223ed083062b6ab28684a809d7b9bce50720e9ff2fbbd34038b672a36f6ec1bd810a7c8c6833f7c37c4191a9dd48ff4e54ea9bdfc7c8ed0dbaad16ebb56f6f20370680987dfbf08f83f8ab1491aff98b395b353c50dba16cf7010e4eb8dce1db20eb0b7d643fb0cba88cc80141e2d5e8603f022ee5656a3c2f5aea0caf6e5e32bb37895b61c2c4b23a724e8245097f6e55868569eae302742323f80503a7cffc46ea71e4790fd167eab4e71b711671f95b6f43ae542685ad39f22e3bf14892b600cd5e15f315b11672c4f3f8b467f1a3b8d387b08227341c62e081c84e6d40bb259b4200495b25fdedd175be045ebe22c833f0c94128cdae642e0de7c273e11a441c6a12e9a0b30133aa3dc3bc4822c0f73043fd783e63fec1f3559476a4a82caa9e3268967f044f8f1277ffd712ec65ff1708309f01bc41cd20462c4ddb71122697d5884739ba9b52b90f3559b3ed2fa5292bfcbca1dd743ab67bff97b0308dbf17c0aa55199a995f5733459cf1773917a8d8765198bd8d6d415cb68b39e89137af4f28fdaccd2b394ac18449b5a589ee8c0a2245c9382750c36f38c7256fbb6a13cd1ade840bb2679302f497dbc37433e1901d733de5e619c4eaf68010754e4fdba458204dbcca76027b6fb759dfb201ae470cc8fe677623bdf61c7cd7c8122fdedc74a71a2ba8fba0e1c0ce2021378131606ac18a00abf280b7cfaa88b8f9385053260b9f54fdc524e0fba91a7731dc81c6a7a91458502af06da36997ad46e9fae1604665500b5e51044e053377f01fb36c33607cb2c3e75325006e9c4983cbb0ff99d00868d5fd31ecd776700cb379957f565b3d873b5d211cce99d8fc55a83c7ee2e932204d42ed568d562100e0c64e55314c77b981eac5af7e80422ce74c77c5da7fe7f0aac99295684aab147dc4530ac6fd093f33f81a7da0f3a9d3fb10ab5410713dceacf47d8f0d20cef66704eab046883da6166ebf008a5070bf854b901bc19875f044236eff2025d958b26697eb8e7035922e994f9c0c143a2336ec4eedbd7675d0266caa93325e40fab7d95722de73f63b094b533f0dea4449701792e2dbccca5c0df497d7f62ff289753edd437c7174847135bc5d36ade66d92d8f307caca1d625e6b3c9820500579f986a393aad6f00a65434bde3aa23d10fe8869609e99182d110f8d37d1ee867bf072ef7a0438ee35cfba31dcaac30762de661fad0c83c44cd1e2dc987e08210e3c8e3c67eb643d310f117251bcc0d33af888200f1a6fe1ced6a7d1b5367735bac90a6bca4ae7a3f67e69deecddf2d4cb5a23ae4740aa0fa930826ec23322db40b181bf5d3077f2e813c305b5ac1c5412b6a73ce69f8679179f2ca41c5e797e9e55c708ae2a76ff65fcb5cbe492593455a1beafb7225592a99633c436038aa8d1bdd9773e8b3aebb953d6c1f8f69eee987df5a073e95bd1e3d4a2fb8b03fc1d89534007657af2c43584578de20a26a87d39c5f8a1b48eed4d4dd1c192e525ef1f07363c08f6997c124ced6290d6755994850b39daf6c59851f95d9837fb17dc1c009ad14ebeaa3f53f7b4a02f5676df5adecbf5d13768d434f689df7da4ab9870b324b944067b8d80442ad9c2e22852b3d7f00198101d10acfc6732d526f7eee0b5cba79fde0ef3f21edf8a49b859b5da06f4c87a0c28a309789ae0fefaada003cd2c72e70263acfd27b8ab1a508da08f6f41cf63e82ccbe75e09b6bd12dc3a27015ee914e4cc11e5b04f0f4a8f2089a4e715784569bc5b8a1031422dd21a5a32cf4b87973eab7aeb06f4a0ff3a88459513c7532320acf17a043beb71f264962d71203d78314df83764308bf8c744358f223a6154273352f320b3d9dad76fe84705bdee1c7cbe3f5549c6747efb779c8fa29385dbe1de8558fe5801ff93044c1df37d0c32700d2ed03428a77d4a7b96d97d8defd18cd1b97ecf04aaa49e88c75ec42dcac7bd5ebbf212c823cbe49234ec4ee97e62b0f4990eaac2bffe16d8c57b927192b6660685442a6eb574b8d74451717ed66780870e44c1a6f8bb3505a757b8a86c7c85d17862c8a53e9605d4a83e8f5abf7c503bc7018d2ca9442804325f5875d7e2f7f5856eec1f9a38f129121f0ce761778bc82a198f6cfd85c89cb7b86d4f11387aac9cacf50310243a24e87c76db9e1c879458a70735ceb8d6d82d9c273ddb8c33f33d7b3ff88582dba4f1afe7585b3740af5a80ad72b2c809ee594559c539f6c8058678acd881ab35454c83fc6d859b58f37eac5988bb5ef205288dcf8fa1ac21cd6edb390212af2ac792b9ec55b7fb7b695085c69cd151defedeb4740c3d113523e4c860daf29e4a91b8fd12da571ad38ecf4d217ee6ef8c37b43c24dfc468f34e18569aa7b0263e664f03666642531e0d547d01d09a09faf962ef72b50dc77902728f99956154eff34de1ac27bef25b4724e00bc77118a01d47b4609f768a3e8271825ee95160be504ec07d49c6a64b8b8f782ba059736249be50ecbfd8b80b53a7392556995d76b2644ee6dc47ebc8314b84149d177ae5e0b2be6ca4f2b7ae39e64bc14f0d2ac50f020a973425ff550168020e792e9a65ca300603b0970c95d41d1163fd6f45c82e1ea51168ab48690d3cad0a1002da8db9a51d8a91d09028afee65ff28cda894275a45a6dd12eea96f5ec68d2b851908fe6122b92fdab11d1b8c5033d3f6f17eb8c0bad9d176f67727c8e7eab33bb314c41ee014d4bbca0eeb002729d5817717c153c7820e4bb0efee5e64da21f44cf929ad4870abefc39a90e9f0130d45e4ec811f9a2a1935817211401511e646f4205262e6ab853fd353b8373c1a9031f4207537cad5d189b9e5427efdf6ab020adf783d256742d237dcf8fca8d77e99015b9c6387f3d701004f08316aaa76ae73c9f5891a965b85546bae5c8e10a83a3f29d9914d10e0c9ee0565897fca935c23e17992cdf1591f1bb960ab4ce0cedef48d71cac065722dfe1ecdc2f23d72b0fa2830e67e936e5ca714b932bc0f4c8092c2807df00275b827d7216cf442e41282008b450f3001b0f9864ea5b8bf55564f656900befb9c3ba5b2e30c09ef10eab8df6787f75caa08852ce44d4a552be0c9ec216565339c9b58722617ca80d6f405b0b74e95b0e30ab828f99a311623aa04fdce9a554aaffe84431b064aab98db7bf4fd3e2b6063894e3ec513fc73a94e5d6b0d0b0524fae4bc587e86d313412ba9299c656686e07e8be72bf824aad980189eb308ed0b3b7fb2e1db63c39c4d6b2ba8549fc0efb571e70a20503e4bbeba8ed5fbd1983b47d3a6bf43f1341b6a4a990de18d6f202cd9acee3a1e7222965c36df0dbdb7e13d3acaad2d876df4f3f667030508c68bd75627dd07b12dd99c5171428234aae877ed7eee97ab3959db40505759d436bb288ec4b43ba10e7d70d7c62630c8a43de1209632525a488902e935cb36c2d137606a73cb5bbf9be1990b12abba14dbf044d6cfdb41c55782b004e50c99eaee69fcf071a3eebc3047ea3aed77cc88a095807a25a2f7e6a4e8bcdc84d0d20fea17b3b4be688d429e6ccfc73e3a80b7f9636fb15552d2acfb62bf33db3c430696987679f4a397f475f29d24697764edc4972c399af7715c4f265c76b68f367766ccec56f9f5625a8a60fdae7f4188959d2f2851b0ef0a5045a5884faa2a3e68b65223002578fc591ff4ec711b846faaa4905e6f43d3dbc08c960ec432e972cb961ea7659c31480ebc131e5c713e8a9116b1e579d3cff109b063266d9dd388f2837727a8f610b47204f96223fd55038f63ee32c4bca170f872dea9bc9e0f9841aee8144ac0c70e2ee3b33954032ac064951463c18204fd5dd2faab65e9cdff25b9e48e05ad2d7491d2546534869e0f481e8ce161c3adc276e818be9431b35ce484f6297d03bb99238360fab0d0900b1b63e3f7f85ce8df7a3c17790ed8d2dcc315f464fb3f69b3781f5d598d129f6f0357692aafe073b86ce49849b37749d5a0c3688be4ac890766b77119aee4b3525e979df42ec083deadfc08ab7057bdfb4ade7eb8f2bf4a459bbdb16b22e1f0b8aa4e9be7135547dd49ad689ba9c3198143434599bed171f55bb56ac65dfb1372bdae2384f00a6bd3eb47866b5ae11999e191e86c658cf53af68c9a5bbf197d0d78253aee39d158f9b24e35ff7507d0a93b1d76f46380dc9e40fdd457e25baeafda7901df45a9f696acbaac3f2d72ac200935ebc7bbb2bdb058d56c0c0ee044598b81648906c1ad35b8238f8fa29036dfed29adbd39fb6074a661b12f3d517af9fbac6ce78735c41f460d324229111a49c61858baae4db9e6325edf0dd9bd22ac55681ee8c4bf938db4a97ce4370eec102ca532d79e99b893c243174cd6ff886ea29a19e6a9c0fe6af03788cb52b6dbd8e6956a1ef0e58d688b951877d95a889bf1ac724f6fc098a42323b3fc21600c166f000df522638e5624ee00fc57018bf49836f09b81cd3bd3355e85220d5ca9581dacf96fd09622bdcf790e4c249aa4500deed99916677b809b92f388d883bda0f5d9115d3b8f4bc7d31ef63659afd768017b586f550d13009c21647089031ce0743b20a911edafe50fbccb0b407fd4829515e8eaf5c9a319c154d98b6307c2bacaee1dc489db8f375972949dc1e7c91a83c39fde5e7e985abd5f5a5ee418bcf3298ce524f40e544e0a314af4e0000475376cf35342f9290dc5245cf61e5141bcbf1497fa6ec760d1d402605b9db74771492a29df4f877bea84d2abc8018c48601f8233081aced975ac6d9437764afb91660e6a4e64ace8e1b992fe5653b36aa3e685880d16915417b37cbebebdc08237d177e709c62a7d2a9fb8b1ec328635e6db046c32fc459052e03ebd50807cfd82c792eeab4a4f65c970ba0c0c840f8a8bfa3008ca5aa0ccbb4d317030467c21cdb73485f84de2a415b854c46baa49b4c40a83cf171497ec08f317c0f034138733eed195f2fa55c34223e38d38167c549ec6008eb6dbd3fbf366e1cf45229f7131b0e2621296f253e2ddfd0c2d24ebb417ea53f6155c2db4d9214dcfcb04a9b0f9139a5d8eda2d65493fa1ece3e227f2941be6bc2cbe5b06a6e7889f1417d0f68c7d93be74bd8ec4de6e28af50341f22003d74cf3c71e3f4fead9c714dd0a0ec670139f0d64eaa59d4c9fe6d7753ece4142c53bf56c93ea8c7a12e3ce184e4fbebea7f5e14faa008cd2cdb13396044acaa80b1d015a7af8e8d3c0ed38732b7c27131f70bfa42455ec27c0e03789d0f300821581228f18e5a22f18a170680020204b1d887354b56ecb94cf8c58976cafd3352079e7e787f70d70427f9d0f99c74be0ca166918d296accf2dcb194246c4349a7d138d5daf585056072115436e96bcd7fdcf0457761013b247d1370caeece9779cb773e2a73ed54798f8c756e0ef60eca5afab18bdf71327c93e04bae981bd41ae6b0c25ef8adcf2f81141180906fe9f83392e98586925d54958e4423899b95292e9b61ffdbdff6f3014bdaa6b54838017d54edaa55d2f544f034f53fc1f21462a90ec2fea33bf9ee039f331d14545099e0a199b8ed8a4a7929cb30a6710c1e43008bc07e55f4f64c05957c54a969ff9ce79c48bf14c751cca0b819086c928749d2b5e0cd58d6e71c3002f95ded49f183961ba227bac9c76c2b78b1e6d590f9947ae7e4f1666f0eefe5ad343fbe50c037bc4554962f4794f379679d66806694ac8f1fa2bd8c314fe6ef301efb1f0cc6cd31d6407d874d0443e935f379cf9ea37d2ee3d03282f53084c7d9e7463249a6eac66aecdb3bfe62348f7facb79ad4e37abcb4a75fe75e70543b6badc0f5b96d1774382a97472c6a469d15212498445e2635faf0f875d867b84362376db7d186842cc7c17cad5e5c85f171ad95e5929de21b8612afd735297411c658d0464bc443582c5414a0616e358a961737683568aa0833d313201378ed988dee8f4a3a724c218ff74b531a7676fb28bdb368f03df8d5e163b3c48dfd5bd44902d9aec6e28a097f4e6f733cf2e26390abb41de82c847a7450ec92b7053defed175324666e39c394ec01a860a501dc67067a4a7a8003cb8883afeadfa1f48fe54d71ada55fd3856e80b797283d3ac6c3f9fac0afcef61bf50b491e30962e80f87086a598ae5d6a6ed4022fe943f03848144ebde5e10ef580523f1298352e1a68355a9cafc2c55c28a7fc5dd145cd3d1b5304a229faea7510ae9eb3624fcf0fb38ee69c71f0b0a0168b4ea09adbbffdd86560d2b30f19168fd26918d74c147ee877744da49f53488d2c0cbef818a3aced2c30d34d375934ca123f769acd22205df009fd3adde2acade765df9ba7e3c1174541c49cd9e89bcab3942704bda87e2b0a2c5797ef961b6ba5c3ab52f2d3486ad73e7ed0f8880d54725c24df55670c01a1924f275f4bf6445ef506ceda757cbf1922d70b9ba9c763da2d3e5cf9895d24c2783079624e1232bd4dabab0ff7d93a4a44d1456fc8ecb5b2d427b9d55e5b03b5c495344a631f05b6b7687af02cd2a99b273cedc9c0ddcf6b5c7ee7d0102231b33cb5dc3410604826a22c29977e7782f4031e768d4ad751074104246c43c82e767d64af11e24e49e66f24f6e37a5999c5f47fba51200c3837e2656e617220e432f749111b5b4eb9791d608c94dde7bd01768155d9b7cf0f381aac2a7d420e52f1c820e9c4c04b744b340f943eb83b38955fba1ebc20cc6a1843c97309f836fd3a96ebd981e0007bcadb577cbba1b16366ab2eab645cae2ccad10a5ad242e3ad7d372ea7915fed35c59af74fd0a37e8dced4ac2dbf58b89cc07e29f7b78d77a6c7ab2403ade4f51adfcfcb174af5bf9cd669a7ff7aee8af46b144eb21fe6b2a4d2d1961e13e82a624c55882e04a5d02e3e139be3962fd02f1af209eea4dd7900c9941de08eb0346c99725b85aca941363513fc35af6f822a0060470149213103449afbb578f46e53253763a849db9ea13b917a534d1ce79101c9b5c9ef52c743aabd168c92298d722d613d4451244094d79451a6c7429fca79453505496b43fe5c76c8011c1a71cde3dfd91718cfc1213c395c9c4d635092b1ed1524b24e080c09257a8c79fd82d87057686d96c758038cc50985e21c428becd2a6dbd85e280526267dfef328a416ba2a8c6ce773d495e2b77f20f966eb9ce70059fcdc47600d56dda2970af0cf7a472f621ef6433f3166133f6a346b0e0962c866bb1c950b58294a5c438ebfeb0b2a9a9b78c3591a6a6ced55c3090b338c20a0caa4c3cc0e0ec933b667393710bf6cb5c776b3aaea466e11747113cc19b62fa35786855d99f58c8b9c1f5b5102daa42dd5709dcc2f29667f143f2d9c427be3bed1f9391d11973cfb45b2446f90c4d96a24b04890de6dd5a1b7467a60a31ed173c62d2b97317e9e4b6edc3266d3ca2e680dfec0a86d2f643e90c9404f38acdf3f3c2c8136ad7dc85ed934828c51d7d517469ebd94a28172d39689587d72c5afa31c7e560d65f284c337322a3d6dd30d6ec35fa906ba62bb0c97f739b220329fe7e1c89edf0ee47432b72bbe2072c22886f3c7507d5b16314663fbee546d8cc4a0736f48bc6e4b1de84e8d4d89b0849e9631bf2ec78772def2be4a50f2fbcbc10bdf7f2357edb430667b49504d0902c7976d68e11f94c0fbed7cd4a8150c1de440361b2a4e702dd6c16ef313a16a35775b28d82773feafc4dca8f36955721324acddb77ff3519e700c81b0b5f571f0233b2b4d4711398668e478a15c4df775603a253ad18ab30937b000b7947148a22eea08c78c8016a0b08c75f23afee449d47c9195120d4ed7fb60b64a32b944d2940168aebd42af1dc79f1434cddce2bb7e52888cf55145a9c0bab4d08e07a207468c83fd2054e59fa5491b524f12f05fa36bb8b7dca5e8f394889f1b56e16f1f81a7f4f33e92c05753f494ee8c4689cc003d065cefb94fd15bf36553db2afdeff13b6ef2a5753d6822b057f2463290b3c79a2ab553e5249a6003f5ca810e0fcd4bfab88419b0dc722f4d0c2d8645b9eff159cd479537b4e3fa6f3854e70746d19c3d9b830621b668753a2aa4997a35fc47d9180033a282b29f66c33c8084344c104e24231a3d9cd7f87347ca08b0e232e21ce18855f7bba4a76b86aeb0926926954b1d7900ad128ec927dafb9a5b4a01435e2767b93781e8f8e4d848fd58094692d5d68e5dd16fcff9a59b0f004bea42e06c5f3d31cddff934cc830b87ff49949624680e675bd509f7837a254825772310a819c32730ea2312c5d2b731bd0ee2a997e87cef1a07500611faafebfbb34971850c00dd6c0e9d6af15fe5081c0b799d8eba712efcb292010e3dfa164887e68b6572b81972d128af437d4b86c5c64c7c8197c9e9d6971e2fa1066c4aaf5b3e3a9fb910bd144ac74d4f6ef865b4bd736fdaa68aefd3f48831427c33636d646ef87a3b21cdbcae92c99caafb17cc586a4cc52a68981437bce9f8f31b7db92433bd349974aee13a4f9c6ef35c33199736f581203a1b0b9be136315d54ba60fe2ca06a7e320e9b6f5996663b032505570fdab1773707cd6bb13326f52f412897ac1dfece15e4c0496944ac071b091d6c6d3fc13cf0111fb1513ed8dc0027c3776e4879c2b2701a3a90663c38b33d521c4c4d0b6b48d10257f122e3528370f3c4bdfe3bd34b5f06763bd7d60a2ce53d272dd411e9c5bb9d62113720b772c4b33f2d1901781695c1a57bf1cef7a3c39d5ec91033ecd52e1bb15fc05fe96a85f38a628ecc720d6ae423092212a5170ed071ed7eaaac4e0ea241d69dcbcbf3475e1cfa1cfe67422a2cf58c04dee3eed1ebd19e87e7b425c95dbb52fff3ae8e96d52304a08529a47244ea00acaf8883f5262d4a95efbd80ee377fa891668dba4a320aa8acdb8c13fc8193f4517b3cef118f82393f4c5156bd1457b5d9fee76619b5017b6c3ca6576fa08c40655357fcd9441d48ac7e9c3c40b812b5864247ab1f016c4e985275365d1a1a5cd5975985e068e2d91433f9a615535d84877288bfc676bd4649ef8f1d4e3c882fae882c307aef056f89eaaec80843a40275757817fa5e3a7160078ab5116f0759befcac12b643fa11e90e634c1152ac4d3c949d7f096b486b540276fd78251beaa93e0f746a7c71badbd42642909f82cb7b943e5e58fa2bda236c47f434dc4f5d40a4a992f29699c199cfc560188f07726f9c2ae3f75e275221d01e50b0771b13da08ee6033ee0aba4e6250569fc0e2c3d9fba21fac89cc382c68e73e19ead78cbfdb874ee356ff59db5e65412940d6cacb5f7eaa3cfca1adb8612d0cb04542bcb260460ab4d6769d4835550741fcaeeef496d808572280b355354a575ce4842a3b51c49fd096b2763eb0ed171e25a8fa5e1afddb2a4fe4fa79ab46a58df07a6df2be57632aa77dce8eca7ce4b79a7646554878e689641a06cbe58fd030b7c090457dd1cd61455f8b2ca9a1a9e8ee3ef7746f4988bae9282cebea2a7bd901f204f7801d801ce05e3e7e7ca74cb1cf39d62ea627d05d5963f83874a28a9ba19ca1fe211cde55b7445b6bdea4fcc98fafdba256bd22e3ee058d77c46e7358280f0117aaadb6eb877fab5b6dad2edfd3bf88463671c88345f016960705d568616f81de03fd5dcab7c1ca432f12820ac7b6cbe1db02701cb93c099264cc7f9d826016a0bdc55bdfdefb1cc905d43d1dfbdbf03d12953f51d1f0e49febf3c910a5bf7536fd43f547fdd295c399bff89bc60263790ce656e23ad449478c4c650a603c033a77a6dd898dcaf1ef688c15faf3e6b0dc649b6bff590097fb99ee5a24cddfa1e5fa29168f9fd5e9633b5c32475bffa3ee22d215eb7e68d18bcb064d45c716377e2f14604af602037936d3f1ec6fce6c75776ca667ea5077e8681c32bfd0dce0cb10a0200edf134251212c0061ba93cede3607b485b9a1bc610d395e0f003c18478bb78ba3d3912cd06e4073c7071baca3fe3b49473f83aef60f57fd9a048e7e14e9667a6500ba361ad2d7164e337f7bc10529b5c5cd2867752aa0b503b49036a2ab11efb752931bd4539c33b89f5a88b390f3d2207ffe286366309d033583881e104724acc5bf670d45cc9b6ac08f8a9a08d4ed5477c0d07cd47cc708b52db10ef08fe306d90ae5e746a2ee4c5845e727dd3ad41aa4ec1b4dc92962571831773197ad4de76adf5575c34fea566d2682e6313fa6e50ec008130ce155825067a4e611e4a1147b37edbb4836b00205eba65bbd09f32dbd9e6998b8338df8257c7ffea8eb7a815000a32b8dbb724f75b2f2bb72f71675961ade63ce0c94c3d5bc3c2549f51cfdf88eacf981bc143d943f9f5474501b50f4ba00d2dfdf19d550d2ad5dba3f2a10471a74a5bab32c0ee66a4f40426eb22912752d2d0188e33ebba55149f6f8a1f6c6bb01d2c520a39c6885e8d5d3ecb60c1fc1186f454f09e0c8ecfa4ec90ab7f376b8ed8366e0af26f5adb653f51b345e399e38bf9f5b0b4dfca61affef202b043532d71868f427099b7119ee5d7483d2b446f9ee8391d60aa465f9d06a0a1afaaebbaf0f6ebbde7b1c658c83cfe7ad740acad28cdb02831a62c580389e772830cc71451c605d40b536c9d330ccd15ef753153c52adfb1cfeda6affe19b4bb098a16d1e980d207a84650c6380b8b01a481dad335b78de3f99c59b3710e1e1141f334bc587c45e0fa3b29baf437c4a88ca3c5ee6fda08f97ba4b512c81a1e20a8e5e56e7607a582526b4fd25557d0737a758059c9e3d054f8f0669cdec020a744e6253a59ad2a9783e808cd19484b282a9f117dfa2c2d85ccbc2cf22090288c1e044693c9bf7f0fc4d125b12f2aeecee272257da504a07863e00b64aa8019afdf6a149d36bfc18d7d6b2ee0a558d7c3c99fbdf305bbd84ee66448b3ba61882c49db609b4eea3cf5a13b71f3719a247e2c46db9d2f549deff971748b5697624f0b830a3ac0f7460e5738df1adc80d506cc6e2e38e50383efcd1726d7f4a7fe70622330e9729643385a2f86d38622681a72f7a2fa0df079cebe39f48b29eaa9ca76e96ae6f4143635c99e1efe75b44fc5c08e8e04ed1baedd42979f741972c43d349d1adcb1e3f6c0813904c3bba4d1910f94d36973f0841fabe793c52cefbeb67b9a525c73e552750535e6fc2396f8ed31c7feae761735c9e5957b5983f85c9465e696165492aa229b75eef5f1d20545a6ebb2efa1b7bd7db3a508f588de5e61160f2ca769057fc6b282a0c8dd499bd8e97400f03fbe7b181010abf7908ea2661d67bfde0c261fbebae3ed47d8e640a547b4623cf370a081ecfaf7248ff7fbfeee5245acabf89db660a888a7a1284f942db15e9a72dc9af56660064b83475cf0c4ad134758c34b19f22448645c7c15bf5abad095170b9f85588da10828b2c9c935964ed60a724ed3af2c14d8328e360caa44a597b4d2306f49cb23cedbb03c0e12685fe74a27a77b13deea219c6ea7b1dc545818fe2bc12ac08db648a2f080b8e0a0bd1032eb026fac18751027d2ea7b77c24d2f8afd60ef2197167106c204b24d0dc14672dbe6f5810b829c826daa5dd83a2179341c3fc523703e9405fb57255d2f994c77b92d00feb353ae0959a1e49e9ae0b47debcf2ad470b7e6c1dca6c1083cbee9c03825591e624efd216170a08220131b51c9a3e638e942a8e10ee4f8e1749664cabe5228c23867cbb0c01233529c4b68aa287ef4e7a7f6e1f2b5ea6849d54e82defd32aedd0c2101cb23e75cc8336969c7c7cdfd26cb44cf5e1a9268844f8756d2f3d19c13b7258a20b853da56f5757f1860df25a54596e4d0a45bdcec938b73f42f7f946bcd111ae512d58ac7e3c4c315c67fb72fb8bfcd71b6ee28a91339d69765716f7f04c2909a19009b01f843c17c6e8367747a9a5f69411f0d444f1cfe906fe1e412c3e308f48ec521d13518ad86d6757a567eb1bf24e88c2b78df65a2a77b1319038915ea7dfd3edceddf3964a7296ae39bf7933b6b5a78dd7e767c3c82700bef37e1f572bb482747949dfb7fc1b097ee36519e4207ba8e9e2bb9e294a5b3527b73d0170ba470ded4a0cd39962f3c25c6a1abed372f3c886ed7dbc22e9f8c326ab98d4642323444e0581772c3aab87edd93d637accab8320a1588d4e3b6c7a357403356adc3916a9685ec428cd8224b9d1da7260e26c9cca97d67c7cde59dff2118f88fd9860490224cf4a97a6926af65c36c8d2a25add75825e6b5c897919664aa1eaa398e48f30e2bb5667acb137cbde2281269e81cf1b5b79284f00a4225839c9b81b63f8fbeeb0aee9884d6a88a3a6d1bc4f6045d09c879552002410c25223867de55b8710282403713df8721c17ba45ca97d96f907fa892f685f734fa24fc475c02e486d1114ff547df991e9e10a751b79df83b442e34dbe4205e65156979106123c339584523da9bbabc99aeb292aa69429be460a06a2c2eb9d146ca2275218b73eb7b555cde8f0aeb043cb00de244f1201a3c0d5da0301144a0b804a1381ed62ddf54f493c8fd6db730b6765a648623d476c5575b33fd1f47aa5cbf45aadce0363d35e91b51e467a071728c0dbba07113d4691e992010d1b69103f6f1133169496ca9bd0bebcbd87cd563be764c9590f3982782316f161f35d4a8414864cdd898e35b089fbe6b3abe758716b40966c7b9f64d4496702e165a66ca0736843dbbc4a1ca3712e37ab0bee6719c5f44d34e8810ede5ce6352d5a808e1c2cd393f0754bd2730783ab0127b0ed2c899201157295f0ab02f31e5ac511105279a363ef2f5f817f33ce6fbef02721d5ef5e6d90129f98de17de382f1069780dfafba181d44d008ecd44b7e530aab21cb3ea2365713a583cf9ecf1ee46eeb9f4d67c9013e94e847bfa8eee8f993e708ffa7a3699d4987773a37c975861eb0517a13a9abd97d658c0b2009c3f7c1640a33abd7ecd3a2b59d803a493cc63c298fd07b443bb655b0c009dde57eea34a55adf5532e1ef536218e269daa5a2290e3df47a0eba9a7e4ef02e3b5d79eef9733816d8a044d4a37382311d58c7c13d9ab1e5e413c6fcf97883e81bcc15414aaceb041dc8e7bd84a50318e9c23e914a4fe3a1a2fc9deac75e6abe2e9b8f5cc6701bc1f289d0b2fc71f78e7c084ecfbc26d8bdfe58afedb3f05b9e7ce24d48abbe44005390c08e4bc7dd2cc88ca5529c065da8f963c122a62960b76166ac6243b9065023572ef81c725ce2da63890738dd57d24a066d8948d74a7937d9d18b339a8482442cf1f0506a684ecc520aadc9e3d1e1b4da047c372d01e8a0aae7bc351410cd483145c691c5ae109bd0394e6ca29babd911f02e19c005bb40f1f8b43450efec4e666f507c16d7b4bd85a749ede5c1e6553d792be493df00e7ac5e7ba22ab5c964f964753a178a3f3fec9d15e741048d6799480113bc1082ab72bf4d6c88d7f998e1592d4228938f5d10b49d24b21322b5c674d70ed6a61dd951c7aa9418b4f99c1108411a5dd9bea6dbe9f78b5c4f0d52a6dfd6010f21ca1ec6c1f729f4867ccf6f29c3669bf61781028fc2e4538eb95ec1c88e7e33b735aa5b7e76ab1240120137067d5a8704a872d533a77eac4e5310b7dab355b8dd7e772f360d6460d29747004d36557dc9baad4bc7a564f2cc433d73dacbb903b3c0ad15d56f3662fbc1d42a950ef745355bca96a6fb658ca192e0fb7dc97eeb11cdaaa6b4ad8fff91bee6132f3b80d9b9a8f57825c1bd89d4f58f361706ecff89ec9b2cadcf9240a894b0df3a7ff721ff93a8b4754a4500f5e62dcf738dccaffa4eedfa64b4c063dd07f324429cfd309d72d8a9a6d590449b579f65ed3f4897f5b2dfe15bf168b82df4f1d632583cfb16668404d10a3f6858a7e728d16c9a38bd9e43b8cfbd8f6b8ff26f6ce983a5f7404f75a1b01df8b8ff07c6d35dbc562c29304eb5e47a62362c7d18a7467b779b4d41171918d466b5128957d2de4d026861cc0066e4df59447ee00d81fbcd001ed00aaaf51788260d5b1d4d53bbb62f85a44ff572e6fd6fbe3f23115c4bf1dfa3adc894be9b2c1b201ac772b147c5afefd98c93373a79c371c58bdba374c442f759cc10252ca3cba2765fd368264754c99d0fd047c455cf247cb1f8f3ee01b1d597179e230d6c26ea59d6be7f47c721d0c4e99d23094684a84bc722c4f44d06f3749ca4fdeb3f4a377a0eb7817227e9410af41be2ff1bac5478895d1e14eca74b6ba8b22110eca31044fb869fa51109710bc2f22bb84af34199c07933251f77c903a7e445d0a11b845c04955d21f5b60253f771f08bc310d92e9f16aaf82e7342b2435563a2799e409b022f95e2b0e281354f01eb50d2495701851db1663f011fc3950f440ff9f6acc5172aa194a0cff6b444f7913d41e0a5244f350a94f53c045404a113643b0e108ddd80d132ce10a63e02b7a6dbb0a83c139ed73aa24e055fc4a32ff5d6e4c4dda9727f9a79c2a38b2625e484b976d10fcf44164d192191ecce9a368078ee237089d55fe4c0248609b656bafb28c858a78d85965c5c644813f44cd840e75c90a412d6d07f9e4e27762710e4634b2f72de3f73be22cafc8a486b181cf435cbe2f69799ecb7d50a0c865cd5a1d37e1b67c6022a1814eb55531eb7d586f89f18c52ffac0d442a8b848070edc8f264722c7ea75c3c64a075729e349df49db888f74b37a3a9b0d46e70a926441f102a1e10717dc77e5d9ea0f45f10b6d526798cb4176d3b4e49e7769560107cb5b08d5db1b9ee3993ce42ea0db91e41995d9f809b252b82b462b750d70c62847d5500da0c567b766bbd05389d499ae0f888595e46bd9dd8d3f0fdd3b757167f4b7719471ffddacac93a79c8b47dc722692737605e5298a2bb79cce5ef081e532c3cc9968564d8df7fc418d4417fd346eb9993b1b004eb5897cc5d4f374010ac5fc4cad5a02176baf3d69f2f07c557d676120f43255015544aafa39cbd8f8518b3d55660cf9cfba6e064f4cf807f817f6b00e74e2c8b2cc65a69d975e2968ede0b427ce8f46302cfb0763001131a5fef069abd9ef8f65aaf0e1febd735a561737409d9fdeabc2e75e74d4050daaa56200d1239dacc04083ba556eab7b8305ac08c08516fd367e0511b4b6a3fec2b24d0c2bacd32462f908d4afaac6f2f9fb4eef7a15a4de828edbc1d1affb98e87b7c525af2cf7e73c3220514481529d4bdc0a2262e55c9dfee14ac00017d4581785ac0a5e550984be9d7e071121a8152d75e5fdc9e1d48a9653a2bc3bfa3d45feb68af71b51382f1714c761ee2d3a71aedf2ab54c5fa2b51371c8e9ca76c27c82934fc984131b3cce6afb3c50c37c8f8074bb292f9b4f9185fa364a4bc87e20543f12f4408159157df5bf04f3a44e52d42c857e219b9196e313b20e3f2f077214e63d1bc9dc513a45c1869ab0e292bdd4ae56622ede574ab4ad5384c31b82331adf7714acd7a17b3488e0cd8e1ded137c7badb7a4398d4dd238856e69213977a099ff36eac0781b43360bc76b07ca7c0a3ddb0c62e66fc2bc52f4ff3e0ce461d63061a70f651d181f864b3c56a57b0b4934e35d494d4a0ab4f345cc2f3050919f22e29168b5825d232a24e37d8b401fc5c899190a41f2d3a3a1c6a13f34c818b87a4a9b6338724c2449fca5619271143ef7d146e2312e8cd1fe374eed1da6069be18fc3d81a6ff89e17c99f5bbd0f241b6027a58ea149629b4410876702df49ee5d0b299960425be3361321a917087cb37669c8032b0c6236d56c43f8092e62c41069b99e89714b8fbde3d1528846ad5268b8f38bf7a471e9e7ecd60b8ac3ff56d4585b099e231eb21e8b0bf7a84ff381386f9b1d4b10a6f70dd96f5968e2fa8ae8406c577e41236b36687e1728608eaf2ae10a456a944dde2aab0ed09d52913abc258ac1dd172bd91a61e3349ea234804e6776bf0a8a06b45e2bd5b3ff95692b170227adccc4e76a8e609a91b520e8ab2f666749a2468c4d81f65be002e976097556cfe56e7932f59170f8ae42862d1671c76be8a2923d5cecfa7f694f2ff2696c7882221adaa3551c5e0f807d7cf52710d196a75ff12514378e77a4bddbc770d2b9025f1e1fbf0c46a190ddb8363d7d0230e0884a52ec28fa357ec589f8c5e8f2d3cb899220fa9a02584863fef080e82d41af02d0328f014a8af9c7b5085b7bdf871a51063e52dd784abe24c7942e1d5f9146c46b474ea059676c5b7ddd9922f494a2d84ae52378484f9fd6f382772c978fb239952ab3d8f6684ee751f05f6a447386729e1ab56a3833afc2f1e6b71defa8e73fa7aeee6dd4bd75f968175242fed3af08e30cb041bfba5cc260eb917426d390e07e7037b457eff481915a941944f1aaa3d485029e86d60a641a2c05aa1274ec6e5d9e48d57a3c0aa7024a6f8a28dccd553ab67d95d9ae957ed8bfc905f902c3777cffc8908235c05818c9c0917be07fce6bfdb26254b2e0ec907dab3032d9717cbd00285c76751e126594e064517dd41bbc502fdf8d2ae3b12b1ce8c5f616457a134e3ff65498e566241f830b5ce09b401a817fc3592310d08a5bcaa79f75a07edb8c07b7e417026c16e35785f5606f6e79483f5b21c57b28b1cbb2e772fc739302b87b378a93e969745633eec7df0987196d289bab5917742fc888f4fd33b2e2b319241f414bb0d385266a608d3741ee9652e3ee2cc7dad3177694f23b546350a333450393b8385ba2330652094e971b989c6b2f59384171decfadf4b4e3eec8598f753e2747d64c8119d46dd78bfbacf2ceb8d17fe92fc8e2d071cc7906e013e71dbc42200fe5faab836a352ad8e74189c2cdbb208b2caefc6c2f144fd988cacbc7059061f0646c323aaca2903b04bd6bf1edd12585bb2bcf746f6f95cf6fa2a3da9b5617ecbe7fe0ba4b6fd7fccda632832f7878c21c385d33fb506faa5e8e8f28bf3d89b6ebc753fa39548f6065136213c987dc14bc961263356b3336def8097bcf419ddd6efa03936f99f8622e98705ab75d3f05d27408cacdde44c7c70fd160692a5c8038d5e4569184c0fccfd160a2d169c8eaf49e87f583033b2a52ba64a6a62783c2fa7f98ab8fb25916481e2b835037f1dd41889c698160345491b82fc9bea842513b24c7faf700bbeadc96cdd6f20cc26fc8266be97f38fbd5e7d2b9502d0a0b12f70cf67cef3741d0e3fce140fc39327aad1ef936a708b5ad9918e7ffd40f41272ae19ef785a860e7f93c08aba6f1b71463bdaf2416b65f9f535cf14757d50d2331bb1f47ca33241dc9dfc854d349a0df743d682009b1124fcfa57f269b6824ed6fb8b222162ef8b28636cd02f113edbb152b3442e6031f2d3560f5a8d48ebe095effe991a3d278bb1b5888c85f4d226f9b38042636fcccbadf8247dc2013636c986029e1ab719419510cf561f7dc6aab42cb9601a53fa521d618b0a9c7457f5135c7e72b8b3a5ef1412b097bf6764ccc86b36e5f9d1539aa63143363792187b688067f53ba552fcafdede26b742c4efc50e9885a1de558678eb9e201337eb3baecd73647e069368b6d1fe58cc7a496d70d3fa8b0ec5c83c4fa43bd97af8ea572e1f199c563ead3b5f4252df89cf380984517973b9cea4f3cb2feaa9d605771e4aea07d1e4dacb87ea0083a3abf4006b25d759c98af81475d65401db57ce118d6f9a4b141f4813ba11065096cad84840a3956d0e4dd1a3d38632a41ec2e75bc1679c6b6fee918364116bce7c661f044e6c5721a18599216ed78b18b81b5b456ccb4070f9032eea3f077155112bb32ea2ebe4af1aef9e0c3129da01622a6915ad91d684a3803e79047cd194cba5b13ffd7152c881d79737ac9f4bc6545fba2218a929bd8374a9bdc0eb117098ab00e27b6c6c9820c74a54fa31747f422d88932af3bfe039cdd7f62ee0e95efc7fb88311b2d3d1607e497d092460676cd80f735c1c1c32c61db53349af57e69e341bfdba83a0a56f5967686f6027865d2f5b256e93ffd0dd90306ddd3ce69852a3608e7159942f84e83a8fa6dda6159bf5081d9a67b49515979e87447cad46b2eeb730e9d34a734f26719bdfc26506bc4d1c8457e3ff9231c61e27d1e40ddab143759d0feb43a6188a40b2bc9b62a1ed9cc8367eb4ee6bfef37459024dcc216378f71d8404d0fcd26ce6b02a7400e92062153c42940e802bf4447844a0eeec2ca48a625d155e0aac7fe128cf75ae7183e40502df83ea5610ae281759004c79807cfb65399d9979e50062d80089345a4d8f0b07cb3e1b4fa42db1d128ad712ca659820d83669866cc21dad30b108668f680b02fd521a3e7107d697e47f743b1ef766cab33cbc02d61d0cb3e2b2276b14d086505c90b3eb95f77a5b3dae551abf393d2b760bb31a9588dc5828b17f9c497205607c850984792c6c7c338c31d4babb4807f318289ecf8670a7e8cfafdf5e9e054739f0a304ec94d1b4279725eed5aa5108339b956c8d2bbd89eb31e7352b9d05592fb05cfa74707684a82e33184482d28683af69247c9cf39c1b5182e49e128a100827a1b0ea305e8a46fdfde26e9e47387b417405b227641e27c923991213e6df78da17e4a5bbc9478fada2059175bf8748bf080991cdcfb4ef290c81f59813f0f2fb0a3480b212486febfd279c159d469436f405ca91623b645a8fd8bb8d47947773b85c9d82f647dc30d677626a0e5f5a7912652931fcbccf233c053f7d69a487f5cc907f77c9e211e7d0a56d310f8a7e799377ab2c99bce0b90be8e02cb5bad5ba6d6bd0c285e3cabe0f6c19e2931ffba9d1ad06ffd6250c87ccf943a19695cace65ff598ec12ca69a4802605cecea27dfe7e8d0d15906e50407da64ec86bdabae7605395f20a4e5d42eec02cc4a1a02f5efbcf748477ab093c3b729f0ed90d641ae1b34f91fbba850b2890a6431b32961774b8fa23a6bb1b76dc1f5fdac6fdf14f59ed2e15833eab9f8d41b59e5332060b1a9b5affc80bdbb807c0244f3e3de1a33316100147130006075a2b5f1b4b0a2114faa6f2b15eb219842bb62d782b50f610ee8adde9ef39f3eaf604aad80f8670c75e21aa2575fb74d6be5316d25b7788311f5543def241d267d053d112d7705c23510ab442632bf99eeaa60c43d1c899c6545e6c887fa3b4bc5f39114ee04611184e8b7b246658f0357d66fdc194820114a985cb4ee73a3c0fe9b4a09bd733a1e61d3b4fde3d7da10bcb051d2c4fe53c7e29089e1be1d7a86feab1f82bb1701a1f82decf61e38c8f21d8ec23a1b511300220aca731034e271ebd1107eec0a15743f760be2ab6536156619e949fe66d5243fd104744c7d7e8dcf383c4878e4b36a60bd1cea8b7e1e2f9f00f9dd5368db8c821ec0502aefe2611da80a1394650885b52ce1f2d732ee46ab6c27432817c77dbda32e5a86f10371e8a918c523ced7a2587a294fa649e9c4a2a8c4492ffe7a2aac650fce816a19e542b2e903c0922dfb45ec654838d96c90f1e21b2c4a398fd17e18dcb0271d573dee3b6f9491ed90a2b1771f33cc0aa0d884fc2fdb33dff8e129b8b77a3b0f72fb509fc17d880db97825d688407b7637985b8da4fd71215e984602bb6bd9191096ec83877d8f69a489cde448d104b88fa39a6ef0a2748da283cd82c765a5ea2a15883db66a210726fa8dace6191a5dfeb883932192fda77f33b1441fdc02aa31293e980e4cc99a5af118536c28a0a2d37b13649753c440b5854d86f5af2dfb16a8ec32eaea46fe7827547216c020dd28c3dd1d8779d4f930b6494cba168dfcffbf2e8283240c3ef01743365a0fc939105854ba4a4b87d431cc0afffce93b1c4ad603c7d6ff0c3b51adfa164eb0aa3ca5c6fa8c3cd8ba122acbe036252d3839263a191ea9e550275c5e42369a08fc9e0d7d4aeb5b02e08c963b9b2ca6c2e8d8799137f0c1e8e589d90e7bfdbb7e29190016c8aa5a760da32f9f99b2259b928778112fa3eea6c577de5bb19c6dcc9f84245b7e1626d85e70829e3e63383386d1a56f8f6183aa7f45be12761ea9f856eacbc3dfac2a4a2a668a6f4e49b34d5f45ed45ffa17da6b6aa9f428e082ff7b5f607f12f159013a16e31b557fa5ab9a0ed6ffe45c29cc9b343779c514ea56ecc8b9ab42c3ce4188cfaef256771d930815257c28d6ed78fc1fbb6aace67cc5bf6f4fc7a9cb4687cec898c448089800d69b161ac9363c966767e59bec99f782b9274b28a010e09a11e63d3331dd20cc5168d7d69ac0775dbe22920a53a3a19fbddcbc2487ebe2d8022bcec6e1d824ad100472e35ab736b79d454b14fb4aa41dd2e038e9b974b195a30d54011058f4e02cd884a08b86e8c70462d54e80383ea3ee576f35b41df8b88a93c1d9e7ca10cf9bf00d864900a0288e5b588c50e484abdc904154b624fd1bfe18645f4c87da3071b8a6389b3151b59a0f0a9045b14bafe3c06125823d2900aeef2a16419e807aa1d794f8639f1c551f787140096d93e7d7d4863540b3309f7e7cb5c4d1f5fbba81c22c58a90b894b00287f4e78b1a364bbfeec5a5b3c442654b8c86423ff236923a46e9ef84000fb92d78ea0bc1f5a7254797a65fb605c1d7a0aed30220c29fc2d67a6d603f99658c871818cc5e80e7643443e0462668a1592dd776027692c3f44aa591b13886b208b1396d9884c6946b8b97a462a8e1c146a5499370979b7b879a799b3c39c6aa8a5a61f1bd2ad61834a75612c77e4f68fcc1310919ec1cfe094ccf423a6a16bdfb5a34a9dc37cf0d3152e08eada6a554a9a7b65031ee3b330a098532295c3693fb836883fd9c46a4ee0bb80ca71c7ccfd5283b2c6c3e25e59d725ade229ef1f1736cf8b67302f8860daa050fd89bf9fc0af823cbd11fbaeb71cefed971a66ba427ddca01fd6fb10e7192c7b888ff7d68b8e7b797c47ad2b8d8414154c5c0144e28496f7d40bfb84d74b0ffa12571dd255d825a362010d8f9bc8e9371de1c7a78c1e588ffa71633859e8fc78d8f66958d6b1967d66e2bb8286f3f39c53308031630745eaa6b159f7fc9e80e313632998bb5c9c854089df5a520b46f70bf7d867c756ab9f5197c81940621cb64427b9ff7b0c6d93ee8b11fd344899fed70ae0506c583248d40b6cb3875de2760d1fa724fd64e362675564813882def25813124d96ae4a8bef274d7ec7b87622ea2d7529070337d34a3514e3b1d9eaeb5c4d6f53c1daf2199b4cbb6b67f9e25ad4b1061986fb94bf160b721da845b82e352e38c99ab2ecf8c5b376a9b403255ed74a93a40633fce6203bed797a7f2ecf44f617dfe27d60bb3f40a7aeac8fdda2e8ba16fffd0fbe93b3dbbec37d7561efb727f12d6c553f03e050ef2f13aed2b9c75c2c2b8d057edf97d859d1ae8afcc5f8eedd4503b9912585e89da34c3e9a837af3b4e57ad0b970ae587a9cfb98f011681beabf0a4ac6f38ba3b4542af132ac3a61a4f2bc7b10c658bc9142e07ca0fcbe29073a40223ba0c778a6835256128e0e49a753efc347bcc7b3dce1b72df55322579d090730524aea92a79e8793719d5469599daba650558e87bb5564ab5cbdcdff705224712fcb58d6611a51d2fbabda5c5955b01b6c660fd5ee8b58f6f31db1bbe711478b188dcf3b6c4449f346578a26bde54143b1403deb4eaaf05c61656066ecb2cfd21c8ebe870523b481bcaac78527fcbee186560cbedb168f4fa436c94fd8cfbd41b4a5e46d8235f201376e4af3848bf64dc689586ff4326cb3786641fd5a8f4842745c1f3c91a9cd75b32201ee936a6c007d4ab3d14d2844914a39fabf85a62455b30fdcbb4677089f19252b0a7f12d9257569c3e6b07b6f5aec412ad98e94c1b235d0add360c9f5229b474e67047512bb2992d465f00f37ee2da831dee899cc6b6e768fd51b0b32c631ca388f88cfc2c378b47eca7569e5d8193fd6f1f81e1b1aef4fe8f36c153cba2355bc67fa77b78e352d1c2488c20347755650c907f483040cbdc2a6642c33d14dd8c4942a6d515434802b5e53687acd84d0cb7b4293aa0625c206f29a9005c57a3e16463267d7d76b84b0fceaa008f29d229f179108e57f46fca3ffc4a82fc35dd9f56da7b21f7665104f95b54b35c6951a0bd017ea3b5cc48b7c3d0b560e27f2363470cc25d312cda772feedadba5c2ce066f461db745e7499598e8736742e02f6dece0006a1dd903d0379a2c3ddc61298dbcf861aba6d474d608decf1b5de7a48641679e0c3b94c641e6e3573cd13383845a2296f97dad2d01fba8895d5d5ebee0e39442783cf736c3280df47fcfabd9851c4fbd96b5bf27714fd60d6bbbeeeb2c7dbc1b2a90d116a5758fe6bd5fd718c82f53d0c5daf081e8b5fd6e03042bcf629f3e09236032f449cecb5132ad6425234bec0ab477626a672e5d74030e541c98eaedd1d69a75e76f15bab48467451e487284867db41f15217fd5e35ed919bf7779b16e55b7591af0db386704de01367bd49899d478a98575d06e24bbd7740e08e30567f97fb294ea0910a9197fc233fe3762db7c4d19d8bfef990bf6865854216df8873262bca80c4d376cdc45a0f409e06733ade37375c657ab868082724c5574b841f03daaaed35ca07f2b71fa03d9b7ef2cef2cb7843046801cac0c94df58a536429f40ea5219dde3cf4d0fe89468031b6576ea9a82f0b5b0c1d6f1398e61389ba7a2b5fa81f6c7b39ca2ab94eda651906b087f87077a57e5d7046e07174d5275fd100bb618965f0588d8be2a2d46f4c9d4d04a3fdb8c66b108dddd05ec4575016c973571211b7102f28cd0c4fd0d207de1f60d07b79fab94d684b365bc47f0b428dc5f77f5dea831c6f3a7219fbfc90aed6021a54a20b2fae19b6059f16a7ea7e7baaa8183dbd156543dbb3b92660a9f720027f2b61a8f6663337eb6fe395df6a538b4a16ed83fce244e25ac3e856b8b25452a989ca61e4cb689269f59a83bfef518c0c01560dd3ec39eaddb977b7ba82b273b68db4b99fe56411c4b95b99cf49146befc35dee00d43195f4b0fa5ed07bf36f73d606101e6b923289b6eeb736201070f1298d41c0499250a3b0590a355c8cc738c304aabe75fbc735b1b798375386de1314eaf9480e4234fde271babbe36435d14880dc41885321bc4f073364458e5cbdbaf772c453d2260d942b609a29cc51954de49a8061292822b016bfa84ca7429a0e49a820931bd4d300a48dcb7ef006db01bde13009d3bd7207d919712b63605d91a5cc995b4aa58fb0251996ff7564c7b2ddbc46eea43c2c555fbe7611078eafdb807872f3b7de3938b8863dbd9b74c2c4a4a79d2b78760618ceaae59b116421191a9586623737d7ec7d641d5a0462e3681c10a95b42a2ffbf05b1ca5cbd62954955c40fc5ebfa60cb7db8fb5d9e6aa7366daf2f0dc58627d8f2064683822b943978eba42e38cc0c5be6a5e0214727575fa490beaaae619847bab60229ead6e14db83c2ce630c0343895ad738fe7acf6c4703dddfa2f88346e7562e7ebb783fdaac122e01fe3558cd5ac1f4c20479dfcc3da53d6ff36958d68e3f1fa34b494768e9fdc4ff996c5d60cfafeb249851289079d3939db79aa93e87009f1e30345f3cb43776111f22075634259b5c7b09f7058e226ab131e39e30870b7c15cb9288bffe29acd6044744366b2bedca13d0c3d07615080ceb661b5eab92debf94e094a0b33d128f6e4726d44cbc82d8d90233e3645519ed573db951445f7d6c1ad8457a024b5e63c80646f88e2eb3e5b512bc51ae0ee4cce4d424f715aebfba73aabc13edccbc1b8887bf5b4654d8f22e26232e226b678deb1db4e6d8de40419064a88121f8e5bf7849355b86fca630db91e268ef573d89169c7304f41f22427bb173e7ccee95d51ef9746bf767b853841609702a1211433f076880bc6a67ba43221d27c53af2673e08055325600c25691a33685206428c265fec1827e314ac0787171e69d7d323fe7d854882b89e2a426705c4f676a422451b8810e1fe9d34cd94f544995ebd65a9fdf76ca6a9b93d38aff64eef4395684702d209facb3434fda775919d6ef8ac4c628574604b333ca2dd8015deade2839ddf71da91aa84e74063f0c159ba1e6e36e0cfb8c6676e2ffec23492d65bfc02b150c9f013f3df6572081848983aae54b896f1c545d520235d2d83e130af919f7a23727aa9ad1da372e534c051d83576bab0081a4c6f72da1db0421f13a1e91d9980d5edfae44daa235cb25c59dba26fa64983a1e175c4e248d7a08100df6a0246e9aaf0add185d1bc3c17c0ec6ae56d2715333956ffa0b50d6a1eec5addc617dc75f50d002655b55cb41c45f7c3a61710e4459b81278745d9ff51c4729aedbe2cb48d1e31f02947b7dc645dd91524a7c54adb6526de12706a5ef59d2f9e27679a700be2ec6d391e80abad0bc655e0a729dba04ae609370b7365f30f2b7424c4cdb4871dcc78be9bf2c3d7b53a129032b855ac3a27180aebb5c0e24ba83fb2cb85d32293d8dd08375c328eef3dbbdb9b683304e2a736cde2ce78c4605d219892089ce8ce3f700a73fea964ebbe659ac8c9af33bc2eeba9feac462da36e1988da5027af28e7f73f52871293fbe4a4a899ff4aa09f551603e3940436df4313c78adb8f1b9c34755f439a6b26d830d31fb3b25885dfd1735f478a76ffbe91951abc0aebf14cf898deccdeb57fdb2defee9304a118567e6efbbc4c72547301764708719e23f319287bde41e4355c5be6f2bc86a859adc0eb0a5d01a815291a8c85ef4e80fbf68b4e9ba72496feca618b5b247286c3a092b6c71336fde5a7f428ef623c7a4d8eaed1018ea141dab423f2d018e5a1762441c787f69e275535f552696376dc12fe71b1168a3702134d142bdd8b01bb8012ab0e1ceb19ea8b6292b4c7933b05c6806c6ab5a2d2d975bf9efcf1d2c910ac9fc3bdc895a8d1959498e05366b4ae23ad6486b2bcad27e9ca61faae73d3784596a22a64d5616001dbdb29ad63bc812a74f98c19560b19557b5cf993fe0d4218ba9abfbb54644e8932722ced8f068b2a302a81920e0d5d62ec3b2fc772a0032c5de694901229d148049dc95a7e58a1bad5b5c0987262619c9c205eb5cecb94c4a9482abbe43717e86b115dcbd63bd622e3496f2c955f645717dd864858cf75027c93081327075ad4d681de58307e07de2f59384f4764185c83f73dd7024547770eb1deaf42be44d5cb9aa307a6eb6c3aeddf26ef38619add0ad61622532c0886b1280469109dd0ae67465ad53b875214c3c719858a84e4b916da7c59826ceebe80094d4d946f51de93a73fa6cf98580f51413a363e76ebbc4a198940dd7c1a1ab9dde4d37d380fdf5676dd01d9493b4e7612dd343f6da17b814cfc253537dd0415bff01e1c9bd31dc15b394f44669a814e66913656b6241650d6b35132562f83cc80c5b58b8c055781145664cdd26e2f53fedc17def4d0bb182993fe7d5df9a15370684fed47936761aeb7121a52eca41bfcd0c35fd401040451d2ffa912725210831417f0f64d1ba15804550fde4ca4b330bd736c0459c920b1f572b0d7babcec116796952d7622a77cd2c29811cd6d2dabf2aa30cedd31912b7b8d0fd1d9daf7bb65930e723e253fcbca3b7894294a45413033e5a97d41caa4677161ac2c1e6507bc158b8c9fd8363688fd17e1fead0a70142f4e81acbbd4b85386a657f55a2416dcba9b2aa1cb2b4826cd75a5e968b4260e94a0b46517986eecc7b281c0e46314931998cd98d5c04999a882a28246b16c63a28ff7097bd2423a021f9906f746c46049e148001f3349f51aceb513ad0aae143eeb2080b3537bfc7c46781a8907889f9c5d628725f704bd7f7de194d4f2a1c982913e3a15c0e09590946b59ff2c577d28b4475dff6db6e0fb6919f829009296876590fae66ff39472e4bffa9c4a6b597b68f533a9db772c845270942f29ec80937d722269142ed3cf8c36e23be8aa9ce5329ef2a865dcaee5395c2df4a3e36abe2729b72669109d7a2372d3dcc253bfa6b1875db306c1e9435b0cd9f560c9b65dbf914d43881eec166d4f2281e4236c1fb5cf7c78ef06424a7e3b0d1a023cd24fd2d75c1389fdab9fc26083234de4d06fe45be9f5011e4fd287ac5d969a69662afa9a390a34e87fb3da08d305fca40d01267e451f71d8b5a278ea8476dec5077e3cb138618fdfa025705cb0388075d1a2fa812b760130b664c314ca032312443cd6b2875b56b44d914b494b4ffc9bd0b5d822734b4f886654d4a9b82c292a2c9897bcb5aab9c2d2c09fc936cb1916b2f3a5c55124d22e470ae97529e5d43a191890e239868d31d40e302f30e4110b98299941d914cb5cd498611a522b3e8b8336236f9a75d6f7ad19a14b01141e099e5167d8302ae81bd347d288422990852d1cb96d241f843d60a3a7f33ce8c9daf5373445c52f389132ea2ccc4706f54b3e123483630415a66808fd1bb54c482690db2a423f6fff79a6f644555fb06d2190e66066003fdda84b11f7d4e1812f0dcebc2e92eb18980be7bb3af6743d6a4c9e0f46dca2e8b47973770ecec99c2465603fe852b7a38b359af13c3ec6f9b08f21409b9ea95a71dd112c59cee7c0e9d3e04cdafdb57b13d35a993dc6f2aad75ddaa4a89aafdcea43ca8a8916869f10ac8c0511dde24bd76db9f5c33803e070ca68aa3ecbdcb245ab7c4f3c432b35f8f1df6dc40f8005841079fa001f49c1a5bc13e71e734b8d2ce87ae3a9985a0d7fb3def32e3119a1c3fbf52a86c004d696ac361dc5ec5c75733130ccc60af97f8e159bef0d35d05240961040572cfaa8ed7723b1ad087b7a26b16a4cd64064d1b291a174d6eac7c92671d6d9186cb417d4c161dfea6f83feece5dfee21279add58b001839fa971314c0b2d4486fec6e2f23c61a85f09c2414db69b5fe5089df5e9dd72246029895e866b4dea3d61cab8befd241190ccf4e731c37a74903dab1f411d9aa4b1ef7858212852c6c9bf05ae6a83c25436cf78560567aa6b99f435f8344631d373eef66d4be12bb790e9ce872288c4de8c7f3e3003077556dc4502f57f141c681f456418a27d96f24f74486788b9fe30f75aea34bb9e5330dbf912d56c73f76590e97d20fbfcae05e669c7d2a52cbac48a74f0b10d55b5446bc6cc9b452182f47d032a3711c35d307aa88fd0db745a903006e698c572f3ea4e2bbcd80e4d5ff1a774bbf22864d15bc60ca583323899f0853c48b0404750343c8094be781612c5bbdbcc05cb74531ec84827c8d32f5901ce779b2743d37c03631f9a87cac39ddeeed63d077d0280468c99eb08a0735666abca49fec75c4e0c23bb5d437851be9904eb25835071e175ac43067970fa0a0051809d3db6caee3fa3d1b79969f35bf8519a3ba53f4ae1eeba35b9b2ccb6096c3bfe60d60a233dec73719390ff84f40d08e811ef8e278c7a8ba530074e70452a77a44bec2ed7ee1aff99ffe9a186095d9914808b126dfde9e4bdec54bbb38520f25bac22f01ea100430ed222b186453952617bd2e5082935085a1af5dcb58a95a6a693d1efc2e2cb12264c5b72bb5df3046722dd7c6ee51846e17fc0b0165f8da1cb380283ba8e53d55ad5a5ea1edc25e49e2482791e186e09352d8331a6e3260f8eda9007c974e9fc86c708a4284f2147b1ac882274c8a0bf589d147c5d828e6579494e9d3d8b7c5a2858c8eee867440890163c8b2288e7108c3a71e42806a2fd5c42189b3417c3d463867a0674517f0e6640a06140efd0c113931281d5e9f051f4101f09fcc855063a3bea735910eb43730960125688e14e8b8c7f769b4528aa5fff416bd387b6607ee38e57af79ce2c4785b719275cb60a0b3f1855e2286277e186445d179ef83ee47b6cff298766f05539796223ae5baef00667014f60274932fcfc66351abdaf9e7907601cc3dbbc9f15cfb763bd914cf8d7857bf29747e9e3167ebee4d631fd58017b18fdb68a31f399a63e784d1e08d7ed53c9d9111e276f573e9e9d4afcaf029dfa6e6d7cc4232d44b633c5e203aa50f7e4df47dbea7672e06f8e523d5fed2e3b31c6067e8ce24d15cd4865c3d059c36fbd3c86357d8b33068175f114a9e4d81e004fae976ac58fb79b86b412b27dee55597366cf3788c07db35dd21169325758d2c59af318418b2b83247c4a0e0cb5c99684e1c32549dda850ff549ff007b71212bb213fe949f484e29e7f3fcca0dfe34e3f3c76c0352f90a0992f4a8812f4e641ac6bb68d29ee9761b2a698663b20ed379750364bfeed866cf22d9dbb70c1b5c5a8e37665ed10c85df344b39f8ac5742b5bda0b4d2edb4b09eb3293018dcd2a29acb82e7f9551af7473772900350f512647c23e5742667c048d8f41a515dd22b047d056539fa27f3fdfdc5857ad92403085d82a498df15b67b4c638963e96b13b86a7575682f254cbfc03b9c30ad4ed855133a1f37be8a073cf69c95326dc28144b891480b1dcd31b2e52219a0b70c9a1b8753f4d4c9e749710bcd56548b2dd7579ab8d3e8581b8f06b2af1402b5e7d647787f7d96fba6d207b62e6f9fc80dbb8efbfeea1a1fd5dc3a83350088d1be14fe667d7cd814f6700801b65caf96735bc91fff061174be9b7c0080a4c5f5676c4a82f8d86f495bcec07ee9778b0eb68e5ec037a04016eb5e5fdf33f99e2db63db360186b3a8f81c94746e89021970322cdc4fe58f22a84d38ed7317196b700a42b12cdc0b03ed3978ed243c92fff4d5e5ddf90bc2050dc1921eaabae21c9d18c43b4b45904741dfb2782456901a286832ec26130b2a154eda5cfa59d8f82b0b9f84519e4cfe8e6c4eb2f909bf6035bc6ded7c3a6319f0001589a2d45e3284349d78ebdca7fbe39498e682473fd4d5dab3d65b3c0dcf004ab780b79cbbec1ac09a401bdb3687b1f758369ff35762f4c18add43995b9a0f914b87d0c7d91431ae832b7684582ecbcce962ad67a575fb46d7b04e19da9faf075994cb667ff33a81fe7555fd4a3b7b6730cac02b289ae38b6afaacf3a4f042f089dc13b279d22f9e5907f728a565bc850e181bbfd5653cbb2db104312aadaabbf150ee7c32f6234344cf92985afd9cb7de913307383d663bd0bcab428521e0e37c30183943af2ae019841dc5a131fe750d61f1c843adb5e5817583ff5c428bd6b638ad53c2d19395a28ab55c79c4db610bdc7da8edf59342c01b5aa87f9fca39cb2942023e864626151b576ffd0edb5a131fd6131c75d8a50083dd504063ec60692f87fcc3c099192c487ddd925261941f5fcfa0c1b5a9d108566fcc0c23f591a9048da69adf0ceaffe5002beeaa492506744476d38d736a517cd7c64ad89c649f6379206b2b54e2ef4ec6e6c804cc6034c615e2ce002e09a53033a8c0332cc65c67150dcc00f344e225ae901c94eeadee2e8d27afcf822703f6441f63f9fc45683bd0d42d5027ef04a9d2e48fdeea05eb54152fa8b70f9f393e5ca26518c809d54ad663f00cafd92e04c89974c75104c811a96b87f62ce7fb8b2dad887c29a8c710c06e9f835583f48decee88c47f67cf423365377e6ad4813d7fcd4fbf1bfa14b98f523d457d2407a7b6f177ccb36ff71c66bf8640f2f30920703d9b3cbbfb3bf41e27bafc7635c24cc75d4862caa72dcb65b842b462cf939cbb43095f72e480de0e786f5fdded455a7d5861ee062e25db41359f90ab74df6552c8474d3322f8ac3dd078f8c23eb54e4506ac4ba6cc03ae00104831ad5f83f6cee4308de209fe68c22a9f4f2f77ef04a0faf0cdf18cbf1ce9d584d52897828d53dd5caa263c981a82152fa4ac0a9ad0e8c324716bd0b60f00fc436f4d722cabb705b03c23611a05d697e39304200a9eb84236c7cd2543ac68a07813fde816f64696b65325c98e12f31a585ae76d1fd1f78ffdf9d683eecc55491a7f33d92c37489cff918ea6205b26cb886658d662a20a8725e9ea4e1df0d72a5787b1b8c734fe8deb81320f80dab81f188675f0ddf05186e4b08abb759f7e20cd625a2ecc178043757a6d81f6a79ab00dc84aae19f1a0e157405aa65f01c5aaee1034fc3570601a963f080613736d2ca256658e5bd7d351b151b804df2395386bd27286331ec1aca4ad1b51c345e6c9181193b9f5789cecf0dab7df037cf4a4b3604a93b2bdd1114b6905fa13757481a4569240c2f59cf998fe5bb09c6d1ee27248ebfc558cd90c6520a138583a605b6529c1081da71a1ac502c25b1c5ec6567548f4d4e28c8bef6bb218564c2999e617d712cc83ce56cd5cd587c5f21ab72efbcc52019449dddbff38b435b1c7bd12b9b601de20cfbb880f07c50ef684c0c286e3e3402aa0f2792a7dddd59246b9c4a546b4019dac9a9a54c7bd072ecd521b47ddf0c47c062beac22b05b62b26d56243989a2239e484abfe690d8bf7e6437b33128c551c16b691875bef56fe78b4f9974c09c8ad66ef77093b01f379c7dd25101378f8198a9a538aa5bbd55433efdf6888676a8a8a5f735fe8068efac5f6700b08c99562dd1983a7f4dc718275857e9bc6571b6e9c2540897084200b9fb5cbfbcff0e4c253f81a553008d22942f92136893df03d339b4d6cec100e8d52b1e0952d941d88af6aafb6154579f9228d767282cd4ee513e4110bf43c996d0f7e6558cda31f154ec9a4166509247684a414c396d5e2057550e8a8526e6435805fed30c254407e286a6ec4cbc2de04c653851a0fe60e0f566d0f360f56d5d15564f90c08b027bc254839908460180a3e80eeffaad621483c68bdd4d4ccc2797a5c0451594a95dfd1b61c1f5e227b990a729b0cf37cc3d4a2c55335389717008340e9aa0d75948ec92fc6b350943a274e36f03454ec9f1834bdc9e0144fa155b6befe8295fc1af7cb1bee1acd44b0738675530c0900b28da19e679391951d6ed28a5b7dfdf1c1be07a73b2182bf7ef61cfc09e8b1821138e07f885ce22e8701ca2618aee829f044bb938d222e258d6faab1488300d0c09ba153897a164791c3159b298538f9b2d0767a58d52b93d28b293e4f3e44d92238146b4fc2f8e16c53fbb111f49dafb9b4ca5a8f74c8f5d816b469a6518014b65ea948502715de683b21912893dcf4b528c8e70bf1680e990fe5dbde4589d0a6f4dcb4d8bc76f329c1fa8f0841008187f097acb6ce91424beea66433109b50970774eb1dc17ecbbd4b1229ec827e3c80956db594668ba36d89524c78f5c5499027fd173121339eeda42f39e6d2ca691779fea32340c3dc07fa170a04d8a220fe0a39ed2cb7f8d18b5b62c373c3e411c047dbdf3c24fbbed2a5fb32d6d0f93927bcbd2615af031597eb94ebd5710ceecb6b5a813e76a39f07cca65ffea1f2ba21108db6029e4197cdc3c5145d172f6efde28c700bdf4799f871b0d1250a4b1af982147cabb7a84b3582841c0f5c0c96206db0a3abec20bfa6fb3e58ad555dc2ad00aa8e6006379fe48eb749db4362c6074a82e2d2314d3e0e4eb7911c121be9962d3435f6b16cb32af537b0687caea0140b774e709ba9b378910407bd41455299308204aaae6c7ddf3bc0491ae6274246b869ea8ef8ec81b94185c8dea1e2bc13edbd94ce5da17bd52e7c7892c6a4f50cd3c29db51d2fd4f21e6e1b43e6df62e47b14a47b634da3087f8bb99f98f354609a143503b2d7fc40b041c94a3cceec06d8b9f8235a7d06f0f055ca1d1795064303584b82fe3e344ba9974357aac4efab09dedba938a9d4ee80a978d348cea5b5a2431a30848161d0d0d68dceaa873284a4379b8041338cd9c55bfac7832687dae6f8f23b23278c0433408432d91028e9c7d5f1ef6e053519216698bbae38a9fadca6b1dd2ff852932586db782617d70ebba6b2862e38c740bc91197f9f5f3cd990e0a64d3eb3da253b1f2e1a24f7f9b755fc6c153fdafaa6c82873832c77d358282a05023f346f7cde722aee9752802bae18397242a06452c0e43b2ef51a8e429c9851f5e0fcad2adb53a5b6b3c5fc1b70bc1125654f23ec2499c8ac2670472516af5eb59940519ee638b7cf46275b28627bb820d7a73ca8dd7cf7fec773d93b8219058c87c071bef8a41c024700aadea8a98e79acd49d1e6583cebfce153004121551006df94400c449132fb7cfd8b14fa10a977b4fca863cbc81262bf9c8d8a9232292550488ba2e396f8debc5f0b6cedd2a2035851bc14cc7db31eff85881284917caa20792c932b30c0ccb64c90fe20ce46d3d98f1eec234870d9e4b26e2646607a61510f6fea985bf64d8e610c3f739f0e37cbcf2bf839c87b80238ae287d2a8a4a3c6ebd0b813817e99d56b2c4f01e51905b3c54238d70af6b8fa1f97cfcb4dfe800c994c3ad4f3086d44081908665ced02c5125d4bd39d043f964bbac732ea55a9bb74501b28dfd2bc1075de582b13375a12a9593d84b665ff0d6f1dd7b3613aac77303b242b954ebae6e0f4886d27923237c561e5611f82c4aad1e1e7f558c9bd135735b60bda3adfeff02b9bcd1a3c2689009e54e8542ac52551376f34b9661208a7f381fb033712b617669295e35b86e15786dc6b0e01eac963b19b9b1648e1cb921b372fcbd203910671cc1d767614dc3b05d0a7b822b8691a8ec5476e433fd4fc190467bf7ac778a3a22f545e45befb638587a3f2fe160ec8a7a9e3d52ae81dc93bbeeece45f2431c2569bea8ac5c8bb546c8b64b0441fe069c179e9088a15175c5d5abccf21bd8712950c67644371fac69ac6dc75a1e4124ddf5f4ecd9e5ecc17c00e19d728ee07d44f993b3d023b26b607eae5b8687c283cc9fd715f5488eb7949316453ad7b410d0d3727f1d681ee3f1eb91e627d6ba5e15032dbea3d98c89b7f7722229f7f811c19b5ee7b1482284e3fe4d43a1aad0f943bc008a2ceb1e641eb22feb6e46521cad30942d8ac50bb62c37f6f7bb41c864d4590ae30f4e7cdf7f226212b45b0e777111588a9eb1137dead6469f73d78759dab8f41cb41aa9f9ea258c943ac575c9688378868a783c935d60fe06c95a8efb5cd1a48aca861884c16abac45d9347a74eba70b54d02dfecc6278c4436119d35c1f16107b7ce3166dbcc7b3a37dac7f1047d4660cbc8818fe515d2f9839612c700ac4a40651a75c4bc1e542413ab87c51c67500991c654b0b38483393276647c69fe520aeba72831244be72dc4a9838b6bee7506c96b48818aa18c8155ed3d323f936ccf108418b23fcee81a7a1cc6c57b774923e317bad149cb6144dd0edc617a77efad59d2198bcddc433aadda55eb3bfc6eef42e75b04626b2549127825f2c9e768b5cb74d34e6470cb1aa78916cd6df886e5676a18a72a929ec9027896f5b66263864fcf0447d2517e596b73000b8a6b05937b3daba86868ab9704d11b3694e667baf23a9e0a43d0a8153c65440e80b016413822a9e60f56040ebcd84d77f58025f088049f749e185f042df58395074299fe480bbee098084c7f30d2c193d2d55e5b8b44c6888b1b0f935d3dec8aa5fd21c8bca175dc93ccd3d4573fa435708bef9287181c4483e41ede2c1cfa8d16817d296d0b8548d7ff7c0655d0b5a33d663439fb4feb100fe082c6917e3677173b3eb527fe107861ff4ab8857d9ff70f883f4171fb6a79a45091185d44e4d6ce276b7eff530132dc5250afac62087b64843c0b1e8bff71669fe590fe059d4a9b02f26c24cdd440bcc5ca90808ee8ed167b534f55bf00e3ffd064585a73f1232fad6171be794a18e7d3b02100b7ad99e831ccbbd43cbc53dba97cbb7953df962a4fb0b87e8edbb2fd7795d94e27818d16e4f987fe379ece8e073f83f460acf943b95cdbf745f8892817d79d889daea1b7c8b3d88976198c1e8e6e59b6a089b71498ce20261917f9877c8f30e8762ef89403a229e93ebfd08b5b9d9c50e53cf85f0666e3744e44ced7a4639d1dd77d414b84b62fa392f41529a9fe9354767029bc55c5a04206f9858d073660a6624c642039c8cf7359c5784b026d848de29439a52579355e57c8bbf4b5376100f788b1d6cccf96eca5983012bbb2712c370fca0c2650fb9ebf396c0aa49cb5caa25110e41efd13bc3a79139b36d1894121dadbbf094c48959dbd6542da391663547fdc1df29a797ce9ca07f7fd68bac63cbd57697972f8c0629176c4f6a3f9fa2b855efc63faef0e1aa4ca59e58015dc95d624c78c9ef5f27366a0d9e59f06f6f79d6e34ea42d1619eaa56f7e2904f9744889e886ac8360193704dd7e5c1db311f2f5bff69ca267949beacddf081e2b1fb668ef162391164e407f11683d7a231caa61a042334241b54158c39ae5d26e5b0ffa89de06f9bc93df6ac6676f0b0d05c2dc269a7e6a96b7f90975efc20f39e0022802bb948dd0a6508b22a1766b322a6ddf96212d1d71b8f1a5d0da3727b18beacc7f9696536516cd1e9f0a2406595716abd798313d499964315d57ca0d5c62241a53b4d8ae2814440cbb2a3d6eaca83437a5da9b9abd013e7ddb7d917cc723169e24ffe849eff19b38f1173f880d95780d08541c3bc139d8ccaa7f361bedb92eb8502f5ce656ea1c9c750bf067065aefc3bb12e5100dfe1a8a9a51bc352acaf08bb554bc3c9a524c67d52102731e7935f9a8cbc104c99121198c0e50d284aed1eb588a2973a8cac4a0acf18f137a050b65832577ccf96070e391f1a9bbaec729e212ab835974ec43cbe6afb429087a97e1430dd15cbfcc812d4c290fc3136c9d72922701976d38c64693701df90a85761370c6c3387e53c0c4a6543554008eaa3d75d413492e05863784d2ad45ff643758c93095ddd788755eede98181bd9d1c44f67c7b5ebb0aeb08774e0042575c2abdf5f8b5688b8e068875a2c94981201534b30f795cc6a0359de67bcd7cabdc5446a16cf934888ee9541ebd698a45c53fcdf221166cc20a20c95d2001fa1b58ac8fd7548bda30f5cba5afb5c53a7c93e127c659f73dfadc4886a5a884ccc7c42a5d70bb54d2012ba98c3a77d8534d32dce387b5016570131cddbfcd464f729bd98e22f3ba66e5a4947901456d613db99b089e941c1fc62ba9aa65146a5238452234c0169911b393fd4b828aff95075a89757dbe1958c01087331a848432ee57dab275660f94f11e2b3a3dae254e7a624f90e04d8b5615ffc95fc98051fc37e25d4f82c8545bccbf90af3f4623e8b054da048736899e34cea35c7ec83fb50359b87fbbefb034d3cf681d9466e9e4b1fe03e3986553c840859ebe533451f68b707a0909e659de6dd36484d0830d925481a4c8eaee8fd6988747368e3cc465b713b91f6139e38709c343d0985589f6ee107eee51b750ea99fb8bde41b3975f94bbacd15a9fe0a2aa00918ccd492d6d036d73b071a47f385c443a908f20867a93afcfcc811465bf07587805af7400b11e2df8afcc567a7585b54cebba01d8ced6a13625608d1c65a30bb58f282587ef0d756478400f8cfc11a3d118d003b26ecd37efa7f56598e9c2865b72308c0166c2e4c01e7ecfa3ed48cb55cd517078479e4b8a85bd7f15022e040ccc170a5909342e7b859b9f94aed5baf596703b4099a6b25d637dce2a23222e115d5acd88552cb4b43d41c0716ee097ddc36a082d3630dc5d3927c7ba50e4fd592aea97e320a7ad18926621589ab9c7a8fae8a0eca1f0daaff679988de9bc65237e1fa2cf86c8401b6a80a373c12d38be880280cd5c9110f32e90ac21e9188714f5df6e9faafe3363b9936f516521321bc11e6b6c38ed3a178ed55a625748f2c951d97f60d8281337b7d42069306c72d2f2c2b8e2cc5d96e341b9f463e2375b18b18b7f25854f7fa177e75ffc40a4e1ada8627e865a089584987da52ff11614e8c38193c96c256d04e214836b4ef9f1110da393d5357da2190007ef55d34888225a33a37c5169ffcccdc6fb5250346d3574939307be259bdb09ec8f529ff027c497c715a59c1ac5262fbfda981daac2bd145aae36465c30fb65954952fb9d1e3a9a0d887a497d2ea03d3c04b33c3f335e7748aca2284e715a2f6478c5f7a6e4768b19be6255a8482644ff8da9425f961b4987dd84f2e67bd1c5c994de52d51b9a43f31f46e75725649b7b92d4fb6da86278341b50215635b51d02cd4d5bae900a6dafc948888df877b658c3445373871b39716a69556aca57bfe6ef309b27c7a5821f8b7fb843fb0244dc9f357334eecee9437ab14d03d34996d5e2d6e1330622c1220531c742d3a587b1cf9524e49d84a286c73f8a5702e7ef1ed58ecef930a1c2ab3485f0ffcdb57198006fe3275d5a2057b8229da928bc7506d106c08a1fb85ee34b796ec9957aa4922b4391051dcf8fe6480d110f0f37e949ef8de95675e8ee322c95ce34e48459160acd1e01db369f439b94d128c4ba1360ec180225a3bcdfa774d8c6f3755f7922501a00bf1bc3a5d9983c812cdf2a871c589107882c7949b8bd87432a5990a6a118993f0201dc6e2aa7016b9c9bff757141c22526ed915d022202787d9c40729afbbb547c8307dab7454e06f28f348f2e924a45100796ba6b6a58c4a3166c93aeb44c0285f7bbae4242356e106eceee2ff7b8bb510349e5ba188c24d3e72ed0d04afa6066d91e4d137c6e04fe26b8d643c233c1a4b524c75d4b834d11c7ece9b99a72fe1b4c97eb9eb4a4e49599be3cb377bff11342a66797cef63e54ad1405e923252f3f706de9959d894375503763d3d33568764b1631a0e841efcc4abdf864155e581677e749981349ff6244d7badb1ec8ebea63e9b3c84db22729c698292c838161e49ccf3f3c7abcc8ecba2682eb370780218f4fa14ba2427d28d2c9edf055bb2b95e0e5dc80c33487db4dc8ba173a428fc3a34b70ea8d62022dc4d2f36a9c46ce77b8f20226d2a0d98c9851019205edffd793bfafee8dbad6663702d4651e6b03e69880f7876825a555ae71463b5d9f32be8374eebeaf001df2e8c02b4817b27a8b197e7b1b79ef28afad792ec012f3fce4626e74b45591e1dce629823e59d8f0b123e6a0feaf6a52ad39e58522919048b835601c3b2919d8d2b3080676c99f5050270d7c487e285baf1c5cb52c91f9fe9a59d47309cdb7c56dc5428a8b9cdfa5dc1e7101247b0da4836d5894083754ad069d073992d3d58e32b2de2f35b45881c0ce54abb254debe2e127a8286af0f906d424b8de5edc200a73d1c673dabe4c26105307646ec3030805635dad37d40a1ff1c4e2a3d83433e40eac69decc0c9f7aead3c3afe1f3bea6b64018507982eaca65ef3a68c04b6993ce113c96b0213b96c98776a638d4cb085c9331f1dae2ffeeae8d62f5d16c157767764301db3c65114c5379f1b6efe289f48c52c39820840cc312597c6df592773c442d10754bf40e976d72162b5f4c7a47d8e351a8c0fc14c16b1834c64deb3ed662dae2ed17cbfa485499bdbe8774ca8850eb582950e3c70f561498eefcf92f174b616e464999b6dd202296ed367d6970b3ffb7c06450e73619d3947a929533c3e7fad4ce82d4874d4a2ae494e480c37225ace1d3ebcd6a1b6baf336ffcd9113deace739863497154c6b64771cf167a3f2ea955671840104a1879378c8a92168d07db5ccd9d0c015ec719e12e8847d616dda79dc584b498ecec2b8f5da5d66f513e24b6b3b89874e90a0a97d3bf2d595b247e6d42845d0d7b1562f2515851c3e55cd57feba5cdf21e43c2d05df30a6d0b471847cd75eda333e9cec1abf1469bac3cd0c46d930f0abbc3c28fda7ba2e0d49e8c43882f860bcabb646152c036d773ead8407e9bc80f09a6ee2763f72880ba1a40605aa857fc4211c51c00bb135e7991375fa19235c66f642c1f9c6c3e7e0511edec4d4c129df0e7baa6b54dc7a145bf0c568a6aa7e5dc672d24f6b8f0983883056d218aeaafed015eb2cb64cb57453abbd8952ee4a764535588a09871ff309cdfc495b66ea38208e846854eec211bd3a566299c89e6e57906ec63578dd46ac8559e3a6e69da3c5109753e0a391167212e9f6d0ab480d5746f97a884012f671e8054223b247a55205609e85e19b15e873c8a429b5bca7807e01f7ff1ae4b41d980a47e8c17796ed00278efb9a5f92a7ae658e3c531c090d11fb92eb5467c51bff83e1515560f24bc5c38d983e2d95de670c671a2abc1052e0a0a3f9cb3c92846b651656cac42478894e69a2b7d5055caff7820304f418fea8946156b5f4ac2065b51c7995157efa72223587e11c81a4c8a1839f51534c549213bd588eb8710a6b4f157491332870a024058f56ec49af4bedfb4075b5dc77526a6b1d4dd64e36468c276763adf856383a4b767a1db2d770f0665999ca500168951ec60b9ce22447aacb3b10e48225fbb5d3d3dc3692f3fb5d2b2e3317e750b0326e1f82db72a0370e8fb3a223692a65eb6666525e1752d160cffc28b270fae88222ddc4ba3299954db92d4049dd1b80608dd7279bd6b3776cdb4f819e87f368673862a017063cc8f1bd2af7b3ee1a1986ecb9539d317a04e243ee365346a012cd146a70839e43d21112358518b34e468cd7138ddb0ee97c3a0ce4d0d25b0a1212d1578bbc456a6e45078fda271a321b9080274b99b29ca4bf159d1ba5644ba3096f3a00cae322bd0dd5cb7e7b031014f05422177aec266639fb6d74303869d6775d974bccf86c03e0d518f8ae1a0173da744b4c223d494d8e4ee87296c4b6c951531bd09140647e832db0a846892acd0c8d149a63c2fdb64daeaa22e729fc3dfec543af117b35f3cd414ef14bd245b066241ab3f05a242a53fb231f42f6a1fa6c67241e99320b3551d07e3dc53efd5d27e52c1cd8406db19d4d9f4bd8ab890f132ffe0ffd545f114c531d981c0ddaf71c844ef16e6b94f385137559be7148a20fdaa5350ab8a96eaa4ec4ab8e6d3ea04ce08ce5e91a0d04fa9d6cde6dc09c9eaa1233645c34d1232619a0953c355fb323ec86d50c6c285748a57ca69690b4878c5269e5f3b74ce6dd97b78c3fdfc684034994314dfe2fdcf6ba1ba61817decd26a99b20dbe66a06963be1e0a2eca73c8ebccac02e4c3c9cf2428fccd287e2a0db282f94901d323e1c1987424244adbe4cebb6bc2ad05752daa3f8861650d2b11e7a0936db6ed9c3d88bcc498e7366245badbfcf97f87d20eae0f1c15f10d66a90f410ffcbb2bbd81a243bf84f7f0cbbfa03ebbe905e384d5b7533a97b5d235366172f38a93c6aa0e95d744c1f8abc2c1b4cfbdd3a3bf4555686fb6f24d8362d1e42909abc44221646d3770821d5bae0e14527459cc1bfbc7e93fb872e04419562519b7e9820d01deb532a1577035d2de4449a50f9cc64365db86b9dad967c7e807b092791ed6c381c59395755134b723bf315d54795da30958b480ced47978d315ae56632934206da842e04175e7fa4c7c6ab6f036686e658bc5aa7dd746fcda9a60d7a2cf6926c32e8024ddbe5de1e0097949d830115bc5a8eb6830c931b2ea2204c5a14180e9c33b5adfa1d0522d977fc7956da773224e4ae6403844c61b4adf5f42e8c6bdbbaead98a4327da5b6151eef96771c93edac27d914350487de48a9fce3e793b91e14ed17f5be1b2249458ad4b5b926cc841a245d96d0cdfde21201680cd040155c38502043b41997555919bad3fcc277a76a52c9b5340bf7884490ed041c3a3ed949dad22521602d2e2231c54a886a094ede7de612f4b0efcb174b9d277bab9664133cc892bb64f0749a0177a30e0456f0fa26ec3cbd7d60e3b2b61144bbbb6c04c1b5de2cc922a3116a6359c3027854ce5bff2104d2ab15ada3eab567367d55725afb9a2860aa52f2037646dbd3084d649e3dbf5d500525e6a2ada29c540808e132ca143475d1c4d07d43f24a4a2f1435a2b605dec8bb509b9797f525daa17614f667a02f398a3f48fa800762aefe7f4ea575496fb1d64eab889d3550f63c600fb12184f4d82edfd213b9b52ffd288920f571b5ae6bf9376cd18a71e026045ed33e48014d3db029f3bfc65b90890e02c6ec23cf15fb85c3f14eb2104849d14de891557d9d7cc7e1757217b2e11a89a58f9eff896f562d0540ac8bf26e628427fd69aa040c6d6d5e4421625abb5981ba8f3f4783e473bdd9d907de0b4388694641085d8f821f1e697792e09d17b81093d1e3dbab953b593fdfd58364fa02bcb27002bdde647cc13006b0c4c2a23c8cebce84f1f27edd8408aa2cc7f86147cb974559a843b1992ca7fb729ecb5859fbee2a20a14768ef97db88b0d88247e3c9e0fbfe9327f2e4cf7e43436951029aa61117728f4d618170b1abc69359a3b29f806496da089a3e96463d6aff468ebf15b036e1751fc6ef5b06f7ef4519c40c11431c7f9b24c9af9ccf98d9fda6af55b328064358caa820d32bcd3acfb23df74d12338ccf73e8e13bc1d85a2d53138937790ad5fa50ab750146bb4f2839ad30573fd3b2d1ea80ba0d4d747e9b810297fcce43e7cf6c0606e41a366b2425495c1e976bc451e1b10fb86a51d7dc0e9d5db9c85d47f7e875c012cd4b0bec330fa807777e974303840c2badcdee9667832e641eb7d25ee5cdd156cd9f43b2fe8959ebd9adf13a661dfea7234e6042e4a15587e93495562c0e0defe9a46981cd2c6bac95ba89b3e7e9dcabdfdf5861bc137a460f1194b9d992540bf6d5602c9be7cf5d5c654ff9876da9140ff8c26f257a839f93b15463b9807d03f3185315ee9ad31ecebc49b9e8b8bead4a134d4db6862f2b56e51243508c5605d7dd76c0912057bb2ee0ad2a88e07110a12d1b5a6844dbe8626793e0ea37f71e8750beba39120cad3797a1a685bab681f3905375e689f41a4a6b0502c118b80f387a62c56d79a0c78b7a4b48ecd01d117380435fe1431fd9e89a46ec4d888fb06041637a3e8cd424d023808e63c1deea5862a1fe20e24be8b12370d4c4e26e80fd2468086d33f7762cf761bd5afa57e5e430b8e73177a82a159e9c3f748360be9dcd1c5956befefcb0387ad9462a76bd2d26f6c080f54b0fc3395e73427bd3ce74c171b53fba88e4094be1c726aabff8a6a959b1e8e463ecfa680f525ac2dd92ed3bffc3b7f9519f77bb4a58280e33567ba948a217c043355d7ec61e9e8fc349c6a0a643954431e010c70c98fc98d91f6daaa899bbc7628f2b44d88afd9c32fffcd97e02e7443f41d2af411b5c2585d65b98d399b416a155f376dcb980587315f47d5bbf4aabf07f16700661d8cdf7bed4fbb9c1678903bd2c2e293c230fbf096e422355c464e5c52d37df98489ccd26b373ff94e0dc89bf80e9945f40687738a9efcfaf9db3078994ff864c61451d26bc8bafc0c25f9193ea679d00fb055b20239ebb80fc91fab9d4053893c259801421a62b76364561524b7f52c11d902114d6b75c3d0c35c2320d47c81436db419d3ce43107df318038a415ef1f7554768c344af5cdea44ee3f01b772a1e82dae6aafe1adc74efef842f8c54556a72ef1eb6cb6f5eb8223f6a20029736225da76d1214eab64762d39150e7b74102047706514dd4681658d27c12678b30592c29c75a84c5dd7e433bd3d7923121a8fd685c38557243748bc8af82884f1747501927d548cb42dfb7582917816c60369323157d481585dadbce3a23243195126f9f873689a393b616b2a5ec7db494951e0250c48bf4ff9396e709846c1a267e737e44dd53b5dc715ca1e0749112e9053de42fc168c5087fbaba34a288ede2fd9ad57d81210bd1301b6590076672908b8c86117942f19cd876b926c4065306801f17b9e7550425501a15c299d4bf159793312fdd0525e06cf86df2dafdc3c82aa5f92a2449a2f72362b5c7afcab08858905f7db6a5bd40e4ebbf2dd387be7080a0db6e9764c9c1a49a34eb42a1e357ab85a757c3ceb4d426f6884537596d349d08994ff37570603649afa0b703817db3c72f2a43c1f7b85b9021cfbec0e3a5543f8d375e0eab83827948ef7ca9bcc33c3882288d26928e5c8fe826bcd7d738406e3e4417cdc336a2b0834f29d3f15fe485257e3af4cc5548a8d9abe97d3a012b4631483ecbcd6d24247021fcb8e576f326f95bb7c8e27927fa9050d12593e8ce4524d8fb51e1fd820c801d61ad8b077b8ea447dc72fa5648c56722e74759ae666b3ed20afae7b7f116655c154a02e487b39f941484708fecc9b83918b700fb9c11bc56f078cb4ae00c0df13badfc7f6496b793b09c471e3cf734eb672d572f9fd076a1f968532229b9b409c476b0b3c470c28925c44516c01d402a801fa13f0ce1043984e243a40a4113ded1d03ff4a7c8689b3e8d93dc620fcc65877f30fe14cbbf734700b39da9f8bef4bca721741a0f86fc8999faff7b9b61c2bcc68470c42db77777a92a198c3a166af156f421d777c5b695b5dadb55e7250a46383b799af0f9c6bd027f4103ada1d0971ac59a4dfc259f48f41d5ae5ef4cd56b032fa2b5b8780976f58800160f69b9f55f245f1a1d4fc78f439783267431c5c5213e6a37fdf9b78858c63b622ec0224c52e0a9d8f9366386a54246f262b439e1cab05b4bbce4514f5d1fd764b532bf23f6e453d9bc4d24830ce0413ab7e84538476357a41a96ec399e4dd9189a9a2360cf4fa35f71c99fad43403f88250e7a7d527779573802c393e9a3abfc983a938f1c08262e36e93e753d95cd7f989f8b9abd0795553a282fd3d03f0903967ab81bff31e7803ac54d9a3842c4b7ca483d17a452cf2d7f5284c739a9768d268b9b97676718c64c7be21d555dc485b8c2b53daa2c0e7d8013c2327ad8db313a054556abb478715165a3f24a6a45d5545ef0b8b5b7f3e32a0bbe35c0eb917c9a4f286122b9f4710b3cc4a69f5a9057849e5f2916a7d45fd73081c9a23a92144ed2fea5ce2699892552f4b0cb96706e99f9b11e8ae85ad767a92f5db46774e4fa657981549b2385c00e4e0ad3d8c0cb87536aad25a8a2421a87f5580a622c5e60017b22d27eca3f44be71a5b297f41c6e6f1d0e53ee564c47e6750bb01a2cc87c1aeafe3c53ed707bffdc6b1ea0b18e17348d82c3e4dc19a88a492cc80c8eecd9c9b2d019632e5cdf3a5ecb4cb930fd76da32a8044f9025c1bc0f5c602288dc23449a1f1345ffce85b3ed8dc6c5e499650a161065f380fee74c1411f9c87d96bce4fb87168bbca6fae57baaa58ef525835f6d5f33b859217b197d0a4cade3f82c60a7a4bbfc1eb1229b0b05c9b83ff98b68ed5bac59d77327c035c9f85b26f01f49bf90025a3d2155af2f2c8353893fbba5c1dae8b3fd50e0f133be9ce31c43c75dfd11512d498d5afcc12044fc7245a2ae4668e8488e3a5b4ae1ca3a582d829e3ab1e4df1ac33324568f0593051ec5c920289c39470f47cc8417b09c2ea6b6db6bd5b08ec2a63041102bdbf48505d3c1da12aa7e05c515e8381c5d97eaefd44c20be02e13e9d4935ad4233ea11160a05cc318f1444c954a189838e59f4652dd5bb6ab6b0ec2bbba32f6d5130fb3e03ed068e887236e9e95e76b553d5d2735e14de612e071f70b38f8a3660862d549c7923141ce4f9baa078c7f11d19c8466b9f7fe12070644fa35b022f8474e79e273b746e67e2e23d2f86ce9c511ecae47231f19cc652d37b25fa50bb2bec6dfde6c585f2b931baae64d8e292855a714e5a967456b44e95ebf2c3135cf526def58199ba1959aee1217441a854c9697f88dcc2097df73deefcba1af31022a19453fbbaa46ec2d49f9634064257e5a59c329f2970ca7c679323e60ca356524e19e7ef73a213d3abd1ca087596720fb9338126bea679f4857311ee8367d29dcbd13ae37ee51d62851b4e808143805a778f9e21331dedaa0c464c89cd591b8dca99f27dcffa7c2efd06f4a9b1f61067e2fc6da3b480dadc7c1e126e31a2d5423601ba80a9c1ffe959118b5b7aaef74a27df9428cc0752325b84a41caeb6055870c8528a402d582721d5ca8b72209d02d92129f67fe0107b98d9f48b283f9c79de3c45316604b4b3e761975ad5290e27d651ae5c1ad2f0a5d009405ea3664939748740fb53b18ae434496796e8a1239b99168ba675f7a287b8484aa06055e14dc107c6228a520ba4e6c3f1afc037f2598d595613c0acd8da04663c07533d7611b5ff221e09604de544a3e9fa9a08bc3de8b60725f13fc1749032c81889dca8ae36d85fc11832bf42969fb9b7b0cc624a008f4ab89c58cdc370bc82c76b507c4cea8d4b8fe1462b5ee3e4ed3bf8a5ce0c15642713e8ded2524264897288b680f69b81a922a11c471b20b92723b172a8302c40565aa5ece3bbdf7a20d6b0a61caacab91ae248039cbcb9a8d63b71398bd26287a129858b4a0ab30414225310e03b85b4a12ee6daf05f47fd12531e8568e25474b91f81f3cee3e2b031ba0ccba589ca6ca28866c1abd858363234f6cbf9be418cc058ee6ce46f359d435785cf1b9f92728e2c167f991b5a4521dbea1d0e207a228ea1dfa287e5674d11c6ccdb60f5f5929d3740c7a3afad05acdec56dc9038ebb670df4716280770ac2dfdb4f613ffebe393a28e9e9380511e60ec51d0b699c488a293ced195625222e18ed05e1286bc058bf3bacead4123f12162af99c80d8e48dff5a165cb39506fa32623103c0114f5d359216d6130f8cfa46d994f9dc001e1b33cd43600153d85b12bf920349fab871d8f7cf72cb1601918ef6ab904825e60cc9e5b4038df8f4d55f3aca1a10505cb8942d68588f38adc0caf9cd50148b4c6ebb377e8419516dfff31794e675b3ac6f2721e1c48db1e931b45ad906949bf531e0418914d76c2369f0a84f6b2d9007bf3ffcaff388e303781cfb460c917dad4ad4948383c9c6cebad91556d2a44a5a9cc2af8fa1aca236c488632a9a943ed9f5d9c4524dc51f5bf3bea61e8f0cd7e3bef18239563e8f9b09cdb5abfd53245c5dd43544bb9e2e33de4179b783223e4b9c6e6da41657f00dce6063cd47504c7de4892a5e5f944f97d4b5f5d82b4c9beb1e298bdab8291b0003cd8555cae68f520241cbf36e32a9fe94e242bc155243cf2f1a4a180b61b34b7d97224e5e3e7f9d4c1c285963a44a8cda11cd1da197dae19dbfb86f8c01bf1cb16a7818e324cb11dd3df445f6ea2e999bb407cd8f570984bdd6a66a1199925132d5dcb172ba0afa1edaa796a5b97c269d08f5498e43304412510f7239b8a21154ad7c5a4d79ade42a9ddf82f35230dd0de8ade5ce7a1c15efc69f4e60c4eec226ce26583c2d5015093437adc9ecd2ca0e8b4634d2414e14160ea7465c07903d29022f9654a592d58274d301b30bde8363b5535e4044831d8caf42dda1971c6108ed852019ddd0efed7b4089bc3ce38eff6d4c87ef7daef0002528f159777c31482f957a3f1522b3faaabfc7220167b22b411678b222ec7a72c6384ad0abe3986238c39ce8c05e152592c456f4b344d78fc7dc1ba07b80be84edc620caba747296a4a19627fbefdfe2fd689a84f0f974ede9a8a397e11db32fb7e4919963b564d8c585f56d604513b4d58497d2b1ba80df27bfa10661b7a1e74f36dde6a64bbc5044c703b2615848bfcf550ee795270dfd690f9e3ceefbb5a2e7d4ad7f727b06407021b829566d80682c2fa515d4919003084db6e9ac5425a2a3cbefa9e119b9a711788f1acf1dfaf886aa60a94ba6eef14a4faf42bc9ecd91f1504a109d4eb7e44cc11b67f114fa0bde35ad3304c1cae6a424a89a6fc8c7027f4ffd62c33d8a247b0fb282db9176def5bbfd1a93fa14ab873cfaf053024c25857026778bee9c7845355912a29257af04de1c91c1b7053d12a9e9b791dacf62f5e9b4461dcd6742ddde3586760c5e58bbb7654a438f2b49a72b2e550772de2705b533ecb8249c42b742e3aeb0d4b048d3d81aaacb929fbbbb265ec8c7457ff8006a65388a149fde4a0a886eae54bdf6509049c877aa19a1129f6ef41389f7190e7d33d843d95f9c58235385a38123b07cf24dcb51c0a9b7ee7af56e4367c254f2f7fe2d3ef6357cdb5a18f4d54adaacaf5ba60571a5c6606076a67fd389a39aedcd274afa4b7bffd3d66d0e65777a32a9606d12c517ad550ff363b74331cddb168c7ff407219e2d3c9be17c7401588b467a2a4df798ae89c11c3f61955ee25be3c2f120074effd7544f4e8ca481fe0c00aa4b596478c3453e7c30a4fb4237e103bc3ca43555c470d6e3aa472fcba32a4dbabbc81c12926eff833c3ddb02393d9d5836dd9ef89ea7f494091d2932b6401b265598a74fd47d05a00a6ad5f4de02c56713e373628e7ee8f3181625fb1a13e9fdd99c8e4887459a3692b01ea4c05035d8361cc873a52aea12c25735f8a09595101747520c01405d13d7597d54af861afbfe458229b2d58884cd407b848455ae81c447b854354db7142e37d654d4e817f985680cf50c719633727ce58c36ceefada39621c4eb5467f3be932bdd2f75dfdfe3355d8ba86751173dd320547c76d6e90a644fff96494ac69f061c2d6c0401667fae13dfe286f869574d39816bf33dbe58b5b6b22421c85280d9157579742c6d8c1d8a6916b9be09943bb782853e391d4818469a589947d3f4fb2af80460a19a5256be5dd71f4a21c8bf22fa7da7aad299b760c26a5838ff971eb02551409372879f9fad86739b4cb9857187e0f1085d316f3e012ed1eadd4c55d703f6b0d6160a679c6914d682b4971106f12291841c9aa07ba2c94f0064cf7f8b6fbc6a05ffd998a20f67f9cf83125a530a53ca2ac2b547a0610a291422e06ee9a7399f9b3a002d25329c4c89d421b88148c30864ef09ed8f257be628680ae39c2a9f68a356168f687f7f805eb517367f9bad6f63fba6911b8a563623af3fc5a8da17f587a3eb98ac0335037cd08efd7101cba84a7081a832a06e4d0467a962624eb5847a5e141b28138cd37c2f8f4bdf96b4b75e0ce1d34290d63ed8622ee4230c87cd40ee07396284cf20186f46ad50a3edc3baacc830dbe783d9e39400b577e5e4f2a62309da305da5bd333f25b6afc32199355a3ce360c51b87505e34d6a53a2e8e910b36c1dc9ee7dd3dbd294698eaf76013cc5fba51d5dbb9383e6480de860011804e1d1237d941bf0a263216ef8325a38c495fddbb57f6f9f81963a551d2cf05267137ef1477bc6bfdaba6dfa3b7e1847a1a7e7ebb184a96e8ef1e4c3737e0b449e70970bbd9213a4e44b0d0834b85aedc17921c5f638522a422f7df45e0b8814e1ebe31cb4d24b898a9fb45701ece329b2ab47e7334c32beff940f0f17f616c9f096d100e06dad6eac69aa6ae8c7d1cd6375bcb7a2113ca22545d61696e47f8bc6a7dc85b1847856f1413d31fbee57004cd42dede3b1963d377c7d65a6aca0b47a36fc87bf1580b769f0f17f86f111e4a31d118e83f143ef0a11eeb24a87c6b95a7dd35928d35d590aca39bab5a29a16c74616fdaecbccafe0f8bd8cd78781168e382535bc4aeee4d05e2e427e6efd49e08b008460ab9054491533e7bc5feeb0b83aa4e237d2f93086baaaa5cf17577472f7f07847a6a230514c4924279b9cb12c4bfc01127484096b0b668fb1c07c14c9a2099437920259d335a66167cf48a3df6f474d9f1e0fa1cb92c16d00500e6172a43f1f2a4dd1b79f555c6a53d09de798aea1bec048a300caec25e0456bae8be5334de98c379fb15d367e350053c088b17f60e0fd18756470d05102cb88b300bf9e85e6a643ebcd5a255feb7887af36bd74fcb1068f890df98f47b82308dc74844839c8dcf2ccbc2fe70372b0e30b8eff9fa5d9381b7178ae5265f05cbe18aaa408d3e9647a0c8b17f650eaf88cf0a33406922516200848ff818415753c8836c57c74115f9c6d8ed45dee41420d4c430474d22899ec76d5fbe45c64a9ec02c5edfb30fa2bdfdd1a43719e8eb6170cadde201db94d9787cfa2e0ba2e8053baa58e73a037a90c1be35fdd0ca5bf75cc01cb26ed58bd78103ecce854f887787c3861cca148a5ddeb87be36323ab4a064ad761fb1c6228f5e930da1212e209bb2f28f3a4a8ae05210c95822c661ea2a2309fcf966ce9aef017fae964c43125b9a3f67274eec48b5fe32295647266f4818274f58d7c7643bdc00ad525107168691e1d51dbbd139ad67457883ebc13bb77b693b5276888b3333a63eebddd55a0ca9434da2540de18205d9ed96ddff071f369ffb90b32f6dd0ca9d7b53444466574c29fab61a53894a16ac9231f489e6c04728d0f5e90597eb8e39fc29fdfc4183d83f587f9593d2cf584bb5a17de28d527b7c2e83e1590515ca17bdfaa325fa90c9c8668c0122509bd6f277ce02c0b1215808eb8dbac2241573b7f503125821495fd2eb0e2f29678fa4fab52010f04f49466175241645fb9f184d4af412fdcd5b4836803e356cd46468b5aa4678513c4b9a8d30c458990ba0a0c165d57160d8c36d7302aede32e0fe7b31dbcdd4fb42fe5455c15f48750e15498ecc0378c2b51afdec740bfabf31557400ef73bc08bf1957f9ce77e0c8423d3d0592d653f3b470a0527c730ef7e6047af0ca63c32843c1f89f9d819ca442d7041974222a55a6f9f4e1d1fb7668d4cbc9b02a8b6fd95a863299a98faf2de412d1f8f501aa7664a985fc2f2a928ed87b21b7b9ff1a8fed25fc44b091aad49def2aae60c2c99e421b5377d639186b31bebb19bd8d43660c28514bb06311237ea9c4fd33f0041680ef96f12b5a75d25911923c93754fa7a26c98d5699e84be2e8a140bf0eeb4cfce9a0c07efd862a32eab726eb5fa95b4e20bdc7d86a961632730304b9493fccd2ee7c078682007a73b9c6136bcbabd4613023663afca43c3b08952ab9c5c78b9d3cf91e418de67e28db85c7a89299f98c043f3a8dde96971cac38e954e83c134bde837df7f13ef36408e5a861bf00d0f8ffc8baf9cb9cf4d2e18fc95b32160b984113c40ae6e85589b4ac6c5f72ed793b5f71ac73f4a00777ec044c2fba1775bff9bf2699de58a158ab522e3d8f07e7f138c2282b317491ec671aa9ab60310be5b13cb05d80eeb799d040ff46b9349a506c2f1cf25b9843180ec05603aac121840775db7dd33d25e36890331dcaea87b421cabb3ecd2a258ce85dc8580b5f7136df0ea5cdfc2da10b45b7cb96127b1a593fd693d7c85ffaf802576a7b04d00a9198e89abb1b5c36455c3908aa4f5f5148915850f60b4b77196bff72d17fc59c570e85080ce7bb68178d94da705da7a1d859952c730c9937a597b3642f7129ae20016fe45f2c1c12f513b1149979b8d253abcaf50e183d724d1836086e0b46a54b5baa0a3e7c88e455c0d8189bc99261b630a54d9306021c719a5002cfb71fdd6a28e99777afea70b397fbf83abb698aa1c5bb01058d84d2199719307865378512aacbe8aa9d8c616dd9f656a0586c1a18b68e165e7946742269cbaf39dace2201dfcf579e946f4c69f823415cf0b24ea34c8cb4999671416331829a27632d056e54333d7d5ab422e30fc0364e41cead84bff1f54cb88632ef5cd5fb5c358da7b79af7028629c45771ed53360f64039f699c5399e6160133dcd9465bde9350d35cdaadc84793abb8c75d2db2fceb8b36df40e8c18ca0fc9c5e349c9262cf9215d2454e9571f1fc851aaa3fa9167d178c2c2102de6238272f31854ab749a7dff5429e4f03d11972f0576db2d3be2bafcb086ceed99d62bedbad5ebb9f344be674cc3f4251be75da66ea9f72eb2bb041a337040eb10b616ef1a35ef28fd202b32da60cbe767575229fd92169263b2509ff27d21a8ae69077c116a972e3f75186632edf29ee8547da769ab9cdcaf73b6288505bae2051bb24a50760a185e0485033a75e4b5e12aaba7df7024ce36a11846758d1cfb892f213018a6d6568cbb7303f6fa4015b108bbc2cb61987d6cee0f8f317c34d54548ed38d7331c9c88f4c168f92d104aa91d3f1f1b84b800d521382564027c6bf649155a611fbedfb5b061cac5801e6d0c238ebcf6a4d605c3d7e6524bcec8fbfebdfa94ead0781c905281fbd80c750d078f3c5278f283db1368e3b6d2c2045f4e8499f7449b6b0494720b0125094f3574f41e37415fdc4067e79cc2e71f0b2e6d1bc48dd840a83ab9f6e6bea094b1ab4f3438e1329feecb99fd27c4b2a2baeff1939929b96b1ff63b3cb03da173dac0b717dc6b9367f10a62432ec832644e15b67d9d00394bcab2fa7beca63636ce76ab8a88a5100ecba638e6ab39b6f1d6e006f64cbb6c26dfa900b3bebabf0d5445c4adc0ab9d0f89c1d956ea30c9d0c39450be9edc8888d39ed3361e1b9b0e4fa22c21fcf6d50a9e3c1013536a4299666d26963237d578272fc7812b2446dd4bb295df05fde814ff157637bffef6137d4084877df430ab8996e47177a4128b4138119c671dde754fdae8f8a78f89369042f5891b4cd43b74eac682b29bdad8603a85d7b89f3163432efeaf7f6d9081bdfd1d0caa367b80b9c375c3aea869c67a3dd73b6cfec6f204f61e0f139ba4c3d2741d4aa16c032d462fb17b4d5a4cb17b431a37d93a37830e61fccf919ba97817e77cff446a94c0e88dc08b7b73f33196d8a738ebd265782e33ee188defed7a3e871e8f14c4b253225ed015131c93d197dc3d111953816c37b8dfa48212bf2f9d76ecb219c29e20a0b48479ede789bc9e52588bee26bd9581142986cd55920945cc15e4fae0b6e2eb9510efd63b2f08c297ae9f7ccaf03d00b84eca64a39d317c4eb6b4b67fcab5bd920fceb9df6d3015f9d18a731cc6e4ce22d4782a74069426c46b9a511b41c7bfe08556b839d6cf96a80b393162fa57ebdc7f702caf3bd60ce0019b84c2b5ec20fbfd75b3211a5c3607c7ed4d3d8ca27f83abc6caf28c6bc4202b20c9224ffb9fdb1a45a46341314f2c5855696558bedab4057b35f6365ba6b89c173c8f10824a8f8de8dbb323168036aa51dedd2750a89cdf86a9cbe7c368d3dc521a0e7b6824d17ab651ff9edd9c2b2f5452f9ba65ec5e54aa6b754e8b151afb63a236ba5bdc773e92031ef82a5cc8cdf0f2197ccd14f23df61e3f855dd0f3f77d5e1551ad69c0299edcc50cae1398ead0b778cb9bea9bb15ce91a9a762afcf171b72ec175de6800cd98f799862cb809457c88fe0c8894561ed15868b260929eddfb74af8d7814115673f6fd56dbd7404a032bb87ee80cde49fc36a3b310de5ad3a6658f106f74893aaf1b68b450e69f86429b9600733a1d9fefbcf667505b30329fcf656c45d85b37582d5037ea46ff48ff76ecc13e0c716fb81e92c74593c46e093d345e6b8e9c8fbb1fdf08983112c60ba663bbda03076f0c4b6e4084df83e74309476599ceef0753dc8c84196f91f2fb23dbfabaf5ebd04e871d6e286997054e16dd449f310121a7652590f70e3f63ec0bfc4f29b4015f749fd0c39c41eba9788347cb7ef9bcb90c5dd4d4904ab73d16079643ee723d524ae32082cf19f195b5316c65319f4900ebf47119419d2803d68d8af28547f69af43a1525b7f0c4a55e2653258309dabda2a8f4c363767a3a47161d9743ed3ea139c398318cf46afa9c88c808d3828322b1014f643f7c8d03034f6e268037bcb5c1ce014300a904816ce6d85eaf9bb48f34e8576945f3c0935f94a15f3cd957ef190cd8475ac41ca7947f7a103844cb95408ccabd5a262b1138badb8e80f82e883cb0ad9e5c5bb020c84c1eb133e165d7858ee9400c3a0b6708b7637d8079486a6548f57b2c647d11ec47818d1f25961152e8378c59f7b03447cff8f4300ef17821e8cc731e3117350b730772877e93b9499c09e2995fa380b64cbfc3ef5a0bc4d52740d97fc86243b2617335859db32d743de8da632cd7b8b037fe4d1afc8d534a747352afbd0008e14f2ac21083e2f6fb5d1e53cd5cfc9c1ea472161d9f87ed03c6f9dcf84c2c68ee058010ce9340c586598da9f093320bcd5067f1c1fb69b965574e3e723c583993f914796192fe39bad912794b9b65f83fb32fa8cb63bb87fb444f6fe070666efe21e6ad54bc34d3dfee1f19bc2a55488b67d861d8a4c2e946d439e8637ec513e1ec8cb0a342d8f2338340fb1cc088ae01c9a13e99b85450022f29fb6f82254bf6b6e003a6e64154f1930c5763aaf150eb6b47a552bc3517b6f99eb5239b0b81d2e36485fb91b0317a4ed124a2f8e473c530dee01b944110fbc21da5ea7c7cd3f8e7011b9dc04008ec95c702a728f4d1e93b66894dd12d63b50d58f6602749effd26c2dcd97f5f4da1045f739dede18189cef6b9fbbd4b8b27579224dda63009688852db7cc76c8ca8c1ed44dca91e4f54c21be0570b7884a72e7f9c7ec85a697c03fb217e632f37cd06762c7994d99d44afa4dabb9d7f80da535d3a93a0e26003ad22975d80e92ca2156a984176f3a80696c7fc20cb62314e149233fb65f3786ada91169b4364b3c773b535855102a49f898ed1e5776bba6fa4995e19aff4b09bcbb4dd8b42fea61997c68a38ae111c8d3aad9d5666ed61e15c7c4db232d4cb684e103caa67266c005fa51acfda23b0e9bd44fac8ceb4aa5b382330a339bd9a4f9754e0e69bfb35a33761e9a075c6b542ccf35fe402718e9f1facbcda95773f73d0c0cb037f2b0c4dd3f649f96776ecbaa787131f268b47ed6e81b8c8b67f2c37538e35e4d88112dfb2ff9a12124f8accdcc77023ffcfc17b8df75322c2071da7fa4e980b34a1b1b4f355c4d6e1539616affe6787aa4f68cfcc7e79b96bc877eee5267f8194b00f4b654ab85215d4341337bcf76f223b1ce19e891b97dda966fe174027476d128078be4ab4cb8a2faa07a8cce90a4ea3a7686f6fbf0aeb7ea92f771b5512b1e20fb2fc571ed6989eedfc9391ffb3f32d194b7e2f4af4958bfb7b74a073453cbdab1761c422114eacfd620fde593b6457555eb26281fa855ff52fcda7a20ab9f22fc600ac273e53cbbad9b766a28275bb4f1f06dc0793e60c72dd26a4bbecb568bfde4e999d2d3418ddd0e518e4f8f4ca8b78857e36cbf3c653479ee7601cae2c0ca4e8aa78935f21efe994347606455bb9480dfdcee7f571d9fbf00179c101d4bbfa358abc01d5317ca9a2b349b30d27c177a79cc6162fb58c53b0319b0657f8dc7971db34af8d1d848b2d95fa10c9169c62e96ba77438eac3edcdccc25aae119f6a93169dab4c9460f9eaceeece331f1de4970438f7bfc22c8f3f96c6ac26ad7edfaf5badab6b72377c8ae81749217ecd792cd797f735fe65f194e9c02fe012e05acdfb858703608c83912dbe8180ae69e9d35594af7d354f43dd91d3679807b27bac688c44496fb3da15a9c616110acf85e991cbd17061031df85ba182bdedab3b719f0bd5bff0683b95ccb910592c6e5ff5e0a80fd5336aba37099dad4f1dbd22abe740a005578611a9c823cb01a3efff41d07f0c7a56fbcc6660897bf41c5548574ad5e552e17e224201a1d0819f4b0a878f93d64e0357d09a230833efbb8f0909861b4a677de9ecac183f18c0792084cb149fe96edd91e476d7dd619529b2430f7f973bbcd580487ad73d270f9a86739c3fb2e06aa775a5d6a0dca9618a3ae81ffba75e439282d12e27d1b49dda8e9c6067c1794a35d339153a250d2296e287f03721b49c0adf22eab8bf2cb8180691e91d8dfbbb8ef3d80adba714cab62ffdae06e9f836db4415844f28c3bb4bd820aa7494b5d25504dba051924232ebae557a8a543f738d663cfe169d6f5a3b627a5f73185eb57bd7381588ebc04d66cc1986c3520b41f981a449251b03c4a55bc9d84ff5224ed31b001fc32de03747976311ad04b83e39c57e876ef37e30d7230fbe3d6b91e4320ae31d3d13d8aa7be82d2b90a8b866272c5ae7b5ec66eb0a21f112b710dd87c52003b3c546434ce9b81a35b5eb7d16491e5d2a9ee5ba4542b2490f52be713b245ce2a2a5ad78be56486c52b03a5503465db04d208ef3d0b094b596dcb7b17b60e095565383c9966a6b8b250618dc3cc4111909345e72d63f6a75bb221aa03a4c795d1a932a7262dbc12087537327f9ae663e344128649124d8de688c9e139e510c54639bb80a8aaea91edc9ebb39b633b15b525b6fa66a791b6df6bcd9885e4987c61841b27b22625d3482e6757e21e5aedb64cbba97526637f3478dbf3726555a40f4a89c30dc2b0b2ad7fb8532de87c49f874b8a1f7261335bdcf4186530cbe6a9f8ffe55c574591bbaafdb8f50d571a3320367cb3e01714d9eb2d83fa9b710f2577b978f5d923fa23b9d4d275f1ce076f5ecbdefa9fb15c8fc3aa11771d5187101641c8af82065f918f28a681eba6cf26e338f8aa9b77fc7bb77d655be9c17bdb99cacda020b3fdd0663d392686cc3f97bf2e781b451b08f22849c7efeb84ce53faea0c9a2ae09b1e542139e79493cbf7481cea2ce0e1ebd9e24ed1082560349281fc271793ae2b4935deed61ee3d028ba9c4b1bb14133fc0bac5cd2b24bd9e318cdf694424db0d22c5c3decb59456b358f6ab424e66285826ece536f2b269430e799b31a4f3f9e877f2288bb444ee18222675e56902ae4f10747bb6cf736dad4b69167688d7d57e059648e657779434d6687318c8cfb5b17638617ade25f2c702ccb6d8a10380da4c5a5d2cb37afad7da0ec42900bee284dbc3f467c83e3b7d00780aae1656e7299504627fdf38d2b98db1c81d4db8931366ee637630ff1b8eb6473b2ab396a6897ece9546d482bceafd84f3ca4cd80b1dcb06621eacb31a485c6df9a42538e5d361f58d4929781f60e6560276deaab13461a178e6e3b2c846874e43a25d7ae7b706b1c44089351aefb549eccc2a74b1918f76ca6a27ca6dfe689aa3d35e3fe8bf937c7d1f6166922756f257715962d7e2447a6832259190d8ba46323ec1e434d4f421d5a973d78ffde1e3bce094a986351196fb480021ec8fcb83030e5fa80d6502e447774c761865e4fd407d783e0c6edb79678826f5247fcd100861203d940dc2a8c32051b3f9580e2ee9e8f564484a03b4233bb7a83853423dbadee02f16215c3cecc39ea39fb6ef84f6c68d28517e233adc88175ec790ee513fb3c2d241bf295fced4b83d837c484854604f6bba39a1d06c42449dc049b63a8a6d9f9ee916d082136931cc534b6e902d3a72bede02ff1254029f385c3f03f408d83a2807f76ec764dfa8273b1ee7cc6affc08590c355784b0e1c64bee049664d19a85cb6c1dc1bcf74d8bf8c0231bcf79f1b2da1b2652d9198349a3cf4fb7b9a221d5a9ac297f1bb85ee5b4652a69c94c06461a4fb733236f1f473554f271a29ad66a963a7360a88837c7647db9ffa2349ba6bb22353df2d549a92e0e0b6234cbc316851fc98874b633520bbf22f47990b0e524c84f839dd47faeb40c520b49424f292acf19d09eb7a7df0ed0a0ae7b331727dceb9f5a32080bf0d1f610a2927931dcce96577b92ea6947b8f1edabec0e5e77497a801fa0269e92d5b28fa6a6dd772182c197064467f958e368f6b3d130271e77493dbd35818f2bb5243d7795d9ac424b5f4fb8c2a6d7ec8ac5e26205169126daf48d9273e9aa7925b04edb161bc11e1afd0d938f185cb1c67286baa35043bd05c4fbc9c28b1335fb18b8a7a89c8fe616133e86cbb1f580b7301fe08f141156d6450dbef893b61583d9007300efabe36a52d6aae5eb300ea8cd5fea05e66d3f90e201ae620372fd7a561748ff87c2123b26eada6b0a0ed168adfe2a174f5de4e991e603c4d40eeabffc2b240e44a643b3cca396aac8de4767cd963144b8c46b3f2061cd86f879e6c4a2e584a01c7f13a1baa99e9887f8d4c2fc6a866bbf31d0ea57ceb089edb61963ddc9eb43a0c457314db23de7c066dca6d2cf8378e705a347726e593176f7c9b3f3d127e2e01edd8bbaea88558a41dde898b0e0859f9cec8c6208b28adb1e15ee459db86369a77a6ccd332ac688b4bab9f85d6a6f91ebeb679c895eeed1e20a55099b3dc351787c6a6bc964f4f49cc91acc2dd74f9bc76801e014dfa97b1587e400f1613ca13b740aed3c3dc57e9304be4d9f114bed77e3cdce3f48064d0c2f82fb0c90ac04b7ea8342aba1e3655751354e96d7327b21c13826a184cbb1958cc6b3bc49e12ce0096fa6d30c6ad4c5a1f8699e2d02a59c5bc3739094659fcf69f83c94cd395cdb351ddebbb944e28893c8fb6d59c5521cdc4586ecf9ce343fbf8cdad26efbebbf06605a9c85dd9cded557b16ae33b9b97cf141b5199ebdf5fe6fd35071e92a1a59eef965ba742c1b4bc828db0e6cbb35089ea9a9d2cae0c64da1640417ff4920152a7538dfb7d49288871291f7fbdb06b08264be3b1b18b0cc993ac4df1d89951c3c160e9f2802ce739c1f670febc1d94831b92b28f6ea996e2622b3b82ec7c0f4423dcc47eabe8fb3004b350ca343d5dcd9b1071dc55abae76f23354710600181139fc1d49ba305d2636402ac2430f9df3e338d7a27240dfec497ce36b2c1a4f7b19480674e74efcbee7c578483eb39db12b53c4294c8059561a163551f2fa32788743c54d6322771553878683588f83f3fb51000a8a0cffea1a8407d991ae7f0b3d12d89bcbbbd9fdd25ac270ba8cbfaa6f4d29ad61afd0ed9c0b714d1ad166f20a546dbb80c401b56b6874d45c9a14090d39b009835ce7b980850411df351df2454ae6befb4fffbc022d56f2fa1b4d919f434051f613a3e106e812e456f4757a6d0c9de44233e965db0c53261d02e28f90a624e3612d399dd3b641d14c83b110ab57c833a3cebb562e6baa5e613a0aabf7c46ecdc477b904a6746f750cf19e02859d6c9142ea905253ea97576eee62ca99a7761efdee8e70d9f58e53dc879553726929fc3dbb30484ee1ce40a29aaf706951e74aaed57be248c0973076572a6cf8a7eab6042f8c8d09e1c5e598aa66addda4146773cb08ffea0e580b8a85b389245f4cab944eb403612f81b27f04e7b892820a68ef007426a54f5f44cad3a3be026c571e63853e58f106623a600374332c28d942edf3f512f2835778469bedf04bb14a91f54e6d2678f672d96d59bc9b64c1b91524daae16eacfeb2b53346f6a14ae27ed6eaf0fbe3dda882476d8720310fe7387a450a6cad84436e9b2bad31e2df05cf9df30fee21834deef0fb77919bf7f8c53164777efe936bfefb7c3a925f61b9eebacb8c557117fbd96e1c14abefd1e99abfb0bc113c91be79834f00aefe9b43825456c3696d52c97e643f40d89c86916477144641c436b53a81a196575b50fb55f2b509b09fb6023b0a6429d75a55f5637038e2507c154a545c84c2b670abf2bb37a8206b50de1bb8c3ab537016a60781a630de70393bb54d7f50041690c60bca02f54c0c9ad70dafb13d4190bd552097f63519823380e1799ca0a10c267913afccc54496048ac3022ae258e40ab8e0b4dfa7383e3b50ad2aa420445ac16a37eb3ef6e274c9c36ca7768b9f49b0c0773ab518342dd94fccbd88509137aee6be5163505280af01d9aac41840c3babfa4919197fb0fa1dc6226c1df981ff6a66acd35e51d89b5d19b6c97f604082fbea5b15fcd580fe76e99b937561be8e529349a8888a1f6c95d310ec969c593379c85c0379fca66a922ad6ae91060f78edfbe6ee53f35fbf53f27769b765327fbc2dab084b15b6abc46068739062a71bccb336280d61b42b878ded27f3aa03ffbf066ba17c8e2617a6a40ffcb8beec3ccaa2d0ce8d6f2230588767101ffb00a5588d3e77fc3636582339e4c2ade143e74efb8566de7eb924cbeca0c46a8dc7ba7300be4d82faf6ec1a0a77f849f699b00d66e1f9554716fe0a931ee1cb11f5dec8eb21e3b886b6110964ea4332b9c936102918c15185460d5a4e52a173abebead897d817ede5947d630025e23244c9fe2d00922bf04b4079cd80fca73a04a6dd1e89f06e261cbff8b1e5475936265ef0fe990359377bbbea272eaf38f05e031514699bb33cfb6c9978a86330246b53c99921eafd4cc3c9cc421fda0da4fe861786f8a2107d378f0e84246d980c6e2b792b96ee227f8eb4d510869e8326e4b9bfe589499b51b70bc5ea96a2e80ead50b68472fc071540379da4542cbd30bf3a6ad9e028e2e7add906764ee2f3d3a3e724ca098e6b17a15995b2d1fb6fbea2f95cd59af8aab3e10a8a2facbddcf134bbeb1b39acfdbf7a0b5c81e76c862374257e55a4ee03afcbc8f980dd916dc35162b3672eebb06e3d88419d690ab45b96719c95e2987b5aa99f97759c4412511524697a8f1d9a6ddd465b7402cd61029b554153c25f8b562f943f30f9fcafa66043c7aade139e0aef533a123664ecc21a18c514b42be86179a8489e1b8fd0e74b0f5d8ff521984e153f16fe19aefcfd2eb59c14eeffea75144738fc2cd052cac91435756b1afb280cc425b7a52ce819a3080570ecc74dafc7d000821231b2620969c8a04fc17d5eb431b5d5b5b43aeb59c7c1caaaf82b10a70b4317b1ae35d5d80f70e79424a1ffc7c28e7a51a785228e1b9556d48c63351a150da3bbe336eb2bb9c5c968fb1b5b18d9deb6b1e5a699e417afe39e175a5b86484c7352fd2e1cdec1a73582ede5f0beaca237f21077bb3407587a9298a948771d5fa8b215a4e635d9a1ac0a1f06fb8e6beec066c374af4a16e9d9cc38d524b81ac9db3e81f29c07cc388234e2de70c4869b70432e905d9a6a6517eb70bfea28d78db8c3d68e59cb2864bfbefd5099b7fdbbe8729ae46924ee237ea8c135e800e0219d077d619ffd804450608b0caef99097022a5b8ad42e1425d53acee33bdb975cebb94e04a7219780b09be4b53c5a35ac1ec4fc0acd102d53235e4be4d79423fadc7cb7ccc14dcc1690974626d9355b53ef1f1c029a948a71e52739d18add6219f12f6c27c82cd12c09ca7598a72e2825722fe4e1b9bde639bc7b9a0a813df456ef15e994998e4ef275f6c27612a62eb2645153f6e3ea84d806ce78d40f01efe4f906e4394045ec3a1566884a76fc986a2a9fffb5a4b0ec798fb91f0892085fa7a63a724dbd4f7d0709b6177727bcde7e51f3bc9a422824a95be59fafa26359cbfafbe75cce42c4ac2a089b12f964471a414b1b486aceedf6dcd9f20e851c6ff709940eb055898bb3f7d7ff0de0eba6992d4270881e7dfe3ca657ff0c41ee4f7517ab674456283d200a58c5a729cb4695b756cab7ecffa10374054a1c2b1f92c35841c1b5ba977d10d1ac7a569313a1f83e170d3be4fa259d49616c58d031056a04cf8785b565bd98bada5cf4eb5921d1a7856bd7e3c6fb003477308bd0d8115dfdb0358182356d99b0e3d5d0efbc44b3461c1af524b1e849d58e4bf0c86cd3fbb5691738bc1633af173e647318ac4c82d1a9cb4f9b45ca18338105bf7b57b871856833613080a05578b3112c357f8e4012a60a103d49a6c10d0f8c621a522e88f4150a5e875d6b8a4d072a2563a868bd7edeee82fb219e5ee8478c7a2bcbd9f15163a0dab56ed33acd8c3eaaffeb661d689e9cfe0f22b22d3e7d57131837eb35c873d94e9506013315460c436ec34fe1c5027cce99a71c5035a318b8ee9e4f4873c333f2692548d06a1d25dcebcec3fd199c3ee64327dcfb1225621e09968b8d57e90011d41f17c7624c4c588308d8ce419bdfb057382feb4efdb5774a6b5ec709dfb567167845a12dec676d8ef99217d4f9c741b6744c923e00b9d48fabb15b84906b6ec033e13d13c90c5c05e200c4325f6a333715b37eba7ee9a05ab7e04be716308fa0a2fe2e5b4cf0298895abef09dfe0dde9990a48e147a891fdf0f096aec2a83c7ceea3be3e875349266c58ab566e8e8fb097690e471dd89c51c63800e8a98e519a8bfa28e19232d790823f9dfc8f5565f0cd85be7088dea6b36fb41baac29ccc71dc312cb329b4fa1190a6d97028ea225d30d446f7c4fe15410dbc368e017f3753d8a3e63ba40db844a07f5d65b2a40e63b9b23f994eeff10cccf0ac49016c663e1844ae6fea7abd64106097cd3de6504c281b7bb24c63c62c87350fe9e1eaa38a2e58928dc052bcb85d70d3816abe544b0d4d6ee247822b87f0f231bfe99276d15ffd01aa39d3e5933d52a11939e653b6b4d229179213bf65de2b907a15e81d720029df7ed9e602ba275d4ddadff625df1adccd2cf341a3f41ffd63d0d23b6323fcd179971b09964463eec8104ca05f98e363f255a5a32f514e28f0117a91a6a4564a3c224a55f4bde9757af9c02f5ff01efbc627415100dbd77d2baf625790fd60a5f5c412c5e79d7fcc968882cffd81bfcd664cf114cdfee450e4e7090fd0fe219fb519239f1736ef1efe42a6925bfdf5771fb00f48b8e911f133f105054c3fa45f6c3c3f6b04d61c93d5819f003f91fe79096f5c15acb631849d9d4cb4a5091bc5df698fa1b9a3cd83dc926cd7c8afeb931250450a8e73f3557026cfa3351cd9ebd7023168abbc42a84fd1181ba3c80c5c9264b7667fbfae450c7ba9e2d41c5fa1b03fd4738bb9c209aa7bf21ec15f264143f86c5fedccf2860be0efeee1cc09dcb095f61cfdf2e06096514e0629ef3b8d012076f635b7551cc00b7b45cecbcf0ae890d0dc88ac58027d10c75db999b526c22abaa48e5be9118bc0eaa43bdf0b871f365175eb9b08c4df7de558bde438618b8cbf9a49e06a6562236bf83cb5db47174ae0a8a70c18d89fbfa819a77ff4f60734d5b105aaade9be33cf3eceb8652390a58a52b4f4f83356dec79849be83ff64f9c923d536e2a30a2e7740857eaa91521b5d9c8f2ca060fad8f83d08caede14a4d060fbdcc0ed57f330c9f61e95994a1e21a70c1c903097182a55c1e3f55d30858f4a81512280afee5771cce6e3f363eff5686500708c46259cf00ef17fabd320d3c99a61cd9205bc194f795408d4a7caab151ffa79b13c88ce650600c88e0228ee736d0edf30259040f4d6cc948f53a2df891824634d8305fa46f28a81f5a1d5c7d52af49be48e3fb90b8ec26ea394af54d4dd6b2f16ecfd60b14552d8affbab026d880623f290badb8ccd5ca699613e38fd5897a87c7af7ac40140f9b9663296e2fbff09bdfbd21726920505302b0019ecb9f2c785a8e3c77b46b4c4d06c23a832c82ae09145a40724338d96e41d8d619830da20be69e079cd9997933c3b0953f0ea34784b73a82120820f9c22a69ad443004e39626bddc59995b63fb10373ccf3c92cefc9a7b99f8045a7a71f1a625886d9a9cfb634beb153310a5a7b795a1838c88256de41be8d212127abb868ae1136a3da3d027567a1735feab977e01b6ef600eb4ca0d4dabdbc0bbb8042d68dd0e15e7f5b8daf0733d79fed1f6aba28fa311bdcb69eeb1079857d394ad62fca23328b60efde2781ac20df00a2f29b00985787b8ee17214621dce083750c6e52c52e86397b4a2dd22f7a483b731171e23c6cf65831987f0c1cd009d59173dd9e5d22f9099ae96479fc96903926fbc0e90e01b9688b2c7bf4ae4d3630591c2d50eab1fd10f677273b6cc6723531c4f8b2048f4ab8125fd5a59b6078a6c3e5429bcecd27756f19b218b59c36a9b314a5c052874eb551186520d5dcee71964b1826375f3077fcee71c5d48575fd020fcd4336ba7e3c08428bf2c14d17df6578a1132fba7c4045aa98fa5511e927eb577631883be632040fffe68047698895354f679b0e7fc4571714880ac59325844f31a845d728397a6e9c75e1104c8dc534ff62172c1ab274d67a6ec91ec520a34deccb48329d713f0d0c04d949d46a799f945160838d9347f82c7ee71a1ff8f62172fd7224d26ea70eede7e09494cd5e472d99e5f604bb1572cd2b4cd51a7791cafe434112df79e719f35a82f0f2c726126eac2f9476c28c6cfff764c698e45c64b1b20197929e1046a0e52b9de7eac39ad8a48cf4362ade0ae70dec7c6783279b8a1b5f57b1c6be492a13c9f87f2cbf8459b84a1a1ba45a21b4e3ef4896aaddc6884ef4777f6491d2d3ee78e3c53957628304c40085490c5f3155719b9b0d5cf9a58be634273d7fe8c501f35bcbc484fc0c1133091ce645dfcfe7e48e6ea3d6e18724995491f5d23d0a0978f0f428f1407800b26790ab95e386aeca7e743abd237bc558d387719adab56e602dddf64911af0cf0f7654cac21a12cac7e9196bbb63a32fee708ea50ec82e219b5de3ab87d6cfd94c07605ab7cf122b82c77c1aa530be8cc1c41bce9cfad30a475ff0d949b68c2df593de9569e0df54d862cd40c2c575d6cece9420726445021c1abe225d3c569c4df03482d804663ad5bb8a66f0436e97f6be9f6d20b852587795bba402dd4001a89ade82a222564a56dad10e31d110a600a7daa9f5b5607d41b690a669b6d9f0776b6af7a6c9c1f73d97a94d5363f473422491badf84396dc6b182b6ded4f2d5c8eb6e4694a348a3f37d9c2a1de202f469a5f54b15f2eeaf4a8ee6ccfdbe673c2eedb6ec501fef47793a5eb2e69ff0fe73f04db3f2bfbc357e0fd886fd2f984547e7c4fb8902b3bd81848d8122e7fcf5d63e86ebae33c08e4cef631728eecd438a102d1d609b37f3d68ebb01a87494bab19efaf6b4111972de491a1d826bd919c41b1911fa4b369e261e5882447b550933fe768536a27c8599566d5c13af9986e6d565f970452e6b144969cc8c4e462bbba84676cda846a51e404c5623a58262209121f0ea8a4887f2b4d4c24a7f4ed311fc8d1e2e580c2fcd2b92ef8606ea5cafe9ed65ef9a7559d01cc8b887ffe7974a864b631bf777d0eb7e307a0e3cc533231839dcc461da77356769c94e2e494198a21e5e352a3c06146b601033a89672db809e4cbce360b606b5c1f8edb6d3fb64d4d1912476de417130632f19115ac77e2775e8730a808309f83e0e9744fe4ff7d592a3cebccabad7047facd31285d5aad5d7710f7a2f7f8479ec079d2d2110d9bb963f04022ce3959c66d4d936b3ee716e710d42d7cdb586cd886a448ec7728b906905b1c8237ebf24a2f6cfa215a61a39fc4a774fd13afff9bf4e76d8ca05f221712c0b87ab5c5f659e7b440d4c0f16033ddbbc64eb030665afee68f8546a744b754290d139682ad4e6846867d2a30a58b53fae576a776c651edcdfe865f40e834486f3241d8433f57284e426b7e48881a71d0d4069f98d0c09bef69697144f02f967991abdab97862dcb452d3cff9e6ad9196effdd6c4ec7fa59516f48b68431eda256634625e735252f8b8b0ed6e66e1cdd3654ea9a5c55e975d51b669f160f38b29c7012a11a624f8ab6439e80898d11b96bebe84e98b80d69158cf430a82bbfc8e6b8e17317e23af1a1c591992425316f08a7dc3704f47c58788e6be61218671b7bc7c50b5cd0a7bd3be302ade0eb2ec0cc9ed632377d624434fcb84ac26bc26d0c20e881bd963b534db10b9375823a6597d72717d9264e1c41a058525d4c4d8be57b88408674690f7c7e071fe704ec28088c8c8d8f503fe5043f214e7c27254b177e6e2a5585a92dfac6d6fec233de57b4395bb1886f2ed13e84ae8cce1588984a6d3e2bfb092dafc6f3deb0258157df68e7422be827d801745b7161bc633c6f88e19571b95d7e6c30c86c980763e827279e11a943647c2646048aa7f1269867f9c18196ec9d912f205ab2a5848a5dc549b4fd4c0e5e21862e730ab3406945eb2167e0a09f1644a3c0a0907cdc92faead35aed06fa4d71e03759ac7daef344d4ea861004042b8f20b2e46a8193bfcba072b12966af061cd792c55797c0bed5e9a72045b6725341fafe749948bd7ffff6b90ccf2845cafefa2027289dba232098337e320ae1444e514b1ec994f6752e21a82d3f3ff9a6384eb083ea79c4ee0a0321020aa440bd6fc3262753fb56854e9d3d8feee993ec816e457dfad26968b23ba9c492b1aa5fe1e2615035d1fbcc5a646293309198d853eae2509b6fa61e0ddd75bff156e405d9cb78eeee15618264727a11de6f3973be5517fd4a20a771766884d6c4e5e3504d5b11ec955880f180453c9d022f9e6ff0df30f58f725768e2d6d52467ae92c1ceb6c9daff74352c5b88328acfffd5c10c9d1cd06463441dcae0c256f568e501196beb6a43244173dd8cc15562a2e42b2eaa907028e140622653e7bbafd769fa5818065ac2e036f9aa1fedc86af0e7090e0a34ecb89744a4730e18a4a555feb160191de9f505994194bbe5269ae21a38c30d3ae0783994a1cbe82dff834d23d69176cd4999bf0c9901a00cc65c5643b4a4eb6f5c9fcd4c94719062bcb001e3e86919e135a10deab384c11483917b032f90387ccfbf6c6e8e08485b545db0010ee1ae7fee6e9ac328bbfaaf1fe17638742534615fd5c77ca8b7ff0bdba56df8909dfeda4161fd9cf4871b76d77c6c2e7d70c13520d4840b04aa37ced69dd3237fcc6cdf6fc80ed695db77df37ed56aa0a553f52d7e94afec8e2eb595d1bffbc286cad416b63372f72c5cdafdca05c539d5b19327ae351d7dbeb8f6f05d119792eb652baae9f61092e2185b549d5b9199e78a49382d5e64214d6f28709a29594202320ea14736f057b001a91a8bcd3b07e29372137d8df4bc2e7c328abe9d8db1575796599707578cc13c17f699198ea8e1f6b082efbb751612a8480bcc21ce7731b699b8201e273e192e383f34f3add52c32b9018ddb1d952618b8885b5b425fd763fd67b74c8d159078c9ef936a8a60e7d25fc0ffd791f3d3fc30ea20aadfa8c75f0850033bb58934eda3a25f1a656252fb3630eddd745dd35dd8d2eb3f9eb8502b3bd713b35aa87412187317f324b5c5632d7c58d10a89d2fa1ed7de13c97c1025d9ad4b9c8a494b0c8bb1ae6826c14f9968c1b5254da3659afeab4eaccec4c2d563ce5dab275cfdc746a8a8dd16ae666ed6dde1c9269ffd340e7d6ca3c8c0e046e365a1ce78fb9791bbd1eb5c9e6a52cc949a30fc4257f9bbb6004e2f5057272bb79faccd378acd58377b2282730dd350c5af8dca1623126cf6b07eefc37b9a2a0addf6068cdd53fb188dcd4d7751f0d0278d28e8077756bae80ff41f18d5102bf4e82aca6d1ed41b54f7eed9bea0563af68a66ad61bf78de57bb0e8342fe20b3583f05b842edf47945221c87703873f604108a35c72fe96cafdd532c95a8b60c4fff20be3e43c2b30bd0783dca658761de9a8b40f581de1232e4dc7b545f664ddd0ad1b82c7a8e2095271ddd3747bd7a840fd4c4d0796893890596c5e6d01ad6df71d54919202ac9c6a4914d7a1ce291c7aca4827a45817c16447365bea7a7e9ffebb0f797a006b17121c08564ba9422e97f97a85262033e4f5001fe2074aa6086694f2fa4728b0499a7303dbebf6681b49e5d81628d84cf884aefc5366461708f7cf264fe8e94f885fd4bcbe806b71ea351fa9e61a1f43940a9985b92af782e09fea6f1c172667bbd9239174f9f18062d640b1b9cf003aa45aab4e40584eb03972ff827a3c8991644b95079b9f7579aff5b8219432f51aca08cfed5a3bff33aa8bd192e4356c85a08b457046b09fa054fa7c69fea771dba9aebc8a3d75b3e49b04d9fd8c296fcbc72542ed3223c420c293c70519332726bffadaacf0faa8fdf6da4b8b9dcbc578f5beb6194d553b811ab7b7c07a7bec28a830428acff2e1e601e77f26e207fb397e4326e10b39a3aed6e6e837eabfc68ac145c090843e99ebf4f823d2b4e6c39c603fde9aad70cb2a6002eae044b144b068adf0a4527481452e66b3ffc303b5ee02a05242a7c5117af983d89897d0e418a15b4c878d0bf014656b381b124282bdffbaba4e67f43a0beb9f1d4104a19aa01afee4c0974f011a30a233f5917096525c49899f8e489daac4d98ef1307fea02b1555055d9368241d1fbc0f191e42a19807b6232b0687d08c719ecc583541aa9cacf1150d0138735476e1bfe6137c50176c2bd6dd8d55a60db785945ac5688312288c46b2afb46f6a900d9ec01cb6181f166f7b3657867d1d6275a90aa7afd0cecb500d52441b562895f899f1863a18c7636880721596e62e8f78008e84dbfd27f3bf04f9345eeee51e8a77738c4c0c8812870ba8f13962d01cdbd248d71cb931e241fa6c30b1735d74833c02420e63ae6ff7626b1f81d9c8074449f51706202cf725b6b0a4bc069a9a6fb3912d534c8e387ddc6a5f5b3be55a8355e7b53522d80ccacfbecb54afb3768d2598f30585d7467391e2a06797d005d69ef14e14a5ad1808859400cb6286ef9173a1ff854f17ec8c400dae3f6ef20863dc6c7d9539cd7d12cba960e27a5dd9c9cbfcbafdb268932ae98b7adc6b0c0185173eb344a5221369a51d30936cd27c4884f09a74c185c271b0e02cc45bc653fdf23b8c206dbfc6a2af1247159db41a59a8f089263ca8489f1d85b72835e344d57cc9062a036847fd4f6fe358a368e63765104d409e7185296873f3d115d030406cbc1a724a8f2a1a06f11f964d40b489d3f61988a27272ee28b8f6dfe9c8ad5bc250bd107d98ca76ce7a3f26c588723dc8ecae1557ffd5ef1b68af3dfa1b0217aa9c07aec330bbb450617a05f8d40d013c4c0728132871bd85d2663d549e113efdce61c44f88d002d780c06757e471df96f6772af1f630b61848baeb5ad149d080863d7f45dd520d0742493b201fd234bc9b443d563ac10c9e8416ef3cefef26c6765d541f9cb2b7c8b1f5da57b1e0f221407efb282550d113a8d67e3da0644087a9ad94340ee3c42fe91c7d9a917913738b28adc941fc9d59d5fb173908f93f58cb868badfe007925be918ba59e4aee76f2108fc5403b7e76e785f7cda30906ebc2423c3ad16a5b81a4cb6d5949b6913b7ab10b76149d4048be52ac9ec80e74269b1a424bae6695e12630c8caab929969d2bcc57b9b2d571c5c745c9f77139bc7ec531b2e42d15eada62fe467de2c5bca02604c94f3841591660dafa5a6b54c10d4ec0c91d2bcc8b6bf7ecb7f6617e7a344490b8eac0affdf6be0136dbe8c18aeee73d39a4980f0a88ad6606e7db483ccf7df65fc0b5c1a9eb14b3a2a39bd7486d47b7a12b1748d76e23bc377d28b626089ca5d2808ce48d52256c5ac23c3bdc307b3c92734ea282a0238dce7c581158293b681450bfc435dc643bbb21043b3ab2e916e49505b5e9a7ea217a7c7a9c21fddf57d83cc9d5e7b976d44268452d5ad892d986e975cca97bc9a4d050500c583b50cbf36e7cfa1df8cf0698b0d4d595d25d9c8a1b9ed13dc19dc277b5cfec49ffa4ea36f6d4fa62d5f8c067c19115960a203001538915bab122b3dbe9adef2cb5c2194af4b807bfa410c751010934e83d3ce5abc3abc53ec88ced09f6abc5498a9cba778d0c11b4340594856e77406d96f6457a43a422dae6e90a156d929de610e6ba9c31b2bcd098a426fd604648f8ee596dd924069b5c75590af4d21c4b7e81440fbe17340f72a1bbd3b79125ac28fc8b7f34d2ab0ad04423b3c83906bed57e13f15728ac6f0799de84ec8b3da294e2f6c2ca9b366141e16eef50e2634201bbc777888e69f54824a24d57cf547aa6916010540edbce00f61953c2edfb573c17cbf32455fbcc540a040d17d1ac1f44b9568218090126085c244f8bb2f66150964e286c6ddc8830b2b93bd34feecb1f3266bdfa222f005d4b8829b55860503a7d5ffeddf0591d3054f8a4900205b78b91b01617b4cf9db6046c974b895e583b071f85ae4ef02a5c9b94d6adcc0383ffb05eaa683793815aaeeba9ecfdc06d54c6586e45cf43b4ee8d942536baeb592aacbb64419dc92c2796f3f23df5135ba30c1ac1a1d79abb96a6a7b5984a6923937172444530030f7ffe8af88018c6196a20dede58c025add292365f02e60dbc411cf486a9dedfc262a9dfa6e100c7ed1b79b0a24f1b237fccc02c28e4e13420207384885fbc5c6a7ff69c4bbcdf3b8e033dc54368b65e9eaaac6e6d01c2b85c0d46a2c276c4681f1c542e84eba3e90a467ee41f90fa2682a8a4e05bf8f2b31ad43865766a89d4b0dc26c98c466aeb552e2032a4f9cc608a1e68e761d0c375802cfeca4c10031d596e7145d00d703528eb20b6b7e45480d80d31074c0b3929a59b6bb78cf3549b5f3d727bc2beab71fb39a3e8b41da9bdcf53987d11a9edd48587ff470c28712bed7f5a90df7f39a099ed0eedbbde6d974c23b79dfbce881dc749fbce393e15d58f1adfc70b9af0dbdc6f178a3df9da1c8834ea7db9fe7ff31d757d23a42119ee20ed996e4fd4db6baee38d3d269a1c627af69ea60dc49cf1c3e4d92dacfaf1e034ee2c6d14701d1183a4b9080f9034e72ca20b6283d1bbad024cd7c587fdedca3dff6d227ca4a50f7ac05dea45247f696e09a7c0abc55d7021bdd52eca89609d92d8db8e3a061a2309ffb02814f40c541fbac3bf14fa2a56fbd6c280f31c1915fe3afb88c2246026866adcc5d09155050d1d3426a121e00f5d0098cea957ec5b1d12f2125b4db3cc9d7fa63f1fe604b3fea11857e26b3c1d9819a3fdd3c725dad36a0c8f7b3d06539cda65d1e2127ea5aa486d1901710dea9135abb0296cb51e547b10008aa341b6318c72a7e6d19732a04008ce786f16a306ba766393171bef3d167f371f3fe9edca9f540700065c9bbb14a139a1b91c102be8370f8235db237fb0f2a73142f71a05575235df343afe6aaf9dc8a615ff40168ad72dccb1df568fdabc5032dadfa5dd0407828922013e06cfb1870076a2889fa5202dfb0c660bfe62da8e18b768e620b8507292379b769563cc7f9ee38799eff7267ae43d79b6b019ccc7de51f0ba1366a146e9f1b80d89033b37c08b66e94401c29dab96edbd6e405011e86260644267ec4db0ffc0e1f23353073b29c693fea4b3045cee5ab6fc59a007eb5899daf6c090ebc3e5b955bb28680f70806315ef336d4c957e34ec8e4a56c8c8e57ca9fb4e8fad9e76544cb6770ad953b9bf77e868714b8318bf45699b54e23fb9b68b945e27b94f9c27f93618736c9c07a0e7f71980f421548a18feaba04414f17d81d83ed9af3bb90c64ea9a492a4f753964679cd6ef47509076c791315622b9f6e7d5ecbc2ea7dd250994c06bd4fcc42f47321752da0ae441e66ccde2205570e09415bc4eba29c673652ff19ec177cb3376955a74694ad5234da4c9622f492e2ddae05a2be209c1f80e5c27b4e3e81c84d2d53467cbf351e2dd8a717d25ff1dc16d9ab085a04edec200b836b124a1f81f37a31506a74b363d21dc1d5bd144b46dd4ea4de004eba335533cbc36d7c275fc111a6be1073c53d6d14d5d3f9ce15689dc62904f0138440ce422a2108d71bfc591072693915d465cd8b2ffe41622f62f2e41f96fae5e061539261b74ba2661d374ccdce26891c0774c31755ccf4427481b474a7bb8189a87c8fe49d4186029288bdce25dc42dc0884d3a7bb011c761edb24b73e80fac4823904fd07ea1cd3be4eeb2ac9e6982ff51bfa27489eaf913e28920bbb7d3034c10e62ea1c2641b3bb63074fdbd4d11b06785c2e081c14a39ccc23f14e030617e727ce6d86d668beaa5b3d816618b933a9e4deaff1c4674a8646d2e290880a9ab21e5e1da61cc5ba407f1a0fda2d80124744ffda0302141eaaf47bc5d9243a1de00aba37c013e03cf968e5224dc8a0089bc3b43ecd82c8b7e4a9b51ecd85aa5d3d4474e53da589fe69635e8231402397f2a1df60fe12cce200ceaf52205a32aba990462b3596dce3b497c08aa8435d85d62336157ff0f2a01b12b092b88e762c4834b09d73a2f6cc0d303b79880b20bc9b637f3b6566a2188836feb2d3d053b17767488492e5f6b47d76679ac2d4bc85c8a1ca2848171bed54b663de577e8f6c26d5380b86896b4b3be0cb0e66ac2dc8641c862c62ef56f2552eaf7db1f2adb72b2c522c779bd2648a3966a52f2dc23f7bc19f3bb43bcae69f2b14cd9437f5f4280662509eba1c8b433f412a170b922722c77952db792b82b44f434931f6ed0a450920172b8f22dbfb0e7a764003070d1dc0b7603afd38bc812237e065b725b0b12c6a0d8ad8e2a5dd6fc649459909c573dbb24d824e4b7721bbb3d6f2e7d818931c3b08f4d68dc61f910b636d8b3c66a466a87e3858e2f38acc206205150652edf9657e9d810cab6ec2f4a57287d8ae5b8a0f8906a0bf84e2b9c682af34d3ec05dc2bbd8dd519dbda39e8f97bb3b09f9de4a8a358b7e3f15f35c1ff9a793b3881217f2d7f82adddd57108a05b17c5a53f33875dd4345c8435e94a78ffb7c21f39f118c8a80a6e1251741eb250b049a71bf9cfdef9bc7b895f87c00fb0539fe02ead76cdb8da394ccee3b0cf414a4ec1ea5058798dd43f192b20eb973f1788488eb1f2978a67eaeeef0ae6709862adef20d78fda8e9061f20a95224a6d6ff6b39ccc29f0fb44af28c3e23413d80bfb7c466c94b4c6adf9fc21df540abc636ae17960a0c19d3550d51e7a8423e4a43b50d152be3f72402a62e27f8d20fe2638482451497a0d9058a23bf3f2e4e6407015b30e0331bfc8a15c6f50e82e022eea37999ea5d7bfd4fdeb77abe1f599c8bc9b0a775a9c7e3fa8bcc78804726076598a9f4d7a067fe545c09057a5afeb6597463cc582f92ccf18e9795e1d7487e7efcfb090b26a122cebdc22503c02f2de0d03cbf44e25a13261cdd2549a6a53c0474d029dc503ddb769a1e6536c22026ad27712cee6e5f2c4f216ca06d794045b2f0c29484c1d566e168c357e5bfdaed6ff74c2aecb1239fc810ed42e57444ad0f6da14bb1c243f235556de5dc91b24c51a01f4149f91059ff5ae5fa3810b517c8dbfc2e2f977347bbefbb24c387183a03984e1529cfa1bc61ed7966d04f0b07d832ee503e93933b3e8188b49824d47895ed6f4674177d0140dee3a6ab73a82a8d8b34c4e372c0cc67dc1de2e245c648568c07183a1e27502bb2131837d5b8957ab5983aec56f1e864b786639235a821b04bd248a4049db663860ff0332c6550ccf110688eaa9f21d892e27cfe59e1ae645c179854b425fcc60caf81100d12c350c4c82266707987181aeb0748c36aaa9f0749744ed6e33ab00c2eb2f96b5e2324c14a91a70e334d58ac44ede22802661e0927ba2f2b5c55ca4dead3bcefbd1ffe1c437bc80cbc90f1c39f2bb8f409e14d3ccf4016868c6267fffd702f429505e40b8835b5c82a421040c1c0c1811264067b515da57c04a4f0dee90d24222910860d2bb746c78ee1da56e10b762879aa29ed1817c2ae0d57b55308c07ee4d57b824190e35a274dc01a453e4e938c6c0f273cca7f19ad9588ba90e89ebc272e04c75bd2b6c1dd67b2b8fca78b14b88d2cfd5c0de4cb7f2aed173a1659d3bb8f86894ce90153c649f7cd50f09ea3109de8458fb5f78c5909c75eb4f56982c9c742c57db0e9fa1e3c4a07dd212334eab4b9abb4cd27f74203bcf11c3e02c636c9473bdb6ec4e131f3b1e7005c9cded943cea82b908ff44bd3ddf020339006d8028571baa604161db15bda7c9c5f93b675c6af721429e82bad39654caf801ebb74f291bb85b692c5d071cff4f3332c1c9f23ac27f7e14dde2307fbccae78f1f8d722b44d3bbdc5f587a5fbac0fa24661549a2d1082b3cc18d7e43b43b4e5d8ec313c6db5f5480ac45a509d924c7ebf88278aad00fd51552c75cd8425bde83ebb07d4e7e9516719eeeb01791129410450e0a9a331571e0fab9d97e85473a42bf43cd18e641cf4a19fb1a5aa9b5cdeb62b99469b9a58461b2bacf6cfe4e829579769679b9f6cea1c15f8f8f0db68694873afa2fb087e0325d1c763caf5e1ef686a543eb22aacf539d9b35bc3acc1fda70777cc1559b4f3a783f7728e6b491413a46e6151e7c632047a3ec8f3e8eadc15c7bed06ef0f4b8bb02a4f962090a92cda93fa132f694878bfc06ff6320972371677903ed5dd021998a31f475984e126a322c583d190d514e3de0314b44b0eeb9a59ff45daef448005aebe9fb413fa820e294b1fde84a9a01ef9ce938dfabc812202a186aa0236c84f503da008f672c2bf9a64e9ef87925d12002e5461a2b34f2a316da04c1ac0dac7fcedd60a1807558ef39cea064b59f9cacceeb976e9d955bc7635194e85f68cdd1ffc2868c1f4720201eec8b530be0f31f92f8600dfb60fb21126a96ff2d0e7818d14ac10caa23a32566a6b6065c36ff0b585c3f2218d1c9597a990e83fac4d0ce7975f21b54bdd750fb882f0d1f11640813bdb01008f44bc80ef97babf4cb7b133daf62cccb1c6bcfa51d31f7f9e45632c7550c88f82b6cd57a65c0a9ad73d8fa3e401818b7d15e72163b42a6c80d260940f688f4c076e9bf454ac8edd70638e8ece7b9ef1213b886e97501530da059d0a6d7c83b2a6d4f8ab178c861c68ecec83dcdcbac5df63d5c5cbd7788eefefcbe337c0310232766c2441de95f2bc8140cf3f20788a0a11b89c9f6dd942497d1d128172629c97ee34eda47d96e383781c3e6b1eefa7f4e92711bb968e9999be6ac5d89ae1f5d63a36aa4a2e34373222547f7afc3c5484483c3db2c2bf6b9430f33ad96fbe7d86953159bf2187180422e969c69c698f6de170b0b54a1daf2f93b2ce859d7c1bce85f77bb18faae9ec637c057076ab2992be76b9e04616cac213fad939988c50fbf08857d2792e5e5ed4fe4d4a780f488cb5028781ccf0d59de0a36965c910e58fb0a2094e1cf0287d446f8c6a5cea783a4f0a660512703b54c91fea8be3f053929aa8ba02857dc239ce5a5fa265cfe91561703d20d256edeaba5f35aa874fbc9ef043bfb5aae40142f64e9694411ed67b6bf369365d81cceaee89f6f81727396b9d75945a3a05019cb1c4897a9fc7df289dd85a7e3bb309ce7d90eb11453121059d615f816e7e883897905862767983952e530736d8a04bc14ea5ff602ca221be18eb27bc740257dc481bd1d30153ab7bd069c94e558362b0c2f841f1d2db1ee55d31050d7c40c69e4c5d3d150f97382afe02c1ec6bd28116db9fbe885abbaa62353589d3ac0dc95e9f368c0c913564543774220fddacf39b06cd3dfddd528ee90958240cd293cb374709eebbac1c9e33eaa7d4287fa2d0565737c4b954e1d6584c9ea7b61c7c8f6cc8b628001ca334f87c2f5ff404f79e8d9afd14f1122cfb4b04a59f9b8bb860fe4a8487b81f496db4f9f42aa5f7acd61f2d11f3bc924adcf0329e320fe184437b5419f972aa1cbc99720ab0de7c960f6433520c9ee4f2d236ef6e11a1ac8d06904b3cb2e48f55cff34559c2798e0e523d3b73476418fcd5a1f764666974f9916f4813d486f72b16483b81abc5b9eb8f931e54594d9087cb1d9a327b906dfc2931dfbf6802cb80432c9cc447a40ff17a69eed8ead187a5a2e4aaa367a04a43f97f73c09645f9687e2eaf52a32c04a0a069de15207fb7fd0b5ff6ffc1e7ce445965c72e699bd8f575324190d8d354d9ad8c0b14e73d069020304930c07307e660b1fd0eca5f3d9745ad7c5a015cc2ec24d9e1af7481f8830f9ab2a4e857641cf61c0ca2df1ed0e0266ca1155369080dfd8286e2caf39cdd766922a4e00dc7e1df18f5cc2230a81ece42c3b8f96b70771071fcd1277c3d277a7ef174094f6fc7fed8b481f66ec151b777518645f0edaba90169d39549b7a190ce3359792fc9e6d8c91e96a36748800f6cb30d76edb41f5bf1d7cd6f3270ddad3bc91da2a94a2f88f1590fc05d7dc3f466812d21e3e363e968c398fcfd8e2ca4a148dd9ed9d69616e80dee46596d84395c087055e00a9279745c1983396c3c3651d32aeb2e738821dc0a96c0835b699d3617920ef463220e08814397fda73834877674999109010a2aaafbf534708dddc55a9c486e3c5504ef5eb4f5cae22c4d2ea3c7c71e7b458704919491219597a5057de32c9c6e705fb9e1816e79694a031376f90509955cd2f40a6e4d6b5a51eb067e778faa68d800cdf67d3d08343e4b55c5918846f85d7f0c67f5297a6f34b306c1a453d4493e6b948add4a75efb9043986557eb637ac426c4f5d81ff77f9df4a0d1cffc7637f695144656771037a7fc6e03830c8bd2c2d3ebf797223d8b9db69401720bdeb6bea620159f881fe23f3b16fae4a048c13cdb3079eba585e550201128031b6bb91b4e3a9724f8040e584f8314ca09afaa4961517d9a20e8486356fe7025e0c1513446710b16d0de4998c0f6140db2ee6ebaa211049fad89b1023182841b9932b205d920d4cb6f097a29cd81197e76ee8e49ead9bcbb89731736f7eb53874774d4bc4541953f1a45749b22e971f412fe0e4da219598ad8056161576af10aeade55bd51c515fc1246e6ff3b5e8bf7639d2e331294d8b142d1904f0a4f52d718273580dab05004614017ab995283575b6a45361171014e9a91ebc513c0b7ac1e0c6a55b9b519d4008ba9e88afe7e10d67ecb9670958c349099f6977d7ede23775f08dfaaeaf0339b0d4155c9b1a0773797a0d5bab3ce47426ece67063e5ddb811094b28855f873dba936a2dc7b0b8be344dfeefa43928fa952d67d76a55d8889c8bab2033abbcc247490dc5bb133846a614554dd8fd3127f2afd0a383edcebd7c9767f7c950ae5d1bd4addfce1a4be4b2e49334473442fb09b6ca3d201fbfdc8f05f63096374e2d5f0603c2b5f694cd4daf3decb075c8a41f04469573a1ef9965e1b315e02cd7a9232517cb519f006dd16308cc92bb69809f65099847e766f3f4266b046fe984d9505137eed8eb6bc8dc5e910ca18429b04b742fd250e510b251e391eb8ce021e4b4baecdd354605ccc7c3d1046723aa74021e56235e5591656641713e78cb31d250c119875012b0d6fe17380eb3f971dd06be2572c356275ca06d494d937a4762e32f82276b2efa74d6c4b960038bf72d793417176609a3a97a9a9c93ab82181fec775913e4fa0a48e3e1dae902177c20d51f4e99e9faf10a1868f6ff82b1c3c308fc9b5d640ec1713a96c5c19ae4e411fa528dcde41312dc0972101614753cb041cd50ef5ca4287340b9955c463fb072b70c6075e29b97374abd99390c316d4f638d477713e9e7179049f1cd44bc21ed8a440ca02f852f627dbe87ef0b491d5bea5f4338e814cec348607fbaa7a041a47ad1e26137d8f3419a698c0a10d005d7a9ab702596b841f816aa7ba16b703c016f9cda96f42968f7d329ebe0a7885af630000135389c62259f25528925806c3116a053aa1f272edda9c4460325c4f666cafd63bd9b44bd618ba05f03b70b583230cee6b15714f65f002de07916f5deb6904987e8ea9aa3edb668ce1d78f0e0ec3c5433e49383f3680022ec7fec6e35fbd37e12e2dbf6b2253c8ede51e2a38820ce136919ead05a0e45537d1fb8b258b6e2cf5dce63a2955f781d305f85568326f247f0f210899c1d350583b83fbbfb9202c53f0cee72137f4c90c0e111a49253687ef071fb1a240b49d1254ddc244f17963006612b33a23f57b7b2a674aab3c1ce882bd5e84c442669ecc594a22d61b1327324b53cfd12b672f83d3e941830863a539af6de90ecaf9f26e472e44e72bf3fe2c031b6c15c1ddbf0453b1a97e6b1046f9a2e403ee935891e361b8822c1ac3074c098a1d86388047149b087138f0fba43b763f47e065c6d81ebdfdb4e01cec443c1e46abb408bec1ce546156f5bc3cbcae8ac2b3b3aee09b0f876016908e2d0ac1e6c47f10fd048c56ab91d951c28ab59225f8014f267dd02ef6fece675aea29ebbfa38cb0dfed07fc2d5d8de96a7966dc1410e7ed941e10723ca3751a8f998553e6c45eb7ffab25aa3a4e8bd0dc738514a1823968ffefa9cf979bedc10c9e9a5f6dbdb676761497d0366a3f8e5dbfd0c13c16883f78119499fb80ff6a8a7fe816ab066da5f3843f80f294a63207316df6a1cd9cdd77f57dee2aad20f8e598ca9050516f36c741be83065ab04fe3a7bff07054a680a89a8985bcd23d4c37a8d0093895b258f721710e27b91215f0381aefa0ecb1ddc02e7fa6bb701cf346a3e200011f2f6addc3e9825a29bb3afc9340248d91bc0747bf68ba2ae4ee6880471c08cf5dbada646d47abeb8d1c16f72b024236835200b48b3c28e4e4196adcbb419e6bb98a5b7be0116f3d66744c3e13c2aefd9d1d2dd1cfd297e0d10eefa4d8a2ad8afb1012356b77cef0036e136e13e3e573f99a5d0c3d3cdb1801afcf599bd37d66723d494c10380a12f9da9ce012ecfcdd12cf013d69d2a52a665483e010358af78189d1692c824a32e4e56dcf31a37c3ac2b944f6d5d3cf6efc432cdcbdaa000c412cfa363a11d2f4cf90d01071c4cc8dbae22f9f90f1c177b47b09af3b3bb4cfae6bd4c47965d788741bddc52137ff2cc21ce9ff07c0f4af104beec069ac2fe18c380ed21ca33bff04062c6254a60cb63143d16d1589d343910317ef0cb002dd82e920d94da1516fab8b938367dafc6977f3754b8e9579ab6b5a30ab55caf84d8e5c052a4a73f2bd914f822b53a6cbfe07cd4616ffbde2006209beb0f5e3e65d99a0417a464c83c58a2b536b99993e34b0905bae128bc3f4d015bbfdec72a48c3feb1e533eda39fa69e901aa719367b930e54eb1ae3184ac0640a150ee3971df16b2f434491d4a672b510064a5065131b6bba8c81ea167d5460c0cf02ff42ed0e26e7006a4119834e53aba8a6b2fcfa90ea6131f17852a429c5651887db7bdaed663e920ecb72c5559769b56f19e23018720206028d185c3627f90202696fcefd19f870363e074d4a023606027c16558888f9721165589a714573e225df7f486de44de14ad6a9d4f70bccd21fb8260d518234c501ab8d2c9c30b8fca0670fcacb6f4b06fc0f3c8e4c5e0c1956e6d5e178aeb56d95b153d2212d1c60f7727255cf5c884bd3fca0f776d7f461675dd6d1ecd2e3a7d2a481f95ea49a780b55d3ec50fb4aa3c4b65c6aefd910806d89a2200001c02907fcc53c22e6bba452967dbe73168c5025973107eaf2fb2b4a0d22662b362c68318d5795633dc170208dd81600cc4d6adbe157a2ad483491f8d087909614d32c46c0a6378b7d7d022bb85d26e08a0d99441137b9b85b288318c13fe9d32204e498437fc18dd0c063cf122780c0b0b4382098305739aa8c51d3dbee4b7c7cd3d47003518b131a256d634572700b39910cd4e781582ab28027f867bbda076d40201c9f90b9b07fb190e4b0bd3cb4ceb713dd00f27546f71d13134749ce7783f51d5e1eb54ec23935b1efe4741de6602de2e8c64a7636c8eb2833e643fb15cb6bec4ae6db0e166db955f414a6a09b1d4f243ea590e1123b5fc10d9460a254274e09aac4a90c49d5c0e9ec288acb95b736a5220bcb0296f10a8d988848ea86f1d7453b5f0e8b07cb7b413e4ff717c8c84d33ebbbafc1d769a4908fd8ce8a977c8a1cd20b114b271d9df6a58daf4169e18657db73e01aacf6eae983114dfc8b73a180c4de599157801a02c0cf1620a085c81fbcd2b17e113c20d4934f97c2d1d422d4f5a4596b8e5476a298e5a6d6993c80927780894949d25cd32064cbb11b70bf130a0e6304c2939a8c40885ad959d5b56cad9c0ec0277bcb5e10eec82dd70481fbeda08ab375cf6dc032bafeab28131fb2684098a84945bdc48c0ebde07671443a83a47988bd91bbb7794fb19386740032175ab1864efbdec3c64392a21214e10ba02234da3debc8c611472bf65059034e8241d7991db73ebc4f2d9b4e536edd07e91a2a839d1d56f69460f975db0898e3d7bf03f5cdc32279b21f6eba39c911de21ffb87999c46fbd29060896ae9b8cba6fed130d97e72ed757809f014f16db84b604d86d776bb5058a17bcb624ed5051973e511ce40284877a6bb95246c7fffa92bad7f4e4f166a4c92068c76aff510dc039252f9773ab015186d5a17791bed55fb263b945f2d6c8c2b84ba013fa60db58a8dcd1b061dd70ed7be090d76e59a604f8ee968d31dec5e31d518d6e455244b1baaba6a4acdb96a349ccc897949f62a07ac25b07c7579bfe3b8df0168cbb41313b7842b2c822d358678d93727c1e3073799f10d6a4edba4c8f12ef5f30e0ebecf355ec1b6b975cbc246473745eae86d326a3c8d25edba35e03c7e7a1a472b412ca1951b789d41507829b2c29d9e56582ed189e59d20ac70211f63d60f8046e960f20b5ca70fb207bd49d6dc20f1cb397e1266a2681aadd5542f79a361d8e86af1220ae472d21d44fa7a7a146d60274e2cd5b1b9cf89a8679d5758474280e5b76914669d328bf3cefc9ea2f3d6bb82051f7d4251fee845fb81e1cedb4a613709d57bd027e69fccb129cd7f4faa0c207b987825037be12612bf5d3f784a8d3cb18d60e66e81a6ba7b5f3be5ce62c2944ceffcb2939f472ffbfaf731ba104a572a459ed8d0a8a1140bc7af3659b5882dba233a89730453c7711d5872c4ffbda0b374fda406d12d6daa331b20886386ae34188b44fd9039d1f825f1e3d95a90dce15d7a2363ec695a2dccc2011d6a2bb6d57e6cdb04f0aa3a5247ecac10e1eeb6da6ac5c6e1fa0728a517ed11bba88d33cadc8e1208855eded77276c919fa765a16bd8a65d88d27827257d63ffb655823dc09fd4329392c94e39eebffbee05c2809a67726c584c7701fecb8eda153a06a424cc4e8c11010f2b936fd648a338a1a600f3814b0f38ddfedc7cc97e06b7da3a5c69ddb90484dd79a4e9c5c8ebf9b905e00914aced19b72550c3b00ee18a64517ff5c38897aa57d232ddcf23f36a02ca5bf142a5dc0316003f77c2d5d9f7bd8bbe6f715507c60a66954393b5a81028fbefb4b8f1c0a39049b1c4f5909d17a47b8587fa0003bbe9720f471c492c5eb92efc59c24f8c385e66afa46826435fce4e45ef23c12e084369961b5b7281f5b2c9a09d418a73a1d75199b4d63cea4f8d893778fcb20ef0f48f068d390a810aadb2b40f368d368d34444c47d622bb59b430036ec860ab1f0dcb617aa4b8cae8332a7feea728582edd3eea23036aa3d29039cee3e0c5991610ca28c925a32d2d45051f05c57531f97080d960d000adb20ab117852dd0378895d580d4457569e3d585ff6f836566fe1c0bb4a06638002b20128c2f95ec8e8ccee2dd5ec6dc6f904b7ca1ac69ac1e2860e40f797af1493a2f6416745190a32e967080a6e2ded5e95785f82208e16420a5f8622699168d655dcdf695b3882e3a95190cf2ad7af412bd72cb9b680dd28dda45f7a36e2438029b4936913f7665f4ec1780e87f81837c2b751400b495a6eb0542c86c8c72d079b0bb6ef29e02f642162ba8c964cf086f5026011d84a68f3b067a679907536fb782d4dfdca2113f2745e76df2e4172fe3cb40d43bdc0d90a208088df275658066cc65827785992bbf9bd3f96e0c975f4b73796682c8675e815ba91c6fea694d7bfe1814ec60e5140baa4c0293ab022d26090d15840aa36a8407340905eeb4abe549290093aab647a31f4a6e7657469bfb9c3b4fad93d00bbf511155dca64aa012e59ff1030bc91bc272b4bca0ab851b2c6daaf16027cba140fe78288a9c31e1638a1878659f73f04a851fb58ec9c82fdd1e19413d61365d8c95eb65bd54b712da667005a41e76b81eece141d76393a0c5f59c252277fdb9677535c6ebc5819e18a55ec6a1b363fac269bdbcd5d38a975987802058f30fc3886cbfc3f51894386f9e91ddc253bb724f1dee178ae97a05a0284068ee41b83febc28312e3817ed1b0c46598eb23ae39de7fa7759b5ba3268afaaaf798d8ca3bebf7ef448b4794f607bed96897c6f743ce0507614d4f6da3ba3ff6f0643f58adf1e6709e319fe32beffac45efc0236c4d0f196e974eaa8fa012f633f89e4e7c3e47bb9a3d415a079729ebce207e0b94003816334aa5a2cf12d9fba8ff4cd610ed1a2308449b6a0047f3519054acb4009785c7788ec264df744af38b617da6735dd1c1d8559536d8fc0a551e97ca7e40c42b592fe3dff96ac58ed1bdb6c77ae1aee26dff5fd8e7555f30adb5b1c53a88b435a005726f600588e477167b362ec1ebd71f1e4daf1d7c4b9d36a27a125d40db0cd8a0589d306713d9019768667a55c8104ed055aa0d9b125ce95d1f89992a84f167446bbe1051bf3f498901fcd403bec03ccc223023ac13c42a344e1997368b0f00df7f740c16c04d3d1e6d2b7748066c72d1f5295090af2fe8736d7054168af6a48ca7a63ce2c6584b9f4920b62b58db54716a3d7f107f7ccaa183f9b4f3f4f96df22c1961e1e29e3d0d7049b1f44d0c988eae4a2dd5534d5494388474ae4e9c6902dbf79fce09b3d0d5c4a5c1316c49758da801e67f927a4039c98fbaca998857c575aacaa22bd31f5d8491e971ec64f5f7e999d269cfe1c6e426b7d70c6f092d489ee9dee384a300dea634322f5b0f9259a09aa02d88971f353532ab05a6438b63f505e83875b27e9f056e8c00fe79e19b2b95a32bac535cf8ee6a01773843f2eb181d9cf8141b09db04823fed0fd4ec2569f3089615a4a4e176ac1f463a6a3a284fb00455f06c1f1a4f2745aa28bf5ac825389e0cb9a2207127b53ba01645f3e2659bcda1d2a26e997ce19ee4a5bc78c26469bf8e5dff9d3ccde351492669341fdbb1ef91b744ac9e45ef1d4e44bfac416b1db0c7e271aa82014cee6df77d40f3f06c37b119fcd6e7e59db6ef02cfd28e4d5b05107b8d47ca00e80c5bc815b594d4cbde199f9826a24cd29fd394bf12364bdd2823e7990dec5df846298fc38f966620aef81dfdc2b266665058ae4286791abfdd65dee8eca466663cd8787e2d43bf858a9f6160c6ba857281801e0f8a1f65ae5b833187740cc80c026b744054e3cdcba5a6dbe714facad2e2f064dda90642cc42b75d5e456af19042051033130169d03d03dfa108a649564f416cd187084e56c457066d270bc128a6368701c17339b08654ed9b48370c80d1a01dd0b8a6b4aa1d60ed4f372e0a85ae99a5f1e9311f2b2f8da07961f96281748900e6f45f2a599cdd0c165605d523ff3bbdbdd68d2a84c653af52c2345941eba08d82aa95adb33bc099a5335cb7d80cd895019d1b77599b269fb1816f7d15747cc525df1584029350067c828bd1fe00ac92cc02b63de8e49dc1cf0576ef5a8aad4c175b81398d7a6a2076ebcd48461bbf22001e8133577b35908af71ada23fe68b17304f59cddb39e4d31212dff2e1722b87eed452d6989c12c05cfcf2128617d7ab11ffb57b33e2f047050e96b92eee2848fa3e4ce93ab4b5fcdec94389f623bd0ed4caed572266eace7481de220f61b1db0f74af2f3e003f617fac4cc05cb2e54645b73bcf09816eebec0e69cf5a92043b2c7d063103f9b7e717e858a168d3f51bed5a7a56aa382d382541b41e31865009a55f94acab90b8613ebb41ddfc564d4a459600d09d128719c7fd07fc9c00bd2e7696ee342da9207a3e1184f515bda13e5874425fcddfa61dfa157ea039f891e5ee829bc33e89ad729039a645a9771947bdd87b67ad27a5112869987a10b76ca1256cc0d9542522eb3abecc1384df16f831314c92b7336af9c7f0a13197d58a9892d91bb403ba0d4d351e9b993102b8756d1a90eeb956997e2961c969aca8320f3fcd6b8ac39f8f50bcc4489fa3d479ddb4f94e7837a255f676c46009ecee9f11a352029f34aa596ddb93fdc620e0ad02bfc30aca81a52889c079cb275c72db982f1018cb97078d321cebbe740e1ecccf9f971525c5c205aae34afa8e89ba16eeb2978a5ad024bdd7bc4c009e6e06e67590f84461a75907541050745e5f2c42ada33463f94a955c2dca2f11bd88a519d22ace0526fcd90bc81e225302261b8acc9945e79912b6dd7a77bea01a7ab5115f8990a45be5ff680171b7dce0d4ccf727a7bfbabb738293812bd2aed8196d30d5f57fe039d4758dc96d48c5184515709bdb58e82ecf51c96bc268ef4d88b60a44edb69bc9ac5058681a9f25347047b6ffd43b01e358517872c804653ac8b49c72846910821498c9ff2887db28f7c50a43b1d386fc49b3d6a03237aa178b485d96c328e3c94519e856ae8fb8f39a14adfb031461c74830bdad9876cfdd4ef615b6432898763439679e9ba4fe7a64cf9ce63de5af5847169da87e4b40a46fe513182daa4632c15305d0aa367f7709c8e0820d78c8f1a0cd8894783ebecc5a7f0e25464707fc3ff312316a71bc6c328b26270668f24a49dc90b8490514782e7dde48b425254763c58912e0149ba3e54be891d312acfe59711216a5415c395a074e3752cb3a58a6bb7da8223a946c4761794d52f106df43a8bc75a4996cc7508056b66235f0ff0c94e81acf8b4051df80061cbcd7628e5d4a9342f06131b29140cfc00a594af2eadc17bb9d7615332ecd4ad02733404688c8fcf0a952a9fc6d8fdc0408e238db39d7d8caea258e5e7ff75f66ad50e05927f10fbd5a9de1e2324efa1e6cd8455c6869dee7027f559f743484de7444ba4c6c7f0f8d08058aacd53abdeb1e32fa61a49b71fe5aeaba4b7dc73f8699e38d03755a702e4a9396c7a18efcb96d8902d842cbe22c59e037bb919e7203054f5920b8d9b5674514049ec543d68504a1685d6671515ecc27d99ead3b8b89aab98a9730f215632ff7c2da3ca3ec51f87b88fd91713e9ddb12c53a1f629230fdc7214b803bb5dba4c868e9160eb8c3c90fb1aee8c3b680e07b867c09075ea4704c68cb5ca28c04b49647824cec42a5f271826e7f2735a87c1859528457471bc8284f1497bfa433c90453a63e38ef6f739bfff8580d8c576c8ababb1b6d067395355f4c5d0a279a8929f79f9b5c43f4f80f16c930409510a5cf62a18641d397bc2457a70cc8f6fd5559dbe9ba836ebf1d5671243172eaa975ffc58c37733714a957d77237d967c9a687c8cfdb1f39c4f2315861a902be62cd6ece21dcdfca2ecdac863a0bf5d177de37d2d2b394a53c1bc79679be47f2de1268c078dccf101a9d12213baf26579666656bbb28e14f54600b5ab549794cc14e5c4a5fd7ac48e1eda7676b62cb3d7b678bacbf1f8424bc9d6b00a8189557de4a10384e63b1e82b66fcef14d1d72ea8e317973e6f767e00ebbd71d291a2571aaae7a718d4aadcc29adb51110869f0a0157863c466360631fdde306bfd1685c9551289cfbdf75d24336e550a99934d50159c96c75cf393430f20aba96b0344512429f12dd0c5f0b820f82daf67b2abb314e7dd440fc6866fca08ce130519c0ec5a10da63dc9a3a1555a0f892968dcc47a18116c98512de2ebf39596b5b106ac22eb713207888964f090e37991de087e969d4cb267baf5f66dfccc875abde832d590c3b3403a06817f8b09ef55b338673c0fb2f7ee33fc049400545dc34048e2671dbd4f503ebff6633b9e88a501fc5efa0e70c62de20c42fa4c32acd176256dee6d168edce886d49905e249f18a176a04718c002be8c4cf8f096272f4c5595fe6506e810811778774cc5790d053e7e4044f24a47029132d7d1782920b66704b4fd4f4e3bec44a743b74b4a99fbeee3a1e80c8400232e9874ac3564ebdfecc1f9996cd682e87e12e4eb7901b74ec52056cf4620bcf587f0206808eae08cfdc3a640da48a1d6ffcfe89bd6c120ee181c32b0124dff8493b5c6337b326a1768c061e33d672eb6ae5166f3d15e6f39d9061a4c31bbf85998220f37637ae70bed2957ef14fee5f8f93fd77bf57768e5b3ca403e8c8eaba8b1cc565ec8291ccdf73f118df8006b5b77313a8bf7ad1864ccbcfe07bbdbf9b57c7df043e99af2dfba9a3993a0a7a80300f795b79070113d9cdc184d205cd1492502c766fdae9717f4c39c5c0b1ccbeda9e6aa22e02f5e9462d73c2c28bee515acdfc7c2a8cb90e8e103ff7519e21e01fd8e906437c1910cac3731ec08acd745d124f5dd9310f1fe1c894fee74f60d1dd5a8b532fb46783f3cb4deacfcd4748bda9fb4b651c511fb05f2950ad2be3687ee9575396c640327cd4a44ad2205c0d8577fa4eb2adeb965dd33b6ab279a12f00ea5572ddc3d3c48c6726b1beb92ef6978cf036385860a5b1b5916c2de9a7a467b9d3ae80ce1c033cafaaa6e1be61aa7e8d9970d1d98cf1444d31ef6a5dca84cc27bc782ab3ffae5e9fb7375ade70767495612f60e36717e0929d2c1043db7f9553450845439af08c0dc884945cb4fcf6a7b577d965016ed1a1d3d14aea061fcd129b3b1745968b7b3f1f28336a02e09404475273a51923d7e7c48bae4ebcfc4f813e869eef24a4b9514c0dab83155639970a6646928e97bfea59f2c150240f82c55dd1be613db226bc210319d51269d2702f046b42a332d125208abd6e41f3ea0c22a4b2e08e5f346e5cb6d12aec952d8ff34a242581bc41a44c70767c7d1576a155e5c7d97057f3e0d6e7f80aa47fb413a682dee1bfb50fe6d9672df52386f9cc3be322defdc91fecb735208eaf7f2cc4ebe8e97541358abd2efe63df670fc79ea5eeb4ae22e9af65b8fb16e7a9284e83e63b14195a6e1977c89b0b89ccd4546a4a4b8a765e1f937ac9b237b1f57ac1ea12df656fddf21239e8d2a2104c344e8843c29065e7d0e856878fe5612fd7a3941fafa02afcf6c6dce38051dcb4a1bd8b164b29edc586f2b2011df9bbe2dd9105eb39e6b81291cfd3e544b855727f474a74310fe4bfcb55f8d9c8ae487f073a32784333342c33ed91a57be700cb22014b96023df3dc41879e619ab6cdd5bee00fc794665b074db5ad05a31cfc6ea6a3b9668d08065cf714d31bb91ef7e353c97a277abb11fabaf9b37ac66d9435b3e9736ce607927c90a64812140c04d090e0e88b3106410d978e073df9322a92351b5593e5cf4e3c5266462dd5639413e581aa8c4b9c89a744c2b0df9749ec036a011243fe5d5a0d9764211a4634ac305770cd47e12e1982bc007015fd21c47682374cfffe19d683ab6e0be7bf0c8fcdb9cec0302c379bd377ab60988b0461bd96b9a1a22ca7d7610487ea8ca471db32767fe6bdbb4d6e33c40d2e41df210d901179ce922610d28f9694eabd56a76c5fd5312c68b216d8afedbe2bd82c43cf0eb40d94f6adabddd61cc520dff75bf80e64522c6caef542818af49c3ce1441c99a11e36015fdbf527938265705836e8959e046b823239973a0ffeb64a13de3008a44a1968a6a2f08fc5e967526e76011c81636d80520df1365f4e1b177d90159501497de37a4c6835e79ae50c0ea3a85fd6de3c860811ac1e1b639c771e97a49cd40a459ff9fa45d24a86cfba2507b7fd58682c2f9db1003294d996f938518a66ad4cbc3e4ba4392f3ff0deee1de7bc0092f7099a9184c99d3762f405f4c6d16b62687a6e9a5c432153147e3537f3f257e0396bca4ecb50550e4a1e63ac92550a96893501b214be24f7ed6e7462cb58355a91d2b1b0f0228bef14c92ba1fe9a7e1eaef35bbedc96ea9d5223ca3dd8433788d49d093191c4038a98eaa8ff48b932558e70eef331261ebc3f6bfe61ee6a6b2e7925c0b342f9da6b16f00d44c057df1010c4e6f25dc500a7cc1cda3d4408a10fae72c8a98f87c8823d4e6b94e09b63e89b619f59799ed82466a8bf80c384dd64e992a80ceac4b35ee288bbfa8485462242df4d47b4b8038af8d5aa85fef5258c269c17c54fffcb97fdc43fdecb8dda13c831f302cd4bce9d9a31d0a69f9121153c7a3675f4ef4f8d613d8c54b3f747ef3a463b2a2584e5096d3a8da9f63195787e699df8ce62c9f50cc1d96790aef7675e7f3cec32bcc323a439b68835d8949ec64bb2e07da77978925d73f2364bd33837e8fa3eb6dc8bc0fcd773268a737f8786149c4a1099f63590762346596c6a678933073af6fd3d1eefc105c2427ead9822178dbc7bcf0351158146376aac45c6c260429c09ff04d349c3383eb709bc542fd12e587bbb9908bdf593e6934a4b557d467fd77fae162342a2493a1361ac92d3c2488f0ece3db0a215fd29feff90390bab22aa12661e57bc98dc1913842df7291e5424237f1c8f1e3feb6d378134a6759d70a5f47d6c0cda400bf2b42f1e4d7f32d90be362faf8b4c629cbc87022e3bea466bfc1dadfedeefaccbfe57944d0751c846b31e63392550a66fa73446d664a7b3b9bc739548d975a59e2d24b309eacd6ddb645526ba943a8880017f9abe2f66f337570ef40d240ea3b2ad5d72207efd0dd000acdf14b503ab39c1a5774caa96c49a0b426911f52a879164b5c79430366d32f289947a5a3b3783e4f81746794f550dbf9f26f1bd9488e890a5e236a00b2f7e29ff28b46a780fa6fb920b17e2411a465c034b055eef6096643e8f38481fdd0715296d947d8d23eef487cd46458fc8a004ebf93e4db9ad88bdd3bbde09c5e99b138ca5b37a1ca6ea7c0da59f786aebfd9e44e638a378a7c90382c1bc3fbaa62c5bb42ea62ee9cd59e23979bf6e29754dcc4464004f0707e5d45b5cba4f664d1e824f07ca8e07e5ac0f537898188a92e9790c7903d84ad65321d1cd4bb9c6bb4cf879d649a88bdcd48875187789e194863a032ba9e7140f4887c524fcb23a9d6a68330bfe5d6d3248747ecfffe6c8cfd7208e5aa3e0ab697786dc6474b92e7922536656ea501320f8a3f544d6976dc0da905a8d04ffe52592b63c9b2f491e928d72acb90991ebcdef633401f929687a1975201b8cd3b9f85d7ee16ba29e965f919c2cc8d747c2142ab12c7a6e5ce6d67e6d4c73e72cb1fcd4455d03fe62410474c3317708dd754ea4ebbeb18be98d9b7728b68a89c735526141f93e48441141ebd40c5548629f16d90132b8d65f716761a08c5bb214e5c171bfc3e98ebbffb269011c53c5595bc42289e8b8ca55afdbb1d231b25915fbf399f1af2b09f005ae532ab2688de5b627328edc3c24499aa15e8497a958798c60e5f9ccc6c7a8e00842a0d5732be2023bf795c1de1fff1f6efd56894b0c72f96fcf9fb6713d445d92162bf422bd6f0165312ad3f90af2371580d38c0ec76c5fea2c043254056da9b28c458e0f44ffcb2a0c7fd2cb3dc541e00f881100c23defb3b6475d8baeb79bf69794d0c1c52da14a73c5e6ff756228215ab2c3946990ef9c7f3d8f17a3c396624c30381cde6b045a10c30e13c05fa625cebf0d779f120a0a6282bb1164789e8e0a5e77aaa68bb72a82f70e313548138188b543974fde2014c706bac3016ef3def7fec8a78a99f1ee0065b5168771e2bf86665bb05e2440513f10844c46416fa8752846326812c53fc3f09016f0669b8916d9daefaab10c3ad5e7ddf6550fa679842a21c87077b774dcb272ec33923d610977da45cd31cc14c392ea41637de45bc16424a9aac25a0a6be512d966554ee64863ec6cceb32d27017e2b61ac780aac26e0c7a8989d8dc5c9f2da707d0ff02ef18368cda25b793466820253c209e03077b210c6b149008293accf3d7d1e31ec52ca672b2739ce7d3a8717f7d4c935ddf77c68aee617efe44702d372dda7b411816ecc909bd245e7ab5ccd5d08ff6e559e9a992d63a26ea1b8574fbe40ea125b6c881b61ccedd0e247cdc52200afeec978510c11d1ed5bdebaa63898d72bff5a32e742a789198f6a21acf1d0d72c77c2dd6152f47d497c0ff8a42168204e48280e969cfe434e2a99b84961a52603e2e85561904f9aad52ea6ab191e62ff3d278427f881bff2df67d8a9807ee4bbf7f4c6f169a2be245a3c1fb7cdab443eb3b778bed873b788b2dafe38d25ec902443ee34b0f3ed4f8ccd71ceba5a0bf9ba14532f3bdd2e1f24b618aaae8ba6258f89cdce29c0b7173ffa254615aa6dfe07a96c4b20f325a1dcdae8c0fed8ce0897ddcbfd6db271608a799e5b177b5985b6064969b4077a8051b6dfd31bc146792b0312a7212c90a7efa5fc5b3b386e68f8ba86698d2ed2452f399d8b3dc1dead48a8152eb0a303a7887f437c084b5afde6a3a98b3682ddf7198621dc9d9ab6a33688ae2e950484dba3dddec98f5e057e109fd0a79adf9d409f875e24ca6142e9a7619c8e5165bb2837ad2eda8682f5194ca64c845d0f51b37d6264183f0b920089f1095b8071ffd653430190184d7be5d9374ed4bda6e9dce3237b0cb6c5ff50521edb850ea360cd614f182ca2acc762cc0210a31f60e5a95dba0e4aa3e41471b0825c021533cf8111e0971f426e6895f1f76c755d3bfca6963debde8f90b60749fa11c15592386bc4a9ac0d0f422f19bc35214e1c26f5441e532932db1dc4161b6eddc739f98a826a5ff0321b5328df3306559d125bc4395162b55d5088f38c1cd916484fa0adcd4224489220a33b48ec72cd894763a34a3a2fb558632dc7d57ea97114e17837f0b97590df35fe7814cae3f8a70a1e3c702f508d69cb7b0c404f65bebd79e6729e85c3c952c804e64a6f568fa961d4c2108b03f9c9dd8e2918e1379610ba32510fa6518c2e7a324e7bea3d2b0e5cbafa7a7a2aa7d91ef38ed129275884d07ae908067ada1bbc822629cbe17a61aae0bd9d104a527535b8b44b588784ef514e5b0bc836c9e6c857e0da1c1ef58bfedab5d0e76fd891d9b17872b6acc97f6aa72566ad604650cf53fc8c4aca8b69b6ac3d7b07f7050c09dcb4ba5092b7c967b09566df21e0512596b22f09507a1feebccf4cc844820b72db96d61adcc833709ed21cef4850d769d3c389ca05e3bbdd36f6c6390325537e35c4987da2640f1d83c3f3804184792d259ac362694f0a8a6d75e65a7f930e0415610c92002140134d6b359cb213ab8287fdf11ce0ef809930121de31c1a1a2dab2f8493e2a4f37227e1521ab80a7800b42aaec9c0c256e4f60bf594963e7502309c5b75fe1324f33fc6f60041a9954900bcc1c8b4b7b69aff5033c0e5e5d04ce620d581e27fa46bd544ba9131704e620d874d598a67c3b37fb6e950354f38817f5edbf513fdd8ad98a4a586358c7554b466aca0c915a904d3cf477a0d8f929c6b984d2e841e37827acb3463ea2c6be8087dcde8390af71adc9506efd768a58fe77f470b7f941d90d452c9b1fa8b42beab578e6bd63c7abbd0600072e75952ad23eaf21d1765755cf6cb9a9cc171149dade767c5a4628aea1c56df25462eee68c78bd45d0e459cca0136e0ab8886a463506e38546d7c59e7c58362087a3ad5069b2fd7bb0d33ea489765b69291a0a2dad8c10ddd0fe020adc56dae475074e5f0a355be4e1f729a5230b0a57fade9e2c95779d3a888b8be05f1c5a6f3cc1de91f81aac105fe844aa778101e08f12077d6653a628420bf7537f31e8bc30f06b8d980ce9066615ac58141c82623a1972ec9599e955501ac3bf49935be90f8504fecf178119c3551d6f5549a93d766dfe8aea104e7b4c2088c7cd760f5340f3da86b466a2b4b0ff99fc2bc377fb459fba994af85ada843a399484c774c2592b671c8a1322874f833985a0b89ff9c99102f617140b197f03997a4c73d7dae29ebb15cc50724757e69f85ff77067c04f529c7c9087b8c019d3a2f5be281e3efd24d0c89a8073ee6dfd71569108aba4b1c044d5fed30bb6160b1247e8c584e71a3f47f2ad5021007f70dcc50dcd0f836c571908b5f45192e2b13c13fadbe574d17ab8db628f5416db117abcdeccd6eb9cc5497c5eb25b7e32a1403a3a7907eee258cef2a38b1e936bd9b0e624b019f9dce05c6a4b8c0f86f5e22a8d25118fc52532312d328015425f9a78070e2edddea177e93f6aef35a5e9f5d7732ee9cf87ca1a8bedd055f37b21a06493fcaf1969e05607c3d10d760b6248b8854599cfb2b6d1c783d7cfc3b789c2b65245b36b8a9c1d80dd94da73941b6a04606d5968d78c8e7aa787ab2f4e8432036e19f2543b225001fc39c8fe8084587fc062d948a99c08aef946ce6c39f41d49bff03285cf64b04656975560388ad473ffb3c32ef327791c8b2c604363455fd01e2a10840733eb89be7d845701b54d36524ec211073098318e14d373aa40e9c18d68f5f6ac5b4c9e728d741453dd11470080ee7d579d1383c51c79b1409c351d6b8aa1803efe96a942aa77ccae33cb84b5b2c85c42b447cc19643eafba99a38e68a8c73a9c248057ab2eb095c21073494fb111a2495aa3abc18f8cf0d490ba26adca4a7dc8716cb3aeecccd6306f01189373e561329cef81440e8539e01e7ddddbad2a0eeceef5f43fba171033e8f39017873d2c56f28af34e36d1dae0efb561122511ba44a4011f2d5fabf12c296c5fbdba839e7133dcea90553bcf04ed9ee6a35e8a76264387c514e577f5a7b6692c3bc3f8be6d6612ce99d83a2005e8992da4705c9e8f023c684252edf0571ec4a1cd6ee4a6923381129fc504fbde5dc52312bd9281c8ff7e50125e93fd3345275785bcc300aae4cd6831df2be9354556a113f3917f2919838ace1589044ea8b59aa6f2eed1e2a42097ef380aaeff97e5fcdb3bf48c6936c9d8c6cccd7f74ccce928e7a05060dc9839dd8fa9378b8989cb76c349e70a5c72136d146397aea11af2a0fae72b2b02c069a4b0191bda913ab49a31fcf9b763b45ac3b99fcb2219d872313b3b3ee4d7067fd5a82af9d4ae8dc9bc36ef9a4ced3679f06eb496faa80c44a74cf7c9c69d4d33bec6aa68f5e783ab18a9d62ab1bbff611c0c277890f7b289f27fa69f42a60e50c2927d4e0f07aaedcc5808bfeb678403cd3e4efd828a177bc96c4add5c00272af610d80bb53bcce576d0bd1c53855b617fbcc83e6d6839cc4767bd2d97beaa2de9813fdfbc24a7055b6d10ce8704556d703cf5624788602d9119202418de3d395e60a342dbee8e0d1ee7df57411d345e732e9ddab79fe0c32427db4442fd41a3ac0e7719d936eddc479712eebfac7d74ec37644a4ddce73f209e75e08e1addbd64a1cd74c85ab6c083425ee67b738af4ef05ff3dbba30cf7b2ce3e16ac616f36e45977e93389432833a1721b5e3e59b3d887fca50bfb25b48964f1914720e50fb224f59c3d070414bedfdc002a53ec38c1231ac18dd447c2a14d24b14a112259c1337d789588a1e4b0888388e4323e8d9a6cd9957ff458e936d450e1835267580a024b39d91c79073bb4785b7d7a32d5839aa0366a939de9a7e01af9eb1c1c302de6c2198872c618f065b2bbacfdbf091d612f08e2781be391189650e181622adc6264728c135c3890f4a73845d6cea184a6454677c52ef9c465e514fb8379942f7f3402a5bf654cd770312668bdea605ae6e366890db71d45f3005698352b63e2ac9e91d8171a9c62b9c9728919c756845a8dc2ce87ea0cf327f586e1863b4b97f7e4fca15714f6429fda8d2243c98b2a20186abe1d9adb5b412b8409e49c65f12f4bdf5fcac9de1a3cb64e009408eb2d8e6af508fa26e8638ccb9b6a8cdaeccab73b4b06d5958a7e8b88ba383163d9ed29b8c001c8f4091c0ead122d56d37cebea378967a11b429806847613aace4d943964d13affa5b6aa26caa3ce30a2194141773f141537b30e59094b4c8d3bcb27466c7440f6fe756b50d9fb5f1cf6f08847e8b4c66d65f80549125133edfc6ca1de33823c53da7cb5b47322691cf385d943948a0ed6b8097ad416bd3053f50afd007cff58d71e83e622e27609baae4cf758d5088b9dec2f94672d3086eed68188f044a405a12d1c434c54b24ca28eef61610d24607fee06c4bdf154a6549c869d26a565e9f83f854619d9814517dae7c365297a5510f327b936050684733cc4968fed070e0e59a1af4170aef4464ba376da9c863073204a19c611ac0df80ab52bb56ae68a0646b9c40414f3a05ae7d4ea45a9378c9be005d014705ed00fec00dcb686e55b59c1248df9d11d79f7ccf7308b642ae3156891b26c88ccf85f3e3981ebfa1f52cce2b135a483188f24c7cd4b98e5550bc08ae5e6828a52e4243cfbb0a15fdc5a7c539a8d1a9ba8e57911dddf18e8ddd519896b233dea21a99993b69c0f144f78616650faa1d35227c2eadaef5c2a501a861bad0ee5b247f853b838ad397b1b1bf1cf849a3f14da7b4f49df6f880b968cdad07cb6e28ede79791f08efcd7f2b697fbdb12bda7b328da1be068e9e6361b0dca7cc7ed753edcf88c981457d23a09f1bf06e1eb4839aa326f03b1b583edc6b5786d6cfdf0ffc42ec3c6c034a8a3099b5506d93dbcb967fa6e858e7d9f9516f502a7587679f5318515ae4f7789eff68ff5d954feb8026dbd33908863b0d2b9a68231d3429a91d708201687a363b69400eb388a536a18c6524ef0abdf9afb95cbd95f9be63bdfa242ab6aaff32a2ec1158aba075f2e10c3f08fd6efbe0b6a76606d732c81021735a98426a4ba9520a7c9a8ccc25eb7f360b4f05327dc55d5dc4a9e174f30f1386fc7f5772a2f0932d091ebc2c7bb0150e7f940edf1d989d5a884e3e1c711b6af316b80e70be292a7fb31658f8ca42ec40cb1cacc32313189ee2f0cf7a8efc7b080e283cee71d5e25c9a4042fdf64c4faaa22673f69191a5475e711a015e03c05a9b7e5c0b119758e51db2b38252469d2611e4b340db09c3dec38723bd34a47a533310bb53a0c0872a108ebc4812826c44bc9e424eed7fa68ed4787122d0f1ceeeadf7d059e5fa6cd806351fd0b393b38e61ec6fc6a57f13a627ae08fb36b94eb71a70a1e898f0cf4b4270e592da265d98a2ba40f1eb3af65de73349548d7d6939b64c64a59c48d87ad49e4ee99df121fa76ae58d0652962b199f27d14d228943e2edc6720391ee89ea74f294d87a0122e0c23131034c776a5646f8c3be019dde05bbb097ef01fc68916dab3a5bbb80334e3ba7c012fe2f30d827aaa39b90ed11c951ede78010325c7c31a3756564e127082f0b8b10c437697a71247fb918bbaac8fcc5834b5cf0845571b1b449d74dd9c78b3bb8db5dbbb1b552afcf9b11a7532b12443ae0fb4ee778d84b15851257edc471a3edcd9a212cc59b54910e645154e57c4a3468223dc462677c84a4fc69d94d0b70881469d5471526980af683d4e95b6dc86a0baf53c98b8200b658012deced67c6a738ed0f487c82cc13d19b4f414b33f1ba48e910ab88c2afcdf29a859a7d299c6b893f9130d712885342815ceb07244d315558a4ac6926037234a1934492995528a36f536b5204207eb9f920aa1869b708d11d5cf6a65fefb90df775fb5315da93b9a1c3a5a573ec68ee26c1411ef2db8a5f9bfb5c26df00fea295b883db4a56066c76d32f428741c8349555a8a99beea19a345661996017282512faa99428452067596ca006ace3348c348a09f5fe45adcc9c4a713e456846676050409dfb8d2ef63ca5b226d892e1f5ec3430c1ad69d6a0c82b83d244fe95a702c11246ea67e8166b86cf628f5a9897d4deacfcc8c6e14ac8acef152507c1e8648abf6b6c6b25406a57e4108bf44dcd136d89090e553fe0cf1f1ae137a1fbae633a3a41ceb9c3db36f93960bd9a1066ea36922e0c4d1fdb0a449c4490a7025e2dd594a87e9820e7aa87456d9b3ca15f99f47357085899089a279c12f52f94dcbcc78be10dcedb8b9d478b9e088c91f813860567923a557d59af571b8b8e27da781d9370646c383e01008d17c1ab23640186b5bc34957dfa41fc0a84ccb645d7021ac125becdae763767bcabe76bd877490ab7e9f9a656f63fae9cb202ac1ff9582a525f55b11c328f4fc6d7c9567c780cd8f63eda6a32caacc328d3ef6f27ab59e3275c14cd52fdd9c5bf3b76870f6bc454a36cc14610cc857a5d7662a33673200d4e32a309790a967fd9bf8532343b5616509d9cb30b9f8652e3f8e9afdedd1380ec1cdf9340142ffa1681cf0d9d0af8c65185e2b9c174c41eb08990089e88634e91be7ae7a381f3f3e6e1c543d0faf46aa52babea6cabe4f011a81e74f71f28cb8900604765db305ed6b71cb29d4fb935e08dd8a523eaadd6958729d2a9918e3bf101bdc5b5fac98d6a4b9b8bd4bb29d383e2a8ed776d1527828d9cce7efb45ee937574b76ba2796e3705343d757faad1ff740f046719bb5341091e61707f83d370c0b9f84f38a631d43c849854efa0c0bec8914733bf6cae62debb7c9602f623da962329fc9932937ae3eaf89e1adc0b54182defb58ccc123bdb226d1eba2ba7a24aaf1846f14e54e072bce0fa154194457a5ab552d99d8eb607a4c812b09024fc8c012f06e8e2d5b0e16d526baf342661d8305c8cebfd4b28beb761bb0bafa833f98f9a48ad2a4788065abe6ec6aac26ec3131de9bc3a2a3f30a75b02051b58b320f3ade7ebd577c240ed6aeca4b3205abeaf2f6f1dadfa2b273174501dab61168197e9386420ebd5a79df2e696053305882b0919839485027baf51f77138617e9502e33be337cecae0de37255a3ff04c8820b0440d90976e4c9b6c67053f8ac064269211d3b7fdd89166eaf182ab8e8b8a8af15417b3860baffd142ba8bd10fb37c7361960734f0353de0bc7a533a1159b2e058068ac6db28cacc0f40f5d2ba8ac9a6529764ad03951373bce24f455aebb54e49dda7d482d7c7dce3f2aa65673114db7420fe47a151e6fc56b011ae34fb7087bea03dc10e8600290b08e8eb7dd12072c859adea00d22cfd4ccf4195239d90c1fbe96a9583c7cbf16430000e910fba38ac31d944c4977a47f51cb6a1af71aff631e92425652bd23b6da0ba3f8d55238883351cc62cec67a45ed1e649486cdc843dc755ae3e5360422467ea032812fd1e8d41bdd2931a81c07149c1284345f99cd80573b657fb487bf0035a70e3fd9b374505b27f0ec3b843a8a1e40ab2abc637b942e8a62e2cf2f178ac3b8e763d59a60f815d5520728e84db61003a9dc99c94a10fc03b2e21b87465407f88745888dbcf473aedf0e48c1d19a4b36fe1bacfe077d59b9f7a69433596da6aec87b4e3b5faba65f84efc9736349ba6bed888457c797e655ff2a9a025027944cf3960d8b4ebc841a87a3514ed9de63c9aafcc2baf6ceed1f2b587cbfea60efe30300d0e5e3bb2fd5b2f03954693281a25a8d7ed883a4f3757d0bf37e12833e621b1ea85c500c409ac56262486587902b99c98b5eeeab1a6bb02e72aca9f2ee091f369ea7e4426eba0a55ae4e46c0a399969add1e7857187ecbebab2b94543ff9dba8f13fdf1b1c8b9976fb9e4787aa6c75a41ec2e4bdf93bcbeb047b50dc28b0102c11337d77fc6d2997aada060244659a2ca76304be7c02038c4a188fc4f3470f34d74d84f395e13e77d0b94d1fc3092280bc5377b208160d0e2de2dc9c8c69c6c5746fa1b83dfea16346897f69e17c44c09f6bfc4dbee17636c15e89229e4f8aae2500888b2ded3e8fa4f59a223f7a6c325ade4193833504c135f177160c2fe9a192590818a22c47be22d89a5b23df47731b693465769b3229b40a77db0731011b1983e6375cbcef2ee6a9e04166d78e444a1d380a29c6e42ac1559932aaea45a9317dbeabcca23ed0d76459dae8af45d7f137845181b29383e61e77cad824ff6a9a16477985635f4b0c6b4586ece63a0f64801848f69fc6c739a406808a706f956a49d4ebca4de9a446703736d6d48a6f3667821f60d80a1368c48732c23119dd2cb760ee5517fc99ac903ff83cdf03d0f0dde198fded328de9cc801f4f6e2c5f2fe915ffeb725e8d43db7139cfe5a5bf3eef148658d697f95d3e435c3d51ee6862a78e364b9b3418335a4fdc62185d285f07a83d9f0cacc080dcb45a43dc15bb59ee3c5e53eeacf96c7eea3bbe1c0cf8913e8a2908de35d163c1ddd9ca7c1e42fce9ce01d616f4a15e76ff82f1ed93a651b9a11ad60b5ac0c6e819fb6813af5274936e421f8465839df3b43315c0e3bc771141bad7fda5763b7601f089c55b890e641326534f5d3ec857daca6600cbb880480d573237322d6a8a3f5bab760a423b4f939c24712427509fa99488fa026ae7eccac46dddb526421b4e843615ee89bf35a6b410727aec626a3fd382f042cf2416c02d7245f36f6f90160a95a03315d0bc53586a048cc826c64ed54df6bbe9b28e49981e9df4f4beb23d1b35668176d8ba75fb83779b3f2b2fa233b6b6064058b452bc9aee6cd46ee43d8a2ea1f25e4a2bfadceddde3a470b1ad54135e1c492548dfb36685b11fb300f940520803d02ee5dbd01d278948c962620322c7cce63a96452a3737d8270bbd97cf4352d727807b32740dab73615ce6773aa66a012e2903557de60c76dd5cc485368b6428789ed1148e9991e52d6482f08832d1bb95e1de6e2caff1a7d76285e5211e66da4d71df2a58ad85b51e9a1de2477701f9d614dec0ffe5b9f4ac22fa4cc456b09c5e2e827fae3664c6f0abcc4abb70e3d78e1b8c9b066f34194523e1197c01705e31aa8a0de395a357b0d47e13e4ea2d559d0d2bf5b65e5a83d9720c85128c826825bdc12ba53f5877f5f67c27c444c4a0a6bacd5adc62c37c29b49656dabb877d9fec87594f356881d7f93cd60e91e58da3d566c789dec26366b8a8ed2372ebe23cd9c82d1a7cdfe4b3f897cfea900faf216c4b0ff6e3c34db7e79112fbdae93c2aba44688ee013cf3c354da04bd6d9d4c2fe250237d4263d3c0fe74b5b1fef0f0651e1ac63f60b1058ca1c59a326a7331b71f4e36adec806b9453be7f49461a379ad00e02f43a138890ca0b971676cf4dc587e83a0247c13792045cbc48acd72029599f2c67f70384111fb4aaccaafffcfe261a329a6bdb4ab2888f920fd65e1a2ba3fad488ec6ccef3eda13d8099163531a0043e361132fe5c42b45d0b0a5559710eb0aea2fcfeb52bb8ca36b0573e15d96ed3353f50b19d61810de00117c66bffeda505a07e6e10723211385673fa1918ef51c9094ea366da1aa23cd747d89e0aaf977083653f88bdc7bf17b457aa7e5ef7e8d55c6beddc5708541f55ed0a7180e834645f8b8adf65928c15f29c9f3a329b22d53f37396dbe894d5a19ce79f68d9530d56ef02b1f025d5dd4cffd3f18d1f9e52999371350dc4b5172b21c9f9e86488cf7dc7e9597afc4d969252105d6b02e5b8557d56077ab7438cbad0ad47f6532a5b1537f8364c73fd68d5617ac6af68858b6412b1a289759d4ec9e8ef66e53e55a471f2eaee49cbc15d94bc50b146ee035495aef715360536beb65af083d535a7057bd07afa282cb2648df7f3d9117bfc54d753e8b354ccb39842dfe4cb93387ba8581d360b730a3d8ddebd35a912c300a62000943b78e473893439bd5c940454ceb5c8933ce5d5e8b832b2bc7e0b66ebac9cb3f369ca7203a0a2557268e1b4484ae3b79fe09d6a47bbc0de60633e5ddd44e4a716dc192826f0526cd897b6effc7dd55deca16631ec57a45dad3c4f3d0335d4f76a5c47ec060b0b8023979e2cab2a3f2ee5b24b5e2899999bdd957fc7491e212afe871fdf9c9947b6fb1695d3f1f8510fcd69288f710d572946988f4ead8f11197d9157332ae6bed9af0c9fbbf2d446d13585f91654dd771035979e13491a4dc38878b004f7df06117908f158c9ddab63502f4a82204c929f1f630a633268ee4a2bbe84b98fbb6d51f5b55b84487f8838c3a068f2f02d7c24c8114324822a55c9ff366b73df257f91eed4316b4adec7c5de3f7762574b0b834d36acbb837c3fc84d0ffda337d847076a67b643f07ed1beea03e86cdc52066b1a3392d893d9eb3b0547c862b1326354d527e4df25dd76d8599f31c118562c97d25b16e09d7534123500c337f52b84b975becba6230069a56a20f4bb970336c7c384c3c22cc5b3b789e127243aab1d39151d2d3ec48272b2515012eae71d4cf40b98bccd9cd852600df72bc60208288f3a8a67c5a21ba46c71eda1a28c7d23756278cc5f910f115c67fc266709812f0f65078efa98842cba442c056451679a0504ade24edb55a8d99c46414117077b8bdc3ea5c078bd0076c02b716f0e401318c4257c81e42498d04cea82920ee9ea8f59a4662c37e73b27bd49062731778b3dd31dadf041fc3b123846fc70be4b54b3669835829e195c48e4faaab5362fc53435363bc24af638fa8ead90b27d63a8bd2483af0d34a2a3e35b03fa9108434944165f3d3f7126547ffbf4da574280837383d5988d5f691221bac8690bb768fe6508fb224bc0fc17d58e7e7159ac7bcee9c488a19492093702fab673c315ea88c28ee44d1faebb57230a19a25aefc9fa555747fc6e5ada341b32fa7c5e2b1c542cddb7a7b2a2c7bba8467ba9af4623a546fad1217f28625f134a86c527584e0542cb84e6a7e0db77bb1f8ca35136bab84ed366f690066b56b5e3217fb012b5aa4dd5900f8831f9dcec8a45f5b5419308f91d5ab5d098c379b3a83b2b2dbf9f073bcbbe59f2bf3d9e1a36b9936f6890003a81c1d4328217c6e707d91b5eb1c4e101d06982336d22e1c1ca8fe15bfb9da7ac67711cf6264798803477bdaa9d58f7e2cd9d423657441f5f87ebe11b38f0a41b45e4fea7c09a50a777d6e68cd52e8a3ada81025dc75a958f540b1a333a2445cace8a716c12e2549c77a745f15dbaf72a9a154a0c1414c86202203fffcfcf2e418cfb548a5b2e0c782df935623b444e2e23c5254f62447f13a2e60c0fa30bbde2943a20a2282d5cda98a3b839afff2e3a44750431bf2bb933a71016775e9c15e8beff051cf0d6dfa3bab02ab08a0fd86fbc8a14138f263acdb81b046537acaeb84a0e8f401bd921325336ea75ec12f38726ac5c3f534c650be7dd8ed1127fb675ec4d9e37ea6d1a4192c8608bfab8320bd01cb9ebb6d3774bb21f700b355ccfd1b069afa619c3930c24431cf98a28065cc57e64efda159ad7ef123c9d690dc6d6e94f4e3d1de57332ff75897181844f7f889ba302f85b65762e4f847bd28cb9c45d6b8cb7a88b344237ccadde1da9eaad276eac951ce05d0bb67b0cd4bd89908f9abc6547c2cc831d8bb461f1881400959b599ae10c101fbf77fe32925ddd146045a9063cbf42b48c25ed0c521e8f2630e3837c3f11c92ca80d1eef44fd19dcad090c764bd03d36a0b284d08d9d956a2cdefc06396e10cf6f65a07668d5815ad6db344fdc863d08acb6e4c4b683f201af74ae9799e21e59a6395be512070b9743f09c7146ea5d1ead336b42b65340c72e19a58d39d717175be2f966c330390bc549513011e2b3c3aacb5a68679b533ea9b7e3045cd36ffed3bb7483e06e789717328715277a27aed86877566cfe0f57995a445f7fcd465a5b9d48190ae8704b999a25738e6d5fc72ff131bc3058a749690c10d81fb2c6f555e36d9ae9b059666fec986733c066224258cf7fe34b30e17bfaa82418d97d7a45bd70eb5df2e7d8281d59fda0e272ecc33824c3148411848a9309bfc3238f6e0644f359809d4fdba932786b8b7255a511a42311d4978a71c1491450610ba29d2b03061d89b908ce42eeeaebffa717919fb97cf6874470b603dbc9bf987534576a8b43257ffc8f37d50f1b1db969424734610296adef44f5a5b2cd0c5a238323a21fbb5768fe2fbce41bda7007ff52cbbc56f6c310c296347ede2617dbf27e58dc7461742a11dff5a2bf8376d657b2b48f4cd9d2b202f2cb3bdb7de2446e68de01ecac86b01f164e930366d714cfdf7212b04fca39a7630fe833e3471215c1e25c42444ec4c3b2c54f7e2f7af24fdc60de004f54531dc259f488cfabd1628d1b20e453ab124e449d588f632d31ced6ab51a77bc6be278601b48a260c0897e41f813dfe4ac76badf7ce524f36f66bbf07aa5c1ea6589a27b22b7ae011e759ab71f14a5f4f216e70453c4530d2158a035652f6363958f40c0026dbe71c0159462511bafae69906c52ebb418c6cd2816902fef4b7b16b5a0b1c67adaa6046fdfb4ab0f103e9bdeb53348c5096a62f56cf5d0801cb485a6f75511c800a5eb8727a987f904acc095314bfc0c3b304a139ec6ce2ca5b5b66ca02b3778a068ec63e59932276915b274cccd477c65e98accf8d48be47b9adbdc7893f41c31dc2dd760e7533e9b6c770071c61a83d38c0ee2e0679f0b1a40097d5909f69a00f372fbe4a95667e6568da5d9e623f540e85fee791ba21bcb1a1dd9e44a9c77dbf3fe06842842f63d12320c5dfb044f009d28c4e9bf72c349f304cbd4e844cc9804326bd383bebc140fe3de1ba91d7413a1e76e478e738b62e7455770c68d0fceed5ada055070c53f8b2931da649270495265752a7033502a4cb06cdd81abbd2a1237a875ff80501b3d28c74d93f2447c028538b6597d972b5e42e95bbf8f6046cbfca4b8fdcea050b14a7eb6f52124759b9edc410024317b9d66eac81a02778fbc3482374c90c01d376c912f9e8859258c950f7c00110deb76a04bdce95d25f8c3ee6aa84920309df3d46d020bfc1165faf16df5178ab6172ff933f2102694f03134d94fe2ad7ecea13a873194443f2518662409505fcd83423b9236e1215b676728087f35857ae3236a89b3aaf32ce7ee79141c25da91b07940bd8291cf4d1870bf360aa6facbc3c881d7e4e442b709bb505d1c797239423761689c97a94108dc1a2d750c119bcf0ebd43484acd4d8d89a61f6fa9e4af64641da8e0e07e742c6969ac82daab873ddf7169d1626a5d26d07c184fe44b9e3cdd51e0e7ac69315f751997b1b2830853a381545f4b86d0a1f6b8582fd1776b42ea761c61684be8df470e8ee76b7b90e3c6504f101f0692f64087e2e764398de87be4d032d8fbded56e29e49e75af824414d27967b4c1ffc05f5e3872c115983fc341ad1104236405d019881273acbeab0f8d934d4534099e888549322d925c855b797734ed9ecbdf356e2fde09fdd1a0576ff785d19d616a95817d5180c207f85083e6873493c685bb3c0c324969fc9fb82732802de5bb2d4dd1cba8ce5e6a85c1747173174f1a3edc428a22f2a3b52a83dac972bd85e7e5e2728d7af1595a01b7a19ab30d1622043cc52b5bfeca9266f7ccf3902db42799d9d2aae148b2feb1c023564a0b75f2bf7a0d17c3188349c128a4e08c331d47a24b8f3678b18f5bd5642a3753c7f6400a15aba3418f9ff9805f6b163ff95f8a89b3e6c041c443e416574d5df6e93590297052d4aabaddf270d58da8aea2f5c96e1a652dc69e1796a91ea1eaeeebc16c4de0b752aa41a63bd1ad8a21a86ed4e21769ab0243976a508f483b015f939b6f48e4590c84d664da1806762515f7114d2ce98b82b108db1d24b5eaaf8df36468fe5e42e55379298c4971d7847de27f287330e1d751df3ded92181883c31fd8c9e26c60c51a20b88c8410468eb670d12f4fdbc1872fb5e26f093306a4f0506445b2b76a16e44522050c703a718d5b0f2bb65b270c4bdbc4f854daa6a2148d8cbb0de770755567cd281a683f733ef7034636237c1a714b3cb15c79985a930c1eed38fa9e08dd1fa0f051aed63c092c85cf09d9d0634aea1708bc1a20faffd00d9fe2e8075ade7a8e58315e0455633ba2dfc9ca560ede1cd31e5f0a94abedda97bfdc487bbbf8f0acbd3ef959762baf9d0a81348cda14c4f67ddc98409888e584fbe9afdd49645dfc872b09c61813829b669d278458fb86a35781dc7d813e16f01ac2bb9465f5cd64f7129f82360979b7e1291c56774a0a37e1832f759598e186fc646796dac98eda3172b42455b80623cb9e4ef582d06121ce48d8e0686f883de86499440987a53e3c5acca36350eb71a0e26fe3886d12f6abb26c739054e386af416d60e922df127bcd5790d0f676ea07573b8c0e0efea2249b3ac451253fb40fbfdb08411b88bf71159444694878cfb7f4c17f220e5658c84bbf02cc7746ae35b09963e0011f8fec8d1bd3a35d84f5c94486ffe1ff19ffa6bdfbd17a383fe8500c6faced691dc6fef6db171195863991cf44be1d67f326d655ac2cc39a0663ebcc89e55d32497739965c1fecebfa8293610e78a9fd1db439844fdd3c6f386a45f7ed0d728f8d711ff64b4a67614742265421fed3f76d386fe3cd3838fde3e57fa8dd721be97f2ec6f78dfcc2549b2cdf791e3db2b94c67c65206ea05606f6245fb32931c257a89bd01a707da4571b054af632acc740e2a64143ebc4b789b679a88208dc6aeeca8647c9e7b65a4aa673b7adfb5dd7773c0615f8ebff23648ef8a85ac96be9a0d8823e78ea69b089f68642579d857e8bbad2c47ad08b37bb643df522a6176ef6f8cb9ab9746f34cdea6d7c74e82b1fed706152a9cd98b76cf6cc363b83f47c05070ca86c13320bea3254464ecfbb7bf59ec88027434c148c4b851c54d22805ddf288455af608aef737249e4001c329ad7bc911b6546edbd96bf5829fffca6b7408d14bf88eaeed01ea252a752fd5de5f041c22fb7355f4e49e2ab71b2ddd01d46da816abb3afb502188c343c19289ec7f66ef40ceb6ee0aa33ce096f061c2751908357beb3fc7f41f0debd9dc25ca599b8642c0f102173f7514bdfc381e4bb449f06e49102268974f7cfcca60f56dc8c84066d9065e3d6d0598daec71990bf3802f96c1e86056cbb08f6942fc51afe7839823b3511a58a150403067f5919495764c2c7783590cc37588da8bf0d6a200fbbc3c4cc7f472036de5cb99b5bd2978004a8acd3fe3bdb1fcdd4d70cd848e9de7e7fe6956cc7746f45288d4d1d2fb2db6fa43fb39667154659c288f27e77eca0d9ebc3c4946119655e247070e24142589f7081b341dfc5ef890912eb86362d54de596261ada1ef6c6fa01efdd43be3fdedf4b7b6a78c74a651bcdb63a44b7837a6e3611c966860025d51ce0db58477008cf6b433da9826881cfcb3ad00f94f99eaf5755f259237b7b775a57ec2eb38af44025947891311cefd18b6f52b3716aa6fe99c8dd76d1832f4910f57bafc847c974550a8f029930d6a46674f288ee21083da7ebbfc3724ea6a9d9bb27fedc783bd7fef0ef8106d961af9da28d05c222d96a02ee4a0d09f4a00705a003d8b08af4ad32c027af2fa466d4f22f7d68313535b7a705cdf313d0e7166d01dcdc3798b8355f0cbb0c0335d2345ca88edcba8094dd647270b5fac8a442744c5021bd2bea879773248fd0837392c10da4367daf52958cf4ca7f59f3598d9553104177d7fddf37fd8d5581b4d0ea1f861abb1f57b14fbe9ba62b0df567fa1237fccaf76409bca074c129b17c6b9fb4042cf77b180bcd087fcf4e87d4baa9637e1d441dc876c53aba63cd0c720ef65d9c0a125679986b7ba4f0212c1a04d46f9f3822650e5db7fef076e790d85c18690bfbefeba2b571850eb3e6e8dfdd0b7b7e60fc74770ee6126fe7e8f1f4c2635f38e09c931535384180aed4c53aff8b1bd5c80e35ae1344703969e4fa0c1c8cd716ca7b7e459ed195b30fa775132cddd04ed04b810591bad0b71b06a3bcf0db6eff033eb209411bd4a1a353cf17f4e1b3337d81f37f8db69c98436ea049d1f73c7361ef9ca13df390ee094c1f8da8a172436bc8e7bd0a3127f144b516623ab8e8e902a0de0d92652caec7e1e4fdca704eaec0bbf88a78eb0cba2f10ad94f04939ecdc4a27ca653c0ed86bedaa9633a361a5cf6dd43bc672aabfbe709056d63509fb006780cbb93bf5c019d3d01b7b1e08a64770cc3ccd564ce34b91b4f8d64302b490ff279c97eadcc9acfe5181bb403a5928d1f029cffcb7c592863d8382ccee5c959be3848b7545105930bcd11eb7d4392d73591b72fdc78c0d84866ca380cd15963c48c0a9019c68d080027b0abb5bc846e3af0a884c404d8fe8c5ddad5a2ed245e7e9aac1ab851b3b102571609f313121975e2ff24b5ba3c3756005e3c6a877dfd6de92d835c13b583c629a7765927dafbfa9965b0cb47ea2f2972450b3c3e48d08fc73ac0494facda1d6b6c4770ac1c7bd105d38f3e4261aa706c08a7c2a78e424f53611edf3b254623fb29c947fc4f96b5dd0678b31e8e16dd4def30be46a892dad33e0bcff8b7b980f3660f3b6d22c14ae8dae9ae01439187cc569b62b351e47cd9d53fbacc7aff9f9f0ad8e11d322e9880cd69ed1ff949909cf01c57eab863a1d4e769ab800c17a2ea461cc91449f1bf4994127440246100589d47d1fb8d260fc035f08fb439b8e896b4adf6e8a6d4f02e7f8ee386697f0a7e901dcb04afab778de62fcbd96190626e70c57503298693ec19a91d1d94bcc74938ce9b12cbc513c97b99225e93c1c3860d5dd49c39a6a82ce39e507a00cf4699559c1bd7ae35c9d2c70a312f26f911487921f45791531ca243087c8acc6278afa8b32b4c9a674ea18f9788df99746e318c3bbd877cefa48e5869304e038f3b54818551159cbf480428cf574726235e35e57d7e307c9039f67b9713577bd0e600ac68a84127d6e1f8c73371246c2b1668fd5056ff50a9e04851f91d60f51132c8d5b7aec17a8b1ee3249366ee6d99797651c2e8ac788f5454986f2c09c4f8010a54bafffb2554ff1134ef0791f8728b9de1cb17b057281db32f2711af89b2f3b7501c7823cbf9ffae1b2dc1049256c420adc87961e85ded46f91b1d38561f88f7f5d6eab52d45edce34172c0bf832f5365ce0225261ce0654c724f07d222de1c82f1a9b0d053c947d01743ef88b3fb30b917d8e2f2e369d730439d1808a4cda3f257dc47eb23ae362bab14852587b953a23fe648d30dfc91b3345fb7c808275cd2993ad318ad0626cebcd776519516fa6e74a7dcb626a5ce7e8d755d619b6546627789b1c477891c20df5d843fc02fb8961b9db0d104891469b175d992165c3f5296d52c6483233ef8ca3b7bdebdfb8c0477139f71800d09357c0c4cc1d4488978889edfa12cb7793f5d1d012c3d5723b9feba2bf9dc8753bf9dc7a98f3a4330ba1d0941fa9db5b648bfa5cf0eba37cee59772f861cea3714936a1a92934997f12f133b4c90a6df5f9ea695e426d1ce59ef4760bcdbc180cee408485920fd15ccef0a091125f8dfb59b479a98e8d60e16448227b7068b0a0b5335a723f58aec6aa94f02f5536c2850dd7374a1ab1c5b8056810d8b2e6d578cbde24a6f5e2813b3ff0ecf3f099343863d75c8074ded34c367fe845a3a63ca957a8d3ec6ca232611e06a64ca106cd05d9fb6f4810aa22e85c1ce81ca36a696ae9eb359cf50ad0d4ac8a5d8bbfc2e35f8067792c16ff6a0f6d6c2246ebcf132078b7dd8c7d4b6b565f84a0744e1fbcb7331d17777ccfb6b9131f8dc76ce74003edae3df9231125180e692331f3825a7b68dea207e406f097adbfffb5b34b3405f880c29e6eca56e6491e073b94b9b7021839da6403baaef8539539d6aca3025f0a4fc3a200004450c8b30d250de6c1dcfcfb21ad07b7eb04fe5c6437926f0a5b7079fc35e422c68e258ef1e0aa3110936c94d93e784d94f83e78d9b6af9df4ab587e205fc0c5c507a20c327961d0f7be5a3d780d85b3e8c01d06225c8d58e0cefb25a3ad6e911a11c0646552d20fd0cc9093713c099200731dafb680aa90e9d8e63329087c94662ece6c69f36f712fe482acbb078a18253d6b2fa2a06f97ea557b9cc1f65f3b70382ba4d40449d954706b77eaef4600a15a8c36fc405243c7112b551d803a9a638e80672c1174aa710a08fa8e8901799ff725958f7f2dd570cf43f0064b9d2b20a05dad28069c6fdf255c2f61be06691916519f280b51ae4fab1633cb636b14c670d73f9ba9bbab8570a2f06d862ebb5cb9a149bc71baaf30be72f760c483174587ad98953d626766ab246a1b36e221d289dda45830c3797db4fb2457775c95980240b2ee32715655db986e9dc36cf89eee36b860832af5de7e65d6f9dca28096c8603e9fed19d0d800c5fb0a7160f5e875351b982ff86215b1faac3e385793e77bb2ba7b7bf4e47ffa37f55b054fb30d93f65270c619f8861e9031162132e5f70e065b6943d07c890699d57e67ea5920e8ef019852b8621b5ca8617c32c29a73634b6411394a51655ce515cf7c2a244c944770e2578176b577122dfda6a0393a1ca628548607fe5db188d811821079b367a90686e8ea192b073fbb3cb80ce065659f733a362a5586abbfe7a4aa6683bea087bac4dc4ecade3e9ea0bb24bc83fe99f629091cee2bcc58bc22a584c514aa4bed5c4643f1ae4e2cd4c0de7a915b3ff8d299fa82e427814f83a69e00c6005fdfd35dff20ec35eacde76c1c5f526c9597673441a6835eb55c7184fc4386f5e6b7df85701b6add247c9bde45e5b724952a53dc4f76fcfb3f515341edca80834d5893731390348ba2bdc6f2f214caf618cbf08307802af95f46356e4fc0dbea0dec3c98d7454ace947adbef4af5c87a56f561bb6173555ec4b406e845c2fb23081122deca419964aa61d17ae9bd557f79a547b813a710286dd3cebccfb6b2536fd231847d321f8c1925f813b724c950be28266148d059f872baf80ec744601e480a9c769bd7877800e8f210bd48836bf9dfc68b9ddf4fdd676153febb38649c0812528126632e9c16d86cfeb16724e394194cac1a060f8ac03f43ab79f502d4a091a11596847f4cedd6245fb168bd4a15783e39cfbedcc28145e3fda3c4b56bc2cff03b1393931c05c8f9678eb651b031ca72c8eb422bbe195e0cab509d93c0f163397a90690f6a8388285c10178153810fe33c2bd269da1a76195b009fc57cd04466399b068b4d59080041b14cbbda50a7d2750540c7316d4c77d8c9cf2cf41718b17776abb184e6543956c149ab247cd086b95d73374cb1f90b191761fdd7b11e4a8f79d48882a54b1250b3387aff9776c70b167fbc1b6c917021fc36ab12ea31758fffdf78e46d6e3ef3149243739caf3c8ac80b2f9827f5a786743f1d24115cae0f2d04ecc73a0eab338f824d7ce3cf6e945d1d92aaf2667b22dd1cc437812046d4571996d973bdde710cf2c9fde6b8d7db7b875d6445875823ad641c7fedabc2c9373aac79688507f5a38a72ae21df59a4c4068545686ade29453b6c1080c083d498d6ff557d5ed35326679b33910289ab72d6461ed4bc8e2c37680164f41508fd549e0425f89f00acfb017bd2355d5a570bde51d24d78ac30be75b0f7a01c172e73eb414093cc6209513ff89cfd7face40a899a6fc4a6251d1001e048f447a0ba983ec572a74b27d4d888b1754e45edf1e77431dde44a647f6f3cffeab4ec18e1c763755b0283ca07417d0bc9560b6946c0f2e14aa6bcfff0b01699f52d63a9c14451cd8002f7382cfcf31548b4c085f29fb66977fe0348f93b629cd18a83515c62c04d44a074293249997557791d59e6b4d96301c6ddea05a901e9b21ab88962daebafa1ad895ac99334bdf4575c124b06d2c130999cacdd4d6a1145b9a261fd8b624ad809a1e22d7f5a6d5b43d3100b46be9750e43c3c3223c19a4d496f982dbd8e4ed6756797f6de0a8fcf1c5294b96daf406d1a9774d5f0c359ae1d45b125bd3f329622c394593ad201c1a85b966a6e9ef2d22cef188d3cda5b9f1cd8ee684e9566474e996abffa1c9934c71927f5aeaf031c231ee1e0425dc3ff662cbbad8f3fa02ce041f970246d8b2303533b07dbe7698c63f6833e44ae0b5d2998f9592a1d290cebf209b1f0774096ed7a5f974524847cfcb24e4388ff42089f3d723383c684be14025f65000579125e8961b57bd0eb79bd6e56dd948e1f103a0e001a161a4711746f4db6c0bfce54a714af64cd101d52ded01e46ac07281cf3cf4e47d48604e673841dd17e01e0b1b0c824c01350e57ea7cc8ba1bfc1367b3bdfd4e66b2f5c5286e7e965dd59800610093589d39a4d1b79964978c38cfe297a20573a7955e3c6b988cae8621b8df0a0420d43c212ad7e47577d6d2323d99bbfef1d99dc54d36c124a83738cd93ff8d65dd2b076c5cd73bbcb35862edbb158c9b2d1debb8134a00c751c9e54b4e0f898b28292a4a250f082f01a3f0a35a00205c92525b9d64b23a4c4877c18ec9f901a4ea7e7ea7a2167fe4f68d3c8046fd3d1a49c4f59865adf4687ae9501a63c264cdd80b73442931faafcca834ce3a00699dfa5120893a898efeebaa2312c78e29c124aa694c13e1eef453bafa7b5cb4130ab4ebd89043484ba52fbe27b21d1789dcf9d61cd35d60e850b93b8b47b2101a5fa7abac31b06fe92a4a96fe93f2378ea53ba79af55f84c8f22b0a120470c57140a75e93480fda1d8181c60b9c9ab3ea61990cd5122ef4dbc449a33aaa908c5b03b0b5744ea4fb3ada7d05d75bc1e928bb509688bb00320de0639bc61233dbebd07370c4eee7087588385502cd411e14ed80aadcd0eb503e8eb09f300c434a477f338d373eb70b514c04e9c2077eb02a0cbff823fec3525196a63bf678fc2520c4097580ca9bb460bc5caa69dd35a5722220282eed9668287cddc714b6f529e665f0826496e78e568d6f0824423f9b31d26bef83262a8c26ed0f2302431892057e90ed5ac8ff927fd299aaadb5930cf52a9de1ba96930bfbee338acc8de1882dc3ee6b93f2b8823c350aea70d22b6614622084269cfa8c175d8c69424427f0adcc171869d82fe2e7e5021e81252cbb502dd0e9781be31f060b857e739babfcbf8f55f1c2e9e05e8db57d38315b9754a49d77826e929738db54e2581d056490a21532d371d8e803392f5f7472f93bfd6065bcd10bd02412e83e6c3336460248a1e4edc501bbdce0108db0395f1cbbba15978638c9b122bcf2142c630b2387ef12a553a4a781e68661336b0c8c8481bb0f1e1e3f58a850c39e7e88985427936291302646e58312ee0bb6c72d2430aae494a7598ad99adb281cccb89119089d2c4c3cd338d1578650fd865f06f64c70a794a98d62071cb0dd319c26f8e7299d227d359a45a482a9f9ef056ead71d6172f2f22fb4610ee54f34d46d33082d8ede868d3ab531df752766dd7b988faef7217eefb95b1b83c4673c5a75c243ca40de408edd95b1f31dd2316ee057f24f7cc31ccf31ada7a122a21a84cc05f65f28c09874430734e17fdd1a3b8e42a05c7b336320c6181476f348a35eed24e000ed12146ae9187a687a44a6f886b769207a12b9ba65425cb866c5c14ab176914a230f88cc4732491f00172fadd1cd9f80e63d3ab5adf7289be751f1fe439cc56ab7f1a2aaff49fbe4ec1c1a4ac5818af3a60c9f9bb5c1c93c9bda2c042415c431609e89e429081a8273d2ef64e205705ba8168daabf27812557014fb52b427026f99a5b4a31c40b8f671e779db058952c95d22429e9522ec53e130ec8934686c92b0c81496ec280f2d5616317b0f69128de3bf0ff8c801aa247832f142ed194c7669462710e669745e829bdc96db795e7cfb47e7bbb1bcf04a3f7b93b0444a182128be3c604d15e8e721c8bbeb5eb0025cf90db13e768f1b058525a82c6eb0a438ed332b0ec587adf9b518d70ec63ebcb4946133adfa50090875882df625f7cbbe3792afe165c549d3a6fa115c05ae9b3439bda7e0cbc70295fb3f9662b957abe1216354ec7efa74c84f79c0127dce216ece5be39db61951247844b3c54e6c02cfc91662dd30473bdd5857b3ef6a17f4b78ade24807971eda649fb86c1de02e664339b79efa9a152c00cf59bc851ef697a612dc2aa8e2ce7f6224c382d2ee8e1a8e6636c408985eb8acfaa8cbb77d0546ced4095408ab459ecd968582e48b1076d49ef0776f0be7d8c47170edc5e3409fdeebea9fdbfce3865ad89b37618efa005e1c6c7e44da7ae8a1053e3183b8c34874417d523fb6c83527e6bc9850cb55357ed06a1fbeaf1291876197ee99a738637d9f8b5e81808881449059609db3e2e122212426f1874561183d14730eaf777d99f96ba0950e8e2eff325263b6f96f6dfd713de35fc64bd8ea949a1f1d6fbb06e6b422a0c9b6384422d580fb99bd1af4df1134deb5f3a573ac404d3a587f3882d6c803db82ec018e31ac7a2350c60474dee615b248499a230565ead74b3296263e860adc705336ad3c9373248e82b995a90332d0f1712a4844190c8cd2194c1cd882f73a460486af0a790901513aaa6bf36ba1fb0fae8709717c1ba9df99bd0d1541239ca8835044a472977296d4bf112b1cde256492d2b1e067c01794fc5e43ecbb1f26e03bf0eb42de9288999267a0180707bd29a291677c91294055c55c5baa60e5244a43735ea6a51a72fbf5a38d9a6df545abc5c75b2473ae917dbe59c3ad31339b892bb71d327f52acc9df278ae2a879e7928795fc3e691dfde9ca607b0057fd110061f84058b9165bf66d081ec6bf6a2b2aeec050ff7e3c949e72b259593df48228ddcb818c6d370734fafbd88b7fc0d463fbd406c81f00e3bfc18fcc4ed1592593a81d4c2f5390681492ca9e85eecd7b0354edac640ee31475dffb01555b9d846dabbb33760958c88e2c05e2020cb49d6e1ca54aad9d69b424ca743a85156507786d03c3a0d2e8b7bf6641caa2a84a3dae5b662ff2f840db307f642ef4ef712fac35e52db9ccca1a59c1997ee8b34669ee04cc0b441bbf222f3cbc145c242da50f5dfb0da952aa8feb16a888059ced70e3bb826ef6a8d7b2a8a4d78cfdcc49e8e5f9f198ecad947cd6423efd21172d39985022c0fc8ed8450eb0e5d93d70211eb7c7ee36535f0f604b5eae2eda109d09d64f6d0f83529949e7ce215df7a6a1888b649bcd3f230ab2e7922e10c52341ddefc77383a5309c304cae3848863bdcd23231cd6a1b7a7cee943e516fad90deb905ec3f698752ca9e431f04987c82e4d6e07b540d659cd0f6bf1a4518c766017c0f20c3a040f0c5fd389c9c0daef39bd0254654f65b901ff5388a19bb5c9d028523daa9aedebe589a9abdcee3f538de1565a690fd1e93866c0e4d485bad94159f2822b859c60bafe4d27b697840aa8ed7b2065c07f4edcf7bbfbefb9857a5d8849ee8b98af857f4efbc672e4d13035b8777c22d9b915a0853481a6b000afd1f581f9487ed98cd9d4e612114ee46db0da3d08cd9c63e09bee1082d5e422161bbc8fa9e0838906b3bacdf1c2baefc9ac37c44eb94d32a08e1f48f6bc41e1a96f59c50a879541a52eb09e5008909306f028ab9e0ee34e5f005e7c800b7add4a937e38f26687161a0e02d1960ae74fe558b168bbeff26451f7b5cfdda63ce257ad4515118417dfe26c5a8374f6b2ccf6b1457f758338ef752fcf52785bca4d08c081b0991baeea50b0adba499f561f9191c36196c64d701501c83791fae541a19d6393d7a65ec3056c6a5fe3b57be9289420bc95bc3d5a6564483251dc2ee8f2050cb8220dcd3cbf4fe3729fffba83507423a8605778e2db42a83ae9355710f2f58b4a8cc71223666375f912a793360881bab4832b75bd3208c19ecd12a0263c1aa151af54b952be470e145916df086901351c226e8b1aa7c5812cf8cb0d33a1b99033248046a602cbe1e6bf213d5b4be54d1a6d2a898d6117546dec90beec0f2c14d5e3460aa70762cbcc197bab44f00863b81a515ebaadef65da4cae072b0148efbd1d375e2e8ed691909bc281f89d65f759303c5a509967ac52a208239a6252386b1c1b38d46b865da85fdfe478750de22909383c9778e58b29402e5c8efcb8f9bfd8edb699abfc2326d4ac8f5da95274e0a68530fd08d7d415390a0388978e64f6a4b02cbb8960c70d441c1b3bdf5a8a0c728e3472ed77fc472cb33a6d54bcc8526736b446381f269c8677e355d4341afbbc33c579a5fd9a4a541101d3ffc1e0802612ab3b55b7ef201819e6c021ad8bc1fa631316ba76e0905688f3354bae3bcb6955284fee98f2d36765d94950120d5eb1c6e007e005fbcbdcfd10ca386299409f6781fd508ca1c128daae9a3e4e1604e73a52c27dbee48da89d0d28110047e40266ef3fa3ae364bb1fadbde87f3942b27310fff9293a70c8c8ce61dd50f6515779f2beab08d3bdafe9663c8f9cb4b160885a67e7c0f27e78d62b06966d01f417905ad2beab1f7bc28c8dc9449424f597de8a023dd63df5f35e01cd8f694a96d3e71c0cead6877190796d70cd0f9bf569722344e575eb4ac1d65d404dd7588970491ab5e048a85f998982e776a70bcb5266f4d2e798b8c327bcba978df515d6a799e6462afa08894c3afa8a9e73d757a8677043d6ec0e7f66a89bc3b46fc60ac7d7161f40e947c3b69ed1eedf2484be10c153b44293cd1ad32878d3107b12d7fc640a082eb0e0e34caf4e9a2baab6d24fdafbea66aeda3084682abf4e55eb7e033a0f4ca34598591c7b5601ab4df148e73f12ddc1816ac307cc584937dd3461367d6b40e9889c803e0257988c74ee31c87cbcc8616d77433767a799c155bc776c8407ec1e576fe97f6757f8cb02faa7a85f1d9cfa793720480c1bf7c860d8b49f9a7528434cbf533bf811b9b6c7baf1613087488a451370049e2b944abae4615517f0fc94c11bc7288af6a72a5ba131f67b1f0faaa8cfbd4cbd945e34b778e2c323759771ccadb31bf4d8544d30afa761c87b0e086c4d603564173f1c7044b30f42393673d7ad029b99dbcd2ad72944e1b780a3509e6f33ebe9173a03eca8fdc83c061df9b64b8852af2d4e22be4603edbdc7475058c8117588343a9aa852d32bbac3cc4dd08758af7c3d96fb931d3568eebd834af743fac5ec4473306835f0b3f8a6598639ea2658195dcc68c5a8d80d84391c2e1033c61270beb51547bd59d21732645cb7aacf2ab14e2a564df521d5189672aeb185215f8da41519818bb084833e97c57b9a1993916c16e475a3a72ecefc8f69b3aa39401b31c1c1f5b2b62e8471a7c4f40d24a9339a0c4e676f5ccbf9a35be5ebcbb3a35f03e6f02a131dcf9f892526d12a2c8149eb498bb7c80428c313e185d5e21717bc2917da87ae654e2da0fec3cd3e20164eadc235c3837b5f514c0ae4096847d91b878468dcc2618a0cbbeb1c66c88307535b13f5e9b7bc1b183c8b8ea6e4c2b8ffa54a71f21a9f014ec24992cbcbde9447f76f8ae5c6225352ab89b73b4ed0e711cab2d0ccdf7eeee98d5948982eba267509f764ec09217bce91cd09ae7f3a2099e5f4013dedc58a2accda0942d3a853f5b81ea93814a1586a50adc4b0eee770ade3944818875f47370b6b178ce938a77043a9475277b0144aabaf41da628e0015b7af1a508411af8245635cfab5fd2807bb884afe62152d3d9e6f4d05710600f176ecf7f81e8db6b085bd6d9235982d891ba81e16e0d43ed5c52431fd3a374455cb2afdeac2ee7aecd19d44374908edad552eeec6979c485c88027fa88b6e3798c4790db699e27fbcfa7bf253972ffb88a877c1fd88995e2ab420cb4cf15805a6153043abd2ff09f74a6fb2b6449da569b97fd45f7206d44893e562174c371e3d2190718e1fa8991cc9179c68e0296ed8766a47f4b326039863e80db09559f33f3ac50ea4c5340fb8f184abdf4f6f52bb8d5cb28a53454b415d783a2994df7d0118f22befa0047bb39a1db09e51882b30d7b60bac560156cc44f2d48cb1775873c13bac2dfeb2ce9b9a4752e560113eb4ddc620de4a75abd1f908396a22786dd021c466a4e07e4a5cd68f197917805ea04c68387cba576634e26dce983742aea1a0d4eb57dcdbacd02c15aceccdfc889c85d591d51caaf674326507b583646621479757ddef0b1d2f23251b4cb474a2b53badc85aedea2edb772c61cbabcfd92b773a8276d32ae8a2e4b8859838bae6a7e1194c07c86d84ba0fef6b48f21a0ffc8fd326b830ebdce08be0e463afe0daf1afa9e902fa777f6b12786483be418a82fceb24f625b1e052f227ed6cbed7263c4d546fe6df5a5109b31855801fcb06528749af01c6f323037053ddf6eb84b285aa8c34716759cd4e0e7f4e33ba449b17b92ea92dd4b61cd851c5dfd533eed3463e3f5f74722abd74a0b5233d1edbb95359907c6abc7986f85d0b1cc19f3a3f9819cdc2e6219c5c85675c8a0b0882c2f92abb917fec44870c7c0f52179439d697908877defc65191deb6753fef2f04649a1778b6034bd75fabec94371547f5471e0af88413982f43253db364e5841eefb9432240f1b2aad6780ce30cca986414bd11b00e9cba123058c0bf75933563630b6c306ec670a9ff709abd703ad268c37ebffa8911fdd5b049439919f3f2160ebd46f52980bcfe3413f1f57ffc424be2b8831e8441c851d4ae06e57be80435b7834220d0e7095abbec6cb86a680f952ea933c11ec5fb6e001b156b4b8fd5de88256c9e3a9332ae7be35da7c56010594363bcc9b08c82cad2c60109560a225c1e35ae0d5f30ff251983b125a0f4e3fd59937b9a5b148adda3c6dcc50dced2802f0687d1ae38b06b3d45652215e4cdd8a050e91eb80c14418b8cad851f3610d2a517bf831c126bb224157dc914ffeba7162fc231c38bd83816bcaa56233d7f894dc70bc7d0cef092e02f3f5e9dbc035b5a3ba16f059d65f207cffdc04ef2d99c7fc0e37809916b69f81de01db3f00f39c10b263fe1f45bb45d2a396a5f81fee3232080834c78a746a8351a78e8b2f7be3b2791b16d27d80c3522595d1392fd6f12e5308d8d3d4635b4d645ec6ecb557584579adc397dff0c2f960da93585eb26b0301ac4255dbd582dbd4fc68d72f0fad6d734fcf4a99e896fe6c9076af840623c542c139a66459cc29d1383361faa0490303c939c3d64d58181a825f06c1bff46a157381906a55ba6231dc3ed0958170184ab0c27f1f623136a0180a17f1ee207ec1d3ec38cc39af20ad6393c8037e120dac4c2a5dcecb88cfc9c8342946fc6b6332c437a5519d81355e11e4c305c429cf4e43720b40e7f2228d9d072391dd2397fc23d4aac08c78f3060c378ed9875a8e47b066a2340ef4d2467b7e0fa7946d68ce2aabb883e97d3dccb9ec27d29df5eb830ac33811520a708d7eab6926751f3bb6784a51701828ce92b56b8b974f2a1384145b3b8d912c2fb9387d7707463a7a20d41e09227f68cfa4983dd2dec425255ee4b91dafaae69cfddbe4d05f8966af44c4f1a9b501b55543770ccceeab8ee8558c86b01648dc5967edc9b982c250c3b43f0094c09842dc837ba43925556416d6b08cef2792b0f6ec194a209d9493716f1d449731535877f5a2e21f1821a4244643edd4a014586255216d086d5ec150885938ac6132c023d5c0c47d2ae42f95aafe6564114c133a3945d5c3aad323efbdb98f796b9cf56f5dcc55bdec5de5b460508bcacc2165001e988befae975d514dec913947c72f93c63a0a833e577ed70371b66b56a1d2a335dd35029c7135aba0835a8bd3c1a9d9a78a85f035a898260c4a4b4ed36482871024a6ee517c61c65819fb7bdcfe3e54ee92c3818c5e41681ffa1b3a56cb46c4904d52a073a29ec306f4734276c46a027cf37e8b978d6399874a03ba584cdac6654122be32d3251abff07afb8c4c7573d2d65ce4bda800e0769939f16d5f3d1bb0b031c3872d2784add8e71b398460e77c9ef77e57b0b35d72de4d6d90a6a0e6c2d045aa24721539343a3c1e8cb05eca4c740742324dd318e11aee6fc9bb03bd92f322520fd8ac7cfb528920c787ae00d448637d18393d03f901a94268187400bf7f54dccf4fe90f2cbfe3d735e951a119500ed9528a81feb140aa6650bba7e3ffd3c89d4a11ad21c88f79bf68deabfa9658a57c6dfe7d95d366607d395b088c3328c894a38e86e54d54b5e8c7dd84d6fde1669ac8e0e31e5fc31f5dda38e88039aff1bdbd0daae6cfec1a7c29eda2c08debdd631827c93f5cbab848c9df5aa78fdeb6b4e00229b0a73406b5718aaad50d3be4fc8f3f90f3fb9404c76ca1840698026be101de2fc8bb059760cf6bb29c186d0461b8aaa1f8272e487685ffc829324acf36ba1702a942411c76ee3ed5305d5a72e4f04a4dac811535f8dee998dc71d070295caf0d6e79d4352165addfc3551515ae24c7effe1aafd5008518c60f66e5f83d380055735ebb43eb6305dc46016bbb3e09f02e5170dba9d59b4d1da7ad9c9df15bb1b3818a39e8cbd2d3268b0b3d7470ea3309708feb0665c75c63f269a6f6b8942eea354077f9f6a18917158364c9a5d84d23098f4915d17d7ef4c2fd7cb47c78ae2d77f84cb482d66de407e5d880e1dbb4859845a677d273fad0f26fe2a71248bade102343365757a4c559248174724f6b2c29b8d9f02a259789b4360b1c0a86c39b90818230fa6b0b2bed467c2b214faaf1b2103ba9ad073fa1ca6c1fca1b6f65367c07b398ee8495c0e3d028d1a7177d720ccf6c4a1bc936ad2364e6e65f08fd99072c125d931b16a6912c998e6c6f9db3b620861dbfd391e126fb65e6eaf864b5edf7db7c52367a909236a19e6a4116e2429c164aa50b6007b20f5a30fce7284dc706d17b59a292b3f429a2fc3304a4e03d7c1f8d240b2816d1b425d25db6b0c60955a4e561e302ba03776452c4118cec1807ea93eb76a314a5be80eb09888312c469c10c3bc83efb94068fb4ceb808ef9ed8c627b06a7ae199ea5e8fa7cf606344190d03a2709fcbcd272b6e4e984de6fc0cc75c9507ff26206cbbe0d70855eb672e113e54e8822a6a9d299202d1cef90e0a2db35a9d191d34e599708b7b21ea42302658da169c658afd13fd4240b94561cd5261d8768cbab0191c4df781744d6b0e03682bcc8633407edcbbc8d39017b7d43f0490dded1a384569107073897e214932d79e204ebc71a51e608cbb18585f0821af9cf9d9301a27e2f6ea303ce77b66e54f3eb20ca95e7c17c3a7c385a9adc2cb010c2d93b3c90570ebe88caefe8bbc5624dbf9d8a47a9c24e1a0a574aa9933ba1fea82eb633a564df653f15c810147cff6a9e5eae550ac36a445e05e82d2a31d59d31aee736949a32869fc10c82a0e55d70d64aa98832a4b44d8fdfca82bac36763ce04890f94950729d50029a0117c793984c1e0409179cf70e9ae30853f08ccfc44464d954ee75ee5af93807b49951be605ff8418c4ea6b2b1be0143af24361e1a1d689cecd2cc179f8eb4e24ad618d0ff47de1f81591642eb416f379fe303d079b268793d4d9a29bd6735c7a28ab67cb8502afcb5cadd7adf5277557788146c49fe81f097302912ceac238955fe562b2036535168dd3d263be204bbeb4b9a4d1a60b174adff7ecebbcd5a201333ecfceb4deba0cdd48ebbcdd6a6d03b7bbf75e4f57b31bb876788f64904b944f627208f6089167c3f6aa5641c9d520d6054b4b2a452961d8443ec8cf3f10969bd3dbb7507f35c44d21f486b013e2dc577288f61e4fcef8fe58a91f0b1391a10e5f76e93b3a54a47e85209b857164ae53f77da4d638e880703af03a8a5ba4a1799a4906313a03b4bb89818185fe4794d2ccf454d3cc8e1b98e042ed00b7888d1202a10e4f61ee376b03b2aad1fce8f3a438c1e65a1ab26ba3a2746b927ee154a844c673852bf11074ebfe0520fef4a105d879e1a4640fa3abd90608307623eec6843b387a1944e36a6b301f9e61437074d03ea3010cc2245005a82779c9f80a2aac76d732760675f4bf18f128bb8713ff4a359b02e80105dd723cd8bc4428f2049edfeaa0f7f2f77f017573ae9e4178d27831b90d611024b92cb843531e4cc00b60b4a26949bfe6a9a7480b6def421b9eb82986ad10a5d93dbba3def053f4f2ed9fdab00b7522db572e2945b338b23af61335d306c8e3308736950f983a1a261e4947e0302332f3e93e3f99a8dfdb3e169030fe9a20b69dbce65875ff90f717f43d1bd83d92ebc41457f07fc428a136b1d1c6a83c2580edb40436ed2f4563b4949fb42f71d0cfd7a757b4cbcb152d120ad5e8eb353b13eed5a331a490bb4d03342aff1f8e9abdea87e793b77acf4b9151c3f0a719ee5f7f63074d67ddb4bec739c4c6b6595ffa2e75e81b33b31e6827cf74c6b990ce5728620fe5cca6e0fceaad8d362e6af2363b79b7f004b759e72ad660367213a4b6355329ea75713d9d5656f71aa600e2c23277cb833c832f97aed84dc06b7bc96be3ad0e1b1d3a9147043f43df7ac47f736a849848cb87396f42705935fff7fbaff2185e8292159e8f51311e90796f6f84f8d77ae83347c8b96138c2646d649e5a0caf935cc561f071e09324f420d5e9a07448b9cdf0c6284f4244378bd94fb723ac3b1752b7e98cb80f1ab1f49c30bd3e5bd22aafc79a392979d5e28ee9f1a56db6b767289fab5420bdbc75989cf7ba295eb2acc718c9197d5a4621c3c27c3ef5656aa0387219a3670245a7f7844ff04f483ccabf7b1b476e6963c801616dd45cf8d187f24bdbfe8884ea1ca16808ad60fa4085a8cb5ca4877d26d24b167dfc30dcd6582f4313f5742ecf17f9a28d9550463f13e67d88d8f28ebec01d0c77bb517a0bf8254a71b7993116095e9c96b27d627178b5c01d3c2d224dc0d5435ccb8f99674178c6e4aefdea9212c264969d6013e1fa05c791e5a7a862956ff7ff8af55dce6f1b144b78e710935be601c3938d10a4d663cbf1575ce0f90d0ca878b2f0a4253e5a58b5e3b9774c15b39aa528af0a03242aa35df7e1ee9dfbbb3bb50ec5c7d784f7796a373b234ade11bda29c1b1cc15db49bfed260e11a504699809b631c473edad382cd9896fd737735e35fdef3bf4ac4d03c5aa80d464b228dcf96f8483db894c38f8142b9c9e1ce738e1cfe692d5137b449f132cbbd63a2c46e1a7869043e5e5c63c0d0cb568a2ab2b216737fbe5f5e57c64a2a6d138a720116bffd9a57f9136713c6c6669f482251808093821a22457e76292b92657a8e40319caeeae574b6751f74b3892453bb2a620bdd367674dc6c5c9a1caa837b976453edcf5d3b25cde1d97bc293823155667722bdbc28aa846bd1e40c9ff6848b5c84057496fdf514d75fdf65345a37f7a53dc3c075dce966495b7e280cb72d8a08de1c48c67e365c53bf2de07710941a232bdeb380801b504683c979d4027b0ef108d1ddfc1463a5e212326dc5114a09a66eac3969dfbf6d91a6720c18c14085eb6dfdc6ca1ebbfdf341a1b101bf304cbc92c902af21c18ec4a3724c7f29b8c7c241078df43e8c39a696f7fc7d99b08cb2006ab56b882b4b2b04844e7680326f927f94e75721ec3d263ad289355572d05fc3b29ac28d91b66d275139a966f5aed42a9d5c1878897f3e20be8f5e57abdf6f88ced54d64bb83e4bccf28ac6b80226e3216b3ba4ec95a7771ecb68dab2504633d0819934b996c1e29cc3b5b3cd900e67e81df25882a5d17e6b152df1f22f239a9d31e63b08f8c2ed6594c9da9e665b9f2e360e44fa17201e7e8dbfdb90524da34d1584210c5091eb2a6841e2d46841013e2eb6f6b87f977d970050166099eefe4533abd6798d41929fd592b90549226deda05612dba76734a1547eafaa81fe77a20d8be81b13a4be5eefea00ae2a3b146de657fea82cc18f7551f21d09a336251dd477d69b2fd990c6e60dce01abb3ab179ba4d448b49e0aad4d126db1537e1617297091df66785e93cfcfb687f71405995d90534b1adaa6c507cd7ea59aad4e7348c34d48f88e3314db854b29e09b703aec43aa0f4c607e88028602838ad7db5ed0b61718e54a4f1ce9aca20ea8c875ed24b14da3a7bcdaa83f77eb29b303149386267513b82a678acb453726656debb13ddf80f73f6169044eaa1ede91f713a44e3d8c30025dc2e1a4c78088f0f4233547c7443fac26e6f0828384d5c8e3f06f77e2516bace05608c5e39b9c0ede4c1a1f4b498cb7664c5ddd765de69e330b8e4ee2c313642f26af4fa5542933b0a1d362a3393431c948519265d2a27cdb704b889a5529b3ce82ae88bbbac182aae4e5e0689bfacdac5fe20b20e776410de21fa19d92b8d5b4a2e6914134db7dd17bb27626ed798aca54179b197972856658679d53844ace7ffa3eeaf5ba455a4e494a2063f7c4a65106e12222e8b5477eba907c01e119eabda29ad9912f7b40f7e0c03a259078955657369b5e3d2e661c62fd653ceddc48ca9a2c64644ea0b9aba2cea3ea494610d779f8bafc17ca6d2448f8daac59008f65b7308ae2d550ce68675e5885de602230000432ead9aca1342076b2a6fe4154b3d8c2ea4988722a13313311de4dfd011b3091b8b9bac77abd94501ffe0e1bfad65b47c1676e9241db1d6478e9b604a7215acd8cb0b45f4f35fa8793959c1be140bd8b571764ac13275dc6bf5cb31ea598c331fbdbf5f051fbd1605d1a282ca314c830998ff3a3fb0732f388efe128e8fc5541d6be6600cfa00a5028d941fab3aba3692f17c32cd80e8dc24b0aef95eded89643dc0ab770d21e0c8fadfc1f826225fcb112a0105fc04f26b551f9e1cb4f7c812375f80d0266920626a2a9231512d4eae074bf3494bee9f83d459f734e32d4615c80cabd8d364de410beda68b27b62c342d7bd589d58a79def59b044ab07137e8fe49ccfe2704c35ccc83435ccf80f59bcb9e2796908f66feee4bc7fd55cfb86b552333f2451862be5aee6587313b9818f04220e4598f3b8348ef1d5c5a8c4e60700d1746079cf5788dbeba2c143f436b2a349cb3f26cd133514a79fda6754eab18f67f7e831e819558573c00875a67edc26b294818e9ac9d508c6247a6cd195012d315f60f0d699294ba11926a1128d87b9c8d34f2808a82803e2269c2f263c363e076ef8b786d9bbc2d6a6f4b28921d1493af60e4a2e15f9ff00d53646ebc7de6846a5109513565b338844ebc792a88bb85780a3559149574b66082a6a303312ccc310378d5339b7d34bde9fb62b9c675b4e606b6890d72fb7a5c64976eadc4f2a0ac090b2178e50b37d24275ef4f2389b4fd304b3ee598e8d32dc561641860e389e98066efad7b85394340ceea0eec3e6be1021e2c5a678f0344dc14002e32a30d9b855645199493024af5b813b99ff301635beffb1cc7fbcf0af85e765c5398601490cf96362c7e89d56646d093556798ccada5e16aeb18ff575dc059a17a1ed7599c6b8ccaf619465ee95c8064acc0084977ada3ddda3d645b79ecd526271c55628c22302b01518004c8548c063813f2a702e12f2a800d4abed5d074badf5b508f74c5692e2ea3c7a87a58f38752ea204540fd46526da445978aa07247630d60efd796b63df61e17e3fbe61e73857accd6005dd02a6bca97f89e5a7c87110ce6f2d91c82a0248c403698c6a6fc7099de661fc4137c274623dacd11f051637c866ea3fccea72938001bd003c83260dd2fcca13ba4498a6e54662f5caf5f93497dbfb3d8559efc073042391248a0d1964ac16b3c343c3eaa72840ed801ae85701d858b6fbd8f2cf9b89d2e58478bed67aba3acef556e4cf89523bbc0f24defe61406d166a7e31547325c47fbeb05b1b62cebf0b206cfc74bca09734413c2e677e8a6b38da300569e05301f60727a980390b608050307743326d966b85c05e4921cadcc0542cf86aa80f065dbca0a6dc64247358397ca137f100c072fb1bc3fd49388198046bdeeeedcfc24a67ef242ef15210285abd6d959a24c5905222e3aab20432ef5dafca6903166337e6393b76cb52be80cb85b78291e68468aad936ffbe362d4c6b6e433eac8e669ff510376eb18c817fa3c6b70366f3bfd189b739cc037e28097ef1220db085013c530f5790e4be1b73fce4721b0456c93fe0169e050cd7c76cce491814e9fd4d8cd1d56c44381564b9e942f14d98f23bad5022e383e8b589a6e4c58c879f5192c036de30b172da89e42fd150ae82a1af284bf3ab9e12e0e46598ec9548f072bb3c193d6d285153ccdbbda34517faa6e33a44bfa7dd2c996b71d3da8f63b831e1eac95423c641df64b12246058ba9e46357242b89d1f03efd43898b6e6fefe338864cefcc78dc96e0d77528752c31f6eb3c03d07f94504df8b3db4d2a04c9a7982cd17693e7c05a2c5e586635bae799ca0155aa98bf5e99a6d7fe66da97651a9f09d56f84f85d073bd644b9e2a91e34cee62bc4c66b6c4d1ae3b93a03f054a13812a5ed3b513e65f91f52c097bfc738b83e6d6cfcd3e05d0c05e65c58aea083a31c928b000de65a23e390940154916e89c9fc52a9f3fba7bf6b79b5a0722228abc54f0ab97e7501268b06d093f5a99fbca8d1e23d646055ec4334dfc25e68b5066a0c7ad73882daaf8eb5fe0669fdf08084bffed29cf916dea5e59a48a2b0c5f50b0e596847909770bc5b5c22e6240e6fb208acda434942b2a91cf110b51b8495fd97bc216ffe0f0ed74d23227c80a4ac2700eafd1dd4e89d8edd298a5c91eb758b3ad29a6722f9418f42f17f98bb99fc0de8b0da2a776d9a19566fa9b9b5f767c6c4eb32a9a57fe3c7f1f3bfdfd125a5c9f710835cbfb6f323d74495308bb5c63d064ad866321c2b1de9c9d33fa198f534f974019b5424ed4435be53b79558e3d3f8d8af24e2efc9bd1bc19da7fbcd661152220b91601d4b738483b096a673f2678f558518b9be9f8092d2de5c6cc9c1dcde28c63d03a9e43576dc8633f029ff3562210d7600de494c4e109968fd2cd8e94f1ed4522a120e4e5b5f0f9e14b8e896aa0f59231300b3329b063ce3e83e94be17df0d140c323ceea2a21efc94262cfe4b64232df7c0649e44504024bf540b44587d9250392b81f27283481e3886f8a0e899fc5e78ddfc2bca0c9c6dfc7944a23a2d6ee952343001e32ccd0e887853c65a0c30c9f0001098fd3188fbb0be0830bf2e8490010ba533ced321f66f70678feb70a0d97b44b6297c574447d98a9b1b0f097963f47f87f616e4186855d6ed024b46310e10e5da01f5b58d1dafcf74c2df2524a8a80ff163b56ce4c89b313f97155e4211c86c4e3c808b4d7963321235b0ed498009587be79495a8ca78c0088e69babf33788dd0d9127b03f534c37f0314fdb13a2103f4df4e7f881817c173a60b884020fb88ab26b1fb87c6975153c47de38d765d7aba990a3ed2cb51d5379793b83ecc24b0f3f9bba8faccd9ae39c089285eafd3cbe8a2708bb7ce3b7ede0fed59f9cf348b29ec4557bc969ed7988eb00e846024ced3db48e52e14b0216e7d9d510313108ab5bad9f7cf39ff1f87a0034e827c56a2245798c113fd5a8ad446960c3fe637e589728d4f2c1cd4053ec54e460f1ae97722191d023e9c5ce8fe5305a18d8e26acf58ee1d6ccb8c9e4f1d0e9f6dd76f1f399ab1415a4113711a41a19646ff7eab0b24c3acee286fb08fe469b2535f43af91f05c9cc736f31f4602ffe2fbe5c8eb5c6ab1403653288ed38645e063c5f56ce02c85d97c077cad277515c3ac3b3fb161ac7d2b44343003e934d3fdd4a8df6aac7827d13ed29d06d49b1338054bb37abad5cd74de43d029822a4f71ea1401f6183f5913f1e17f330e9b03cd8a8b8ea59d2b132de4f8aa9df60ed280cff47689115539972cc6e94432ce4636f82ace7b95dff93cc67391670a9fbc80cc3fac5b5a0ded48f8a9c1cdcba3448c2755cafe0e87274053f7e293c3b615eb148b6a5550d419f725ded47baf1212c161f232fd436fee088cb8fc290825806ccd97a402b74faec3c9acc0391af531741fd7dbacc826b39ae298fe4a04c69ccbd799191f5a6c76cdc0bfbe0c9401b7f79768a8d0b3604b4a8dd19f2fde199f014117bfb103123de2c068953f7c4aedaca37b53946003c1cb29ff3227699aaa72e23752341a107a49b39b067d6e2764c5ed6f8e3d9981d147d991a51cd287a5d7578f9d48995a18f13513654c787b97008658bbaaa490c8702a63b285645540cf9549e41178de691043517b274ac275cf4d2463e1d47ed3cc9e17d57a084e372924e8d57ea4bd9f1480e2f86f0d5e3dcb728ada3a9f8f1d155045502446fb36dedd83ed087949d7ce13b6bccadc1cb8090c52f453d335a720acecaf8d835a098691190ef6ed2da1285a8a4e2c5ea82879c79e3da1f5e9be5bfab6ac424e0cb30ea0acc5dfc9ccdeece29e15552abec75d9ef07e8037f93dbced03cf5acf25dd933818aebdebec286d6ff4b3d5488f91efc67e4248b4a8c168b6c8027fc4892c87d11ea518dd97232a2d25a97a6279ea9bcbd996ddcf20bed9d5022332a5fe8da2bcdbef4063a74f862fa100c2c3016a52cb01931abdf11b8094ba23423126beab582641d59f51e0d736609e8dd24d81af37fea25332bb33a4f8a351700b025eb4cc6d04647c9cf395de6691d96d2865fed248bc9cc5af1e459d54793b70d05bd4c3ca770ce13eea98a668edb41cec11c74332fb96948d973e3efa707f6add418dc025982ecb20b77f13defd234e9fadf024dc2c343e34b52d78d4af07494acc03fa62ab4b720412753361eaf551c74e5b55dd376a160501bcb6abbc2fc88c164c8c47e0f44d0309f09a767f86edbd681ea78891c6343fb011ed7b25c4a03297f6f3f6dfb273e2167bfd8ff99f48ebffad3a535fd9350ce555eef73d475f0b166ca69409a7223a66deebfaebb559b1ab4a6d2ab266d28ee5afed5a6305f3e52aa7ade31fa4b12e06ad51a470c52b2dff29a95aa20287631d209c15a5fe123b65fb56a89d099d9fd2ea1ec91f53fac153a13aed51f61bf91d24de152716d9bb31c8cbc664641acfd5c64662892985d8615be199c6f00af43c1ab4da332ebb9af9331659762531ba7800a2a001041b76fe8051248f1537649ab8d5b094600280aa6954a802b80ed190e54e7f348c38e96f12e5170a4cee5a93fefb62b6201d34ab19288647d1a141311404834c1013ac1d55cac56b128257a564004b7d5b3fc8c1040f2c0021a3a7ea37b9f11bda80e629768f19fd26949c99717a5de387fe6090a6e613968304cf7921c62908c3d685ccad3eed8e557e21dbbe5cbb894af2a0759a7142c9aaa760977b919d63864ef073d73a7c5c42ae2e5fd372f40ddb759ac58f3b6f303a91bf2c90dde34621bd5e0c7c6815de04e96a43eee68538de00921915f406544a696e9141fbbc45835bb42d845c4ab8a8f573e8dce4fafbf3c86ca263997b490f22d4a3b499fe52190cc52babcde33a0364b0449983dd96e10b1e49d23b5b0b101672100aa6a88580698bfda61688f835736b7648c7b7477c5bb5777753714e689134a36ad6e3274ec60507274e332632b8fcbeff5a9ef3e704d512f0da2c93aa7f9da3438585957721dc4c989ca3e9d6b4ab720051c46dc3dd98486536d7b1c3d0e41bf9cd1569dd0ce29bf54ceedd13c72a9eadb00fee016dd5312bddf3fb8c512bc4db99a6fb2d10cbe81edb6e7a563e0e140d9528277b3a041956d187f6e1865d757096a9b5d6e944400de1bb6f2a2e4845ff6788ba99ddd2d6e487a24fa9c811489e57e26eadfa53d5a378863c768f824e2e0be4524a7bfe47afc3cd6211ebd1e1ce2abf95a32376ff01567bc182db364c3a4dad5c5b19d0ac06dc0ba14eb1f68efbf79d98859a278c9cba35fb0e09d546515d251c16b29bde9d9fd5808c0fb573496a17b964906598b375c0568a359dd1def24be9f739af40787d55e01309ed317d76e10b76da12628d7c632dd9f7092f87a6a6676721cece11da0b8449911118459ed413d66403de3d34033eb57b0ed524c8fe99dbac86be3b9324d3efb370cdfa7d3408b472d1f84b79c1c91d0ea5e7ba261cddcaa10c1152b93fe456e727bfd13d6c3d231384b1737bcea879d0f8c4d44d1c3fc652a8da36993252faa77b41f634155a87a619901a9fb58be0f7bbe951e5eb0f95480192c0d75345b8acdeb42f3c186b3fc3780c8144f94baaf5b1ba2c1d801bd14319329fa89b92a5c4ae447378e4b838046feba242b4a7c933f702155af08867b867cfde86ae0dc3b39c9096ac65748e06ce71342e345a4633d73cc61ca714c307051b880b44a199b8ff6bf121bea3a7dd9455f4325fed2074b3bb24f1a6d59c72df56a6c83e3789a466800f19a7e58237fbf5bdda25a3470120ab3ac38c69d4c9c03d7e00848b386dd5029087c3c149249db70c805d19a8921117dd38e626360a638ccb0136b19de54fe28308f9d3d4d08fa296b812bea494cff361e2f05bd1a676862287b1780489a038e219ea59687e98c2c0d9068837d4df58eb21f6853b1de6b65fe0c369f4b31c6af3242a0ee40dfca7fa79643465eb834c64ac190a641e9944a61f2ebe108e105c7e16e617c034ca90ca6964215bf78651ed83dfe3709e4d32075a11b7df71fa3bcee4a42ccb64ce7415e6ea042a458e2cf5ee1358c71f80b20ee59dde4aa591ebb2d7ef07bf57b3c40e01728b7f2d078a645f9b932e6c9d6bd1093ab3c0680fe37dcabcd9569a73cc61ee70e9f9a8a3210bce66ee41319356cbbcdfc04041d70a4b90c5704fef6aada4be82c82077d10325769441942da7e464be4371209a2d9276bb4b6ef0fa064ed6c251067f3d13694ef75139ea4b1aac7e857187a27c4d44a2a1c5b0b44c7934b4fdc43de330ab63c467068e10d685d0bcceff003c8591e6a64cb47f04c6ebaaf18677af7c7bc82a1f69abae4847f76164a93865dc9870103e2a320d85710c3be6bffa9e93a09072b761010d271c8165f0e0675f2ee979e67afd1518e5b623532679ceeadca5c8e222ed4e58a68b831fb7ba2764867d294f0b9cfb178735315f757412221339837fc47aba385612f99ca0e81949b44f62867d657785a98ce77577012609952ddae02ce892b86ddc7a519274509701b9f4c603de6f7022cde7503bcd56326d498658130dd995ec67c5ef6f6e8f56104d4e8043fff5daa89b9560e4cff00b9081f432225d800e46b698914c911a0c0da991f84ea1de38d2c1f8e6d13b921567f493e13f62870e30c33f9e6bf8529160566ec2b6d5c72a6eb8da22c6cdd27b0f880fb2bbecf1cbb17214eaeefa7ac6e3f0832b0728e14717ef54dd69b34e532a0d075e54a442d652a9f09f83dfbe316a13584ad2703c72f89bf656d117126f17aa926195cbe628b0f0f0c362d85a25973d1e8376124b61762e5db778e378da20903eb6c86ebe1d177e0b57dc376ab5f5da0cef6dc6962f1640d06a644306b2b48a30f39cba590e2de84594903dc30ddad23449a83e8627346c7d98d13e4120106d12ac40a2e66d160aff751517d1c7c8877b18334d392552da4f3ff1ec3066c03b95c815c8e26fc2c9a1415b5d23e6e7b5ab9957ac739c044a95d7bf481dd56c2feb15e87ece8fd97ed47bb37acc4658bab2b0fcafa4c633085a02bb47aca29aeb1ef27bbe4ed843a541f6541028df7a5f63f27dd64c0ff0746cf621e9b223291369c6f4faeb92483bd1afd2da2f272053bac67f70e4f36001b05117a94b7426a91130ec4055040eb166ac8253d9780328dfa2c8e1be1fca52134fae5eb4ea0eb98cc96d915da07823aa1ac5941205ebd8192235c89380ccfbc1d90977fbf8417454b38d271396bc413f53b080cd1f9103272deaf348c4bc6fb0684176cb21bcd1090804120e6e99d930340611eb351c563041ce9ca280e0cdb1fac5cf024cfdeb6d499cc07ae296cfdebd0156cb81f8d7af02a0689d36f28454c5f3225acb985c713779a1acf6f36de43fabfd736cd967b590dc481a7483e1fee7594d4631dc65ad8631b04154c8cc8ce2df860fbe453b5a34f0a439dedfc5f5e0e78d3e3de04852c00bb3d01881e13411920b55b83aae48905071e48bda43942d2f3c3467ef697b0f7b1ac526f6ebc9b9a9ac73570c692eacea48765f596dd19aacd32fb80ca459fd97bf3c8acb104fc39732db8807b166da264d5d923b2cfde9862109c5e36ca017b97c576715c8b3688245280b9c4d0cd7e2b950e0c668060a2cc13b7533a0a861865c8b817ed3017c82fc815d69dfa998064149057cb84c1e4790707dcceae7a01a5f583fbef615f27935b7a7d8d700216f2e1e469b597fc700d013d4c148c616437ff25a66269d33a5ed8b00ad59d3c9a9b8382191f3dffa1517b89b748ee7529f457a6eeb029c0d18e13e31368afa7510409dd9fcfc381718e51dfdda7e5195e1491901c61b0aaea6151ddc01ddba88f7b1da8f487e6a28acaa35b285fa02d6ede3fdfc63120c6813f73d703b9b80154648a8067e73b787158becbc2dbec8a7e1d43bc5599c6a59e0a8bb672d1515e563371aad9385a952792f7bf58a3a77073821dacab62fb874dcfd76b31f8ce39d44baa29bf50d8cf0f91a05b60481cdd947e88ded5b4952185a249564ae59bbb9be5d678e9015dc5bacb69a27bbf0cd40e703f8a6bdf02d05e327a5e2dc86d6ab05ca3c44317989e46092e52bcc2be702c058ff568f6db277a24d73b24ef87bcdf13a9e3178b491b571eadd0c2a5b7cab29d7c66667b5d1083259fc081b15ba2b2562d869f39d5274c0d7f3395d0b348f171ae37b2f2de2107681c427d67276183130aa1f3cba8e8cf048f6cc6c056a3ba0a145dc0557105f9a3cd104ee7bec9cd7e98daa4f7a219d2637e3fd4aeed3caeeb4b4008bd972299e3c34cae20e7106242dd9f020ec4f1057d42b087ed08ee544913f771041e37832870c1c3f198bb72c7030c9e649eab63999a47c5860e5cb21db2ac71b910d6aa7b5dc7daf25b9fbaa099111e5e785eab3ffbb99cc398ac40c0ddbd49e4325dba281c7cf639459cef2053af132564bff93bf3234396c78feeafa3c83a643b0455abf82cc5a9c8797352f079bcd3f77e32b254f4a388c486dee423356f5cb08214f6b9fd2d6af70ef949b079729fcf2f2c09b71c34fd090adb47d61cf2d104e8a6473a8f1c5c064950d885d6f5110df2c5001ce29b0f671eaaaff28c3d088b58857f77d4fb830ad6d2fb69bda2a39aee4f64709d0700bf69b3b96abfed39dd2a85b2a12f66dbe763f345ade3531db681f3284816cd3ac7c76ce078434b27434d1d1c55ad88f1227017ee42f18757792b6b2eda136a9a8bd4bdb7940ae1fcebf60a534cf4622dbf269facf50a562168442f6228120173dd764491b03a59efbb379d30251f53e6c4f3e6875058a55d1b0b4ae60170280199da75bd814cef7fce37b9550182a8ffd3e8ed63612322cb7e635711c7a7769781f5fb7aa601a97d67d94744710f7e7815eaf3cac5d0d570e331a2e16042a11ca4952ef9941002fb67e9a52f45bd9ef6d0d7fba54431558a38dc855c68bf12a26b40a0903dc3bc577822a09f902ef285c6a428602406ec18839f7f33848c7147ecb94ebd2bd176df05a9e680c4b298049e799a85c3335e6e9286c8a12c08717e98f24aff9ffcd7cf891bc385e137f8ee3e992d4445b2d6adb84d8ff01cf305cc4644998b45b904bd8b58777d1437e0c1b803f0ee38e21b05522a0ad96955979efc365a48b40384c2bb561e8adc906e18a6fa162794b319ae0b8ae4a1746bf2151df8b00950e3deef3cdeeb4bd432a0391f42fdd2431b16f06fad7e4268fb98bd800fe586eef1e67ef5cda30923878c895fbbeb8017089f4ed056149f6adea74e6cd828cdd6de9ea68a3bc3434100f7b4a4d26aad6a84f445995d09aeab053313483fcc29517150f9c5fb1e44dd4c807e001a063d7742e97d71d962b51fea8b6ec878c4f75e116d4553d92f923ecab4294df1cb9b926d0c36c5441f109cb1e5af5eb0cfee5add93a550b82f013f9b839018d8a221abd92468675955423bc6af07b37190d27c0a50aace776789770649175162b4fe87f60f28ee19e85ad2f90331b569fc12654b09d69cf7fc84c85d98c23e44973d5072aa9c73a428d199c993b5299329f329f7dca833fd7942d51d943e34b06f9ec21ef4d5725bf90690d58f6c6fab5fde4411dc091c44d59808e8c7a38ac86a46b4fe9303dcbac383a0ee7884bcf24f76a5ae6d9fc6837951a8d8a12ab96a529940f0aac4c60d9fb0c92c8aab4594e0bd845ae270b91f61cd4d6d8f1cfef3b730d89a1707ae1543e019f1f7e57c8c40ae1c18b7ad5401e02953e8bf36306046d15ec25e6b3d7c8e20b6bc780ca9ab311a695f05da2579b199c27335c42fdb54e4b434aa96b8924b6158f264c87e79ef262a4d06546a24e9d932085a38d272f4069a4942708d1c2651718ecedf73fd567072553034010463ac17eead836c22b423dc57ec5324f46b8463e4252859ef177836e408fa97f62803bf0e3d43c9da918f1c67a59629e61ed920e4fb6ea96d0a582486689c805f2cc0500387368f36394f5cf5ebb59438beea904e51b7551ac41c9e189d5fe75a32822acd7d02712e8ab0241cb6f9e3d44097f1cae6f22d13e9e6202066e6c969604fb32da52680d3f059c41cec3b4dd7a36d68f3089a643264b20eb318729283f6617d06121a5e2470d1980c4b582cfad00f158101c84b4899f6e0c1bbd81a39aef688cb70e8eb69baabc15987a714488c56232b07cb531bc344cfe277f85e3b06c4cf061d8425ade2370f40634ab31c6b62c118d32325efece509a13888df685df8b2ae4fa45d2b8ab817e94c078491d655a7b1de2c0bbc66ba6866936662feabf55219fda657698398b36f0df93c9913290d6ac141489e366be35e11e68217161e3c14d53ff2487078ca27b528e16718961d81ba901a5a7036d32f380c2be03cd055ff77a43ca4e8a840517e221ac226b8afe40b91d42e16f9b5fb61de5e032ba85b81885e1a6696afde5243592f5449b304ae83353887f27714f8a36b41e94df4ae1b848ba986549110e752f5c57b2cfd140019be00f286022f76aae1c05518d164df41ce86af61b059b14ea0650ffe3e260ffcb62ff37f0ba8a9dc97411249c3f9695f313ef5ce21a25978e780a7fdcde7d2d0198e28f2015a4fc4148237a495f561ebcf63b44284a0c047e7d8ffb441fb6577ba0273018b47a38c462ea612eddb2d3729cd1ae3d87ca76770746b4fa31d9bff8aea89833e00fa69bae2e9c2915dfb614c2bde400fba9e3362b35a9a3f5d08aae05cdce4475d440a6d177081785db618e0d7d58a9a36164e37c12cf079d5603848836be05f8672df12bdeb3ba1d94495f3e61228b72573d7000134541e5969315c4eec75dad34394c5b34c9e4600113d2d70b3dd22847bb067c8e1a3945ec52ebe762227a33ed1f3ef392616866e77e1b0b6f7ed156fa99c235036d58d7940b82ecbbfa8e7b618d492b34448a5294f6e285b26a7a9bc8dac89b14c29b0920943cee30557d2b2dce785b686757f3d863b59bb98222377e0cb06534d9295f01f3d013c21af990bc41f37b9c327388fee11e3ceea48c063bc72d62c32416b68d8e651342e2e67812473fa7c197e610412969acbb44f0fc4a321eb6000f344b1382b7399637cc9820207f9e42e08ee1f33f77aa017b09125191ae29399baa1803f8d8afc0b6e484b20f6560f703891ef622c9ddfe3cf5e6d4a39029badc27730b3bb12c2a5465bdd1d1c103638b8139fc60bf269349088dafa27690611e5863d150d1255b158708d0cde6ae2559e28d6147046d2b24956d5457ded114dfa527b3e8407e89eede5af30357fd9a55cfab85d1de5962a41864aa2da1edbe4dfe6b0c9040cef0cafce1d78bd69906220848c42e508c31ee540ff220c053f0e1ec4e8b29576789f65398c3f7c1567f9fbf3c0b73839a959c1cc3de03fa0036ac852da853addf444fc64b556fb0aeaccb8834db39f8ad158dc9dcaf7bea50b4c8f61c68d982010141606cb1fead820e5dfe6224fee16bef7873e57bae7030efcab9bf7b2d4584fb746a3c8a690466ee9d9a02b9fc6a5f74581c0d90557432c26dd0254f11f478a6c48caf991e3285b03bc95dd54bdde148cd19036cb461611cb4688cffde964574640a674cc8496502a6603340cc3e3237ca87770a61da191804e79367f904f2f5918e00d7255775cc9fcaba3adbafb17953df6a56ae5879cd27d785e5fac9c08db896147e60617a65ff441838536bac2886902179bd458285d23295a99236179e1d2bb05dc37ba65709e485d7d5394da2ce2e0b057924c739c7429ad2f65c361679c0847afa4539334eb897720b2959e26a1819c627d8fcde4c5a3d2e132e02a58cf4a14aecbb5bb4b7f62308fc7dd63fcba1f2f9eae42e7b84fde5d8c50d0aa741206a7818eeb64ecb9f213587220ca87c7cf3402b7b1096eb81f6583f625c87e90435ab623425006c3190e59374e9c461a504d6fbc25a16cbbcde1303f757e653938a227452581a6126707153c5f14b633b9cd3ecc47e9b364635deae41adf2d8e7df60e242a6ba35c594ec69fc7de65a31b6c2b02ba345101d1c0249b4e7697a7714282d6a0e73c0c6bf11d12e3f78b80f77950867dab495aeb92f6e2062a1b39fdf2b7fdd73c539e980c0cf2edba6a114dff182954fd6bbcd496393d51a59285b9f7c1bd48a40735d20e295203ae2e0aedb6fde2d50876df3748c55a69d72c5797a59db8f76f3f3223b56d34c3a1b2a680444f08353aaeaa91a7522cad3385721dcf67c00033472db6b8d0a9bb4d86030fd8860c776258fd054e249fdf292f526e65e0096f640382424b2ebf42cb07445302900c28fb51609a680ee2747003e774851908dcc7fc164f68dafa6a54dea253763044dd0315df75569bfb6c945d2aae716d597c883984ab23aedf067d8a9c9e8ae895379e3be554b72b8649b567c6b9fe932b54a696d0adc16126dffe53ec4ce5d47e7240fb41733c7b3ba787f1259e644c373bfe05b484cfe028ac15cac3ee4c4f9454a949b8202069da5772f747ea134429372b1d10f51ed104a2ea3b702341377ae2477b91fe162814662bfaced161d142aaef5f2ee33decbbb24bb87efc784edb8ff16d85557fa80b3f972051b8498e7c2b65f82163d8f6ac2f47e0f3ca186094e05776c623ab39dfe4514b05913e2ab76b9d88cd2a06b3b8a074485990f8c6bb7e032cfb0521ea266e507c1ce0e277c62bb8923fcb4ed5471ac4cf8f89d5b9cd4df4709b3f2665f12e52e1f614e1908877beca567cfd3df31da0f5a40f3c8c57f8f958ae941039d290340f6742af71a5b350fd816f44590cf6c40381988c76cfdbe8f4f1020cf7b6b9a5910f0829a6204e6243f543d5b3c7ce13a40c0cd83044206010e54474d586003db2a79907085228777e659e049cbdadbe007c8e641fe5bc61930126189b001146641b6954d8694cffa060b174ac3dfd8fd62d50f1f8eaa3f430e76e48d3b3812456330d13298e3f9d8d6d11addb3e8a3e157987d85e00775d9692c8321eff0308b46802b4a6b269f047743b0e7fcde4002c85938d808e3edaeec631cfe53cedcbd7a98826d0a8bcd868b63850c700bb7a7699a655c1cd294f4a19f09057c1b9e72de8d198818f951252eb913ec6fbf7e9013f87c8864662a08cb7f362fd474aa791f2996e676d874d43ef83d77f2c71f0422c285f33b756e6a5336c00c3894781effbcc293fa96b9c6f083f7056bd8a5b83674865bf33e7cad0df1bc1223f366ea8892e52312e61c00c21ad55ea767dfe1f699e2ec603a333f61f604d0ddce61926b6c937c83eddbf21cf07cb6d71c6ddae9a08da3408ffcfde5e22697ebf302643c9672869b094be1ad14a0cd454ef5947a2116d199a2265f8cccd421d90e5d7b10fccf560ccc1badb3a9690b84be1a136ba413ab3f6fed4f87363f007b59433f86d3a5dca542dde7b3123c8bfd9d32a65ed0f3dc493a0b88cabbd4aead3e76e2561e1aada8fc8e9553aa93724936f084aa9d09bfb4b4e1c1061c4c94aa93d1fccb8088b191e79b237718e8ec6b13f19d7ba583c393ec48aa2ec0175624d9419274b393cb9771a5b3f6c42c5644196c15da57aea948d1f4b18570e1a45ea9bbbeb6dc1b46f4331d2ed9143d459a330e1b2b360f83de2c95ad73ee645ffe05312a1b1d1c8ce1a19ed9ff10bf95b462af3bc90a4b38e77aec231fdc5e2d79a05f96548ff0bc13586984a4d0f37b68a91e9af08b354b1207e967d6e9ac8669fb09f07ea616d28546cc33d66098e41cf418669f951294c20cefc7b18effead96ae53a28c8cf9bb623495feb5581ee8b3a5f78dc33107b0e94f80fb7178210682f25836402273abd14164bbca276ad11008777ea144de0adb9de35cdb15cc5a6fb81f4d27b62cae4bdc9778b6146b42e4bb4e256e8c8ac469a2f2be0f9105bbf290e3f69b7d1881eca67eb627cdb99aff853cf21619128ff9e6ec3e9e9a9e3dcc0206e6359e4df686d15963161ed9c623874bca32bfe1f9d729553d6477035e2e969bf5d7ec9c5b5ecc8766e735b9ee59300246a2354c5573b881865464414b734f31ec365fef0ecf2e8074323b7c8b0c4fac5506da800e9b0538168a1062ba7aa572a0229b847e072bcb937ff63ac5660fd987e19349a15e12115c3077b5149c6b79708cac21ff8e717add56780738978823de2886d279c37d25ad88ab9e1fb3dd67e64b5d0a66aad266d30be0f60d4c2c80da8fccba7f13cff081bc4edc364725488f5e1e6470cc47714764eab9cb2c3326f0b9b180f6a5a77f51ea8e9e185b52b1ee0df66c421e0297e49c2edf07e6afe87e0ffd3d065cb0916684a2d2f35f4dbb6cc867d8c1b4457ad3ef512d8eb56b7b0aab9af21c866dc16dce45814fe76ab602321be47c11205217e517f327e90ca775e47fe0ed04ae52a55b40989a02b7b212865fc4a05d8653542afd91027b41f478d21fc71e42c3147c4b7256cb21896dff1ae07d964b45a17e0d22ae046910fbb42e1928923df27fde74d3d9357b75e4dfb42f69875f917a236759e0862b823b047a05230aecec877ead17d20589bb8491fe4e479c9b31659c2c194cd66970a961ffbbe5da5d9df215a48255ac336eefa41f6e34cd2cf1f7b961ba986bf9c0be15240df510318b0876e409b36c1253a1c6db70c0bec5d59d615798f11aeee2e6786b9b0c401def9bf56c3bb0d6121d2b839d709138d3331c779d9fb458dda3783757bc86188eb6cc15c33c951d4c87593da4bab4355dcff5d9e195593127eda17f6899ca1dd90893661bdebb1d7b76e8900588b7f1af3c4bce17a47ca5f6ed605e727a76663672fefe854dc1a65cb03063d9a6cb1c810fdfac3c47cb8cfe8f3edfae4309534a11f55849d0355010432d28a311f68eb8b8c4b38bdd4082d27a746eb7df363a92392e3831d755e87ca9cf3b8644e14cfe4d2610163912a780664c9267bb6b03f456075ffc5080f4e63bbb972c4d65a34a6b462a46091ab88d2f4365046d76d62d1b9d4e036dc1009923af05e6c8faa0cda1defb08a538e1c1f0f05e5c9c1e70275ffe22ae5227810704daef541ec8fd41b4349130a90efa848464416e240ad7c9031782b575d5931df0206f4f33af41846006c219284c5d46fd2c20e8c6e7d33f6e2e379673517aa9719fe694358ce964c43aee62b6793509526248a417b9410c4bc70a84bc983c5d6416a22c080cd9d157f33f399503096a02a1594d6064eef55ab73a419e7d6f57cd2f2f7bbf35d30f0d406ba64b7e193ec42b452cc2b6c611a9206affd501f0f496e24cd26904a240c75c18b0f8485f32302e6ea7cd1cab62b72efa00252fa820ef9c6fdecfb6e6e3d2d1231eaa274d5d8bb28f8f137210a8e7159d27031982602430d76596d2584c7234a4efcb18f0c7afc3dee142396358ac09a9f6670f1964a9944835ad3b0662fc159e129684ae6da61153fcb8b1fe4bb8da497a44c4ea64fb063b2bf345399a730ac2ad471bbf70c22effcb61c29d77d8442d1feaa2e921743398087cb3c562217347eae18a73fc7578fc67078ef205b0feae51a6ce944c1d871f930af5b3aea6d19ede71f9f825e8608369e0889778218636a6b565448b45af1f7fe35dda8cfa2cc2b5294ac60955f2c69ae81ec871a365f897efc5f0c7fa3eef893b418c34d0d659ce245506c5d32845d8a5817d226220a0e49efbcbd0c591840ee5a74ee6f2cc7af3c8f83bc2d1b30d73b2c20448b7dbafdf11affc81f4878cdfa73490d5380462f1c4130f0a620547ef6bf56354273fb091ab5a1958e8a97323bb027307b7915ac58b3cb17ad7f99544aefb65e45895a91d9b38920d3c475ba830436d6a9c23455d2f6b8d437bc2858e8458aafde506f34db5fcd588c86435ff8e2c8530be15eb6dbccbc1c34f298c97d5d9f991ff830f481863fa4870790f4cf64892db9c6c4332ec20734e5cf72e712e330995902185dc61387b63c1ba4b278676f115c615de213885f55ec80074d92d45a1b9d6c3fb69ec1ad43aa8279cf64874b9caeea211bade71fadd3868dddd9d4b6204c4a0784870ff7a4298b5853c181d472be434d2cbe01cb54c617d884efbf6fd3aed6d7432b4815cbbe07f4bb8ddd031b6e691c680afca5647e96a09453c4125c4032254dff0042ff0bf0effe114a1ae0810ced3fbb4a4c0b733f5fdfe8421ae76eaf6b83403b53bdb272be30d9dd100b988dd7be5c2036d4585d1f9ca870a5213d4eb53dec868632d4d7be0bda68871ec7bab705006f0e6d8aa597b83cc9b1f242a361d6c0883e782d2071955d25f2a85c43a059e021cc08263dcfaf954172ddf90f17a81793741cbe5a2c30f523fbfaa884e7f6785a533e0dbe0c8c8be53d21e9c2576a3b4f9bd18504c50b76819bdbe3535863313f02cbc3b100774c8b3406348aac0a9395e13581d698c9c6c02ce58b55c9dd3d260554bb4ce96ed33b59d489909705437abc822d40e3317820dbc32430c53985dfac0385b8988edcfdaca9518c64eb06a6b5384c201b308896c13f7efbd9f78de8ba031ea30b21ff757b60283f4d69ffad220ee42dd378989518ddb40e876accec8c830859454d9ed62d9c64c31b09e63193772aa063608199b3d1e50be9128f95f2816e9235c772a9c31fde49a0c4afe788beae2b739936a2f7bb1a759e2e058cffae05a7823624f097886e0c3d0edd17884a6ce690d985db0a53c787734947b020328ea688c4b8fd58a78e2c8787d1a69acbc47bb2348d930a324dfd53d0c085fa6edb23d56d1e57adfd57d594667ce50f55e6922704eb665bc22fe079ad17951e960a3ca3da01004ce76017038b83f3d00a541260b2e85a9ed549ebfe9517d12cef4c174c7e7909e99542df3b14e3ce81d10641d3c631e36bfc20c975a1665bfce830561541fb62a565ec636ec62c42bb39e118e80fd03147911ece40a8d119c96e4e07f4310363eb36bfb372b4cc8d013cbec619cf9909d235ef8a990970ffd576b32c408f1246fe7f7cdc07b333b56a3d97fd8847a052df0d5be741f74cc10ddfdcd12dd5327a44b12201b882b4bca0dd1726fa0af82343b97a6a1de358a771e06082189aef58448d7860bfbe5b3b7e53885c704c8ce33901e3487631542bd7daa04e67423c76874dadc714c01a2f9cdffe9e39e27ac05d77d22f89f2f8f2c0bfd94510b6803f393cbe13f80d54caf20796c94d6e95d8d9f2ec777cd461fabf3008149144ad9f4289eab3c6bfd0a8a124864e2eebbf7f26c6922d040cf49fd7d8985724c48c16fe9b517025677d2464d634f30994eb0bc0b2964be943271c27b114950f6119500ab68efed267263788cfdadd75fd0bb888780ef9a35f5bf71fb786b4b673c50ba07e6a7e212859d5415b096eaf66698d507d3fcc0f6cb0f45f8bc7c432dac3f3d28d22982f3236f885101838ed8d935b29ad6bbc44048297f7f712bc8ba563ff4d3d934c2c452286f00fd357993b58f7bd8ca98178317caa50c0ebdf808c940803d808f42786856406ab337986323c02a346d779ff6128555e8ef2c6eeabebc748729a5bbfb4d519dcf443af9a34461a4cde5986b8fec1f3d06a6b74b59e5adef994452b2ed6a1dcdff51ba40f9e16aa2ecf0b0495aca837ccc11c672e6e02fafe64c812e0883c354b204d2a4272146afe9fa485c491093700a6c8dbe1decc0916e37d0c68bf7829d79954decc033b9efbc331e01432fd85755fa742fa9fad8daca72da2448d22c1870b840db3ca635fb199f8c144a8d12eba2b920c0468cb6ec96fed414c0bc40c6adb7dc587f51f184544bf02187dc279d5ab42e11691ea62d63487af3eea70a30b9ce30fe836e7ec68ab5bbbd0c297ccbcf9c753dae73bf0e4b371796dd6378ce205f136d27d3777c84bb80a8f97d7e571c72ffa161ef81f64bc15c1eff8533563d18acf89aa11695346d8fbe78f07cac3d03142a057d954f0290c062f295d5c648a169dcaa91f67c2b51655a3aedcb59f488a05dfdc32ae93e2de88106bb241b91ea52db3ecd8c6b48cfe9a2b855cf2f9d05215d6b55d4963b76fe7be1f97ecf6091ec4989fd42cd5e79b75328655be0cb785eef7b1241b83a22b98ac1810d68c0aff35986e7cb59289face3a9d81fec1798917479fa52b04c8964897ad7d437a572e95f7b624912f39c035b114f02897f1c63d060b546ecb7e9ed709fc1aaab0bb0d52fc13afce716548755052fda1b711e58c8a43be28a218b376515d27ac5243d9e55a4f0ece4a9b74d128c7b34469a01eddb5355f2e7fc4c0339c68c09699faa86bda59a792e5436e84af89bcc551e8a11ca1bf6dca2e32961a1fa341a4a8e0701d1f49a255b3de412cf0763045e4838a0c2eea595b8d0a45319e76f7860b33a82fe44a92917b9e9fb98b798f2f73bf53a5bb8e0219732e93d824b052a31fa9223461a8da038a9e7b434ec5dec096d2c837b21483d14fb77660689288b850b901bed96ecb7f1ee53a65cfcf5a46ded2983dfb3dbcdbd34005f17b314d906a398b0f57ec64ccf9490a92209cb28723c648fb3f68fa34550c6106c99a326d65174409ef9c9ea83fcf3f5085fbe98124b46e1f80d98530cfb30050c322bbca0ad68e993f93ff60f6605d10bcda7165ea12d04a45d0b801f606809699f088680a5ae540f991a7b947fe1f1ea7c1f06fabacb4dea3a6b944d1a53fb4ad19c1d4672bd52e135418f0abf2cb6e85d0349cd40fc9639a3d37c8686fa56f5ce6ec903d1dd62a452cc1b6dd9b2814c1d6a50c7cc33357b761418d13a5eb0163f3e139ea883aafdb25782f3fea0a62270a6828c3c5bb7ed03399fe691efeee4e8deeaca01444a80223fbbe12494ab395bf0df6a5d71c2e668f94708edb223aab04803def8945b960ed1c2764b6e6af448a565dc99dc414aa4b4aeab910b0b17960c55794612f3eb49f597427d316a9671148baf01f3dbc1bc108bdaffb761e545ad604ac3124e630c3e3cdc6d083fba3077b895564f96ac9e35e8bc26af2d0c11bc92565a963abd63f4f46465f06e9cfe7c2549fa696bf26c20ce4a0ffeaa1dcffec83b831e4b522425adaf63f93c538560a1067e98febcefa3d62f6b103a82315351ee06f9cdf0fd4b34d2a0951e461bca3a1deec4c3b70eeea8b60d926eada4e722e093e61e2ea5ef6cc06493926e4081f4a63d02779a880f9df50374f8f0b095c3713587d7a3388b5dad415a2f3070a853782d93f1d45a451e84e74f27e62bbc64bbaa8b1c27056ab1e3bbb68f111a1a08dd3dfc4a8c33022115b4f5ec88d6e232de0553536e8f2529f8174ce19f3ad8e064bda32e5dae5435047fdaee88a4b16c781422e7eaee7eea66ae1dbb463a0dc6250b730dd59088104629caccb21d430387bccf5524ea94198aabab5be708a08515719bb7897d3691398af7931300e4d6a6fb6a877cd7c11c33454ceeb9dc18012c645dddc74f6bab32ba62afed5d994b86e1930864383dfbb1a2b2cd71889d45b9c6380f109e87c1452e7cbcf6908a49be1db58bafdcb9f47f85609320d0d7ab8a6923be14402339aa0190c9fb747153dc7ad80b7203944e8c8648ed2de0069b509679d38c1e330b8bc7e1314c489344b4e1939381dd4ecf27533a329707416d278db98a55596a7a369a8cf8c12ddf60c8df32bc24b0a72d0554d532298f5c91b9c012bd55c88b6b2b9b6a6dd897a4d2675d672112fcfef650eda04d936e44d4db191ac74034eb10b5eef9556dd7f070538bbc62c44cf015b6abf70122a53688e28a41d1d19de7c8d076522f9db9d8f5e1bf1348e1af12199291fd0070c42a3af59a60afa22a2707e4bf7d308393bf92c37f76b8dcb56f5d8caca009545fffd7c10fc0b2fd96c466d46cc484498d01e16a2087563ee999bf34812cc1d4cdcd957481df8c515cc74173fa0afb660440b681e85b8961cabe4e489b0215ec102844922d64e27fecfa96f9e0947517d67251d3a1c6ab3e7c5fc5650606cbd7398837a01cf0deeab1a19060263d316648f446872798d9f9f0265fd7904daa4fe823547e456a93d774d9dc8ecc65f301ba2df17b18e882fb1f978f5c4a359659534a5be76a207117868111667958175d110291f60037c1903fe8fe575aa5735381da65d17bf127777cda7696680bc6c738437bba7add910b8d7e096ff763861d51bfa0fd158e4e1e819b374e185791b324b17d6c99400cd1f51d0df90d6d284ea4b029ec6e93aada371cb210e9285c781ff2aab8806a064579098cbd237dcfc79a73094fd60f3d999e9003b564e0800d9518ec2fa8d175fd40ca135693579d96a05f92021e157cd84a11165d37aabf30eb705b8c96064ee931b6246c66e77c3aae93d3b7749048248dfb3b95b2f2120b52756e898fde0f4c9e8afeba2534d03755f73928ab314d3e743413927dae8fb8dcbaf3b408596a0c46073439cce26876873f83e093dbb0c64602b46cc057693a8c64e95e974d786b1cd5516479ca91e6d7227f2d7e8dcb593ee13317ac6b5fdfd9e0d63bebdb0e69386399f677926f609d2b89ee1852353ed05ba9cba83bed3f3cde6b8abeacf3c5bb1cbc3e51534bd748e5cb066f7ed94e062be9105122d3015bba796359ec26f41bc3ce618090d08e02456719197406bd1c4763adfdee6a40601df530f4046b58db6de79dfe1fcdd3317469a6a9ba5b882285726dce746b24b64f78ca4eb9fa5dcc553a1e021bed6e8029049c2c18e99c31b30eef88657a4157525b63557b6020312767f1316247252e96ccb520f331792ca216367ad6520ed3e74f3e419809985558775822c95413d728ef3c20ef09185d8f68c961ed38eda9f684bf73ed8de0307f2ded3cb3136084e8b68de0b97bf431e36135867bf57895c5173a5e5ad265ac0e4df3188806a925d04aecd95e3fd0b34df9ee982a462e7b35dc9068080e0e40943313ad1afe61332c1ddd4b37ee08dfb69230f2b2f0137a678ec5f3c8b8935809630ef1f11b39d890c9b313068fac3b7f2def0cecec8e2c705f55164d0507bdccb7bec80bf509f4daedaf14c39a9fdadbe1a6bd534f8a2ed305db299ffc113639ef0b14227baa974fab287bbee28487eb43cddbace5d5f4d7cd19ad7bbee1e895534f6518c61c84e783a273f975bd75f582c6d64f6d62a8485220ed5d85a4c1818bae89c709790bc8c69144163cd51b4a57602a137cccc7ed6722bcef3fae487c3c12642641fe43238e3abf230bb8f13c273205d2f5f2556e598b96dc0463fa383918d8cbc7c41535dc0b061e5d3953ee9c550abced8b3be4307d71ef0caddfa87d27fd7981d2ce46ae7a38f41011b44205ea88e4a47615f63a21f3985cc1a3768b849b436e80764ac5acfc4f4077d435d37e485c29b4ec9459dc1fe265878587b50df0eeeab42d90934c2f39e6735e304c15367eb770d34ac40e2ac593b61e77f1dfcc6b0e8dcee5223de2d9a43e6fd03bbf0c097f10d8c8f644fd4d2d01c9cb06ea56743f4f29717035eed8f3abaa649b617fb477fe81da200bce75b079b29b38edec3db1cc9b9216d402b3b6818d4a49844edcccf4b41345857ed9ea60a9ad55578f0d180db7a25c7f092938dbb5324e85b8daa254d9f74b4b587b94037c95e6b10c2b0aa7204a2e433a45af95ab0f03e30a1b8cbb0db27f9a90e38ac1f86642bb31b2ad4ba2e4ab3d96feec38c194e7b67b53872fa4fcd9d2c7dd789059442243e618555e9d9edf48e1328fc55bc26cd9eda909ab579cfb92c006a41a4d3e42d523b69eebe324e5217681121dd0f2140a5b3aeba749ac73e9204949c0d6e6d46182c18131fa70b3746c85a890ffa5f5ef2c7f623e4ce7c7390ffdc80d76180ed045e908f94f7095641dde0c7c96885a451ba6c83b2c5f4d833cb1e73c93d3c47268c70930a4a2ddcde6dd3ab8e45be017414ad756add4a172ed54c4d4f03ceff1f963ff2ce7e87f06d5bc78e2c747202ef8958ad73da0f1b5432cdca9498d9466e05115862cee3fc0048baaeb6392c4f1a9907b1ea207935a5a04a6a8c50fe72ae3f823413f6a351f915a99426bd2268c1e380fe7c7e53ead117be11ba00f7e81579a0f9e589bfc1181551f0efcaecd0babce861420c1b44a77c4395454802ae84162c7b0a60599f7cd0d79df210e2b5f8ce943006cc72789487946151642bd1975a4cc2a2a24f9a1f432be0b117a7d98050fffaaf5bf8f88023f5d3d9612c58670952ed3eed8ccd3cc852ddbce1bf4ab608caff7ba9f8f916c0150674cd1fa99895a9e210830132d45775471de70268ceeaceed9f4e613c7c6ca09cae1a7ad9e786e488d50e8889034bc6aa7e05d16a288ddd9dfaf10b7adab84328682a5583ca0b412fdeb03448904a53f94ddd79fb2d1c29ce63fd1d857764bb289a5e789a37d5696c46a8aae1ea958d547f370b6294861d89cc4800a2a6a49471add6f1a4c054067c57b91e0da08f43aac75224dfd01251ef0002aaadaad1facc58106557b75b88e9c43851f592461f82689b6a26c7b3ac523eff117e1cdfa8f25435c1fc5ed460eb0990ddf8c8b14c257a9eafc82fde2cf7e6a03fe08890c1970a38585db88b7a4f7d266ebb48b889d104365c19a73c795b531c1336c717157667ad848a96dc77c1aa78f07b65a4a2cf9a1efc5fb31e479f58ec785daec60ce182b1c1d2f31ab744df0934bc980b7056e25cd9b0157c2e044e9909839bcf4c60f1897763896dfacae98a6d0d386d7eab61a1037145faad2aad5592ef5dbf4b5b03f0f4b3425cbc943e9afafb8543dc77b4aef86e87e116ff34fd44b35b907743ddea255561c800a0273b0f14cdfe78d37ac9a3ec7906b06c5dd26a79df0e515828e5ff62ced0bd5d34616609a1b9f256965561e78f296b7a24fcd18b3bdc7ba0401383277498295d9720db741ee7364efba7c504345e7650ff99351855a9ab705db2fc70ec7fd1414b2a873661b75dc66a6f32dc6af54dcc0f2695e20d139e835e850793340bf2e0ffefdb6e5e4f5858ca50e31d38f8c72fdf011a3633cc9d9162acd4df0d7e3942a69cf8ef6704097bf1ee78f5ff2e6fb53eceb30a2385d70ab369e4fd2cdb7da2097a3b3838c1b9435b598d6e3b949324605a7318e54bec0b050e33aba78885f7ec329dd88ba8b58b8fe87535bb7a011088d3ea12131ff6d6f07d8315a680be05da6e240c385d15c43ec836b11ee65115dd12a6dd362d977329b8c5bd64c0f8b45d9bcc0bf8e82fb0f023bf5cc5f1e83a8a328ba127635788f1b5614c4d2f12c8d7aa8f96685a3befb002cac2b6b96c2ada1214c2dc556bea5c183208ee0c778205b5abe178de666c7f8410b2d847de4f41d026f8e0c9e0b1cc32dd9b721952923f14fac95ed0ffbe35f3724a0e01c35b9df64fa9690e8040e0e302f2bff319570b1e877f1bd0289ac2fb6e027fb4a6130983953833d3c57107062094d298a5b31c226b4c49cc8c9005c6d47ee0de6bef9e079eaa4155027a27fce50558b58f5bb187ceb9018a4bd516d69924163e9a275f0bc9f0635fa6daba26731bd16e434aad239610b205a93cc95a8cde1052c37bdf691d32fe28cf08b413143ea39394c5cdabf48832c320c066e0d1afd9207d6b85d1ab76a30c0169fd8fe43ea6f105b47ea0292e6c68a40d279b06061f767985538458b927851c37e75d119c70bb7da50dfdde5f0b93fd2d64efbef419abe6d4d68aae183d1490845e3f68c86b4058ebc254a65f5922802657663dabe9242ad9bfe333b90726f0773d0415ae297e190d32075ed4204452b160932e95941eb21c5e0761a76bbca6f693ac26b0de6b18eb8be14fd3ab91b26600b6d94dc3a61025457d846c5edac61b1450ac628b9123d1c38985bcdd25118b5c1d56c363ee41aded0bcb0dfb65b23213663db75f176706cf0ba161b8225c43bd92b51c664b1a26df67cc2ea9d40c365388f86a72605ec9469fd7d105fbc5a2c41e89fdeee76575bbf6594f09b9105fb91e1de4ec3bca21dbafd8c63e67d5790470c1f458ec133f914100d3f130b433346bbc319ceb5e6a8c5dfce73bd47133144b31ee613d28a6c2fa179ccf2ca7fa175bfd774f2534e58f959bbd793f5f1c1b9253f5cb006ee7a2a7a5463a79f5687483542b1b6afc61a23b5b41ecc8f3ab0e317c60f13d3b1cfd0b32a8ecab3eb7f5b678e7a652216b97551698bdceff145f6f9d1adc60d302fb5bf1fee16add63b6e3aa67ffec7fcde1562887973c14a943cd0f4432e6ef5f3c20ebd5726cdf3555e930bdd806440f849194b18c9a8c55321292dee8a516f358bdd34947b2a5d7ed5a62e07611db0eb267e70e3fb9bf7e730122ef519816ec080c777d99658e982747484b8d2c840b60a8c007990912604c5584485d567cf09e0ad386ec96cabff7bc76c5ac8ae3736a4eabcd7961fef9ce19b8ba6511a03b526493c12a01e8fc5b2050e42279d7cd41484da6b659684197f0b122182d8a11c8331e283d9ef80d80078ba1b9b3974569b806d48ca471bc5d49dee8179829931036f2c850ccf6ae911308e334b1b4b54d1fcf1da1abdd58d486e893ec83d70ee2d126f53a3df5f2c0d19f50c84429b8d199c29a44254d2c3e4a989f04183d36b8e24d5b08101aea878e7cf57b6a5bb7ef89a6918f367dbe3af6dbb9807cee139b403793dc77372829e2b0d57fb8e6e839d153dac6c7abf8666c7eaa665391470839e5d633923e15a5a8a29297f71282377468d16054afb122d2ed8d6a83a478ad317044e181fac484978090461a2b949f21a161ccae3be5d5c48dab0ff4e33f1f2048e11244afc33f19cee0b29c2c576f8f0c132e9af4ffc0ef3522fd0f25f20138ee3fc39e5330ddf71871a045fd0129092e0826f1d2b9dd6d7a148fef8e17bf0b842755f55fb6bb5191074cb63a52c85fcd038c0ec50c097aa85e207a9a363234e2ea6ff6821cfd03061261155f3734f31f71353e65ae511966724480cd2f2e1def352e2f634dfee529ae56d831a12363286bb88e762b8a0bc9c6c082d42f6809a3a2d883251601c13bf18fb528387d3c75dbd81f63891e8008fb5748305136fe911f0206e16eff52387bc5ebc757d5eacbcf2910e56389a863a3c4dfbec2f1e9d476a9c8a311198e04c86520d910e1cd78d80c1ddafa32e949a61c38c8bcff463cec2b6435d66798cd3303573b981a5c7d346bb0d62334b1e6f1531629455cf91da3afa3c5147f16f84dbe9389005a4f82657ea17199cf07826af0e751c7ff9f3f214add3cfbb52ee9336520a7ebf9e95469c0ba368ed19da28ec1690fac6e276c3d7252fc80db22b140b3140ae6449a7b515fae59b92c1b76bead87fb2cc7beae1effe8757b63ed74bc100b8e863ebbee77fb56ef84d671ec950f55b488493a2266d98a82185c56145cd4652707f68d70a4e0ba4d4cc3016ef52762722b19fc80ad10031199fd9fa75279db03866ba6a387d7744a653f1be20255fcf923dd4f1c7fce319d79877c4bc7404d3aaf313155867b4927b9c3bd918fbba2ea6c5b290ed6d106154aeb07a4ec7cdebfe0513e1033fd81a33e14514966f4f73f601e429544e4a32a06a198e5d337c1edb9a91390b497f0137f7d53c42b26b458ef1037a7649de6f2d64ac3ccff953655d02c1c0f444f7d93c1800a1f467f320999844e455dbb6a31bf225b61409fa23e59e6a44dbeef1e08a680ca8ee979ed5b2f395aa94f3ec97b0a0ad895d6dd76f30a3b26b93a2048c7abf15b7c30d4f9c6c106d92569274d0a8d4885759790a5512143035ba7576f73fed3c631507c77483d0d4e8a2b45558e2fe1b3a4ae93a3d508a06d283537a3055d4a9d053e69784f1b007a0526eb11a5e4f717beb4c443232f5368d435d5bed17387a90b74ed26ab65c66767c1b8184983146760904f057297b65e68b3e3757b522aa5b9b4318bc81e6bfbf1d1b701f3fa54d039eebef6b7e20e59fdcad00cbc774fe943aa57e1bf82e978de066521e0e567291a3148586301bd0fb7274d63b2f530403cf36d0f58581a554b803ea5f67768f98a053e3e23e166147bb36e0e3718197cab5366a3a51700d3b7ab5da1e6db1dae1ba13140bea2874837f1277b852e4c70b8e317de295c66e2a45ac578d5092464624b036c9984afcb71275a35134020e47ee5ce1b6706f783efe92eba907c0ed9ed066e1681b12338c8d35379dc7a2b5b4e3a94959cbedc9f2e82f37139e439690566a5cd6fded5d0fe08e157478844a0ff87ba634f4693d00b85a2f2727dca49ce7f164e7711ee8ab9a0c4656595e681085937ceaa608ca6f33c0ce64479bcdbc6926acc90a59f8425bc22df0cbdb7aa45f70e394c999c013dfe28f998fa4e719dfc06923ec616ad8913317a7a47f383598d512706dbfd0b64454de917aad5c7118027b45d7ab9f765f6c6ef3b16ac672896b740ab7d9f7350cc215a758424d1d32ddbad986c4f24b714eb6c9e89afb57a5253f6ef519c999fa06529f5816a2f6fa56492319348a913c40f71a22d39fe85c00ba57c26c12797df918ceae488ecb1196e1a43e206234d7a5fb4ce8f430a00884db4276a61ab67e877f4f80d3ff924cc9fe751239426feb0cae29a343165bba98c559291ea95f675e9eea9ae4f5449be580d8e79514d6cd1c7a33c81fc55af23ac0219a7ce197cdde435590794b4423e6b452232e1a46573662ff21dbce7262b6600f0c92af3b207b6cde8fdfe284d9c44edc016af5ceb3dc0b4bc10e3ef2f0f799212aa348dae193f14754889533079961b010dc4d4be645c80162df41578f517c664f48f0af1dab8f3db50b679248e2f0705a9c247a4ffa2bc84296d8f0cf764bd3c850ab5307f403f1f224a25277048bc6c0ae5e397644742778ef9e40894e47c9d5b05f8db796a7289e238a128fa5effb608ba2965deeb4b2984eb4740ee4a7c355bb0817019e1c6eafd12f6e43ec8a0596b35a7710879ad239a3f4623edf2bc51a27477f68e2b064481a14866fb7e0c74ae096ee30d9df23716dce00b20ff7dc9571550e2753e598016ff4a4441331d3e7a12cc908779e2af082dfc114650fc63890ef259dcdf022fd73c14b6fc4984ca8cf67f7c37fed0da8aca9eca3b7c54e086beead98ab7c13392a87a546d5f5622f7d7acd3154d1d077239d4493d8388da19a7839bd7256ed31d1ecba263531392fe38e538931c3e758d45f53daad01fae1f50fe6301d6988b8e9a0da1dd3870d5341d824efc338fd0cffcd8a7e41aab9929959739fb21df3f82343c24188ad3c662886d98a2914eefd4b275232097e9fc8d68bd8ce4e77121267467a90dc59e2d2808bd34ab79fdfcae39432d65e4bb4771e75637ee38ca9086a2fc8c0185fcc5983bf32e021635840745ed0e7d0179b54056307dbea945181be36fbff1908f2df974b8b0bf2981f752daa0ae31a4c1751e2290399d31bae6fce642ae502e6193ab05a336e8fa23801dd8c086bc263a7eb951203e1f4fa269eef9d6d2072fb8fc4396f44ecbca93778c2260fe3f6d280189ec3163977a4a7183ae65b4a2b30af7fcc0e23d01024d76643dd26c1c865e3d94523b349a6ae9568ec3838ad10cce1b360a9b157d34512d00dd44e2905f93ed475007e9619eb74d5d7cbdc77f49ec2ee44334b2e188bde6125ed469cdda2cd9e205cd8a8682bec5002a0331a759dacc69b14f7449df1480c28ea5411389de1446e002ff4ed2bfd12824c11bcf035d75c7de94c4ce24558e1599d48adce3b875dbae85e3723c5962f99e8f96791231290c02181b0be7bb6c50d70fcc3f8f036c53c8a0d94657a2eb863cf8bbedef1a000808e4054938fe00b02a91e7b6867f4c2950c71743d212ef39b930f6242bcfe4ff3b4f8f2ded3b9dbdd37b1dab928d0e5c867f9f2569efbd7a2dc1e28ba0d0a108b6e304e436bdadbb163c04bba9aad644c3a2ca4a9a4426e1c39f2846434d571cbce53f7f0494f2fc1d2dce79b099c6f4c8e19491d5cf5b4b0626244d214e759f993c0dc9124789d8cacefdac7e42fe8efff9099056983c82c9754805c6d9a50bdfb02df992643c83eb738b27ce6450b83e997e25f5519e48351fe06ec1bfcae337f8f4b53706e7da320585c624cfe8d06753cddf2105336f5f20b3f19597a2248c3f595ef1312240302e46b38ef82b53ee538ed5cfb8ef036a10b4cdc93b7cb62af3c19f9bfa93c582446ce44c92743f0e30936c02b4b1d0dbb544f4cae6fea857eed0fce3aa6d9b24aa2ab1d110537ff151989fa6027b33bb46b9d413381bbfd0198faab2950f03a38271eee0cbd58427bf9f47907cbdef6ab29a3423448b4e20b3418a4fbea5472bea1d1e256eb454049722606285267fd70cd1d1f0cd9dc7feb6e0626755ea666fc12085c5d3b59639f72e7309d4ce8a6916e71493657db2c1928e9f0a53b4d3e7469baa7bce13f15033ff4a13b4d14a4266e29928dc4765059ad6505d10b7cd3be085edc48ebe2bc0a52cfbc937610c4334bb1efe7865734a0ba13d779d49897daa2e359cd3db4d6572afaa43ea265b3930d0a220d08b2412cd96a1f3e1c302b3448c2516414bcb205cb1ab382e277ddb63f1b27cba1572151b95ccb66167a15b7011845a03f45177a9506f6e17fa6cbfda8d7404c2cf49116efde84e523d1a61b974332534dbb4e0def9a385ac97b6459902788e7e6fc5f3ef70b6f62afeb4df9e287593bbaf8be9c6e94dbaebb81e3e92ca6b2de05b284f864f56015297a79ba0fd410c11d90a5a48764e4eede93e09fec0ef666ee7e1f2759e4ae1707f7d12d85ca48756fc90ba933f464559026f0064ab8a5440712d63ad507b68ba263931f55841be317e4032ad61db4097f70bcbee79237bc1fc5463504584b2a490df7921b31d501379ad57ed967cf1dc07d8a32dc879cb870b231472e285f7bc5c2eafdef0c0debe56f61f51527faedfd0076f9a41e2e737cca991005bef3771d922a11d3990d48716eb0c5e47492528156ab661cc749a7d9ef65b73c8764aafe7b5bc815a63ec557f502c11b666bf3853032e1779b4fadf45d915e37a6db52b2c30b197e5e0786cbccb594ca077097c3ea52a861cd0ec908fa262324046ff81c712e1c6cacd5e86bc98c27f0d295e53ee8fe22b148c26c3d6b2b02974a050eff76048ddf73d81a0622979b3f39478ad3d0a5239a2cd5df557f69fd78a8c77381eda268716b281430deb25bd0279e9450f94ac37f5349d63c33f6529fc171fd5bca18818b797099009016ceb13ff565613ac492a364e2b7e33147739f707d73f8e693134e9f4d7a5570e61dd0d45796199d4a3c01e635068b3879164529fac8003eb6726d3e778f8ba8bbaf56cb1a3b502f7fac7b4cdedc8608dc72eed9ad9248e07b6e6b3d570e082321be361f9145b3f0f757643849fae3e18bce55e9804f9c19997d121e9253b616fbc572059bf195c079aac0d2ef773a82e5e5a6595ba9e4921746f1a4e37eef58c1ac2eb98f7ac9bb1419cebb277b4e1484534c347ca39a87bd970f9c9108c4d4768973efa3325a48a59266fa84f8fdc2db196263dd07a535bc13061f05dde2c4fbf82b61e06035b960fcca32166d1113aa9af9831897555af9c2a100ad7aae10aec9ef2aaf8317ab9647c198c5824c0f3da718360a749c0a550b1f14d8dd7d2a96a66975a0d66d620baec8b77fd980e726ac9240d5c0425871b9c706aec2ef4941d49e01c6cb627df08d87710f34a05b8eb7b63b7061840f046dfa6e917f90c93e020a1e612692f4460f0893379a626c2a38cb4b31388c410d873486242f7e2de4bb8126e77151619591e31ca8da028aee3dbf619fae84badbcaf49bd435c2d0501103db7933088e28eee9d2e66022fd731ad211ef77fbbc43569f05a0bd7ffa37f65cb42dd689480e34aae277fc7828dd54ccbb3f643c82788b9153640cd23c6dfa6b696a3d7f9c7bb8291e04ad3daee2cfb55c34fe06b5ba496c1aaa6bb71a3c3f9fc1e7d9c40eafab13e3395d6702398c8fe7500d49fddd58f6c73decade90e55e55c4238671d919c93aae5bbebdf3813cd97ec192020380de78923a22f8387be7077a7b9747de3a50cea3ba484f9c3af6884725506393d82a86e8df855b34020c92cc11b94dcea7c97c18d0b40ca72c81156ad349e7478ccffdf7e6d3a5f56c98b2e7d6453d1eee674fa8386b1659323c8ab07df6ba6b949c7dce5c46f715530f30d2236957b7e5ba12f41653ffb722f633181fa08bedd2521dfcfbc1ce05487444c12e0583844ebcc41d1bac5acb72b599f12b215390758425e00a84167db19fde8b4f311ef49d180eab1bed2f9d8f946f079ecf95af8b3d999a44d76ba7dec1d230a8bcf9d73a1fd15c22099770721ef932f025a7dd1c353596532dd3095e55e6a9bb646683c6667e239d0473a3b76309ad391c54974311c0ac658eb29492a33d7fbbe05bebca2827d9a19a230f2fa04f01d2e364f812f697c4f4d70e71305ae98bee6b51bb78ec2fcf9a9a770c6d9027f82b96899b5b239bdfed661e5d229cad2522d056d32682f548e1d6d1cba908852158951d91465c8a93663b7a52c1d6d3c99f2ddbe7b51da0dfac615e7b2480005258d9b02612f9d8bc702ee7565a8b90737065bdaed897f496ab97c73cfe447cf23a644a480f93fe95d3f7e7aa4b789b68f23c956857f3de0d581eecc1893cf9e7ad09528b5a87d4476f0f0e0d06be5253b8db773338ec7d28253e10d1e9f084a2d5dc63c6cdd02a6a4b44d259393067b0bd8df3e089df6135f6b0bf82fbfa0661e4a3fa288febee7786a275833401d8830d4084ed2a3a05c0294933fccfb3c64ecb7e5096241b458a2a0a4f9d8832e77b23749478998e856f8428974d9536d954cee419aa019bf57a2e737c842aa620faf778c40717e2defcc9ec4729f8d8d8393b95a4f9640b024e987a67747cf10cf2a8ce46282b037836939102d0d4e3dad359f66eb4f5c0850deb92bac51dc8c8082d17a3f366244c54c348969ad2a7632de48c71ea8a3ac371a6798173cc61afa40ea5fdd7a5d4a4a4fabb977ed40cf3b94dff70db5d2841bfa59625084d1bf27ee2139bec8e9b34f0e38efd2010dddefa4b2a22370325d72d922a2eafb71e27635c1632485fc222e923336ec0a6d1ee873fd971f4423b74cae6fa27f5718cfd350d4b02be8e551497d3cc41ff00d8b13c15afa0f9d66b6bb3207ffe50a0a6aee3c4d5bbdc26ef66e9f3f57899c67a063906c1012f022f196aa8230586bb3e4310612513b17c6056b8f7235a679062166ea8cae64af67485c97fe594f880ac309df1b8295cca16ed003bf928a3575bdf2af22fbd33b5ea971a670139e83d1e45d8b4ca75671e38fa00f696aee50db093e540e253975e2842fe11e04074d64bffd0540d5091a1a0138fcaa1e6e45f2a97b5317d23b64e4fb5809e405951b3d610c1f66449bb17cb7318423746c4345e6f8c9b41396dd1ca9212d9bda44d4496fa826806d3fd3a45721b99f026ca63692e83d5452856ee76affdc395712659e3def575f1dd578f17b0f98ecc4a9ce267f08454a9cdf8a381cf24119b02983e011d9fe80f4f733b61084efb93752ec4cd2bf8cbd7374c5eb9372e8dd21c97ce3cb63877ebb5b261fc86c17947d5ce8472f48ad8e0c96806ac14912d9ff11cb1909dff98618a6296c145de3efa7d2f55e01bb3c5f2ce22f67933a79d46a6d995207713e5de5f6a9338635749ac31e0e056e35b9be90032e2aa7d298ef5a780ad4cc06c77f7dfda5f861f4a414980afe9c9a04d0e15a5111db5e96a524f012e29d42d92c53b13e68ce431ba51dece9fb7d68737046962400dd1faf6899f48d368eff065c37aa0e2a4a641ede9266e5b642eb17264a4519173654175c4a16b8dd869442e2fa3c2463e327a92ae2be7c212136120c9957302f877c1553562c6449fa6af811ef8d7842587268edfb868bf7c2717b74d48f8d7a0f547f033fef634cc676aca6b993951555265653d4641fcc14da9eec9f3fad701369662526c8bc6bd6e609599e3e35eb35ecfdd19a9f62737c0c965320ca3ad63310b892d2905294cbd976a8cf8c5519104e03a1fa7211bae89eedb56342efb52c3b39e237d48dceda933992dc10cfc1d9accdc3e26b29f9137df7033aaec7aab9b3f6a55030d1255e30e7d832a81bea859def872b84e07ed97fef816b85a47aea4f0db13035a54fbf850dc2b77d812c719c06ffafce09ecafafc8b0379379b982e1654bbcbd0c4ba613acad5693918fea328a6eb86854cbc43ee662fffc1c3efc672e7034557e17c1b6bf103ee62e6a6508c95ad1008a45fb947194a4f934969b1154c7515530ba0b8d8fe09965819aa755a445062c283a1a470516992560c70250a101959db695e5f5c2b58fb7ce641d2f0072c5ea5f9c36db900d86985bda3be0b4e04fc14898c5311b752685ef9392dc649cebf766e601b5a18cec52067ecca905467c5e5928ad95d7158edb69d1cb981d9af32ade00ca28060883466cfa0ae18c5bbc75fed9c18127b32be1882ec56441a0000fdfef93d576ef2f6e7a988f23daa24f281427f873cf08b9cef04f65e68952eb4e0ddc5a03d44b3c9636e713eab5cb5d84a043ddd622a3a5c647b663cc7458c99c9a09cbafea48bae058056ebecbfa57be3687dd16021a6e051965c720f9e5d2f1a04053e446273a41bf6a81c143387b98411197f907cb24637e29dd831c7b971bcf922e9fc7441eeb8db4ae08d74d10d4d41e747c0aa862d517995b5da47be0ac8937b70a42b6d0100c8814093146ae491dd9c993d4d4641d5009b25e71e2e5bbcf91a97297288c9ad17ec7413096a1a8dcbafde8119bed8a2a2df9690189b3e8421c7ed2f76834e39e6b9c1357ec81f353fe2a1eebe49c894b67d56fe92942c42f6088d18294511bd2ffe2f35453bbed072d43cd1c91931581df36e3ca0a736a452c03fb5a798ea0a0ad3480ce68f3f078bb454a6e9d33b80966e1e3405a954d361a61b76fc14be96d8052f225bd387a680ec5772cbd0cbff8cca98b77ede865f448c4b8c9b12b88f6869c0bd8d2d0dbd9243ea86e1fbf7205499d34c65b0b850eeab24d4b602a7f4dc6ca32baed5e6c07eb76a8f18e3de9f80d455b139eb586493683573a23cd33bd3ac2e31973220258f79eb5c3a15147411878cf05003d3455dce36f192ab43c48c276fdc262657031f1ddbd5770edeba9f92910ef19d893f77aed1bef9e8c3005ddd47f21e1649fc31828201c467416e27fcc04cf4e429ebdc13f521cf2bf4a792f8b0d81decf9ff0f82667655bbb9ee4bcbae73373dfe3810d62f8912657176a1ef03385f6e5896c38277f00690a3926396946ae8f09fddb57f8c1e64ff4a3893b4f25c68d7261c81c4a6debb1067c4c20c0a9844c6d12e6dbdf86f7cbf0c8ca3a1e539f8fdd238c1fcf7f928ffa6fd015f39ef17680925cc709500b792f2126c5d299f8660c773f813962cc9fe08b036fd1e0f93618cb124c7e1f18a2dde266ad9be52af01a5ea3729b5f14f3a5b52767d455e7f3ae1edf6df34352941edd892c58a162d001400a2ed419146cc91d00ca83082a0737a447a91f2f558650cc94700e68b3261953e979dcd1d7ac4ec0c813e492225415f894d2e6738aa1c5b1c5bd7fb69c9786c99ff67a61d1c7fdced4d3312601ec97e7b8ec3cf13df7936d00a09e07a9df87a352ca82e6ed7fb5c6f59c05e4ff165fd26fd335d8541925940cae7b9e2904c03caf712c03ace8e0d4868199fd0e3d05ab0f6b01fb8519eb301260902070cbcd34dcf0756d777bf133ba7adaa462010969ccc1f01f4347ac279f6b1bb13b2b05a1ceb3114474cc36b7da5f6cca3d9d6cd52da50ed4c35ea8de16a55bf9c76ac8680bd6859b2276c112c62a0d9d60a6b9c9ddc93775ec5c155b9a5b628bcca78441e746b455e3c8e643ddb12072d8ccdcaec4fec5516672500fbcd17241133945de029b45175dd58a629007ad47aa15e71669d65a2af02f84579a20ee3e46fef736f24e8fd1190c44e88ae097af68a6203a22470f046af54c5e1b3e4e6c8b59e4222f951259bca7e92934115e7b9cc4f8e421c1f2db3ac22749bbe2c518f18d46a54afa38775656cd0994faa0d9659d20b82fce91611794b3500c166d9024da8a5c2e3582770fbf9958aa08e0f1e8ed771660364d771e4708ab134baf374a3f9552d4d7452c5702a65043ca9e46e2542bcaefd3db1b4b4213d469204b7774c007ddc8f027598ec72379dca41e5b4cdfed0181ec0575f59de92dc14d7255201312f371100f82b774a4b466bd8eb71e2c3bdb1ded0523e513e2a4041069a7e039b3f638e388d572b2d48852b9e62a74eaf30d030a9b0ef5e34ad20308d04b5d319c364802bcd688a9d1ef162ca0e658110019197abab11d34ff34e3c1b0fdcf698a01955076c2d5c8aa31b41df5b3dee541df57d716c1976af809d8213c28fcb9df24d5ae6a6d5012ea256e7c9fddc99242a55a08f19455221862619a11a305a6d5270557b1e74feb05d0dd2c0fd9bfb9a94344fd19af7437025a7ded2e8407c7974c83d8c38983fe82d58d27abd0ea4c1f52244315242ff8edfa83f7a47cc5e4f4dffc3c4b03ad079c4217bd352d5ac2277f960a62216f46d494991a970ad200c1ae123c298772ac88c5ae91131f84f298df0fabc575ff146663c5ba57d05c66d1a9f6543b1bcd3674f9e3338b107daf7c08036c134fdd016034ba2e629d2c7019b387030faef52e956ef309d1e99213e72ea02b84ba722e56763cc3d9a3e15d12ad860abb479add19f2e016a5018a52f68620e8abcbcfa51175ee96e47ffdcfd996270a41670f7e7b71b60653c9a8fe169b583a8e5017b484bb98a68d5f8c3b275492df07f27cc0dd4e3bb0c2717cc66eea3a85570dd5d1ab623e8ddbbcf8648494c29468b9e47fe09609b3c0e08343b03cd9444175cb81559962cedf1e932fa923a7930cb646aef539a7f2dd90d93d9d13086daab71937aec9ee262aa553d5f3167a79722b28cb2dace560d8a062e07d491d2c3eed089a0dc48f9ab9e12bf14d381035f37a912979493c3ce117a0575524b2ebb0bab74c537fb0ee142bf60526f69a941a38dd5b5356f629786efca84497c49265f3dd3384e7c517593713a523bc3408e646d1061a332c4107341ee46d58e933c80f236707427c5f2f17f50e39a4927e6281601e231de2d5b166ac791db40ca29958c4fbfe69a5f2d05ed9f2a2e0b495dd0dc5437a364117558057c5575321cc74035038f6229e4e558a2534f504736f994c046bd780663f5eb7318308cf5da616e0a54a8229180829d5fe4e9a49a45d02c77bb6afb8f47898c2356cee1f2d803ca92b27ce135dd517ec36ceefd44bd688b13865c2ff3ceb1a9e98248162a6ab5df4e89501d70adf68a1537e796319b8ddf02a8aec56bbe64601d29bfa2f68db974fe60eba725d4f98f8a17207f9d16b009f2a0f88a9c804021834253e9471c87f9166914870319f6c7d5a6d292441fd1121e0579511c274f4c11f061fa463a0309e3d52e1cb5cd7c9c7c7cfde6f774f2151bee76f14e771c5c4e7595e09cd8259017458c3b389ba6040f22febee31b50ccdf8e254f76090b078531a43843dbe6ea6679683108f32c024e799b65635cb459722983c15b98b916c435483c324688d11499cb0472b55a0fa882fd465209cc7b893772051dadcfecc816c7ca1b00c5c665aa08df6d642bb490a81f6e760cf22acbc5eebde9632ff57a00174d16f41c77de4891de01973f079e68d12b8e35552e5f6a8248151bf9de018060cd1c2f513ee4c9736c93c04dae7f0faaf6985903ddb0834c29749fba85851ef943393b520b1955fcb81fe67b9b49338e90fc0f6ee50d337f48051a8d281ee1b86519c3d76967155844ec512167997a8162eb1669092aa8d8d8bbaf341a668e750ef7416899b96a09cfab4bce1c58b42026baf838c4a63e288522f7e8d500ade945bff552547f2f025aa793e2fb247dd70eb009256d707a80595193840f33755cf039484d769bd280a37124e198c567de5d6b5e0e7978d287c340c8852d2da080be62468234ccd1d438aef1d1600207263fefbf023a037eb5f268a6116e9749281851692eb337e35cd8cdb431d30b6347221b5c48f4a0135a4c1030718696a4fa6c18a7a019d7810839f5ba076d19605b05b4bf60047e7246b0f85f8dcc1d146326e779ee27e7dc7f46d1465af982b531a4800116aee40129ebcd94e0d0abcdeb318e122c8d977b9d733691628994d4daeb356fd024cfbe659812a1f044bab684cda4b4cf545d0776397766739bf62b3f5156f51dbe57662d83f5c63a7ecb22b4d18cc9f24dce7e28ed4db426d7d3f8215bc089ed04fa1bc0ee6f07db723b748a24d21e4559d6ac7537d074fef8c071821e9ac1c3841edfa5720b2900696ce4bc750d1309f0c660d7952a1a27fee8d288abd998a226a40c0a6791c1af259e5c935fbfaf6281ae803b35d05f9d8683e3d9a444c457093dc67ea80c2c91a5bc60a4abf1902c8333d36391ee19ceaa1efad374bd3ed548afbf8dff83bfa4456f28a18283773def2220bfc95998be7bb200e54993fa54de69cc30629643da717115e6547c495955483fff333eee873ae8e4f5bec8649074066c9d8c0c349f45aec69ff4b577fd6a2fd5e6976ca3f756837d3bd4126748af5c1a392adb879886f6a883b3c5538d8d20d8815901fbf0f5b9f1a3a7ae2ac957ac9c09923f615b238dabdff470d4ed22761000a61467422442fca4e312880678cb3d69dbea6f7fe235dc80c7da17ca7fb9cf579e1a3eda15efd6bdb4a931998025c5dd1b5b7504967e48fef2170b057ca03290e9458b2f3771b3be52385f0858830eae3494ee3d77bfc12e16116e6233e446f826481b2d5808667a92fd12f889761f26612d3b070cbdea5fc1a312a8729e69a55873a3491bc4dd7781b095dda7a73c7e31b4fcf8776567d87e7b6a860db3261bfbef480374281488a981d65792f1eefb2aa3b7a04860453e920c4e20c3c75a50ce84540b9da8804b721d0d4e7fe951cd54936bff8dd3df173bb02dbe1c29428f72a4cddb2fddd7bc87096495e52c4be1dcc1b21657fcd66d5777f0b497131b35aa882c487ed6c21c63d9b634f09c62d53e15444fad313fb8a7b6764d4b61b41f6c9ed36d361eacfc4e40209e3bd62f3121ba87b82bb23dd93328185544d65d6db3222c25881adc61956f6471dc6db85dbe95fe000c50ac64ba0ed4ca8ccbadc54b9f49f6a74b46e9e9e211409926d9e2987f2cd564da8735b6743cd6c9e2a24bacd16b951a91f3b9eafbac742a5d9db1afccf1cbaab0f6d5ee162e079bdc3a5fb50c0a238aaa9b6b150ac7f7b2504719a80719d02261f204e88c1b41246d7915fe0778d2595381a359e90fad144c768336fa53e024d96e88d76397afb6441054df5563e8e72ebf306d67d0d4460ba79958045b5da26cb0596e02ba2afdf38d0bad135d31322c4779f5fa7dab99914598b1e562bf70fd1e3c1481444703ac185f7d3563e222ffce68e6e548bef861a07dce0138329fb9b7090a38c139f599f70fe68afe72c659c0cdbbe097ef2daf47a00e17ca221a11a9d990fd3d384034a621bd2a8b8ad09e935046e973d1248d3b25c4be67bc1385df5830992dfd5672816017098d1090ae9f438d2cce109be320eb2378a34fc48a4f7e525679b1745876fc29f497c3ab3eb48ca3766a74bd3b997bb065c6386f35718a94d234ef84421de6ec19fef3a0579c861144ced472da0b456e3e7cce0c8ea441bcd45464d90ad930cd54549be9de9f15396557484aef20f7b239ecde3fce759cf6fb06d9e4fc30a7452ed1fcbce1ff1f34c4eac5f3a8811ee2f6b6599a3e74841f082e76fc88edbfe71d23136fc1697d1028e2d5cfae7d1b934d8d6c957c26118774c5d2a5cf0f9196a9709dea93f5af8698cbb8bbae7b602fd29d70224491d923311328342e3cb87904a2332c5a9ade8946d2b0764cf1c27520b903cff31a586a4074eb02b3c3fab3eb2ac7a861f416c66cc442761b5d4efdbe73ffbef96d6cf385e45b32afd36a67cc8eb4cf19f988921f2daa32f7b184e32d3e0b3b4d915bd3f731545b95001c7c74048aea7eb3abe3cd0a20dc3ec41378d56d258ccb4a786af73c818a11ed2c6fc95d93fc6c4e3879a9e88efa2ce68e4cd404d30d41d07ac2a9eb6d71115c92ae9724246fe2b5674f64e21b89c748554987cab9624ba4947ee5289f4e7b6400b2821131eb0df1bbcfd3a275b624bb40f87aedc58119da64e05ccfdbb3cde32bffecc225c4a12a24cc17618e4ba6b4032e8afdb9b18b195da1a7c3b1ebcf71aa4c01625138aafac655e058b547430c9974256b68317b67d01c1c19fc15575b23f95f92a9417593b11d87cc3bc7f5b26ce9eae80f3d2673e75f3674bc836abad0cfcb53fab7aa3a8ea9f8a3f0e2f98633e4b96ff5e8d8c6070cacbb5eca2f21838d7f886f482bd1604d9e0df315d3fe0ceb936454fd0ae8eab6360b716e8f8ac9be7499e407aff9bbae610c69dfa77030981cb654d7cfed20e202e2c7ddfcb3151b95056f1525ada14c5276df1fd42ed25614ccb12f2adb984c904e3d315f9654181e062600902a9821129113c4fb0354ba2e688c9563c1078cbbdebc6a9847d44410038e7d3d16e42a94a9c1952e404f94bd9917c2658d8138da9b8de78212efcbb5f1069c137eca7325443e44d3f8074773d4ca4335145dda954cbc84b6b6f2b262034ada77216f78ab296facfa730db5178802d92bc9f501b540cf99bc32fcf569ca46b6ff0f520f7273e9dceba35ba1efe4ea86d8d1f361bb92bbfbe4e259a2dc5a2f49923f04891d788a5433fb00d23681f1b65ca15e78c1fb02c7364fe3c2a5488f42408e449720e5f4251798d5ad7702c33c9c4cf2080a8a1d7108fa56932c83211d2adea9e1f329fcb767f91577247e7353289f31a9ccc0a07f58bc6af4e24654f6e7b689aac079a79a0f6c4957ea87336090641f987a34eeb52a2622481ccce7ccc2205da950fe0f4f69a02b2b57955cb3c2328b5561f7caa6551a179a358862b6e56b3058b2f7080f2092a1e65ffec8292bbea4f587e10cc4defc9ba88e28df7799a10b5ef1ef8e2b32edc157fb1f41a9a3b5933eb975bb23e402404c2536d3d5aa19f60ee9105b9d6cbd36294d9e6db13b015ca2abed8ffa1b3c3c5bda374355a84b8128d7930ca8f4b04c75768a3e90ec69499041cad20316ce5184d21c578bd8ae6315727181ca96ce76cc37c4c55cd9ba27da91444cfc734a421b5e4da70ddc83d21068af8ede0745ce8c6af91a4edbf4af8dd989ea67ce1a6c58a487f4ec31ff98cf600bb702ff9b3dd1a85196879074d97a0b055bdd999126e04794bb58b1904563fc34a18676b82763aec7f09204f5c4386121eb733abc237d506c4c9e6f03553a57bfadb5dbd5e2483bc273789948470b1b2c6b6e282dba4e4655b44577b7ad49d082368e21ee35ed243d3d6b885218f62dca6194bcc404c9048d2c7730c4a2aeeb4ac0505357a85c61bbbd2376ed9b9c8c91b5e795dfd4f9557ce743d0473669b184e217f4e5c8d7b36531ed69761c6f5fe96b45527ebe76cddebf6435b8f5236baa443231e4dc2a1e8ea3f84bf9300422935fed1ffef03659bdf44e764e89f82b5f6f2a3db18bdf9d128f3f9f0a64543f142f44ca094479779063e1a1330001465425f9715b76b14eb76f5edfa0bbc65015041176bdb9d5823ee7fc2de55f8cafd665d850056578434d1c605a8725e02e2a45c6912717d146956a14ad87fe5df7d9554ec59d7ce1d068ddd41efba46fff6922e64a93f6b083db590b664458dd0511aa266f18952c8f3c182c13add06e04dd46713c7bb9e73be647979bd45ac8ae741a5ec16f35857835809c4498ea6cdba24f7d1c2980319df3927ae1d104c63054b2b4bbb375b6d8b0511c74e35ae834e15daa216c2a9f656ae3cc1c72e9c00a03de0ec3d82fd0eb6ccfe08c08db129436db8988b1952fb20637d2439b4ad15e464dd2fb65d439d8828bfe1db319195bc42615a2ed482940e546a94d22223e6de14bb5b876bd867c88bb5b81f5692309f7786ad939864b6af0d01db709a247f32f657d43de07fe54f68487f0843b7a7ebad9f97eea02adddec47119b5d867e06130871a9e649eeceb702d719468bff2003a3a601480996050f1562db0c243844cc4928a56c6afc07cb3407e0cb355a93c083407fdb3bd00d8de7db1ba8a5c968b6d6f583d555ff738e8d75a2fa659b5cc813334f7e3c475d856ce35636c87e0984d62250263651ff8e8083c6d592bb7d556df17c017290fb8402975b291f2b36130a2963a0630776ea1c524033754d01660c49456a6a0092858fe4e296bb78074c8104ee92ed1d57a3484fc6ce8c3281e380b96c034693ce21e1a79d59b4ec2dce9e0180729b742ff63b17b11c55f574e26ff78a9a3b4870b594f10f80a61d553661ae20779ddb5ad1f1ca196668137d671de50045ccc442ff68b5ef0a098afba4eb9f3d6cfbf3b069fcc790150a311f30eedd0705c066e758ba297889c238ca6172bf137415d2d8fd2bf87d4e9a573854f25c350e1d44de22592ba8af3a293a52842fc5ffdbf145ecf77f17823d2e6fcd780c67325ecf99eb16b351ff6522176f876267e9ff9c6320faffc3e0eebb2927fcaa2484f6138283cda2be9a9d96fcde0521e858a8fb98ef3cba81ad8cc1555c7ebcf13293749a152740125909abf0283ab0a972a5dcd68bcaaf06d1797e91794a564f08b51821b6c136045f2ffb297f274b49f90176c5792f58e6abe9ad2bf30876fbfe456c5c0b46837a674983475986ac656231e1f25f863558ffc404ad94e527641275e4814886b1915e383b75d06a4b4941de7b53ea02d19ec915077bf55a3ac99d0930cdc87ea10e9a6f33edc73e35953f9d93d64d76e67470298d2be04d0b5c010404859fa3563b869d21fe15462ec705801a93d2ca894bc1451ec1e5d0be57e413189232032f680e4044c0461d6a83af46acdb612d8c0e36bd1760e5debb86b86e76d21660540ed093fbcd69a915890283dc5644f2f5fa8341d594f0142a8619ab9d0f93bd6a031dcf8379b1c5b7ab5725687d3e487edd2fc04b9cd122c1da4f26ec54324af8a59c1d30c4e9a4d3a40f0cefd227af37bf17fa7044caa50aed21bcab690bc34b68da4d8babd77aea044104bc43770a9da1e5ca470714f3936c3702544e74e2db339356ef8a1de5ebf8f4509c1485d6fc9bccfd32febf8633220849f3117af00daeb8515322d5e73764d585756e305f5c74c061ec71d55216c596ccbfb80f47bf6d876b04742912a2f22c432614ef451f5063755d52816414a0f837b1155129691990757992498786c9861a0d333b1b68f0891e9e3366e944b082856e6f34780d7ca0870307cb52c9d4526dc079051aaea241b34b7b20493ccb8b82e7762d73edd7f70729144e10e0a41d41d45f979dd72938611c509b43b4bc643a17122b4de450773f6f5597e0ff0a8e723d0022c5d749f9fe562babf1b8fc9701a68956d40468536d4c716a018a30c8f838ac02553a7471587cc7f90ab8675816e5312b0eb58b1d9e38e0a18003801c27929092fb6ad6bb73c03b62632167df1f3595b92e3bc9ca2fcd394a5f029723cd10a27507e614df080f189d6b96de29ca60758f17641caa69dd1e6dde284c98f833facf3b8fe9588b5f4f6eb4cba0af231634dfb0dec1d7a085679280e93feecc967cb143125b34e92096cbb2e42d19654dd9a67f7b16411a923fe7e80262d6a69cc0cddc5c365380274e8e2e050050e5d35da6146ab3e36a42d86c9d9be03f23704c98062b895a43033e0d1d6c4ac280ea58319025be6cc5388d34ac1b45c200210a06e157ac142b07cd88bcd9d08015146f761c604ad84607c0e4885f629e9fd7b703801edfc069e95f59459d818ccb7f8568fe2001750d02c31d6c8ca964526b4db009ce8f97869b7b5916f10df2ad8f622f3f28edcb51b2edece27ff484586524f39275317fe6a495893a1508ea790732ce6fba8095d470b8b801ad6c283a60ff90e0e183202b5958b407c9740214b4bfdba4db4d1ef5a9ac6b2b8c3a81d212f7b404ec2a067a06e4c36526684fbd3232f4f15f6673a5576b914adc9ed3f1c1e40d707594674ab21aaa6f865b229e2f51649367e83a8306c24c6b7725018b75b2a54b4fcd231ddfa5117dee28d19c8e3622d7d42c38fe78673b410256deca64e9df31abe67ad5506b484c38934faa0800229a52f4a3672bf63a5ee7ed3c0628552bd76d7aee0620f03598160f49dbaf96a0b530f4e77c3c2b5cf01c05af0ee0606fcf87817129da7c319eddf6e5cbf0fed908f6690a91da8680a9e846d36ef2f610b2b7caacddab8108a52bc5a729e95078118a750effdd027bd68ea60ccd298324299930658ac0b2b367dbdaeae1088570793de4f73f1af7d55a7bb85cc0d50898cd034e7ecc853ebe69729e7e8cf19cea562bca2f4e42a78146f990560a4aa1d95934ca27eebd9aadaaf05cc4dcbfae4f85ad3cf501aedb48b3863c15d1e644433fdf160ca97f3bf392bbc8eb5be0e66d1cffa22280ab39020e1f66af09245d908d7e189d02b2f64b418489af9d0ed1677aeac7d45c9fba125b61d986bc7bfe0bb6f68eb1cdfda077881acf577f67cdc85bcb000dab3537fecdefab9b439d6b90d53e74e958c7d3860fd175c75a14859c89b972c554f06ac9ae23e722abc4b9afd3abc36925938b7d267af56cee55e092632eb92623f2c4393e3e74631eced3c5bb5605f66520e1d7719571e88c9f599e93dd188548287a8be45efb6070cbc3916bb21191ae6bf58dd5bdf1c9449245d5e6aa5eb752fa2b1df3123167c27cb167f62e1b80b972407ed376a9be3121e64b873c4aba9dc07d0297c417fdf5798a8fa3df488d5b799eae490cdd4cd24d77d1e7f3d28b7d76f064126484f89d6ef0e217ceae253df77d4ae636ad0e7bdf67883c0a30b483a582ec50e9e52309cce10c8f9a389a9581a200d2d95bb69ddd678362a5568811f27c192870856551ee09616045300ff446f7f59c489adb7486a0dc6c1c59310e9121082b4edcaa64febca1833982c2bc8f9d5954174b148440e04d4222c62a42c447eccb047d4b4a58522e7da35160ed98d9c088ba44241870e6a9159765e03c674428dbdbff86476a9fa7301eb3a64850c85007d016e3f48d2f6be7538699043bf557643ae99f6975ee075d644348881694e3dd289daea79857feea4e1024a711066d0222fe26a784e63948196b1a709fab46b70c452818309299a1df56d1b0adc3d32a7a9c0785f6a5672f7c3b04d84d96637c3f39d3b0b75826e41b8322678758b4537ab57fbd04f561f90b87cd06a3f6e4b7ea1f810172d4358294a2d43c7c05e4862663ebe103a62a8c92e0e82510eeb4c54cab31f4687ba46c3d67eb64f5e9b70a6fa8f6c8329c748aab85867338b3944f8b46797b77c308f763703825e5b6dd15e13063bdcf7c44fc750f8c413e2a80117cff383d26800cfe61f529865523769f25471836acbac3d408c83848681653710a5bc99f93ba2cbef2c823f54b157862cb8835b064a1bb4beb58755c87d240411254139917a905c6b571c178f09c661d0ffc99a4728575ede525a0bc2e04a06526764dc173d80192031f9ca6a0358fd2a275d01aa60a5b622a2579d735b3bf78cfe337174a7ff5f5beb48b7532c59c49a6c04533363fc09d00ef9e1c90467b88b081f773f1fba2fbd4f5d408075fb4a51b414865760eb719c18b418cdd08acc6dd10f10e710cdf8e62d93ca0c368fcc1d4b0812bd1904943db30042e9f857b961c5233f85945c35dbc31c563587d13fc754c0ee02d5316b4dab60bf688eadf45c48bac206c465fd7c02c5310cab84c26139f0107ecd4aa642698ca603542c697714c17628fc926f11916e6fdec8c22b829893a64a64dd2de23712241664c95d4333703086e8a90d7938e0fd7ce26c992b3ed3b5c7c128550a5426369853183843d1d31fc0dd300fcdf33f973329d54f94cf3e81eb8be178394b1b8c431354a8b7e9fdab8a7a8323cc3e2bf686f35f1be6d4788eb7802bf2c2ba915f3fe5ce850f017440d2153ad2e00b4d2a3f997e596c6fcf542e12149386700433b8b7c5c88cf982dfdce2147b88021de0f13e7de79a39da6bb6601a2d726cbbb657a6cec199d023357f526fe9618fa5b180f6dbce95a6d1acf764e6a191d265075f29023411215978ac70e36ffefa3485462f2281a0c06670e13025ece9239f5365bda658ccd115ad1015100454f07c0ecd6f7dee0fcc491cbba34436a76ee6f3947a0d89fa000d7ea0e1d61a7458db722036ad7b8b7f120ae1ab523c1b9a45e95dbb1d8ff05302512d9fcb55d21118ce1576eddd4ffbd744dbcf1663a8a7307c9ee275edb3d827e5136210f5cff0756480fea219a4d690f7aff8f754595d75f3bcf7b5845ae52f39171176f3ddf4ecfa988616d7768ea86d1cd4ab91eeec1eeedeba47e1d7bb9ffaa0b89e3a25e2c545ae6d86596be159294ea1ccd8be9b8dab4b339de24b4474fa4850c249093ae94e8c612cadd1d288ae8d2ebaef2a97ee833b28a9ca1ddb934cebfff52f76d8f0affd52493435230ba68a25ec753b47233eaddaf6bc2f591549875d24d03e950ffdc4ddee9f14ddd0eda3264a23299a7514af30a309f52fdc2a2cfdcdd6b311623963935d1a14a7840a277fc68770b9a06d6e5a691edc826f76a0e3f623fe6712bb7a46d4910f42f67bdd377dc43ff11f5fa85f92b9f574d982d77f0a80bae99ac09ebd7a69917a9fa62b34f6da6c1c9f26cb92d6d756010445fb638b8807dceff10cd59863ba0d34f7043b8bb759890accf70956b8df26e2fc1807a3719f5587c81aeb5af1f2ff6c634150cc27b24529cdd2bf9689a498c1c6ad6609cf0616a46764ac06d4a0be810315e57632f37300e0d8b3180619fe1316e0c8e68163d98a4c9c4e3c5fd230c201e6371c633d303f35cd49ae37ad7a6caa6e9f20dcafe1e0b0c72a0e85e7568ca618566554ab7d5f37b78bef06d74b547ab19ca15ca7a0729822d7c215d43b23690796175dc0274b3d62099351005273d23be56b6816c7fdb89d55064520fafce6c2b56db8ed24ced8b8ed04020e0db806a55e81776766ff7b5012816dc708d42c8e7b8ef4c5d62f769bc79ae5da946e9d5fd4fdbb54566fc6b650d0ccb640e831ac0724ef72cd4e58313e04706b050429b94d7782657517c4b38a2b72ebef31db1c8759fd35c162b5b2b73c9d8ad87755afbe0d1081885a6fbae4f01ffe3b202e8ded147737eebd42000e0fb2c67123bbe791fc38c03997a3b7e34459323a1fa2a0c20bf1699f7cb70f410475e9223698b0217a5cb0569b7637f1704e7597468ddd40f2dd536ede0cc0cf82a8fc25cb532771ef40ecc2a53da25dfaa037d37dbae0ff23d89193f0f29ec0aded8241e34e6c12448a2606e2cfeb614414e2fdbae29baf8c938007f72dd355461607ef8c7b5649b5adcb6d1dace6e137ed2e808986de966d5e3a77ab6fb3db3a4b235a41473a181ac1508449ad16852e551dde64f35192d7088cca8f377650e7f8f4e5ed7c40ea61a7c77c393c33d7ea6e9713bed99bc79a2f7083ba16b80627759c625aa40f79946aa481182a9df3118a5d2554820a7077eca73e974c8b6b895d36eb15b8e8a8dacf39c1ea24552664557b790dcabae662dbf7ff49c41da7420d29ebd8a41e367baa3f2593d3a2a2d1f349e3a0fe8508f7d7610750dc28e619d9f980a5998d615a82a8b1edc74c37e0ade0d99e5b6cf967017c65cb7cd695b4fcc80cbc95e8948e8b4d9a066e0a0e2450ab7d83f0a64ee567835c1f4fbb693e7c369f09808b43729e89d9d8cdbc87e277e14eb71779ba5347440a1d4c5d9f5764002199ed5c8fb25ce36fbd74be5c60acd17f19dd4e84405900c8dd33706521172cc4dcbb56b8a09f535abe9fbe6d8375f92e980e2581aa506dcb94ebf2d256b9b009817b4bc31493304ad10d1574fa0d1ec035a0b49d139099842a67d9a69599c9525f365b5423a74f31d7319ab854e3c2db16d2bc0f90f21cc623a4cf63cace4bd521564a8eeed695f00f661ebd02b21b1d432e7026e02799edc647802f06820a0c9c96f5f9b0c18621d0d3c8ea22ad2caf408a979a3f55be011b13cf21380d83af29161671af935608d4bacf5075ccdac94171bacd70e06520b5947c888a2c2279e00aabb9dfe782c26817dcde61f074f37ab1cc798e47bbc6670c1672a1d1dced57a8c9e5474b79614f9cb59d5351f45d64c3e180d8bfbdf16d6c10376667c30beaa9526dcd9f891ea9fb70a936c71284b6002713b58cd23ddd19f87d0ee728f371eca5882731b05faea9c0f7daef437e25c420ceb203f32abacc24feb957816ceb04e180edbebd0fd759849db9de5a3d4ad363ece1befbf5e11f339f2af0ad8e859b2fc423cafc24fe586e7827bf7fb27d558cc2019d14256f402103875ecbb2e8ddd4c967e1d453ec91499a84a608900d6a21adacf3fb61fe9df3920e5437dc032d9860006626699bae2b4e0169d4e5b0e89d7e77fda7358361683c6735366dca00e0180ca85aa1114240fa3a8851a2349e2fafc57424c41c17856e68fc5c68109ce424ee9d88171baa021f5278b77d9343eccb214c57d267eb1d5db55031961aedcdf517c61de411bd25cabcafd643c5ea50961b1c1071ba81f36dd1e64caed67d8f3664e43f1d912e5174e3db21493f3e3ccdafc9578fc178bd06b6f05a7566ed5036cc0fb39b63fa34a6a285eea83faef3815d357ecd7b4f190cbeefa55009a332c09eb12353a431e415ff342d55edc29775ab5d2014a863317ba44a59a0e0556f4455151b42b5afec1edc4b57e11b8786242f727ce43743cbe016050b140fd810154e2d71e487482f855d2e9a1d902fbb04dd2172de79b625b4b2b142adf622d5c3d512c0a9dcfac505efbfbe6514c005d2547b03ff52d08304ca286c7a032612c7918cf179fc39670458147958bf4fe68742a955f97b244b4aa8ef698899f2cbac9c10ee9c50ae46f89a454238b779f065075e1d38be66abc93498ca06c12d2fee855084b89ecb69ed6835d8ad23ceaa259d70716833fd6235f5135cbc962a4ab5af53a02dbacaa09253c57d829f98731af01feae0dee6eb17fd0bfebdf2003176665468312a12582c810fabca65922df27714e6f683316d17f2cb3977a2cdec4db3cd5cca3dae7cbc18f87549cd9d6960a694fa308b57212c99e17987ca3b0567192875e136854c4b1a6c8bfd1d064c1ec111438518fe84787f042925f7a1abc2d027711d9e5d44c316f8c9059e8ac0ad0d667e4f982504a14dfb9449993a9f7a120f5d210c6a29a13338b52e2ed05436f8f673986a6994a1a061a96c4680d7e5e4a661ed603cf1e3a26c116afcfd03f36c70c398f0283ce0b5e298cbfd793eb2325c1dfe6e1b0f5bd798656bc59d8d1237be1e29ca04a5c69acba7098d9d1b5ee7295f57fd1e0d6c08da26709923ade6ae9a928ebe631c3b6493ba11aa5779722e9065c2324fab5858a24500fc816885b3266e5b81ae78b07cd7ebdccc047e5099e87b825188ae0adb1ce4dc17b07aeb309d75258f8982244115d8e71f5bf0d9309b4292c0159a02798a2509920a8c8a76c42e44879efecf51638d961e5930b88b41736668c386432c00864e762383f14e180e4ad30590a563559f3d801c7abd10e7672ec6838fd4ab3edb968155b8d439d4b8b503e5bd679630701192e6e2108d472048b4ff5f159b592eec37208a853febdb5fd32d76cc13423afdcc1fe3fad75169c30431dc7c1a56f45bd573f55756051543642554d3fe866079002a376e1aeaf8a8558c3a7cf197f2473a8d56c06bff08c3d262ff5bb76c0200e796d78c9ade09de062f3560fab698ed789e69cd3f032a9212f76eed57590ec3dcdba01de95d7801f40ed8ce1e6480fa0358bd898eb8b2d23a08c487f5fcae7b26b495cdc4ed1cb83a3adb6ae67672db08f1d8136c409cf94a719bb517985416932cbc89ba9ed5ec3accc04224ace5f7db838353cd0856d2856e9e0c9839ee8466114ac30206ae5fe13f5293b3ff109903da7437de9d9d10e783177135c53b826b40866c70b56e52375d3c98a0fc2953fdc2bfcf1c05d2e80837d82660aa2d07a92bc8ecc82c7cd9e413b552df94ce7b0c54f82a1bdf30bb602b541359c29f1719d89865a75dde100e2567d02bd22f238b5ef039e7213fae0858475ed334e7be706bb1d6bfbffbca5c1d5386a588483efa39a9d54362ee025b607e016356607143018f7cf4dccde114a4d50b584a75c1f1a5837de4d4a190c69eeefbe0084a68fd071c897036b7c469e1c6cbd920024a602d7767653c9304e1e57452b0ce02962ff04fd9dfbc19039e970c61814608ba3cf3ac4cb06ed853ef036318e08164fba8ad7c9c166a12b887558fa5e79bb6f80f1ca5d86fd1a55617221446df84c2e6925264362b1311d8076a413b45089cb7988eba5beeac0ed160272d317391a426de392c59fae1d632e00d4b8587e130edadaad3bf397327b5f25ee11481c66534ecc42cf96b3efbbd22b5269bf7b105a566a33dded63b57bfcef52f51ca48f7ea1c9acfba211c1995a40c24f40ae81eaf5b87c206ca219b0b79ab00873e6612c9092ad05dccff2796f9e3e5bd6fd7993d0f39efff693e8b9798540df8736fdbf8b359268a773791b677b9d3cde091182d1a04640a99f084616949335c385c2eaa583e66515b4d95b57d14ab8fe9c411353211cfcfd2302b430613d72205083a5da85cf7e676653abaf36f6e1ad4f70a29e13c11dea4b6c3b6be192e71b42e20ca98e753967dc10982504af5fcacedad4bf9d7aa07af7eaaf900220d5e76a877d9fb583157d74be350f67cc4c9f52d08587bb1c51f6d0e8f6ec027547c8f30275b40d3fef5c9dadec06955d6629a0eb848718bffbf8bb3d6ca0d5c97df8b1852070d20e7825852365c04e84d392dfd8b46b087e00d04bbbcf2f5573c1d821d00a568cc8e06e4cfeb6b493344662efff7a29358702fea78f1021b9d1c715c7d6a53ba7c64837e7b2a9745bd3ce95ad43b81ee426ac5785f51d2d0f02ce91cb4890089034f1568abe5b4f546b006cbcb09950428f1ee37a9abd03f3e5289f4c7415f942ff6ffd645d49ae6aef7f2fc570b1dbedbdebf4d7b8479dd2e384f6257c5638e548e7385038b667ca5f2863fc2d309aefb09212898ff53515046a9bd83afec2cff14568776dbae7334db2898d77806bc2c5add135670b9066ec0c508a74566b7886c4b9520a4cf5068fb09e1bd9b7c4ee181252646ee937edaeebd01c456c9fab0a224d43a37fe619f1c74c329437f1db22a5739d659a13ab17570e41a49e707126394b722ece244021d1e6f6083e4b3c7f740ff0191c0fb10d3f921db894954e9316d85c2a6710eb9c35f00aa1d086eb397466ea64c49ab0cd0f1879fbb19fbe1e3a60c3fcdf088fc26793415956516773b890c722784dc489f50b505ce8fb935e1f0aec8071780cd575edf60a55da06bb074be01350a1a70677a87a4764dd0f47bc84de607df742359265b9b799682fecd0dd94006145c9cfa915d5871d85fe14431135316f3eea08a2d5938196d4407d482f2a168551058880e29ff6e978429f065d597f957218180e1ddc1415ff48b047899f1be3472a7862a201dd36f20689ccac27d3384cc27e3dd85970c5244813372115557eef046a653d209118f957833c5fc792de23ce2048d9c167e23cf65d6d9ae65df388877dcf27a66c6c9fb803ee1374b867c09c9feb303d9c2a87966d341f6f9ea5aa618fd4a8df863f85174a94bdda7eed749d6a06fa7841d861b3d318992aa035c5c2a91bdfd4a730ab2ebb5b4e9913d6d320abe4bbefacba59d2eeab3535e30368d90718fd2c899dba237b56d331766148e87defe8e36a910da286f22a9fd9a2192c91999e5d6f134f1d0019a8a1d45c46b689dccb9edf300dc52f6825f0b5735993efc86ff4e048a506c89dbd7864d4266cf6b0ab55af1c26d03513d156e9eaf9ec51ba46e53c658ba2ecde5623013cc7df533e82658c0db27684125e7c34e482c2465a0b026f5d319b9cd157c682534b96d6067db0096468d0599b6722646ecee51d6fe24dd0d3a15a5b1645bd9a6cae2d87c1dd43f69c12e239a33d4d55a83e6f418789a879cc1fddec079d8f1c7f36c5cc6742824559553c2c8936e2a7a7a17b6c1ac18dfb261f44a57ab785864dde38be848ef485242ed57029f9de6b188be3200f3f86dabe38346e088febcbfe6ed1cb70b7f9b6dae38b3caf8b18d912de698b926228de787208fee49b8213a8bf2f456d5a50aee07bac2a1b153e30f462f8211d03724dc5a9d11f6eec206d5529cfc2682d80fc75859b490fdf459d7ec2901cd10941d8c92a146bf9cc11c8219088612a815ca8f7cd783808ceab40aa7639ab6bf287d71b0ae0665976a6b1ffbc82995d516cde84506b3c4226b44a3173266458dbf8d730c831b834fa32f123b42bc2409820f5486311cb5cd03b53959d315dece1eb9c53c4c75ff7c255266e0275e36c98cd7ca6699bd751ffd71eb5efd04f78f7ffad380be468647af61f34c559afd1bea1ce706e9ffb9e8b50133a83ff975c03e8d4bd494eab2d7033e8ecab8a4726377af9d3b565b6238891f421fb2f3b8df842ca60d6d9b5b6115f9ac243fa6e05f12a19af05ea222c1b73ad8bbf14e7d4d41ab55f701c02cdaaa4fdf810f78781c362fd888b2274fd973759ec3048f00e854d3bae5def1fb0fe7cdddc183eda8b0bfb3abca040085881ac41cc579f2cf19a88af9ffc58722e879f698e7e3e605c45458849d4746f3fa8d2b2e45a38f2affd85ac2fff0ae5c12225f20ecb5966645dadcb5c7876f222fa45e4e4585972fc1a5b79f50bf981a60a5b399f82301629afcea906e41eed00e48e8fa0f2d99051a7a269fdd90ef11179951dcd3505795f18408a1a03afe696f19eb15e959ecaf780f2715f42d672713fdabb58f3dc43cb73550723d766ffec0b1c44e2b606072fc7c3af81948694495ab5cdf1559de010e2ba410f96768a444fdac68352d588573325fdb2af5140c16da3d6709e02bff430d5adaed026fc7c803344b3762aad8de60ebe57ab8c2d2821af76c424adf5928c128e431600172ae544d8956507b55e97ffd96f565c87ee6e68d1c0575d47cffac5047e0fe741f16be3056ae82729742f787a1616904271c5c27065e2cf7a8952ef2cc1391b5a0cf4ddae988e00c375ca216d78afe745ae3aef089fb6a26be02ad7c246cb8b02c326d28344039714f2d98d36f5e8b194b106fa73856e467c72e0737f54fb1108ac19005e7aff7a4c73e5bc4fe5fa1058a5c2379ba36e046ec8f49100745e30935e41bfb8c3785698172a71aae069c9eafdc48315188aff326ca0c12c031cbc54b2d636a4b2bd29168c7ac9f0a63d8d08751fb0c6356bc1c03a67febcf72340581f2aae1b3684982d176c78b94a4f0f5e66b191434a8b7c3a6e08520e580e90beda78922913fe27f0823acd188777fd6df0a7fbcd695780880fcabf11f86b7552b9e96e61e57feb10fa39e222789239d3daf280336ac5d06b975c5de36db1959f8d74dac04b085aef19ef8a53d70b75abc2f4ecafe15a9a9978af2b20787ea35f746087130b299304fa98407d79a8c4c81a2c83d661c421cf9bd0b3fa4991e0880079bfbfe0416fbbe1d9c04902c95128f00f976d3e42adcf59b52c688ac488b847463fa5331bfc9c4ea4a7848f5adef4a5efc775df3533e9942b4e071835bc92d7080760ac83f32f40da382f775128e37f167e07314a528c23fb22dacb0d34d5f2df3c25b41623a1e2db5563421973c277ef4426ead00b58ba3ac0ce6ac6828b11c0da666bed69fd55d7c9286247d35bcca248939db66ec49681b7fc931d2b6a9f1f900329cda19afc167651a4d253e06f982a9cb823e3c376a7ce3851f4bc4b590dfdc1af82172f5852100f852eec3e3a5746cb78af7da9cdfda1880d368e81c3076952e414fbd4777253acf98a2a4fb1ced472ec25359d30c59fdca223e4ae7e5638a95f78eefd3b57453bd82cc312299f61705732f35a4600bcb6128c124adfbfe2ead73dea62b960dd2f8a95417187e9e2234fec45ce0341bea8b55442bc5ed7866f575a864b19597e6fec49cc64a279051afcdb39a65dc8ef282985a922171f71b750837d8bb101640f20bc5c5c4da787622d7c5b39b0d888293589862dfe1e6a1d7aa03222cc1d207f5906b88db0bb617b2e04918b8c9ca041a51c7fb0e12ba12875241cbda4705fbf3390e34600e1388e1d9b205eb7313be715a81f2b01ef24b0331b83c201b52f0e8b9812b7c5fb1ea192146e5e15f76a2c550e10386899ad7b3cfd6c32ba25de2a2bdd243e1e74eb2507de22506e78dff9b663fab4cbd41d9a35b345f02542543ee2d20dc5c8eee54473b43e4ed2a63696b25c8f087bd9c6ab4f4c1dfee9372912650237ecde7b1e2c605d48cd24ff762cb4918723514698a92da4dec0c3ccc3f1173ba1b1759a93fe85cee909ceb05c70f0ca8b5364d5d7d2e36bcd9b37c15449ba50fe2d5797758f3baaf8be7396f9a9184b60642f391bb45d7a663b7382f9d73f0d9049c2686aa300094a324dc3443de284575771857467b23847027ca5543a8fd5e4b4f56b21b405c78cb62a48c7dcb7672889722cf9732cce5e234a132b399457059f6e488f7fe0f220af891b81156e8702279a6bcb106d62807fdcf6aeda1768f8d3d9c3caaa06841c5edf99669e915a540c778bb63071afaddda2d51bc9541501bb351fceff008b003d2cf0a8bed9000b8dfcc5b45cca5523befd1b4d049a5e0756a94d80ffcc54c66fda94ec5f5e0008b8a6e24a1503f1fdae7610a52625abcbcbc4ec86d79af8aceb95945cb8bc5acc548121eeb8691d86192522f81b71c31819a91a348421cfff9ef7e9519da52f9f0c3a5d5226de661f1e3d4d57ae7005fba0415a14266ba4cf56850510938b3149f29c2baa8b8e67af22a7376a41d60d08cd7f1ca2727212f6beeaa6b0e1abd102132e451c48aa724d77aff74f9eb10e427b7f53498fc8825e8fdb95c1e2c0a3a011ff0c8a220926285b20b63ae86b2df47ef979c9664b32245f7654904b23a2de60eacd27729b27caeae994e0cad5b29fbb5a897a7862daf184bd63049df0cd223f569fdbce4f427aa365ca21b563cffce039785419225c351226fa8b9bf23827cf4444efabef1067801502e586435cd289b95314beb6b737dae2379149d064b7a57302d84baa8b7f94a97f6da9f7d4c4fb19049e9fe5b998ecab7d7d391d967d068f253f979e8435a3c11e22dab1ecda02529d26ec8481dfcb9f5c52c4b2bf1ea22be9e93b94d4f1118fe8505ae1ef5e285ba3a899851158ccdf4807111aab68b20aa759d701df0f166de1a4c04ff00ae34c3b59faad7b957ec18a3e6d30a1056b0e487d2b9db3599feebde9c0b9f21ad37a4c7395019395bee2d684aa3bcab16b1ee474fbccffa944babe500bf82c10309b80a9a68f5a988bd0671a5c072e0c1833932ddcf3ccf75815ca571c9415aa4000c81f505cea8eb6e4597cbe85b8f1bd6e828f9e0e075c2e376adb26e3d5c456c78367a27aba1d16d8e316a3f0a75d6c6f9ff1ea34c61dbf330f7e0ebdb775780527f257ebd09b5f0e334be69b6d3d34b1756554c4992462dc19df14bfc85d2c0266e2c666e5e172edd71c4fdb09adbc80e0652fdb0d89b1e5126de0d945ab51707931004d6033327b4bf112127fe39bec307ac58e1987f45aa205317c8ac3d21b7327edcaad70bc804d1dfc1bc84e72471402d66596b2bf2fb0795211cb94444b4a4cb9a6557830e1cc42be16d0534409213972ae0b1654cd67bf79a07e545b3789fc3da164b93adf1b586f871caeeeaab06d6c14d89227b2ee6148e6c6dc6a3521b1bef978f3c0a8a9e917143c67b95c779fc7eeebd4da642f13497e6fe07b995f7c8ab612a23e24c6315c5afb93e5b59d0d7959ddb86388d5bbc96cdf83853920d3e3a34a99fe33f3d831cfdb14b2f4bbdd5a000a3dac22284afef23dd41d6a50f2c8409e3ff01389c75c3b9a4cb29ae34850d5bac51c054d3f27eba251ba28fb1e2a089deab0be8f6d3dca0fd4909159b615589830077b818791a4dc243465dffb09d5824260bf6855341927355a6295f43e8b44cdc94f3179e5786e2cedf925e6d267ec1596f9d7f6fe58fd6f079ce4ce98330211546590ae918bb7188c88a2bb3a7a254e21d7657e958d85e911328dccb17165159980f8eb2189a9e26304da2d07dda69aae5e22fdc4d43cfee7ad36651145bb7e0606a24c6ff22e74720ee59480e306d73a6d3f8f6dac25e8bfb933a7c6a13eb67cd1d1a2da360e3a6b0da12efd847158eb48daa075cc43af3ba6566ef764f6be826f1ea255a82d8427ab19564a6c5f8bf77d7d652179e0040470f7995274748cababdfe304ce632ce29b2183cb5b2364bd62feb45ede7d5250e6c58f28556a44eae195132b36067fccc50879ee1cc33060ed6d1bc87917c5b64275de887a5679f9ca5008d55b978cd3a207f55c439738827e6d264f723849cac9790272ee1c47e3807a919b84d7deedafef25040db75156b9dfe3d3d96fe57eed7b6c25f0d10108b3ed63370845b63f04da46a78284dae62f01d66a8e09d32ac48c7c1a60c6f3cc0253644dc62e5fa950a5a611f4db5843fa3d4fe1fc510117310b565a0cda63a4259f269b15883764d2bf2bdca1c5982781b1e1bc4410d765c8b1f27fa3fd7517cf5f3d3c40eb6cc3514a4c86ec5adba0c188ec3adb698816dab6131a2e053cc55950ccf0f20281a440ec24a1bd761fbcd1ab1f66957c9d6ccacaf256d72686912f955c744b0983b594dcf0303507209763b12a6ac1319e45305acdc58e986cd834a25f623d9b7dfae9e5f4a7b6cb0c91bac7764648dac9bf5f2f0c45e99440bc7f0c60670c1d9b3a63740c3c89f68bc9e8da3d5956d7f7da9f8a3b51365954991a37177fffaccfe9ea7770bbc1680f2b2b865a02d23e08e300ece7fa23ca0fd2efdfd501cefd280c2104b905968ff3a86223f3a15b7530c9e9a1fe5b1cd52543e757e2cf7d18c8a13d95a90db5daf479e0157400feda2a4aa1bf8662aebb593a76c350a3569e30ef0884f7b3fbeabcd33d487d7960795b7d90430b4155f83e4791a72dfe1d9efc3456feab6a3013806b19eeddd4b12d815fc821bda0943e6f8af5cc29803aea5552b0485373869446caeeec05b82050d647b473760ddbce297a2361d032e91fac4b8264a056d7c6f8450e4d32d10fa6bd3112d440855edff97338c6634e07cce18d7edc4df32f3fe5bdc999a7f58d106c7775e35539d3ea87346e8cf22868da9fc3c1fb8b72f8145ce23d8d0bb93a39baf83e405f7dbf48762e6d2e5a4bf21dd204ac65eac5dd4f746173ea48bb210f1a7226f0bf48f6a3152a25135d18eff4eb9551d1633576605339c0419f9a744130ac8766747d024a55799f5d9e4b47bf5c0f722b9421fc2a8707f53d024fca0e3cf76ca910983b7e35513890450f037dd34e829c1ce92b721dc114d2e19ae4a8e2af1a80c27f79b3d6729cfe359f1d06953cfbca805a0932d9b92a44ac8ed96a27dc979ac8d4dc816797c2ab75943d5a0f68560543956888ec14acc3e0c472156c65c152d5f5a3dcee580894a4f984d7e11868ceafe6d2db4fdf118f789a54b936abf01f2ed4847698f9d7273ca536101279867b22e1a9dc122a08a6c1b64f184366f8b364be7dffc35f843dedd9dec6f55e4f9b28926d6730ef85e75f8c2da0f782b2b75f1feb8d5120413d73f6a217be21083252650c70b3099e558ffa4753ca50d7dfcb9ec083a9351629dfcb4d391d84e017cc12f42367845815832dfe9b18d39f34447af1c773e2ccec196375f8474c33a756a66c416ecb8e65e45b742e3071d8c09c463c52bdef46c26136b68d2b2618fb4cccf8bfa3c14dcbc336d7fd3e7fe9c97df61488ab88c32e590889f4fb52857783e0fcdd96db6019533e3eb0c1e18b014f0c5f578a9869d7ac0660e80e7c8b4aea4a622d7399452fc6c9f3724a758de670732dc0b5dd9d899562c0a0a46e80bed2e5bec6fd6bdffa5ced14b9384dc81892c39241a0bbbba867adbf61d910280f086d4850682615b86e444bda89159964d6040b63445fdc15f908f7b761b65287c6de979c9209395382afb40eac517c5a4b0571bbaca7ea5080717087f2a5c9e773fc1a6c9908580402a21abb2c701bdbb5dc69526f47f052824acb063167418b780951501dcdd32651316a853f4dde1089f6c01f1ae775e2525d03f7a0dc256113870383695cdb73c55496b2e53974bea635c5de21a5ea7d3ab5e4a0a93a4a60bffc9b12acc9727734161e85e94b552d4a9179c684a7717a9d55a0bf5cab358b303b54d7a51f123b813f15d286368a802d38987c138722dfc8da81cd01987dcdc296d6ce64973b5b7be529da7cc6b604a7ea57c9b9a772eb5fdcdfb7d0dd9e1b623631c3e0872c934a691ec8d0416780360e8ccac4730170ab77b426d7095c34248078ae265264fc3baed75a55d682eda53bddfa12dc33267d5d318f7a74ba6fd6e0e55b4f5e05402836d33d3dcd4aa3fc94e27919d718cd4c7c5208b80ed49079a33bacbe13bbe58389d6bfa0065b127257f6db0f4a873d597947a00e6f68fed2ec25fa87bfd8777cbb55d5f2476b7fee5ce83479d6609f66c4607a3ed27b9f977e963702766854812341a1b67a08cbd53dd5a0784bd7f2ba2cf6c98db474a1d25467d2f2cd9cdd29f82fbdb6f6e7a3bd1cfb5c314dba6751cdd51640ef1cde39fc6156f172f7b096a9ba3e37e5ec36185ca8be6f378fe246b7eec154d197f677a58a09bf693c40fb2f7896d10292d68d75da6cd5cbcbc181b1548f2146bab1018a90b636338dd55b54b4529ad0edf2d21e573415f9944dbfbca96e298d0f11345a82c3efdec8450ba861042177bbc344fbe4d3e35f48ae3cf36541e3e3f1187d545692b0c7cbaf1b0418c5af6eb3137cb01292078a1e6bd3662c6876392b8a2b077eac2d017f9cfc6edd1847aaad9c9ab98934ded14ecf4f121434d041e03bbb5f8c2bb8c5358cd496d3ba4fe2bf26c6d0707289fe0affc8c4c5891b1c2a603082dcba81f7849ccae2b43ad98a387c28e460bb5c1cbc42fb5378b254ffd85abc9ad6fcfcd7976ebb90cdd723ed91cf57062d012fe2b0990173841c06bf6543525a546435d41e5f0d7f9d8997c8a27db8b1b0951e22312f9c5aed556375b80475fade388951e2c0b5c6685c68e697dee6eed2db5036a27cf803b6642be367ae6ca48934537bd665e9f0de6953a1082e092c558c4b458f9b9886439b791293cb4f4a9e332af21e8832bedbc583f881d365ca9f36eec0f7326f6007bb42327f2eb298a44d3fbdaba3566da6c2964957f7711d1e36654a54dcc6eadced5a247d03943df4e0d1744a0a6cb03063a53a2cb4b2670d35055b9db5b3bef979729903d49710303240161a0de0ed3f1bd2c91d245e646995f7b9e11adfbd40529868a74082bf55b21864468b6be1939803f9862963abefe3dbb2598b112bcf36b3e94a51cc38d40624241510a6d4fa423fda8dfdd42721603df17a3c91ba52633c7233d13fff841a3fdff999381be75e37de547fa7b39d83b4a0e27f6cab1385bfeda025d9fe01a36e561bab0a79c84b18190c1036f5339218e7894a376f21e7e4669eb450509fc6aeb47557ea640bcdd9c99331b083188c0eac40efd910a25ce76af8b6474927c4b867e8401c4bc8c4352db826dac4562627bc162a3395d876a0b1ae6efbcf68a1162917b180e354a4dc0fcd0e9a9065725de0c7594bea99a41ddd3f6b9827179e19370067b5574c45b45e3364820d3b2d421088769a37590709640f0432bc423541bde7a055902e740947f8f8c181da0856f7a66421dd5336c8d427b87e76c19e085bd18edca9e8d1847a17e5e7ec8790c8d44a89192b34851c5b5f8c031206d0a9f2073ae73fc65561c7c361b2c634a6661fb1927b2d9ffd2d101d6942bc5fcc727e4b398551bc805c762b380d65e5c67e72414f6d5f24336ee093ac2c37a50ffb57ea5978ea593079524843ae441eb2687762a63aee18666250c4ba4e8da9882ed68d9b4af6f9b8b456311a149b822476265da580fadc1ba95f92802f16f06b5552a1ecd41815e2d3acfdba4642ab08f5fbe43a1b0ad48b66e2d3fe19d5fe0ae43d3cf502685520c5032993da5ad3ac4e33558e220e8517b406bfbbc893925d3800a1cd2f4be95823a3ff8f778d3be7f1a3bd3b42930aa23cdc9359f491e3e6c083e102f1e734ec96fafd338e90dda90166128504cc7ad07cb41a7ac1c318aa6ea72a4b12c83361311380361909eefcf0fe2a95c58ad33dda4a33764a7c687d4a49bf94c26f9e7fc5818602bfa850fac76529e3ac162272f55372d95b09a0545e76bab8caec0e9fecdc19246eb8c7bc1758ce3cf21e01bc35493b1cb58aceab85a62583c9a32f87606e1b8a3b804b7f2fe0eefab1afca48407af500f6378583b16290b6ef5d6aa9dab9591a2a821e145a73917715dd8beea3a094c12121e92a73d7fc88e9e737516dcf8e0f9668426ed24929497aa164f5437c05b4784fafd575af40130c0160579c988e19eec9ba38b6e8539af38aa59bd56adf274b8d278f3985bf879ef6635e20ec28cade306ef3b2a6a60fac50274be549c56c7b9da0552d7792f4ed98d87394eda86c63617902861d96503658a70017de31b99c4cf6de6657f0d349613145f3053dc7e65d1a22e38016e49234c7c20d595556f91bed7f3cb001a925d96c4e6032c8af8c716a342d34fe410027ad1d3a29c44aa615f436fa43c68c0c0ca24b7744fa77618414d6546eb5f375de88cedf28ffd8c624d599d72451a78ce88a56caedf523d4bced842b4acaf328bd821931534883111adc871b42fc0af67f5aa4f2913a454a0bafbf219e94d71961714fe0d4a6f57e1f70b69932c5118751da363e3b1a310299aa7407877e51839e4907ebf15f72c9f448995110a1c5db05c06c26fa2cf14e214a6ff07c3cf2100802c0c71002a96c98de8745369008834a06313fd5cbc8f1f65977afc9dbe2c117c7ab32d278e8d0b9177b894222228a2826a7eff8fcdbab72ba7522b537a3025acb7b56616a6e4312a8b6565bdf7e52a1bd090ac42bd8498b88c49072b130a3138a880836736fd2bc150d0f0c0ff9a02600bfdf68b3a77af43f728012b8e8b9dd8ba9049face273df6bde918477d058bf402edc13025f57ba87dfa4089971d96341aa14374f7cdf6f94b163ab6d71196670dc5308255a35511fc5149f1ebed3503a5b01f78ab95d550bc2c7f91d7a9b249cf71fc7fa88a40c7b391671886eb559a30317f967b617497aeef53a2a90d3860c3ec97303405f6520a6d58b46f9f966f6c5b1c85680039ca9d09268943de9e15197f275000962dca7041fb8e15fe8c7a079aa6082f7cac209a0a80de01797a35423e270656a7a5e0a5b36a003da288b660391e7a76250d3dd1de6bc15d4501d0414b98b8eb8991a00f69a84936b6ce4d80f9e56c66c7cab06e8269ab37f53b2e4d3626213e0fe2f8debb8f68e97f8fe3006485724d178c8571f1231da5e706ad80b54e75d2046bd46354e11298e329ce33358685874dff1f106f79ee3906c8d00796f0181536e37e2f722de54ffeb7b22ca11faf8e99115f2ae03b87838d8a4f236da77c347cf6827afa2a509a48ea87ed5c3fd3a5427acc31f4a0348b300aaec335bc9bc318094a93788582923c088ca4ef7d1762a2a6c559ed4793fe10b667943f4f8e2c2fee3f57111e69a193e4a45e20900d560c80ceb4d12bf870f905e59554147288afba7a39d7d4390d5c6fd5006f816dab6b749dcdc7d3e3718e5ed1e375b8c55168d17bb39eef6452832bfa28003d516f1cb54522bbb6c63a3ed2563ff07056d09c234ca40d05420401e73f12a67d565772c0a056bffd077b24522b30480a8fce9095d7784850694911483b5c9fa199a81694b9faa37fca7136300f8976600bf24bb789604b56813d944a6dd756d7537429bcdade288e70c2ffb416cc38b68e2945427fc8063a8b35800f299a0f0ad18dc4417810ea851fb43d86928a41f49ed44e93f85d5034621e24550df4ae1c19ab5ef62e938a020b33b7246b6f920e55482ac3ffd8364d6e5c624e2a8353c34ee7637240a7670e3c6abf1e63ddf656ff48fe64d0351c22dbaeb5d91905695bb60448ce3a27b5a044df1ecb0bc96d67af2694594d629a4eb854730b174c8bbf7c94f22d462d35abc2ba16a93de7e2b1927f645cdfba7e327d4f94cd867e681910f9b6375e5bdcafe900264a1b4c0f177d37c7bee2106cc35d07d2d4caea86dbc1a6e8b6319db3737fc5c2e7b5b5e93e86ddccc41f9d3b906e2387c988cc6670029d546fe120f24e22ea2abcc05363c1cbda7c3b7d8fb7b13132bf5b668ba41b2c14357636f3c547fefa26bf2436c2a9672236cdc2e7563bf376a0a0f4793fa7947b6778227456a10cb7e63a834372675c898f71183e3aa3aecb1aa9c73e28c0fa896c08294eb12426002bc71a4db3d2f72bce46cfe2895a5c43a091062de4a8955c06d49de3974ee14ea3ce830e94820aad598609444a978268ee394b8e4e419ce0a4699ade57b02be4f0c111a2a47397f58e977c365ac1396ad9bc5a317d4c162fb7f49ca327ab7015655415863a79dcf2e7c073c8173504466cea9fd5ec4263e95ed093473300110b0903a1232bc94199cc2435f77beeaab801dab7007a3255562554d0b7fcf91ed489da471a05fe9319a18fa8663fdd623e7dda146b0fb7c005b73d87c05b1ce64e7da823b0eec3463dd4bab67e8ddaaff0a42c4e18b6714bff9a0c4b75004bf965ad0d7237ceeea414260624c847d632a5ec9902016d12afe001f4f3e477d521bad755a2e44ac38e2d829fbcf3602d6c85f050611bf3f02c7e14c854ec22ef92b15d19330b28ae3f4d869113bceff3858fa96ac27399393edfd56a722f4daf80cf9f5c68f02f13aacc521e13b1e5a58790c622bc520c26421f06940fb7b3e44e142ab1f4e36e5af83e7672e0c2b56641abcabe6b90c7672fc225d8073901d8769a26bebc21a62bae5a1d6d45e474fec564fbe59cdaaeb82713e3b94830e4a379429018f802fa5d3058dad6913b2d63cdce1cef5bf23d9a59f9ab6882ec3eb065291a48d7f44ea26a28f28d19847b4d0826f2dc04a76a86642f9a2b1bb3dbf464eb2f8afb4a7aa59b820bba62a8aad58fb5b4e4df3c8f4655a1d1ffc56c20e7949473808ae3b10c0e9d3ca754e3be3aa5eec9d4acd57992c53a29521f8db284494e31fbf75c6038a20f924f0f1958462d73c8d5b0528c530d7f0fc936259cd3dd7b0c4fce23373549597583eea65d2e2cd47703c3df2633496ddefaf51f5b01a29b8cbfbac3accba2745d521385f7f0fa14a18d25884f56a2cdcc908e5459bcfa42637c7d77f43a198ddb59c0d592b83a704ea5b48d63c01cf87e2534df332323d25101adeec2ec35964cada90460ef3cd38de85e645e22f5ca1fc7cf62b8fd8d85627c56fc9010a16efa1a3030ee8ca9c934aa93fd45c69868fbc225c39bf4b257434e1a8cfad9c7a29fc50ee1524b48b058404fc0b8a648e466fe54b147c70ea3bb05f2f3492f72a17d933f5c7c372302f56dbfdad8f97827248d01db6034aa092b61c81bc8b62fd34d3f7d908cbf9835b35bb36bbc4354d599fefa9ef7990691317e111742a77e5bfa44d40da52320ec1faaf51a816bc94b1202ce2e95a261407df8b31d4e96e1def80afc88075515003b82088e2cfc3effe39698e4276bf5600d4bf1bf87b1355570d61c95c9528e54b96f93c286b1aefad4d0b4a668cee03abb7deef25bfe84b10bdac2ce4930f800177ce5fe0a96ca060e05d50ebc4b69822a6fd72d0a42593521e1c1de286bed1eea8844e51954d81ca6ffc2ad9b002ffc908103da6360d8f6ec08965e31945c666ef55f8bf05c8de3639eaabb364a9902663511c435c3137b6dad6369e3b47ff9942fee17caa4f9573e89d8cec5d7c8c2f755203632225f6dfeabb2c1c5a6d89c42fcb12f90b84647c80b5be1dfb17b95f5085fc2542741881ba25c8391373c88dc99ecbbcc38ffcba8a0ec96be3a72baa7c9e533994d14953b5eef3a2826862ccf599557876e6a6ea611e0acf6a14243dfac5ffda375c44b2034ef395fc0fe8b612b766adb16f8f73b9ce26bd0d275962a7dcad77c6e89423cf0e47012a0824b8bbd6541e69d35c395234f5c9570e93793468945ca82ae9ca3e92dcbad1359f73616ac68841963d3d8d5a54bdcc3b58360402611bb2d33423be64c6beffc080d4bbd688495d8351113d3b963474db561029c7e10a3eda1d6aee4d0f1cac2b7ed911cd6ef33408e402f2b60c178ea484459f5f60b8b08373837859d2688d4080e248cb11d0797a3fba7504384bf845f44e15d64bd6f0a8ea0c8e5fe1567968a298d477f030f03d5781458613757990a2c0ad4cec9dcd6e9f9ab777929e298d2dca82342aeebc210c80e076cf3aa6e76c614f5aa834a78748a0efbd16ad98efa785187ac63c0e50889df708614249e47a987d7724afe268f142f134b7ca337834cd750609faa33ae77d942358727d9fffe93d9f8d3282fb77e38f6487fddf1f7ca003c5c9fdc5ab4b190241635802834a4b5e29b3c13a848ecc0fa2136910a17f957ea0ce898603d2295f47b1348830cce9d0e1bfe3e57a6b8ebc297db5f21b1986a29d069423ae884b67e0bc86139d3174935fcc25b4635df213ee7af73c55ec3e70a552284cea31555420b38d6603a784442a27c4c10852ca33eb20cc09f800ca78aebb83c554c11617f79c821b02c5161f8d64a830f258eebc703a23c49f4a889de7e7014acd96434ea5f7a93b0363066339e32490daac4eacb630fa3cdf87aa464386895b724ced0a8e2c6b9e21f67df9fd0ca8c7d3d9d8192971cc069c67a6ef8d2afe3b56a7a1a4dcf9c01a1b819156e594e8413109b859a8b4efe66a3c1be98766d25635f8d2a7f5be6dfe96dfd8fb73fcfbeac475b0ea7144ba9bc28e8ed6b9ae658e73b8e1b3c78b62fbbcab32f2a9769220929ef75d1ab4f0589e522bbe19fd182ab3294dcfd0434122be82820931515bd32c40a01bddd36d61fec6fb6aeae3d4ac291edfd723b41e5cb0b6209956f70e88962f27a26e6929b408fc299cd0e24a2ee16dfec29d331bdaabb7455a687cd32dd72fe6bfd6f5767e98daab52a0aab816541ad6181e498da31292b78c84295465473a31f0b6fad91de2bb63379619fbc62e124ffa0b27540b08dd73623ac0e14892a60f6529fa4f30b8899fb580491c7092d5e923e960a17ea73d4e00b82fbba3fa4750488b7394949b7a409a7737c3ba4b20fc028dff63918f8f0f7ac3ba346e771f9af6f27e9252dd91744324570440ab4f6c8ac5e4df71fc3d4e0230e252d00ecba0a06f1b8fece78c6a6dcc05d2f9aa6e8454f5b981e68e48b6daae9119a9e0e5c70bd471d179caba4dd86f1b64c0d386a6f56c0bd4cbc097342c85b613697565648c724b0f8b4b9cc2530885853c1dd80b937f0fb519c0155c4b24ff0a48b7c13a4f87ca5871435ab214018eddb01a7eba754f00cfeba439d97663b17666e613ae4be0fa2188454b03a71365a19a26ad25415ff68d0dd86e189a01c9da313c1734869da0a9886dffa8354db11302e7a59b0f9c3c2c53a1c025c186832645780d8deb9337feff5a0048fa8995660488a29bc9c9e8975bb2de13b4ea5de602339f79ffaa564c390e07ded715e91a83b56841521118c34e355932e103e668b16c5f67fae60179de53414fb1acbfa88a044dc39e750ae5d10b6869138ccdaee4d5568f4666c910628119a3405267bda6db5fdd4646c571acf0420ad8a059dc3bf3f16e138df124cf493e2c6e39af269703288731ebc2edf60c3722d18a4c9681f88703f4d0515f1d56b6bf6bcfef286e16b64dd5f12531ad451835e513a748e747ae7c0a153a679a1a671f666000e5d0f494b4c908125d3256dcacb7b483c58ef4b22ee557736de522ef30a101ada73de2a4f51cc462494a352d0cf756635267fd7d3117a5df9b9c57188300e37d915885745e587fc71775ebfe45f5633c3d13308d29d6d0be57becc4b105b4c6ddace1e6f7be18fb80fb73bc29764b945264629a6489aa25bfc41fcd4b1c48e2f1f4c71c92d0a7443ff81b0202519232da8a10a2c27fc6b9d6a309211158829ca683daeebedfe31cb853f37be0f9867be8eba53e4a3232b1c9a875aa87003affc74ffb247aeb1370d399a80a67428274694b54a24934bdf334110d892a96dcaedacca11d69547690b6201e27ffd61c3e94a84bc7b300d7535b76fd83b4e010876680560720bf77f5fcd0a66d2c7076095a9a48ca9eec10f7c171bda1698603935a0ecdcc49764b272c5efe8b815dacc24a6526b70a91b93eb99a19fcc03aa10b5e5effb2a9ef3cc2ca22265d4df911259e596058761d973a979cc7e647f94d92ec33ec3a1d48cd04648a82e12c4e382297221a2573041c6e987ab4e1574fff170594342124ee7018aada9d8225eba92bf4caee4286d84a90bcdaf8f49e25d41662edb36a01200927b26e0542004eb6ad942b977e298adf11520a63ef90cc51b7917eb93d3807b5a48277f1cc53c772d3295ca1cee993fadbb45785a3a29ae2f165dc4c636d25ccf558f8ca5ef728abde2c4279f1debb90a88f247ff6acee2851c4755f357f7d36a2e403ab03f60384be3e8d4ce310d0c5f8db26e6346bc5852ea8bfb64e850c9a3b19e1d60f17c8aaba5b5c726fd195a572ea52f9b430cd7b87f7c286a5a7fbd6b132f2f935ca1031211a3c6e001ddb2d381df28b9c7628f6b8ed6239fc3893b04d075a73d9bfb53dfcf2cc2805d219dcbb4a2f7def81791c57e0e32c9eaafb8470d75ebcb04643bcacab8d2afda9a90a5102c7acd2d88ae5efff0670128d870119e98aa547305d547611385503e5401ba62fcf6c09e411f20ee4e3d0aba2fd85bb0a537a8aa889b5220ba5e8dad5dceecc6c9f8d6642d76917df89dea3360c422ee67130a5037c58661aedcfc0af887ee61dfc95612822764866a71bb1062ab06739e8858f69e1d7fb0870e4dfccb7b078d4427c1a42afc378253084aed23890d8e5c47fcde2e28ef2e3138564fb4ed16b0d073e4fd2ed50db1b50c7b5bd49226df87ebea391948675e0b4d42f502b821afe8484f2ef9514592eadff133b3db5517f366fa3220d52fa413a6d773f2ab6dce70c05d3b6fc21c7ce006ec6fd1be26670d60625fdbca9166cdd0d84c158a98423c39fa1441b83130b03e36b085cc076f5891920e2a152f28a652b5a6b60aae8169ffc97c600265480e1bab457ce7bb7f6056c0085db4d6805aa37067bac1faf033c2afd1bf14413f123d1c6d2cebfb9ae77824078b01c61a0f368e78322def85f118e0e84577a8c4ac7adf85a07bebc90d573d903f835c8ab9fc394dfe335b676f61b09e4974183e4ad6648b6541ea5ed2d44bb4d1499e9f59bab20f53226ab490a7029f73540cdf5ec7555dddb2340a48d69e786ebfb9ed6bcc8a989469d88dca0badc3f383582d7278ffd1fc512fa0883866a980a746b3015b4c590ac2c46fae735f597580992519cec774930365cf9d95c9d7f325482ba8f633035ebac4686f157d49f134b0e17b55511a8d28f3dd7996c27b602bf124d977bb6f84418657b4400dad098cac696b5e6ac76d5adf03f51fcbc5127f2043b56804ad8005ca151a0468ab9dffbe903d97832074b9df09e164dc4f104aaa55d21a67b934fd638e5c2db35ca0653e51627f757bd800ce20e67710566e60107dc9230df064e2eb71c78b87dde605b450f475888adb44acc97643b54cdb1a86a443746a0fe1ac9fd426303eac986ab3c4dcdde0181c64f30851ed708b86f6bd3793903d19721e97c96b29318cd90a3c539dd4634b8b8c01156ecc2388071ded764086550726a134967b1337bbbf0b40c235df5c290495252be8f2fc231a236d4a452ba16114f92b02774e7bda4784b2c3243b3ee55460f9769337cd284b9d959620d54745e997f68baf6de6616d16639ebdcc27a15d3462b29f50bff50989514b16c430541d5a7bf04c890fcb58add2d6936eb850da9ffe43e39892403cd0783c542bcd8a54a3078b365cda1b00fc7136b1f0bfa8915b4b014b77ee6dd2814f56ebb39e6f58d60e7cc1d5b4e25e5e46526d488d72ea02656beb26cbf1d92f9117b8a7006a30dfb26776ddcb8426cc12ecddb590a0905f275516e53d87961311a1ef3fc3589b2f2a80f671b69a2c7138f4657e6f0954cf1a9f941286e8af03541907611426694a4ac364e0e4cfd9da3af279d834b126f1b03ffbbde4345f1ae391271ebaab74bc78b0317b376a4eae2a53220176bcdc8270e08a7c05124502aec1a5aca80d9c31403c4b9145d9a0826f925787e04274c42572942caa20517420cb547a872da3fd7efdec22cc5574ab95e6ad1bcbeff3b09b8aab5f8693d894af09413e8f8012b3ff1534bb8d1c7809e91b997cfb5e14a95ce5a5edf7a134ff5934307f507cb11c3b550f9b62748b756d3cc29b195657fceae414467655c76b19e00066143b4507342a52a7adff99dde59d7861f9254f76053d0c12090a848998ba64debfe3eca790589f0cba3d125c8a35da29640c03ff077213975a0c9973264ec088abd23ebf409fed38801b39699e8b8547231c3fcbc06a14bb61fff4d8f8c16c863dc09f2ede6a72422b8bcf4dd0c3f71434e58b56ed740278f6db6f2dd6a09afce3809a010561de82d13afd3d3d7808487100f2a8882be481cfe0ea62cf0402879406e9573809ecbbb9e260dc82c3ee99213a901bf926023c4780ea4bf48499d22f2bfe225291917941de1789b047ef2bb7d011c38ad5fffd565a03e8079a4eed44e897cbcc45560b66755f4f0da68b44496dc1557de99f18ddeef8f754134fb6cffc4aa41364bea933726d8079014b4bac2ea820cbaa377f36f95067e3fe53165fd1787e1b7bcc4827071d8cbe5d235f50c51a4d8e56fd0ec03e6ceb78d26f427d45f4ec78f2caca868dc84f7825daae224f1ed7d06c9e71bdb885d67d8e11925d3a49d599204f9d9ed72aaff7238ef901c4549db3de96524402388dd83b00e440f8a60acf4d4984ec5ac8f9dc72a2b766e8ad98232ceffa678cbed474c04c912e26ff0b8a6604896320f07dcab5588253d3d5f2f129c818f818947e00da8c8d1cfc8748b46fb65603edcb10b4d7e3366e4ff8081fcfbfbb31130b6bcf8fff5dd05e03a06a89bba812bd81d0ecac1eced5b4a18eee37e90532ec0045bc50650ad1ba55ed8d42a801225acd14d174e1df7bb6d1e6850ee2bf59044441b7fd13ee307d88de75118e78124cb0a1c41b6c80e0c7c448b92cad39711ea5ed4390f45db7d94a44535160c3f0439f4db4da60a123f3fca83cf131c62a0aaa13e9c7005a00503b5f275d7a68015e7a993f7e8f855c06ff91aed9e9cff37d47949498e9acbcce68513551dade192023f81e795267f8f5e45957e2c2241e0d6ae7c6723f11e6e0044fc9342d56ab802318d50db72dd70db7b18194c91a8737d8b1d24bfc7b046d961cc85831ca23be357e80af01cc220e6bf3970da80bf2a9efd1be724754db31555eef54bf635f6c7949933033fff5f85177cd23f28cbbe09846f302a4479fe33ea3d1d82c111e7027d37088aabec14b44ed00c8697abcdb58239d2b6f4683be1fcd4f181483d3c08d1bfd7c1f7e8bef3025b048a410388464fbbb0bf09aa4cfd163461e1d1921fcd6fbd91af8426a81e51ab8c366bf93817d790397a4e7c57fb54ca0aad6efd821745f5a2cce6628a01dd784bafafea05e9a979670768b784232c0979109a1b49e9ebb1231a93c991dd780b0dad87f7806d15ca6f07e75cfcd38b7c3e448c8ef4fcca1d62072a104a0010b751d41c357de850e27df9b37a76a988244ab0fec7a8dcd20cebf38e9f20aa004b67d4c74fbe8daf65dcf994b3eeffdce481c6515de9804db899fcec3633c4fdfb5abf160f2e6f1d85c371cce7fa82137c7d3121e13083daa00c8c3031293c67eb260e1cf3cdd2c95fac3976efb9b6a2ef56d152b47fca38c1e351326c62e227727e570d33c0670051da45b9cc35647e378f9713fce95bd4b4534247d8e31d8bdab4225eb19350880e08689817d6497e950a9767a08b35ced6444df4db2d9c09018ec5a55699c4013466f84ff7a4550ef388de3cc3e9cdf1e8b417d6c519859ca3b90c36f4bc1853b33838f97561abc58c3789b27b40efcc48bff223f0a0894149184c61feff88599f2934fe7b3f08df598b6805fdf647f386fe27ebc58decc90421454b84c8457d7a7770a106fcbee5d4a4c174a0065628a8849548427d00f6b2ae2a5336de992aca474be7a0806d8de31996d268e75fea284af0f9885faae680e7e6c5d3d5288882e9cbb65892a0e467810beb2af84ec1bedebb20299e9b082df11d395e77801bccf08d7978f731bc3ea10b0db7f0dd4d3046294f3e5fc31416010d40d976c946e9f7ef1f3f84fba087a72104148b0fbc6a8cfa8ea097a0ac335067d8779b68ef34031ceab2a22e1143feb6e2ee3ef5e2f15911c896fe609b0f234f9a926a836ec296068a1e6b11f0cddd519b574221b808401b31778ba2b4d1e44d72c233236e62c7dd12a578f474a22505534d1d80fd735b440914787344eb68ffc05beb36aaa803c1e3aab89d7842e835b7da5896e1ea0010961241e97fe0ab17abcdd511cc0eab9d947a60eadc6a725f49fec52386f0a782be80508b97aaf22fb8f636246ad839905a76cc800096b6cb11629e543b26c45002d283e53518882ae8fcceb3a69dd1d4fbfafc73ce6c0d91693a8e037b586c48e7f031156952a3c0162ac70b9c95c1a03275b5628fb98187d96da5fd2ef3c6cdff8490363c92f713b76cfcafb120489c3ae775e087843ede81ce272dbc29b31955ec02514cc6601564dbf06bc66d60756009e5faff041ef3e9350a86e61c08357cf4a57c8cb84051eb6d7e4f18a0db24d886eda2e302d29216a2d209a6208533fa3db7bee8b8fd18139b06f11435535af2774fc65dcbb172aef2ec0d8de71570df8bee830cf3771bb29978e2b39b9d662e23e22a01c6a2ce9a2d7161967885bfca98277753d01db0016ede4d69c9f820b62a4063eb21dd76a83db21fbc3680ccad76e2a7b0c870e0630685f34c4be69f9d53cce7a52b36661b436b54db3e8ae1b3a7a81f0e02a74d88e3d906b3af81fecba4fc59bcdb5f2b5fa4094215a34560a3c4690d5ea39cf7bef33d587423099bc9326e646af4a9475381b8e3ffb48a48247779073203a5ddc6ba3cb83a0934d57b500a5b57e195116afcb60e9057c857e44d3ce4df13fb5af8f2971ab72a84479c227b7f7bd918e5002a3ce7cbed98a508dfe3c61592b13640c55f99a172def0a87f02859f9dfebf6db3eb634b227f501ae1d458a024d8de800e8a73285ca6867d529eed167263c942bb2c408b2cb7a475055121a3251faf20a4761493f8a9270153c2481d9802918833a42faa97632f85d11ec0e651f1f8f4608883894c406a178687431f5445200f3b4eea2ab999c7261a03cfb5ab4342f6a628dd57c9fc6b7ed13f2f66472c93cf697f6f5419857993f93f5e5ce62f144833d359d0b82110b0759fedc13e5eee899656b612e3198aaed53770747331a97514042a4fe9e1b49a1020e2c67cb5d5677e95c73f9852456a35095884d51de9a977bebd03ec2e633422b97c8c90647e888df5beb809167ef7edbcf199a0d687b274c148de729d40a63061eaa4d5b3402c61160f777f791e007ab2d709567f5f43bbed895a2b876ce6bb9233682e633b305396afb74581ef1b3523d07a68aed6e8d772aca2acc6d065d592af2f4b126aaa45c057afd5e93e7017a3da908a681a8587744243581df1f929b4038db5bc628e17541e7f27aa07be34d81f62c57da31c4c47969be24cf2521228413334c8450b697890c28bd5cbcce48170dc580c8591d9a73a6b24b45bf0f70c4dc1f61ca125522039093a6c2c574206ee9328331d889121248f499cb5fd41138d3cacd958ac4d0023dad32c17a8b1ae6750db39094a7fd2bdd6efbf7ed01a2876007572cc7789a0311e73c8f53b4f1e3bb101df14ebd7a5c514e8365e0cf9e34bd217315f2e966fe480a799373c591da1fc9705a633d9fa8c26f3a3f902488327aefc4b2ec11457ade2a04c869e7a1e609007b3e82eb30590f1b43676608ae0f628199a8e97a8b3d0b9b7a03edbdad382839ecb18071e54d410cd986003a82cbcd62cc001e8f83381636d092d352369d194d473814d8339f7170e469572dc515089d249c5dcb4306de4a007ddacb824fbf974edd06e96c377f040ae5f608f082c9339df33f82ca7fce8eb8adc83ee9e819d92cf0c1c45675a7cd4ff433a9dfa3b5f7464c9f8ed0b487492fb26d5599b91b43277599ec4382900bc60b2cca75ddf43992bbee9eace2b6e698ef3c4d4fffb320cb56872b75b966c0eaac386660e7ef7d107a6ddcbb176dcfa6125a3a0f64db92892f57b0ef5a579213f069ff782497e4896bf823c46c3be7c0e0b62f9aa01f2b74e1edf5012c1b8b575e9e899e3bffef9c10e295fb9288a968e6c06f9cb3faeb8c239dfb509b9c1901d41558ccb4970bf33e887d2dfeb876b416bb6d29947ec5266866fb2a80105bcf7f92c3a9675f987efe9f7d83b58a733890fcbfb0033885e4bdbc547800995283dd6a4dba200151e8cfb0cf88a165de58bb07ed3023ae7912ca0b25d7ebef359c11adc186eaf4978304f4550e2f41cb70ebdce87fd45554400875f188a9f9f03bdb4236deb82e03fca62a45d934f6b890cefc4e01e1794233a81d1108241dcd2d1100d662d4884604703620b3eebd0a7a39c5f8819c1553013137ceb760e35aa7304a024e2a2a56bc4a7831488fc8349585d152e58b32714442adebf2592434b6609098434fc77cf6145862c0812e796fa1d8a570b0fe292fe8a986007a7f665e903bfed3d7653a4d0e5b8ea3cd6ee980029a6f136dc8a7acc0c895a8f67d37d39ee3390aee8c4cd7dc907e47578de96cf87affa41e63c0bc5daaaaacfae5b05c19bb36d545ff615dc681ce416ae69ae59c10ae746d9de30ceded9503cbdef4fcb3044fd8085c6a6e850adedb0c58b83f528fa65eac0787cc9b0a28c4717fa020e650608ea55d930bca541101d4ebeec384cf39764ec9b01ac1e2e20f0881b034fdca6fe122286f5b1e483cf0ea68ef6343b85de4b583ac17dcf63d88de31b70f21a14fd6409f8b5b0bb31e421229290179e18869e5395fa1b337cd6211a03199b84dd5f8491a972d48d07f74a2b14aa830698ec05f7b975110367c59bf37ad8fde445682863784f5f7a8fafac3dfa20fdc71bde3ef0795d33ec0edcd8b1d0a8dadbed988f9306592a6770b1fd7f9b297e6ac438661a2bd8b6ef3d9c6d7de2bfa8a7e4960607111acd48c54e5555b861a6bd0513595a173f7905ea391ec2e70273de9ba7cb397803799278b9becd808e87afbe1e25dffa629efed1a104c8b9526ec1cf9853014d08b6e7aab1b8eacd7bea8ab79a92b6a3960c74acb52747b930f60de61abeac13067109becb4b5f0ed3fe70a2885c89b5eb0a75ff046b19ea1fa098a74d0756a83e5f1644c650858b1762e5c0c3f1080c11e24da84f16028022091a8be8c3d2194488a2c336136c74ef92b582f1f87ccb2016389e8ec3202f0bbd05508574f0f3a75c4b26340acdf5a24859eb79c89f22019d2f30636c87a2a05cea60378f537e399775ff6113c5ea13a848c11b78c37db4b5b2c973e90d2517529b5d176002fa35fd47e522b781023618d5c526ab660aafb48bd541a33e507578aa0e0b76c7c1054843310c8c16138d93812715060e938114dab2deaee27ee2fc7f150cab2500336b9074e6cf586d25f757c9e592f081d1a4326d31cbd94f559e32f371d2b3a9c1cb8e0390d034efffb7d254046fe28c819e08487fd125fa407dfc1c6bc6194fb4522f2dc5631ea5ba3935431202ec6b7717392418fb955d35b7a89c6b18e0ddd85097e54f71a7483f7c88b2f45231217830229f99caeb034efa1d5c850dbd381377dc1110729a432fe76f8d750c9ff11172c2d295ad8b8996ce814cb548cfd7232beb20fea56339fc2f15d6a3fef57183c64354bdebe81cb5420182a3bc4ff29b88ece995c84d9fbd847611e536d9f6c39d81c46755cbe7c376e88f6a105a9a5579a001f5dd3408eebcec8b9d705409e28909304d2a0ac945ca2bf7cd549791dcb764175f2ee76d40e72eb980ac5958991080fa7cb119273b2a3de86238dd69f8e4c8c39ca38e87bbac4df76a68102a784fd918b183145a221e388370a2c7de9987adf4df0a685b2c786d56bcca78a87a934b0a3f158fb9792adce12470f233eb8a3b0dec25981306856db25053f23c4349b49a47c9127fe1f0fb839aa0fbf88a8333cabf8cc59d35632369b4578502ba5ffa7196973e50d6a7c6f7fe30f505b4c2973aba03aa23cde781c8acad76f4bbf852d641d6165e69c0e098c63029725231ddec766647cc6b9608e73327a1ac084fd6a8426d15f813e947c437b0c07a6a291b20241d6f15993a345c108ce09b8979b11422b3b24a2888238563f600d3f3f49f1f7c6791e4dc8473a55ed9b8ae1e6c0c538f87ec082ff42d9715a78d7d5eb2c09484b45a17ae42bb066f7c6d9b4eb430b1a60647c88371b3e555f4c7c966107d2ee6984c2e995da028562265a8e832a5d02e5d7a21505cd7750538d9de437c01a98cf70d9ddac015a9309308acc9083ff12b435af5efa0a188610851b5f9e00c88218dea21743f5f5188228a1dd62b7392bbd698f8b664fc88cd138e043414fe073e3d24c4651a66fd2e3eff0177a53492d643494b865029ca87475ae4506e97dff34b6ce79621cc298fc28410af6a4b224ef07e738843188a0b1b9e213f29fbfd67f77d4eda41985801490e552f1a426e115b9c5978cb9265031cefec37d7333c18c1ef555d47ddddf53b2f8ce9dd8b764d0fe00447433b3f2d2fbbedca3698854713d1f5a7b91bc6daceebeaa7688a572a3c92f2db93fec8c0bf15f28461d59ffe6b05a4264c77010c77ee40c453b43917ad0e9eb7b1e62502279cdc4452fd21057b84dd1e86c4f521b5ecc76fd82b8e0a8e74d1377cb68a18a6c4a3197312fa1f95b4cafd214fdf1e127f5db8569f9f4c24606e48e0de84aa237597aeb1fbcf6da859c809973907f4c017b4f7ef42eed9563c5054458294b66f12c0db73887648ce6da2cac06d0f0b19af78cf877cc599a1230e2494c3e3e637b1462fa40c8af50ca16e19df9efa451430bbcd2b0eeadd7667023d754a9e1cddcff464258074e407adc14e37f854a11da546e4b72f513f0805be401bce7d76b5a840df2292aaf6f0137382f4c4f2368fb823ae3434168c7904edf4a0317a4e086e9437d4ccf35cc71b1dcd3ae18cfda8e1213e19b499302de189166cdd8d0c2d5b2d45a14504e9b0facea475f4989eacc5d01382b0a3b76b69926c9d36f81c7884cc2f69457fd6decb8a3534c236a4ab9c656c79fa2aac979494ffc198a0270a1d3bd9b2c37221fe6310c4d12fcebac4f36a18488e151f4f052f3a2e71eb32b202db98835787f4cf4768b9b6e4d18cee897a05dd1dd44dd3eb743a022539f2e0238c27b596aa6ca3bf83159399d8fc766a58c1a1bac13daf752f785fbbb4b192aa47b2f8abd03e999218bb69b7638d799e8bbb35a92aac7aba17c4220952d6d8516b0db511878f491563d68736f4e7fe6f7787c4860174f8cb999ac746ea31ecc5e856d657a5adbefd81fc1dde492ccf9f0d42b53e2395d235b3d6a258bbabbc92c408f6d707448e79efed04e62c7c0a639c54b83a11d6613cb742a3a57f42319a474968b0f09530d8882374194ee178a38aa4d76288666193574e626a922e8977a68c1042d8e74a436ed4b4b54a4633c363c0d9c475c17a019eb1d7578b42765e979f81620c33cb219b6c696cf08e598db5027aaf77623e0470a29d3fa59a94b36f00a4d61ad64b340c6d244f65008284d743de02089e4ff4cb0d2ef606ef45be36cbc6e4f8b6d28baae61fbfcb5564ae0f55f16be5c8358aac560615171c503bd32f8af74e9e0e0388a7de25a6b0229cdf3b311e900eb73d5f2de8f0a220e7ff325dcf10b5ab1eab3b387a54b3ea5e0867b7a03970342464f497528ef989b75f29d4632478e031be9bb4ab1bd1d60daa7ecff6a2628e8088b9478b910ab1692248a7843752e5cca5c124d6ab13620f0568ca8fd4ed888e05426991cc3831c0c6f70b3c82c5e74a963a5c5b5a903379b8f803de4bd37edfd9c8575a8967630128154820a1e9205d238288bddaabb7449a06068f8c24041acb7f63fe7b86e3cbebb859a495b72371f2d5677c5d770fddabb7f99f6c0bdbd732d79e58148f115be3b2b721e897a7bb141f823a211e5b52539aea661a4ec589a8afd14c05f1365dee951c4c69467c0c7e6310fbac7d9b4e950a1074a3f51ecc3c604a97d66cbf2f2ce4d35e6e3b0cf60de9f9f3afd64429b0f2e14311d225bd83712ac2f032f89f92f99f505719ff1f1bd60bb40268ddaf344ba743fc02a7e4b1cbccb2958e4191ec66e7cacc94109f60c15cf831faa35cd118b4cb2bf599dbb6aa3f012efc66160f27575a9c10d27b3e1fd3b5128fb00f056d30f6c221fa837ff5a727759458fc6cbe3f47c714e718e9a942f00e0652aae4cabaa7da9eee7b11a66b4b87db0b1a6ccd14d5e8be217befd3d828f0a19d7ee91915afd759f12d9788a0cfaa077f457ae3c1d57425b4aa47c230acf91be49b5cc68a738ef7e07d5d23869dbf812f2206a00f9487bd8dc9bf9c4e47e21da948baee0af255385a0071e19f460418d1243746b4d95c35ef53cc435efc2d9da05b2a33fb4b63a50cb877ddbebc0f63cf43c5cdaae3a4a802dfc46cc0803b3b9b4b005f88db8abe3892e6c00d14452e614c21d65c304e79c89b869b5eea215d94f00ff8d0034e98f548ae203fb69108a2fed9b6d5e17d22bf609eb67114aad33548ead628ad9f972b9471034fd678ba6296025646a40d81fd02984c4f4a11d4481f428c2b3b6e0eb4198148044371b10ca15273e3427e3a6f8f62bd6ecf65a686d8ab6a31ff13844d451c7002b362e30a27c179d1d3b0abe19ff6e210e49689cf499295e855ef639f848d2af615c6c29809ec4538cde6f0e1bce59a72ef9c46479b38f84c4ea85b5c4c6259702a97710c63086a3f9bda21dddaf632d1c413a38ba7c72987c6793638826725cd15a3d46984d6cac2b4462393095a1e3d9e3167a905073ee4e0fb1a756d8d17ec8bd3be99d868e04aba340954dff141c888dc997438e588e4ac4a4a7bd5d2ddb5e06156aff0ea890d647fcf9df8de7fd24cdf5aaa304dfe141e171b016b9a2d0d458dad885be925f1fd060e0f60c71fa85cb403478a14954c3719c66fd659c2ab3ee2b65a9f0cc6fed932cf8a285caf37dbad97eaad3d37f1e334eb021b54b48639671b1ec60cfd3e8889f03940de20fbb7f045949ce20f536f6ab381ac8ebb49b45e25ab4e60db1cf25a575c968ca63d41a43496215bc0d321e925cf88829fe4284ba6edbb8440518a2c6b0baeddfe27dcd6bde7d883536b6d452c09f09230e879d5e3be140e36a124b73a12b1a5492bbd552d23c3a60de37f7fba6e691475e13c7d71f904adc6345de40c5c3233afa5c99ed88eac05645636e5f285fa3105fbc0e6e8f421807c03e6d69edcd91b625d3db030b8b80e9fadd649e8a45f17edf908307712ba69c53bdec0f19d6e95a9137f600db99b9fd7e4c967929f8232888b329423975ba3c66e0b9c8a65b400030121c1a35ad8a99bbffe9b6bfb19300b0e445b8ad62c7f41c56b66efe5556b7ac1af1e8dcd8ab1d54071e852ff5d73f5e12425f07142f97a4668dcf941416cefbf8949f9cb72ea41cb2ab67bb446856ede2d891909289682a6e3cf4bf85969a7fc974ed177c21dc003a7d1b2e1fbaaf0950d43cce101e30d23155c299a5bfba3f64d31fbe8d132c1afb5f99b7463d48a42b4e9249f229cf3322eb7f1264722b5f3ed8021034b2717693eeded84817e55c64fafc86b8090c4c872fe43facfd06ec36dce1e98f8bd866a52e3f8d0715333473ce5a1abd76565758bfc1304e8ddf0f27f834023482ea779c3033ca23f068bea34b1d741e1b171acb28944e8ad9c2479d88144f414ae2fbbf72bacc88bb35338ecbe468f5bdf111fdbd0f936e21205183ef1929a078f2a32df008cbbd99180639e8683e0d813e07cbe1eace9aa250a05597f7f5154186f733029d704135aafe87b29a019baed85e7586790e4370f77bc02006ceb1158e525fd380e102ad2b7fdaea24107260501a88e2c592e5196056aaffbf18717c49074ddfb7accc888b7f8f855defdd49cadc20bc5e26d1e2c5d95c414c8fd970608695d0c7bcfa2677fcb56355c8d4020c4a4e0b4d99acc3653b7a409a43f4508c4f52ae0b8b9bc7aa3aef109fb471faf4231727a2109e451a45763613592320ab4b619a8b549a0d314b1e904d5014c8ee98c670650b8723c844a7a94130f0da2209a5c52f1dd33ade4d0056e3d127ae81a8806146e1907e6d7ec9f13361dde84c1d1e8d30736701b033b0b1dfdf4339b19a31b31d5869f435a04e446108d9590bce6a65e53447a9c3931d00f061d35860a5ac810b77b170810d3722c0eea9ada99601c714cde8c6408ab66c826902d703d0b6fa9e5451d1c7294a1d116789ef04701a4d8f00e92c9e475acb2bb9b694e81aeb01573ee5ff8cbab478ac4278cc24144645a54cf0957ae517f75f4d8ec1a9479579698da01514424a1ca44982e4d09df16703f5c988689b97064f457c1178a2d3b4a0bc0ddb65d6bd882e208f44eed828757e8f03cb3ca8c56f07311bb884e2f59ad7f97994edaf13fe2b19a86d37dd12de977538727e8f0688c02e0d986df985c1d4464f8a444340eaa0a5db4562b74486bea46770bbedf29a3fe2aedc18597a84e5ec3f9fb1fd7a7f4f8b14cf70ba7a584b1dabbce68a945ff5484572a368226c604d00a87655a854f2e66683ebc21c574ba4ed67b404961bf5b0df9e1f2c4f433804caa382544967d4e99ecc34b7bc79a3ccd88649340af6a097df16afac671fc42f40be06ce74c6422c13b3088f46eaec25e7c22dee1280561c61b002fba5e3d39e503c0d4669456e263beb0d7775002f9dcfeb46d4b6dcdb60a124af93339cb3e68a508490e027fda2a2bdf0965a722d56337851dab6a6f6b32c1713af09870ef728f5c9e963591b0fd7e4904a080f557c9e6ff02430ad33a708ee53622ba1d91083fc64b170ed37c249529fb5aa4d9c824df287868fe6595f1e9a972a84b992c7e002181813c847063049e2d05ecdcd29ea458e38200a1857e6780ea76ff1e1a3619f3d30dcff2264e95fbecbc16ba723ffff32603fae93f0f13fb973bdf2628a6a5633cea1e0dcae2a4b439ea0ca5b30866c6b5108b18b2248519d3d76037f5722db7b22aee6c98a0d66ba4a3058c2db3831936190ca505632dbd29e71903ac36baeecf9911ece7f4c3640bca613c20166ca530a80f70a9f2be1279f02130118babf15b42d02dae0082240482992ff68f767e93323ea0cb91725304489f9ca2842f77da15b653b86f34b76deb952f8b292c3d07d6a95198b0b6f7ec4c517e76c36e864323a1947d49677572a7381d54f44027e2c79cb2621d2d9590e3f4d2d34c35d04162c01a4fa50ca15e546f2b0b146bf9976b120ea7b3fc67f8cfe5ea01a4bcc40659b0e0de47c3ac3f0e034fd332503bc127fe8eb9c44d0c9166b6f76133994e8fd2e055c6aebeb1ff94a0192c482e5940b0f008dd0c61fe0e5c962767c64caf803106cb079a9873c8a55d2db215289a248223065272291d97e9b8003e4fdce1f3442d3dfb98fd431c97e08a21fb17085b93161d52359f253cb6a595cd82e9c792851509a65cf886bf563fbb2a4f4e30a0165f779f02bb75a8db161eab194f7bb4646288934cd982875dbb51c8c914bb963db9168f75b4c0ac4e613053bb86d14257be9cf38f527c9214de4b82ee52385b202c533cff4264cb8c6ef8ca25e37ba6a75d3b21a3a0a25689d2a060ad65ae31884e70bafc6891314353e27edec65c39d5c1963f62edf449f3597709b09224b474fe1a23075c9d5b8cc5293de24b988e4e37b65c170997908bfd5e32ea91c1d7eac781eb393509f4c41c134eb4bf72189001c06a50a8e3967714475844aaefb265fcd90fe345ab95b1d3d0836b1e1dc68e77d1585dfc3f7fb09a0f22372643013b7d1ac587eab34a45412a9ad0258a15aaf184f3d8ef948c9bbb5cabdf7170788dd6bf1a8f53aeb2cce12cece53971019ec564e24513856529fec1a855caaa215070e1e814a41aeaed6b4e1a47324e368a2b93efef7a609078cc7b4865352fcd8ceb4be2203a41872e92f76ac0932394abdaf544e2ac7d3ab71fa12560bc85f74fdc73c7581031a1de9394ee214d3e144fc01512afd95cf815d694191ad1caa5b1b3f416c5037f2eab56ca44131c19155d47ac442c699a078f0108fa2574a9d6650256ae8b34f7da5c5e28605e7993a355fb6877324b535229bb6794d4a614517da484fabad14632cf95eda04b515dec72e1e1b085d77cc453266b9a480bc6287fd8fad799743b1404250c333b79e0fe72176ffbc9b24acc2ca57767c3eec740a7d58a5ed7258ae36638da10fb5e6de22fb272ad3c30cdf37ce795501347309dd358c49b381ca5dd50b6905da9aafe66dd03e0108f225fc2ba7e39de81ab6b93a5419ef1378561c6e77b5298a1d05ee591e6702dcdbf782da9fc9c5013af9eea8babbed7b4c68e0fb0033abae85a581bed9e828370cdb861496c122dff13d1d2a843014ac8818fe1c5f0c03de5d797fd216955f6015b171a8038c44f5906177d027900466c0fd1b38f5aefc2baae255354d1b891f96094a0f5639c5b841d76e411db7d38584372dbb37c0efc8905102aaf22ff3ecfd3f1125e3d555c57b6eda39b2b8a9a5d8cf2e3f99834e38459cd7494bdc32a021e8f7c4e3baaacb3bdf6b74768e711ac0239db6a40266d7820b3d6cec96606832cf747b0bcbf05c04a0e22f20ad936b3f47e9861cb310b7b3a44bf01f3736a3e35a295ebcf0baf7fbb2aff800ac433ab693e1d17e5b1b8b5c043b47d818bd3b9d1c3eea1ecae9cc8d2ab4b5b2946d7ff11331558d5e1158a49e9f6d88c63967b507afeb507bd3f22b64e3e932a15e0baf85685b22b46e4c45ff5bbd16f6016c198d615c1ffa20bff84b2b935055aaba465f62466413499007ffb54da8d983196ddf217008ca84012c29dfcee3805de1cb3b6e35d34aaf1d828bcc1712b17fadeaa4b1f6cf3eea6fbda97be8801ea85458408a26dd3f5fd220235f935d0865ed47aa4d7df2e6b26074b7787d77f6fb1655309947d4db042534b0c7cd8fe844c8d6d90b262d224c5c86a27d3f7c53f37d87630e35ea19007806f542ad9e3069a55e3fd527aeb80f174b0ac2e47852cb5ed4f07298d4f6917896721faf90854a0700f9c12b472b8df4dbb09e6d6d89c4de3f28366148853951767bce6afd9cda4982fc117c51ed8c9adac2057fe4bf1a7ba75fd93bd40d659ce5d18a325c0350267895070bfff653878b3b73927d65de1cadb436a268bc43e9375781eb51cdf16d2759e04aeff3e42870c15e3351d51e048c0389149e655e4d687c34adaab7ec43c96616c142d68e6228573df1fbb02a255e1cf8d85a3a12340453b33eddb84720a2348419bdab8681b5a4da08b7dab8d466b7ec5992baf77f9128417a7dfe5ee5eb690d9132563db9f5a60aa4cd8522894ddd9db4dda110becd1e62ede0d6a2489db28f75d3c5a7bbc35dd3a3edce0af3a5db2c29b385d75425dd883395eefe687f8aed9b7cebf2769eb257568f4da50ca3d268c8b907948c19d14fa735acd013e2cd4e7a6ee9d837b758d021922bd059cf29d8beb6eb085de2d5e6b32027da8f97601099fe7b73b90c886ca5c00f8993f682425245adb685b2f30956285002ef764196bb5c0e567b40d76ef35313cbc7bc141a86d12bb03d885cfab1906c5026f3559b81f5af9bdbf5008a390fcd127f5169651c658d7606a7426dfbc0a04b94941456a9c0f28ef4467459daf5b0edc9560f2609302799f4a45f088e7d37e5381df77ddb2f2ead787d49cb23eaa75d41edb4eaa0c628a9050997cdb504d9e93e363b6a554dc9b4fe88a5d1fc14f7f9b174a6059b718560d1e2023aecad2c112137513ada2b39e8b543908dbdd8bb5955bd2000ac2e3c4b4158ba233f18a0b81847b8aabbc3b752b39344f2085396c796868c95f9508a7641e2b5a749e11ffc7f1fc740be71f721a6fd5b47539734a25509aad5a9aaed6f905fb4290c332bd94d6b03db2a13413d8e23bc9df27bf365d16b2d083c7093d94ddc3cfc46ce72bd8f8e9e0e89a3d0df5891fce8dc3a88857abe1dd41225fb3129bc893077e351d01e1ffb5cad0761c36afb901e8d1c22be45d5f37b8c7a44c177cde9eed4ffedb719229d4088c0e1aa2f22ad71967c8222da17959a1d49294ac7e1ae4e32686992c7de38bdd94a687c93f613ade3312f646c1ed8470b597fcb56ab760870a5952af191cd5b58d630b54789931df25813ce6f4ccca3a2a32522630926e3acaafd3ad19eff9d3e482069a67b9061910b1b4f123da6414baa56dc00835b064f973bd0a83f02f64df94c3be419b6947ea7d5166d42d412430c68fc12673af9d1eef4df206039e6aae8e40973f8b237c8cbab125459dd33852cb21febf5d114bddbe43ee3dc9c0b855928ee76b779194698555adbd94f12caec73844c335a0b9ca288dc38195960dbeb8ba3bc52afd5bfa9e7146bf98a89e3dd829bbc02f4ae03309db5c6683c8569c4df437fb274192a971cae24f6fefffbae16f3654abbc2b53e905c7f40399d257fb87f62770fcad04637988e65f013a5ac362943e005386faeda610594782826ee0c0b5e6b0453d4a77370636cdc3e0469b5999f29b76d8ff53ac5b496dec3abf961e4186d9cfd92af5d3d49b6952077b0d86bdc25e0d1f6dd4b78bb417782506c98e9b323e6bc3ab87e90147d2554f2ccbb4c65d50e86a50a81927035d8a050ba80271850ef04406b3ebd9ff78a5d5617a5da0c88e1fe721c84cbf800f2fc27f56b6ecda2f829365eb6f98475a04d9df5ebe40baf63dc37552c0fd5658e59c0ba5ad567e78cd296ecb3dd08824d71cde11be17adca83a6c88db60083de3a34d29859d9fcabfa3bd1d0237a414893dde256041f2f09ff3fe134e386bc1c465afe60c92f5c139e44bc510e949e844dedb28dead09572b6e45686312ac49fe1fa5af5c5a090c4cee88135cc99c2be27507ab49c920e39a5890e2170fb2270000f50372d54a7a02573fdb90843df3264e36063d404fa944fdcc14cdb1364388565645fd3073393b9b34994a034678f2ef5a5c8e03702ef9b307bdfbb626efaa773220085966437aa6d293247285d83daa0b9a64c3b936cc8bc33c1cf06f4dc1a679a00a73eb47fab1c0a3fe5d6c5b634e5ee3f4938124c7050daf8125544d9a2f9e21fda6342e1af92cce375fb44a5ba330d17c6afab3830c07c8802471e4811c9ad398e019acb9899de37a8edc3060116b423394c96cd6c15fc24d3994da35bdbe0e70c4758d8ca3c179d6838694aa418cd1d81af7e54a515c9469b32c3ca5fd3e3ac35566e5e8b911ae60eaf4812946020ea9aabe34fb43812bac0897fcbe72295c368b5ce603284645226e41357c0b1f5b38462125dc04d4df316c7f470bcd2d011054161eff917151b6c68f0e727135ce376b470fdddb385c99147a8e613743e9e71437f3139b35a249ab2ca6c5c0d66af541a148b1a6c15ec5af6dec9d7e5f67d10acd833d2f052e5074252565fd9542ea39e9d6d80029b41e9e961b8fc2af76aec356bc25afb964b7eb503360146a937d13143f372ed9f2a06a8b479b4dec9b1168c8218716ffb6ab546c656e0baa5889fa2375e061321c90bf209061f855b4031e06422ac3bc1f243a818023867cc845a2cab6744befe8490f4eba58ebd2bcc2cdd6714ac9f116fa98d0b6b33c09ca8f0e372732d0b21561ac49ab1d096f16b861d9273ae238b8aa8278c20d4b19767fcd919f4b56db16592f9b39dbdfb0684c2a588a97d6dd4f28891ee2f83da8e9f29639c4164bf6b19d8de8fad7309e9d35b40199055427e459021258cf94baf54419947d61e7c55955e6059dc2e729e2bd4c913f6aa7743465f792db75d7e19a1006d9f1bcb3ff343c8c9f2cc600f35ec353554aa0e41302341a0a267512ce0fc8d1322c420beec8764dd69747f11d4f4c1041649684abe873ed4cf3c7a55b77b2bf029c950783c363179ff74cd561d0e90b0c0b307688db065fe768a5644c8dc0970a7912ab39c486e051835ac08494063f322db21e2b889c82e9f8c0c7515731b0ebdb9b2a465c7b3c64c8f74f2eb3c27b5a28de87dc869208ac0cb3cc43aace3cf8427f20813577ea576962bd22f88cc4e9a78df6a5d3bef771ecfd7438a30339a603989859e0e28a15b76a87dc58b366f80e30e1c01d4622c82c99e116a3d566764c1ea3703153b6c70ea323f447c954c87f4ff7c88f449adf4f91e58456c8aa1b2c5aaf4b1ec13b6ed7de6d03081264306beef030bae7595faa7db6eaac1159a497f9493b67f9aad1175d830703219cf08c1ab4bf53c1cfdc97265c308870f6cee3eb463973b3a67b25ed1dc0f846be8f267b4d3928412024e486afe5180957f09d607e21ef9c5ee54c9204811c7b9568b4b8c9a6ea86b609449a7e257693ee985387cdb5657bba2bbf4885070ec5c9d550d055ff4209a408ed38fb2650d49b3786960f4462e08f2427c7e303e739288a26032b32429b32c95f77f76d930bf3d23b69e598d049b555916206050343a0547268e60718718424513717bb98ce67899964573786efb2ce9ecf9199d690772af6e6babb8d31c8e3da9dc81e6bed8ed41b8b403dd79d2d48035965e2280f3d09a5b3fda253401502f19c03f916f31297809cf6fac2b640684a802440e804a81489167309667d0355b69de873551ecf2a48631f1b5ba184051dc7cad0c54be029b5bc82071120de76df34faaa64f72ca87917058eab735814217bbdd8b3255d1826e2da7f66bd0b37e34df678c49e62e7605166cc28775b7e7ebb3563037c7cc336c70dddf790d5dbbb80851e813ca6b1ca5d655bc662b25ccea3961215e91a2ffd3edac4210b8204d9f5f9ab4f7f2622f2fd481aed23f3b1e7d55cd7e8fb8403772a1c84d19f168b36973ba858d84fc012315fd08f42aac21548029b3fb31b509414ffbaf52eea77649617815171d1ad480a7d5eefb7a53a5ddf4951c0c7881b2033bb25651b6f6139e4c5cf96230e8ee778dcaadd9006403443a3a477480efd6bc8b035d51ff0bec09266cee492873af684e1f679cba9f3f699cda797d77118c503812621d2a2c9a830cd18468d3371269581718001b7c55e2d7795d38586f1c5461e11286cb60da04e61e01e9cda65a8ff14015bdf967ea2bdb00b1753c981dac0e0a4938e45e5ec9f29de45dcb14337125eb7d6837320f94dd87c86995a81aa9ea42f0ca5134bf69626fda393aedc27a75f21571f2ddb8c2561a1efe4ef3242393847f547f78c250b44286ff639e21b0559b215cd5ec552af9ad32eecb944443b240786d18e06b35ddd31e7a13b984ed021b9215c96a89b1fce0817981cd324fd4c357ffe2dc8c36ad41c37400b296a5119a4c97a705593a359d11d268e482149c8049b9923979babb10127e5f25e777a0ebe3e3d2312a98e7740ae8e03789aabcdb536997b3c4acf6f8f09ea9b892fb129d176d40c3096fbc8069fdbacef4db05e0d39b98502a8a68f372c7ef11cb6997d73124d659680a7595ad1b23d37f5ba79407f1d657e1959747a4177f0d51227439d67bba46e1af2a9a735e4a130b55967ed2fd92ed46c11defc43c988f13ffb5302c00577ab8545f60a345d2a1a7670ec2e5b889cda5fa5dee9a41304ab6bf60cb3cf70611a9ac3dfb6edd04c6c304eeff0aab8671e63fe19b8760573c436d76d61732fd28a947b3cb17479438dd5196619615fac82cbe2e26e6e199ae9046198f4abd2853e1cf4bba80868e9a58a8972b4347afea5955ad456e3dea2e122a3d67d57a59c1392fb24466b96b30c4430ee50965f6c8e4085ebd85c5ff0297241aae64ffdfc7d348e7aa04d461e344442e26d50f027d3af21ce8bd394818207b87ee15ddd8c1a4d18720d102bd205af93af721145b90f78723606b1fe0a6aef2bd03e8d5c282d8ce26606d7b291df6a17c1ea71a989dd9bcecacb912d4a7777a333fa8199fbb94e275f894a95b339b1f781de9237087a2c6ca7005e9d3e1115f747f2ec3a443977ad55597743a1873f9d14f99469e0473c9634c24fe75ba16f368f01fed145fe3203ec456f37759c43c83ad075737c0d5aff24199f3337ee473eace9ef09ba34069180948722f4a22e7029d64e234f62566c7611f9f74d2f519ad1733716f6e623a574ab852c475b2f3a9f08d7a31130f5632b4cbe6ca8199ad15a18b1d62ab9e6ec2377bd5ec645e15bddeb38934e6c1855ea261c0c84edc1361a70db88226b86664e64d02ffc4454051d11177906eb53e6775d0ec9a16ca8517598dfec397922b2c5aab3eed9cf1a604ef4395eab59e8549dd01ee2d43ce4cf380b41b78ed0e26045050329bfa449b9f69e04f8de2e20d5aaaa7b45d4937db5a8532cb744c2ac560b77bae82e31460e9c633fab0262045c3b5644466aef3e3c95dff6b1b4a481b21915706738f40ed0e7a1d68071e884a45ae43489698d53ccf45129b75918fdaf193994ad3e14cd69b3cc4e3d2b8c8cc16be1efd927d60620ddc4cd5787e8e41d7327f6191ab08c2a8ac85c22727204b427e51c3293dbd84e90f46e144af34c0aae088ef62ba9aad84fabe98ddb461ed2f404c1110b26187c55a616d1e94089f363532436a491feb0f3df4f427ffae24c30f7c9e5bedcffe5f5ada7e240397dd7dc6c4ecdebbd7c0b3bd56461bc13102d05f28366a6a78712f62300055a9f6741126388536bee55166c2c7ddc9115be2c43d0b37d9466202d39a00e2c158172ead6fa822b2186ef6c7ad6c82c8393946b3f85e3dfedd6b43afde0c93226955df22f28926f811b21132ec87af7ed38d35a70439d8859a6af598a7825e4f8c56f04f6ca76f712810c64c372571a24bb207beae72333bd870db2b995a27695051a7d9334700d839b49fa7bb6f4070c8e464f6ab8c6f7222133380dedea6dfa12aef1f611868860f81da85d2c5da672cda580f98b9089e6387439eca52df4c449bbb55e8503937cea1d4dfa53f4a42b95d2ff6e99e227291a476e23e941446e47c1be1161d82cbe75cb696134148810c6f3a28ec3f02f27bfcc550a67af45dc96917aeb8b5dc1131d037c1746fc3410f4344d0c079cc144694d416a305feb10cc863ca926f9ef917fd7645737344a9478bd87f97e724026e0bf236f9a367c03c038faea41b261315a4c767400a2ab1fef71c10c38a5f68b85cc6ecb507686fb6969189dd94776f0621486fb649000110f781865635b06a3a1bfae194176aebf1da788f6385df8acc253e86d8e386f1eae609863e4f69c4135b6731963b93894a1749408f5cf2be112f1853152eab0556a4b6eb6875e332075432bc437b01c388ba6c1bf1481954f09128bacd144f431602f89d29bf3ef713e8970f14a30cdbd3a3a4d2c099c153edb523878c6b9d04cfd52915c1c3c90511d473ec65b0cadc6699361908f81c4304836de856579e2893e5b673fd9dc7363514d19cf01ee69006e755b145b588a77166b75c3d28abaecf9a66af75cd9e6b77f2eefa996470754e1322d2ef8e974c52952fa5a580e1562c30f5c6aec577cbae75754212f9406296150ea537931688aac04b8ebd12af3eca0ba656edfe8c2b40242ef6c24661c151364e3685c7c54daaa40c69a75cfbd30dafa9bf5c6b502a42db27159ccb5288dd713f0efbc4818541c75558f090c3adbcc891dbf58b700d7f06db2063338ec8a767ccf53cc9b88930537d3b527a2edd927fc9dc76f13fa3acefd54b03cae1e8c23a3a84405d61a8ac5754afbdd9b313ef3bcab8161174131259c1288ae9e06fef38272abeba49158dbf8b2443c4af0b83628a8a58d5780c7e163b426307010411887d86b191e00c07da0e6721b64bb0704c4e095e068ad27ffe130f0831555c09e88ed5590e5b3d45077cae0b28cfc104e9a51043380d58247b8be972b722d6e68df3e3c617bfb1f83607febbffee86f02ae0ae8d640f44d40404f4a35529a8e8307b25450836045736cfa5e1c9617d6be3e37486f1806211fc737caf341850b013dff74d8fb7250a302108cd6148500982367e755336b22cb0cb4b51a63c655eff434ec14f677c138c89f4b6f35a8ced0f2f0738885f1bffaacb6f20f321bece050e6cc959d7c7b6cb4bc20e46bfaf9c2686751edcd2cee317b5ec337504ac822cb811e9eebd8cdd0f5d49f793f56969f2093cb5fac840890c62d2a830baeefece384a138ed6a1489dc149da928c41a98113e5747c2d30adf34b47b4f290143e7f7fb22aab7004d4d41dadae07a3f614dbdc38eeac16c2467390b054afb39b53e5dbaba0aee601e1356f007cc1541cbf4f98d1bda5bd16b8f8ae86adc6f7b5dcc2a25bf5c06bd7ac9b2c549bf1b17c83069cb310255505963402cbbb9d170f475f8ca7e579c166d4935c25fc5a2aa02c8638b8f41326b4720a1d2ea6642e2a4c24482e504b0a0c332251b09654b2e5bc92e3d787d86514f019ce16219fbeb41b472363408a45351644496c073cce953803300e58e7173d2adcfb678f405ad36a946b45eec2eb671244dbf3a1482c16a56a6f9742f22748057e2b4130eb7289d22c7a17a6cea9d0c58f0b2ff665d5f3d681a474ae98f9a8d69fac37c64ee3a406ecede6c65617281689178dc512aa1991461184aa80e443f6282c14f2e7c810718c09aa829502141510b6d22e434c0eb3e6a894cd0afd506cfdbcabe0ebb111ef5186678db6ee4ad72c584b3245cd85b20728fae8383cfc2a6046297b8010c669dfb7aee816540cbffba542d2fa9aa37a329c2eba80ef31653f35abc822e8f9c049ab62830fec06db0b93f6c366bc19c53ddcfda2f12878be42d806b203f9b2d6ee5b672df57835182bf3e55432f79cab6c36864bc8f8f442410a035d8a6a9a832cee6177439f3a0f96fb5f99bb5186870fb8b348e50b253b522f2e51ac27ced4b2451d6e726c6c48f73e2f3502dc1b9ea6a6166afe22c22d03dac14d9257e3fa40c6caf201d7d22821ac47d1991c98013382f1d019d15a5af684bb4316c5fb52fff56abd3cbb5165947900bd08037524fc0e836474f1081315f8089acb54183f95c44ec67f59ef1146247f641f79e55329821de5560c3c4343d4664df8697744168921f999c28b0f6ecd5a4362926d73bebb0c2a622ef4dc28aae92076fd8e8af347373d0efd62bfbabc45b200554e4f9964d831cde9d591e34a1fcd7e520be2eb89212b208b4087c4ba5245678194bc4b9485e980fc93f7a5615991c7c29575910a52e3ddc5c3d710b52dad3133152cefafa0627a0cb95b879eaebbe5b5bdba46586641704ae3818625f783a8ef8f5f64b3dd5b3ef59a280e6c801d188f2114fd0062b2f2c4a65e2b69b11ac8e7ca9716d422d687abc5486b4a497fc2d26dd68becae4c42c470497ee813df2c46702d9064866f0bb938d48c27f79800a437dbddec825e45cb30d2f86ae5142780f6232c41be55a2bfa3159811f280700d547adda281a669392e232ae5bbaf4fd02bde144b48fb8b7075cae0b621c3b9a73804610b5cae514edc4eee737b0413e036550bf9a0f6916873724736e972817a359f50d0ef1011e90293b7fd6b0cbc9c6f98e5428de2a43ac49e1079afcf622543ecb5d36a13b7ad21dd50e5a5f95adaa94914e6ec436fc8ec90ebdb5a0ef7b93cd1813f4d80317b5b4ad95b6bb067d343ba9d5154ee88fb4c792ec96f448ea956da1a272ff43028b87e0a9689e00f74385853a71b2b815bff77380cc7f2df46d8f936fc3c26e86fca7952529f4586dd574c4c062fb479150d7b7c35ae5b6d2d10fd17061f354c566b9c3ec588ebbaa3ad4c49ff2a4d93093b048615bf9916821439841fa5d39cf28f4b328ddf390c52927b48fdeb934cf22058190eed0bbd9fc0d7ec02bbd10925ab6d8052fab6b666c1657f032ea9f36c48142492d8fc49ac3c481dff1ee95e52b3dc82d5472672571e3f56df6bae2db631d38b0269dfd709685a24252198bc01a3fa7291f7ac75b93b6bdb7fd4d84f9fa3fd5c586199a3994f4f79f8ba2b087a0fb2ba6c10fa1ac99e1067262a47c2d3080bef9d8f0562fe63e6f39132d3b4c95082fba3435ea970a3f78387a95ff1ac5c2d14d47c1f37ec3b81b976af8d841e947fcb2286bbe5ff4770069433aed25411a0933a192cc84b932bbeb06b39a34a8dc062e79c757e508e2dce734210d4c06df8f2cd8175216f871da5de9554cc136fe6a25c3a76d56ab23e5b20bcd531d1530e50f9a6d2a76b9332b7bab4e1d3040c2e991824aa2b04cd110cba43029a660ad6061235bac80dad196349b30f46f4f15121c2c798d06232949cd608ecbd8838822cd857ad6fa7f7af558c7f8f439cc5489399dbeac9583a035141a088dc6577cb39ae16ca506fe1af11e280a1dabc08b2b56f8377ae117abc6e43b2a2df74e4e12ff61f87c74da484427359549727bb0805d012274a90a098863baa9c6c9cb23af8c081a930230df61e91d3520aa08ed5b042ba1b50b459538f362365b36fda511513db745b69e6695055b0081f9f186aa8200eb80a732ad2e5ac094332535c1781e183ff0bb0503aa47c9483ad80003ee87177f39eb7db8bb531566d36c26bf543265c16389c6fb3019c1bc44b60a19601506155e9b797e1fedce7cf471c7e0517ffb3d00d3a64941e0598a202471cfa73e6f920ae63ba1cb79d2d6f80d46c081b582c6fcb59211cbf1ad25f9a1994fb45e41cb471d69496bb78b35ad4b4c85695cb3f622e791c2d876a0bad2e45a8019d0c3df219d3ee1e076f7b32be29c954681a10ff419cd4b216dc6ad92d27f456750655bf1433e1a8b848b2dd95b8509ae4fe03f2388e0116b56694e2efb870325786e9791c161952e8930cd75bb659a896fe48eb2f7ff5207847c533549212b4c620059a53acb8fa441374f0fe32ed129b694cf0bfc50586ee36bc5ef7f6b4500f6de651508bf7aaeeabf42d4567e9b8c8712094c21624857f2f105998903ddddc29dc89df616e4a3d682e0e4ca47172d5794993f5cf761922b8d7b66ddb373690ec4bc5d15013819e521960bd3b87f3e48014eb464cdb788452475746719761a5377a13a3d19eb97838d101adb67b107d2b3a70854db7187573958d48cbda22294c62078e6a851acf686fa43e7a18ee2a209161537b0b37eb397dd21af2e0de8f6b11019856fc5387d0ff702fa4b0c48dd623549db6a36e76d527694ceafed652e5a46e21bcaeea944fce48360d67c227eb2243353bc8c238a016101b8797b2ddfba2851cd409816c368e497830aafac650441ce855d3353240c2fa4a26f5af8c2ab2c833f03371a6e39866af6a0d6eb2379037cedab861e8b1640ce438d454f4e349ce893e0e092a8b6403cdf15eead2fade5ba202200fbc398c965c4de3ae6f25f108887681277e654e277c26f8f121266612f6558854b0c0f84d01e6495a03288144370da4930b362ab34345e4728e1e6a37105540c7c833bbd8e6ad21a96a87d65c0ebc6e3eddfc397e4e554e42899129e8b73d1d3402de142d8b72523b9751181b1b46ad84bfadf13f59227fbe4d3d6d3ab6c1a716d69b970a98f6cc7da6a891d840aeb503bdc77ba58d85c2dfc4114c37cf7395e40e5f082a8b4ac053af363278ef93e3df8dafa9cb5cc7023493b97e88d03159dd40cb6cf43c8862a5655f3a469fac0353c775a8922352fd1aa9565405dbb1650ab37873c3469882a482df37f69c70641c1a1e8b8dc8b0b2ffc726bfbb31ef391abb919eb22f2f904418ee3bc2ca5f985d2a13ca247ad6857d0bac8a1cb936010736cfb0e8582b73b2ae997031a455bb742269d4612b88d61f53db65663ddd8e85bed6f8bd3ac0798ac835a60d0622345d6849c8d3f4656ffcb15200089c319c25b3a1741de4900d30a0ad20046e8088afd7cb3bce5a335f7032f13bbbad05689143d3e7cd50b37df8cd758d1cd9f8476664a29bad744503c0ab87639d35618478f39fc40f50e5c75289db9d958f0ffead4e9d23daf9fe741063ca1ba8134bbadf5635c971c036717427bb6121fb1d72ff33ef94ad897c24c08741e50141e46729e61af4e9eaa3e708c556abb53897a321ff8224058f684589c600efcc0d19235161ee0fedb49ddf6d03c9adb1e8f78676981cc73cb963eca597cc2be393071705fcaa17b3c8175c88208a7b33819b409aee9be79841e9312f5655bb7a6511843f24439eeaabb5de70f5eac339850021f2de7f4bc9d805138c84d0ded47bed4f710631ed88eacb140e1fe1ee551187f7f223fc22318479fe55a9cbfa3c740e0ec43888595c320446dffa1148b3df348cdd3d711ee718718c88c6f8b53e10eb9ecb3efc7d2508bc04d0be1dd5be37a9ec2c008aa7be3c07d3c1b7ff403564c609314efd32789bb33f80c731e1d21876de157c8099d0f0814e5cea8dc7baa5de06f2850ed5f99a2179085ab72888d1e282a1965e6d25ffd7077da9d97b594fb88ab9e60957a8c50517312b19ce85a578d0514c76cb34417b7d4a947320513dd6974dcc4d932e96a12ff324ba8488c14db69b5f24fc6c8b80bc365f5bc24afb090ed689d46aff3cc4edaadc5321e2ebdb87a973fa69a82d628087f32b85b728ae59689bb8d9dd9f88b081bfddb90cfc2947073b5998ce09a9b74e39b9e8335f33c9c692f884730ca0f3e29139e796f26a06d13d33c76b4ff3b8c8d02f09e5ab4997854152f2c1ff146321290891b4e3ee9fb03812f001fe26150b1e9fbac4bd80fa5a2b8c59698b067a78bf8a74e15a504c217635036aa5165a4a26dc7012ed5fc6161772d72c260d0f00ba004b5636cd9e8bdf1d9ff24e21d7b83ab01d103049d3f83b925b79db367e6f7c287db87af91b856bd512f8ba5e6b287cc560b2537eb8bddca6a58c9b9a1b018dc8d17ef823ee19a092910aaf0d65c6e3f0227b7fedf8b527265443f14650d53ca39a92e819858b2f045c355c37682fdd82e351634da74fb777682a64c42a70117531d4b593f76b66404594d28916289f40df70cc1e5139c91187b1070fff106a7ea6e3b756d59315d96422bb15099e86c3b8074212fc5b57a7528d97f0d242a039be6b790872310fcab566216c7de2629e93e99fa81c1b680b149cccb173c058f2087bae833df52324bdbafe589ebf6c3ccb84e8a45f4498416504009cbbef06758798ac3beedcedaff30a46333fe0959c28873159fb59963d48668e19e11568121e0237875a07739ce926b6a75f14c414fc8631b5d13f0c707aa8ceedbecf931e5117d6cfb82bd56ee22b8b5d21c200dc1925ec9910afea813353376ca9b6c3ff6703e948b6371bfcd2c06120be65d124bfa6ccc9f9924f5cac79e031852cac5908aa3e65bf3fe45b2bba1959c1a835a60d8e1da39753dee794e9ae1e9f28dbd3e37a4156054d75329af8c1978fee8689c06f1eedb5852dc48a5f7a9ed8f2f66ddc2ef9a1099aa32776d0422c46fa1f7f76c7bde9dc100c947f68a77e7a7a1915ff13e913f7705f23f8f6531f42ae8031b4606891a1467eb51ad3be5b0a65ad71e3bd2a4662945c07640ccf7593eda294cc9b1d8f1e386faf4265b5f527cf67bbf0b1e91286f9f1da2fcb2d0c71078adecd1860fe84cadf05b6e6551b10f922156c07ec11bca56d58f8c8367ab0ed96f9d3ff99fd72aef2e9ce03c73ad16af5ebfc83594ae70d03dead7da28ebc22a5b23a691c2968d3b46852e8b7c1e8fe353f10708c14df1c2a0aa26af09ebb11a8c04e90b22e611b48e6e7094f44c8af11eb93e5bfec1ee5b311a0c881e7af234149e8b12015ad758b458b60e5225b245df6e88773e4cefbc5956c4cf6e2069bfa891c3da1db9aa22d77bfd28b857529ba982a58992d835d798acb9c4f6b0f1eb3d3c42e2b3c539ce54efb220b4d8d59a3e9df74dea51784ddf57ac16a42b0a4bc231595d5b24d9afac205764f1fa9d9a938a875a406fa2b62981dc5c195f79f9dfe4373417680ec4d2eca5c1ef97f8e601ecae7445ae0c63a0962e0cdde2de34e66d9e9987036bf02a46fdab7f67ce3f8bacdf9c3a5108e11876abe14774b22d2cc0092443b1bfe2ece4e706c73420c6c7ad9efa493cf609fa49bb019f3ad198d8ac1b9e19553b6eaf427cf772e695869b9c6643de684fcc6918cc79f90516e65352db6e86f9d23dac39f6b8192d2e191a3ca7049a75f199dfaae9e7c2a1010276cfae88f208dfe83e11195986e00d441fb55b44f4d53e555e4011bb65b1b4d410a52627879e1a2b82fa0ea77b26b0639590386b254cd2874e78d0883b6917d763c6acd8a759575998223e0c5ee146f1235ab65b1bb45fcd869fc0df44a2e77173569275f0ecabaf6a6275a3244a07ad413744c8113761233964c100ef89b6135866641ec735364e0dd9856248ebc3dc67e5ee7c98b2f195aef13b38aa5e4dac27bc6543bcb9c7ff6de624801a4a24ccf8c3f816227808946f7af2cc6e457a4bbfcddbbef9abe0915d0eee34075528747f818b46df558d42b048ab6820ad82d49a1d613d6a81ae63291ac7a8d450a390a54a53f3145faacacc82c4cf0e79031f01c4c41d846916513380b71432060e813e01cd8bbd0bd72a4abf512d45476cc3a95a623470d0d32dcc18ca4b6be921744cb31a6a3d55da0bfeaed03bcc652a56fc509937b7be4a8e5b0d1b2a24a99a489ee364d0af526849912865d2d64cce092c2b439d8efad67eab0df72e2a62dfa269c441768a09c362ca500f632c2c1b4b0b258ed936ee113f48cac8f687a6ce306ea3268dfca76e2e05e5a1c896d7b45ef5d601a678b8c693dd53ccfc8629074e9eb83b5f31742d6316daa0509f1bbf3aa368bc8c2d2b2ed5593186580bcb7ab3ca5edc07de506648dca60a765abdad6669023b90a4a0a0399f24844e148d3c4fa85567811517ea9ba42f845337a0c7c63fbb527dae3092c91478d29e782feced722832306f3bdcebd5d5395e612c1eb2822f2c56da7e25b70d8f7b9c453f8f8872e39b7c8b1c0d2aa7793ff9e932b990f1268ccd42a76a93aca76342e1d4336eadff11b38efd8dd393316c18624757ad24f6692151deffe911d0cdc4b4d00cb6da51ace63ff3663758b170e7457bbb660249f51833b7a07fc9af8fa448e9aa7e44bbb469830cb25ec52bec49b725d84553a73326e04cef37315a331cd44c84199388b14b4c9173882e61526c54d52da4748946d00d011cc3f35f9393529d69f5f41ff3ce12ff3f6563c662821c23610cd31b577636ea066fb00817de011b32186e17bc0b8567713ce8f374db831911feaad671102fcde6c2c40e46136647acd0c782b9907c8569e06d8da09f7bd08fcfadf675c19dcfb6ffbd9f0715b5bfb7271bdebd465e784554b552a2490fa021f618a4338f0089d208c9b50ac99d42163182eff4cc0a5e9e49b4a8bf8bf7d7976bc783e26cd9d62928df3190669d69024c667caecee6b89b23ea877b482fe233ba49358bab53feecf42a7d81e2cc4210974a66c7d891f84a8569b3bc6361b168b942f7843731be3d91be2176ef780cebe073b9aacac3e7b7676e6927885e76fab4a2f07f409ca18e8a83b7f874ea6362f3c23f9f101aeb55f9c9481ed039ee0aacea302b944969abe06ae95b92f4e227f7e845227617160d91f3f7c67e5f51d84ac662357000da140d3f956cd54d4b714f419a523ac22fb187952dabcfd0ec64f660c0502a5608ac69dbc34926ee19e457dd05ad688a105ff03aaea874a806d3696473733c67edca2cba53d09076af8d4372662bf58f0fcf3a105affb60561ecf91ae3ae0fb9046545bb3d724676d8e30a89a78a817226b016423382c7b4e83073787fcd44c33f1d0852698e53eb35332602d461f879554cea171b25c7ad1ca5b5562036e0e402ac4138cdc98fa291722c21d0e1779e0f8aedcef790edff66f43251c04eba831d13e948981b8908cb7d5a8b12c52775cc4146488e1b440ea87521b5e51c2d628f153d9459782aeb52286ead19e242b599d59dde9864ad67c31346a5084f5aecb2cdec650e01d51083cfb616c4fb27104b74a1537212e79ead2a60c7286c4c7111a19e9e3a487208b9b9b2705421819ab34103f1aedaacc780b606a7a787baf811050dd3252a46ad9e5445c520cf83a191652b25782368bbdb49389fbb142fb55d7b35d2b79f81113b18a7edf9ba4c6467b595276e247c8c4689cced14c9f806c9ea45f42914d388ef201b16362f212a45d4dbac4f1c7b9f52ca3cea9df988c9d51e043ec5b6769e4d15034ac6ed9869f6de3386b36420bc02aebee29fa27331342d85beb05584a4ff0f12f227181d2182e1030e0b8e02f85ea5748a3c3a4d406b73daaa949a5a8658f4f856d48badb4b4ebae01f04800fe6214ea2cbc85e49fb0266aa9f188dc679d9401f8683e00052880a41f65695c0f40e0a8fb14bfd83b643af6104cc8f313a836d468d9dc369e0f5197b29449fad35a6ba46ec23b13a7c5dfc8114d77d598b69c7b537d412ce753b464646af9d3b83a078a4b8c4b9e1bdc46542700ddf5098c685561ad9827e3c7373ea3cddcd5b265b0feaf63da557f25929dc4d621cd17233e05edcd15789cd07ab829b761a4618c369adca41ccade38793ebdaf170e20cf5c2a1b2a0a6e6a0db005e25137b9725c0847978a440ebfbd39bb65140b92afd67daef02e781b24dce28b900aa39a01f0582d7db8324e92b12e429943f694b882be31c24bbe2f1f0d9a455429730419f2809c2f3d1d7dd51d6d9dc5791342d0615de77e43eedaf9f5e5d990ca29de4795d6c49178f64727fffd12dfcc406e9d140aad8f668ef8d16a18335b552398af73746ccd4e866ab37bf52164b9c420b4e37a492d6bbdbb7c8484141ffe4e89fdd836cd49212a2f0e4c218493a07c9f7f9425e6044a0ca31e525abf6f0cb1467b2074d74ff43f2b7152f5d39342a3ef9ec3e3d79eceb6ddbe4cd4b7cf5daa204edaeeeeaba1f59c2334eced4669e137576165d462fa6a09b3d884032da468e0ad91029f98aaa5a13431287b01a2e3d51d3967fc2a3a683611e717c42716e1cfa18ddaf666685d2642bf3c93e266268d0c4c1743a397cd9327c2b59a10346a70cb7a3757f86fb2d0f56b620cc43100144225578454b0e989420f545b86408ec2b4522f4aa4d347b3704ad2a0c715df1228719388679e3f0eb8f6f4ddc8ff40037d6f2b39e6da9b3eed325063c57486e72a3b0d2f9eb7d1d3e86083f30e7ef09ebeaa71157603f91a245896474f643c97bcfab63e724294e06f1bf9e563864a02e7e134987d62d4ca021bab11bc53266fb61d21220ee86e1c07da0def5bd847533bc17a9db47ddaea45958eb438d6b68770ebd926155ec75eb389eea5d480e916aec34d193831103e3d08068e0a2e4f28761ce54437fec9b1c7d1d5ced7c536f3e47859e9d10f78573c411173640c52c3f371aa8a359f12ca17a134d4167844a27c4294d523114a1858f60e569747f92181e3a7817008a173d1f443dd6487416a128e4b980f9a902b34031eabaead48102fac4b3c1162ec108c5e475e64303d93e448431e16cca0eaed79f16438ffb7f2a50380bc9a58264bc7f59d8d30a38c233ac5c5cc7cc11ad9cb6a42f64f0e067379272a276de2739ed4625970ca6a80126da399cb16bc73418308032394463ad887adf1ca43ead335206a1f8419ff0b5fd0f94be0011c25320534be083104b443a14b9c2c8e9d13f9c0d225835ed44ecde546bcf53f639751fb83e0bba2285dbeccaf365ed3af5ac8c38d9443e560ced38e11fa1e2381f7e5c4d05f8480a4d324bcf3fb53edce608bb2a8188b9e225287693bae5d3b73a566a2bb96e9be6e8827995ff11911a6f0a0c484278b346bbbb388c62676e7b372396c3c412b5e896141d089d9801452997896208cee461434ace9dc1ab73ce91d2e70ef58779a4122ccf5d8e4ff21fd893db4a5804345d77272cbd2312608811e13d0473677561f4d1041bb74446c3c32ba090c48e7e2e89f33be597db0ce5210abc20f37ed0a3b5deb7be551b6a109c5241c567ad1f49ca448a4dd8e42765029de05ea15722dcaa63cd34af0142e8d464e212285baddaa07aea097331231ba5fe61cffb4a81890a0f354d73df92ae509dd6416c7e85cbe94f69b9f8a416660760d0ecc40bfbb6e364a54a0c059c590ceedafc9f26022c87c0183fc4ef8f947156bc7e37e9340d14d9db2090ef3b506a5181d8e82580fefd465b22c0529c09efde232b22a945e4fc54586700550e66246723cbf08a57c5db837b81bb2353c5ae94f6f1901365eeecc409c69126033efef34e5d51ca736ca58e8521dd76785b79568b0e19a5f9aabbb3c6ffbfd153fef106e52aa6c43e18fd2cf9dfa6717802ed1379837614cc02b84b7899cde9ddd196a1dc85ee0d62ebf5e04fd463ef53fde2258eb1fad85fd583aa4ac5a987e09fb76a08b22b176f161a7d0a7b28de76d2eb70bac4a88dc0a9d94b577941e4074e05ad67942c95eda569cc37bda215a9c64025b41f858da2bcc5fafd5066bba3d0352d009dcc92e0fcca54d30fae96ede7c73e198f2752834637cc0c40efe6d68c36e315a43fd64fbb50ba5a40866d346bff2b111ac18d23dfeb2fe3bc19cb2aeb16d2260fe93d81d749eb658472743925fed604ac98554b6eab8a0c7af2d4e8005ef28fa264e6783a1dfbbcaee02284fcd7bdc1099bc679ee5534cbc284fb8a473dfd47b7a520fa4775242e6b6e7d12c7a7e781b05926c756100a33d4c4c926823cef0e3fafef0a9245f5c460003b0368491a40aae6b6065c5327a12b8f97c1bec0a7224cc355cd434daed21662659a2d0912d6c95238511daa895766cab0244af79d6b6c8b50da8abd2b0cdb0356cbe33b3d8a1963fda9b9e6dc22c2a8c330c176d4f5a52a8acaefe5451765bea1eb0b9c64fd5a714ada87786f848306117cd400096d893766b815e5fc5730417b5b20002ab620d68168dd3b9987104a96052345f515dcc5c4322e3a2d45e98a9c3a0c61c170aba26017a2457ccd14426fbf5174b6d4a3d0ce30b408fca96ba1aa77f23aa89524c60a51444855c5b3f081317d5c9b5e71a5e5b2a65f9778742c657eddc600dfa7382ce297909b02a23d65094892f992bd5c13c7ffeb6bf570083291bfd800f7d881e4225dde74aeea9ad093bc66a4758782435cab436aaf8610ba1d3e58034a73787816df9964f016a984c3f1dbbb5765f7b4efcbdc11eb9bd7670b147006a28bc3d82c044b71f910aaa9945cd72d2c0e9fce76f4a91c44c30d0d2f9062239503f77984abb67232925db2fc9f9ccbf93fc354153366d1572c4e8b39e67d7744f8f8307e797ae4f4bd112769d3d28f11f7e15ceb91f4616ada7f2c3b3ec98d40b6e45c4deec29dbbf1c445c8872b66b57f642199571753f5f511461dd6e7f9cfa4fc1feabb4cdeb3c2961838c8944eaf2cd8700850e31ee72ddb4d77d7488008c99d2fe2ff658aa6756f4eb9b1b4c369f2877ca38beda2ec4b5f35175c7476254299029fb259b5f701e706f6274f63e605ba02a2f82e77f409196d21c9bc0807eda8a6d089c949fadebdad040eac2ae47e4e04694450b6cf3c2ff63b12b67adfc556f8da64c248c3bbc64eefb83be8dafe943efd4d80694771a8c4e36a01d914533cf828b2e02a2b0ae4af200462609eaee1f96a3d088b6c83b7a055232356f07c4bbd650191e63dfc8ae8307c41d5dc47c54fc45041334b4616b7f6051ee69726224ea05c4b06e6765d64d38500fbd8e214b5415688e93cceb216a76a621cca4682f463e806dac0536a262421c9cbf9e55fc063934e2a2cca7f5df059f6443c8fc102141b3fed539b1eecc25c618d1be47ebab06409a261d0c3c715502a73fb09a261a59dc228aa9c19f396d31553d414c9a931926682ca241a16d59d520fe55d6473624de7c746d0bce919d7dbafd877248d259a481e41dac52ed77f4a7b5584c48f1a0093f711dba5071640f60e6c2bdfd170613f51cbe6619560839a734d1d34bc714680a2b0191386954bdaba1cd017e27008694af702f46ee9e9df8cba180ecdcf91a7520aeeeab58b12458ad3ae10943b7f1ad247da07421d4995f55642cbdec442fdf817cbf3cbf7771999d078b3a1ac7a8e8bc191363db4ad7a9ebf1fe8ded4ccd2de0ece06ad83e8ec200818130b3f93ab8993c9dd1bbcbfc11f23d1dbf787a1ec3ddefe96499df75d03e2e1ce913941831e04154a5267238c8ac5d75f5808f5cf7ac24ec2e50d76a1f9292a8d585d2740dd8ed30e42359a82a5559cf4f8a50ad765e061b24de4948a908fc23a86357638115944ad3044cceefb2d3de784a39a43438f9eff1c159cc928e08513fc8ed214edf66faa87bc68e38b8481b3c2ee5500a63c47799860b10cb8fb422f0a517dc8f763314675f38340ca078829ff4e440b3d99cb97786c6121fda86668ff597b0d5ca4fd409d04aac19039891df231ad57aee019a266c139f0ce466a776e4da8fa6f6d06f652b428921f39ef1405e7c762a9c3fa192e6a9d9a85216846bb55b77c2bd766c5396388e1b1dd562a524081e329beef8cfd9acfd15e5bf6f9e99ad1197deda60f16c6798fe565ae165c7700ad6cf5dd5298848418b17c8e613c3931dc847f6128e1323f1ea8eeafccdcdca41708186f691c49e2e5fc31e757cffaaad5610b123119dd755f0f818b9e627f8a3aaf6f95b8954bf3f23bfeec89c2e563bff0b0d55d504cd9eb5d6578fd544f067771c5b52cea16d18c9c51085657ba22b508fb113563232771c8cc8429c01f9803975fabebeccfa244b68ac60e5c56f9ce197d36c087df53218ee6c933122d0d039b0fdec391c26bc1df0cb8d770fcef750ce736ea374621566aeb97d59799fec70e7346875f292bb8aea3a9c674ce825f7181769fd580d058d5d7f27ab64ef5c1abfa7926d012232372a81f39ae8afac63e37b6ab64a888cbe3d58ea9b62fae3c188d7c83e3744141a5d76be150244841d6b94b885ed52691629b73d9937cafa0507f73f43c4d07241fe664be70a596bbf4cee29d16601d4df6b981a9a6eaca59e35f12dc9fe46162628f112f919cfbe7749e3e508a8a8491a0ad5e90cb0acfe367c45d969515c564f9da1d650dec4b2f5dc22911c24409291b67b32d8f5de653ca3732e62ede55b4b6875d6ff0ef327e23c3e488583626f1c87cfebb0a64716f1f89300c685ecbb401f6bf3e53c396f4dcf22ea72a54f497bcdb35ccbcd5dce76827e1e2aefb03bcdba7826787c70945bd38b61063886373af8daa9998e501668ed12b87b34a3e32095c1aaabe8085660dfc24168c63045484c106f0431b0cddcf8a20d6ee7df69b17b05c1e19eb081b375e1422ed4ad48369002f39fc3e7a094761f5d25bc60575f5682843ca1dad4b26382762c40de5aaa7e2b5c2a75ad8fa8c2a0b6c29f62594546a03e28c8d0af0878dc05b110cd80e4af6ef9bbe19f5dbe80b1637f9ca792be3c68946957a4ea0b52715bc8c7a2a3a30271b022abf9d569cf662c6a09916e7de2a397c4e4f71593ddc57ae754d1d149aad96fa30098cb68c3bac286a2c99e242f70668da216c9353dbdf9abf0e35ee048fb0562e80da28bc93f92e774721d85bb9f831b8f510ea1f73dd823b015dbff232814253576be0a6b65679c9528e88ac2314c2a7b765a5b4b48bac6d56ee798f4ee15de06c1478248617e4f5df6321d693e29dd23fd5d74a33b6f7315088516a65569907ab04bd367ba8d5a1336a44dabebb6055adf87481e2396a36d572a3803816e2c73ebca324a012d412e899ba23a9058c84c447860397d971b0b3fa757cdad4edf20b47b02641b41d0c29d8acd1a2b12d074a656258bc15258b0cd4cb679ee52ccb7d4d6f219dbc1ebd9ad3e6024d03c0e83f068b739a212d66e2ed3d3e290a5e36d4dc875304cbf7d57877349c3b00703c230cac8b171fb31c7616d6a8d1b5e055ab76f280340656771eaa93874e3940e0bed9944e0ab4a00cc977c4b71f44a17f25fbfb1841dd2af9044ad9ecc957ee5f92d0aacf754253639ecbaac649664824ae65b20e1c265789edabbe842f23ab9e8aaa9214815c6cb3910a404332a3a048b16e0ddc7c4771e39b0d1c2f9eed52e45af32cbb4eece266f0b3fc790ea33099423869a691047cb1d1d91c9f2bd53afb792f97c7bdf6b3e9cd7e0239862d277cf5acaf53cc256781f537692cc09c980920d514412278f83e024b21fa90b44ab39c9d544cae9ad0341c0cb6c820eb21a2e1b6225218d5b01c08c92b1171c772329f3659c185f9a1f6747d3740aea15575dfcfec22bdb4cfa2dc2535beb58ca6c9a72aa9b2998de1e54278bbde80a855fc462a3d8d8d4c31baad7284cfdb8800266943685c6b52350fbbccf1b3aa3dca2a9932648fcc7bcf81b8b9b1b3e54bb7e5b57c3e7ea31c694536c81e12cdfad91d46468eef886b31a9697fbdd3cf3bcbe6196b75fab2e26ae0c52fd83aef1caed73ef5418fa9224e31fcd1438866cf2197e3b8386f91d8bb2e92575bd8b3cbdd816b91bf02f0c5dc177cc468cdaccc99a76335cfa827bdb407f517137443cc7fe2a654a140baeeaacf5000da96eb202f381c590bac242296e77a766708d791c213745051a711980b7b3c12455b8546016ebefefbb444acd3367bed876fd0e4670de967f2dee89cbebc5b3e0ae6169c08c410a013927daba770183a80602fbff47fd1efd2b9ef5b5d5779245ee20ea44e06b9cb2c3ddeae92363b9b7eb3f92c84bfd43fa477fa6d6dccaca79127b3ddc13099518628ea2fd70bf23ddf2e05092cc2a00a13e9b2e0a5f13f3a4cfc0ed28081db20b339074f01ea969d76817fb25228be0de61553d37ded46b127062d13c47c6775ece75cffe9b21e29ad269fe2cb82726a26a430e7a6cded7f07447c94ef50a31423756a6bda3f880fe55d1a145b4be8256f2ce8bac5ddd22d0781d9179d3ad11cf4930802b33a93aba1590450a23b7f501c4d2aa66053708c33275d58ac156271b83acfe6c4406cc30f27fd795ce2d8e85bfb3b04387e9a8b7ad9adaaceb863eb2054198c56042b05118dd41fa2f19e7da3b67250f9928e2bf506e32706142bb658ec5a008fabcd903961cf6c7dd9af1987fe6d5d694149a170ce1234f4fe60fedd11a18277cdd3f96c64ab2a057413d72d75386fd27e6b5d4c90ddebee5f4728586ee497ec1ab9dbbd01e90d282e8fdff0a8ad2c06603cdbdee0a1ef9bbfd30cd2237d20692180afb78c036e17df41fc70d6a41eeb1929fd723eac1be2f20b1ffe6e9292228e730b9d82195f850a15bf313ce65c90f9f86c4408003b39dac6ecc39bad01dafd41bec08270028a23ef6c43141633ce2427bf58a5bca6cda20f10575e6987f920bf76d18e8577657e5b3681d073e8bbf8b75adf2b2a193ba3b89fd1f8c6bcadac02258e2492abe15348d30c55674752738464f5667177b9714b900921ebbcde8c7d7e15638f2aebd6cf0d5e5842b74d132f8233539dd005d0241afd9f45cef98fa74f565f460bf9e8be887bdb0e4822fe2e61dc42e1816d8e0a421e936bc16a7d87e027f8ff00b816ea71bdceaf0dd625af06f81de77f8bf5e00b042e7f256c34e5c96763aafce8a2827af1f39b59d80b4c605f113543e578a3531f8b45446deb391e9f840ce2bd9da0190ff596d2dcbda73825d4ef26ef535b227581d125889ca7d8d249dca5599534c57e45fac6a7f0a34f90698943ed0a69a5985cc26007e7c635f850a82fd0f13e5941c8f794c0dae642841d0c20b8ce7fe140ad39653689ce933982ea60aded7fc8f6db7a4276a243bd2010d4f66d60c236db83a62bfeea027dc93e3ddf07eadc5bd4451fbfb5aa8d447754731ce6c0afa47e09eb54c5ad3ee4fbe49348848cd037f6e66068d065100844fa61a6f04555b52b8877d0a979726d0822d7a1789dcfc56872f3977af5129eab76a65bc0967bb5907b9eec46554853da4ca05be4c0bc2af630ae21a879c5412c93c9662f8a8260bd91a40f04d1b51fab6c0ad1c196aa8da6479182f399e9fea6498c78e135dc50775304bee256ca2f9e96f4ce501f08c8c990d2b3e1bd2aaae31096cb37c2c7f51953c2d9708fe58f32a25f140429c8198ebac8ff6b943f05d5e02311c4fe06e939baffdf753dbd5db5f25ce222a869fd99f13f90bca97c56ee12c0313084f0a63bfbc1b988281bb58f06c1eaafbbf7c975dc8c9456fb47d8cf50732192ac0b32ab42f8d76945697fa698b76b2ac4850240fafeedadc485d77da9bb8ae3b5daa593d03e8b7809f2f76921d728ad3c2eb420c64dae4f116b787a9aff25afd1c03b05c95bae58f7843920c869d3f9cd7696a20491db306388f036a6d26a16d4b0be97077ec21f3e689e7af94132214ba549c957d5d850399046dd6b4737c8806015671d7796aad5d99ea473c7c0a334bd04791e2fd755fedee604962dc90aaeec3c120f7c6988a5378997c2b284b36158a7b1311b582d06d894ee3867367a05a3b832802038dcdd73c3632eeec86e6d40a22f8192c6bd158ed8ff5c2117f0f7e68bc7c369a9bbdda17ca956865dad695e56d163cb1fc157903f4121ed1f280bcf36118ac571369a115467988ed8f6aed043d54db6e73e1e110b353bb22981f9bd73b56e205dc196de31dead717d3b61c71e20bd192a7dc94c0b4f03ed63e84a2bc8b72b2ba30d2115bda2b78e199dfea03b0215c99d8b4125340ec45943fda80948e0969a94a63795489a7168fb31c9cea6788bb5b32d10048a075ec134e4575baff82774a1c398eccc269e96e981807abda3dfee6d4a6e4fe9c28f8807e95354c5adef8b5f89d1ca4a3ab7620a9fe0eac780da16fed9f68b74fa2612c277cd221574eea5fefab3d1ca2f873647ff4c404ec3137279be597a87f39e057039e156b65c104b7b5648e4574dc3e2078b7e685dbe29a58baae10f89746a6e74196c35adc1a2dc14e4a8e6f25a16e1aa62c566ef1e2349d5cc831b0f0815e79a306ee48d9b5b5817d970f469c0decf8beead29def3052b8aac421a9d63835fb363b7421d5b4d18d3d4933f3e690562dc6da63e8e57eb3d26e9e20d8092b00073a38103bf7f6a42e577e70c8f3a0f23a79499aa7478d3512a544f44976d2bd7d8041f14f9e85cb728eec1a1efcc02269d3bcd15887f1b08fd9a4c188fef4681847a64eacd83e306889f01a2ea09321d6e47794ee59283198e993d5fcd282e9eec07cc6bf8aa42e286a07a3765fa1d96f978b2744b2f83b01f8761006fffc81a28be7348fa1fcd58e2a03b75fb8b13b9cc80d88a0772fa690013b6c11a5f2bf1d97b2512888d119569ec3fa3350cc2c65962c08f5ac31598dde1cf60475ed422c67e6b00569a986f4910e0cf1d8bb6db3bd7ccfb952dc5675b56caf258539ce121e13a04474fb4791552bd799c821c2a31acfd89e7786a3f0d21c19b44b9cadae1d69e8ac50cf3cc59a4d2fb56457da6e01db8cccc5cb2646165df565650acbfa57738815c4d81f6b3c068760ef15cc6d70bb9bc023ee538ddfe7db56f9f2f8fc4c4d29277ac29a3d3c6fb11b3195b13febaf0c637964c6370aefb3c3b66cabaf2320b7b646fb848fc48c5afba921edd511d89f69ef8d4217b87f3da3360d70ef13cca3275d9c1c44bda41edfed860b1e3774797703614ce1358602c9c7966f4ea1c2a4847c2f55e51c2e2b9a277681970c8a9309557c342684df84c226ec6e3a0d1f33f40bceb2d8b20ed5c4ef90ae35c2b60152bcfd3707fa8c506b04245ffba493d4a78446eac2612475b5d0afe4015ca6ffa22813f4b1e22e45e222e5e7c492d904cc48d52644b808204a956a4ecc592e8a60696ae17de45f2469722c44e0485227afcedcd2792dcd4dcb85f6167e3c8c068d06078f22d042893220ea04f12a6b40e09a0101c0f0f97e45423a8ab84a5bac943cbb777d98ebdd87503af92d44d8923f4c34050745725b66e42a9ac1c59606cc806480fdc48c2a127bb573807da29a8e9a1069f4b2e39527d2d3f273a68aedfee04d767bd6b34e3110f55b02a7bf92ceb410b7552f46e36336624ddf0722e97481cf482516e2bbc18d912d9db5f5fbcd7a24968b148215d78d11715b41f4e97410d2503e74b70fabbee42ac16397422683a7e7190c4e8c943556f423eaf320e54477edaa11784a45cd557aae3ad8c29ca5d6ce94f41f4e8b1cae2182e13f4f2e973a775af3a7f06354d9e828bc78c6083613ffdc47e931b7c9ad93c7d6b6d5ab6a1ee187172216054075141cb3bde0f3bc45711d289b893bbb1ef15b215be74e8a46963de6fa360a9b79ccbcae3ef2a57c67229a21332ec005d38c0ef2fbbef1e9b705b52b2fe987b652bba5abee9b5c4e267ef7c48685abb8c5543e571fc9168f3604901152d98ee981bfa5f88967d5e1f713bd6c5e2ebcfc5ead8eb010a2d3e3bdb74ad7fdf8469a36113b427b8d0408d7c6d65ea5c1e6441d45c12c77e5bff51a859a4db550f0190ccd1e44c5ccd799cbeb11007d6ce7a0802d82466c64fe9a763ca2ccd62a7b178b07b32bfeec3e8ee3734cc1816db2ffa7d461dcde41ff8a4a8983e419a9ffe09fac67457b5976f53c027549c6fa604dd0e38da9572a429eea1ce227478713573e7ae6725bab5c04a544508ae2577426dd3989af3a7c4618d364758a5d44fd59cc8cb3666a335829bb7db4a143c57a7dbc7645081a3d180ead360d0550d8d123e92d3d5f9bb2b2746004f6b12dac670a9d6e7cde8c9d765ae22d8abd2ff06f1474c149c04f22128ad38426313be3750fc2c5039612995df213bc907ff5a7913af91de2c601de3aa41f2d6ca52ee960a82cb816babccf36323c69ed8888e5a20194636988a078dc38e05d3c847524d60ac07392deb3492378a92384e6487409eb4a3a273b6817d6746c2633401365e04153700bfef4c1eb25dd3acc7e4cac6e4b7bf693be4f567175648c915b7ab953fc968284a2cf19eb31389aac264e4bcef159b4a942ece36ecc7710a9d820855f9ff4011834982b2afe3ba66173fa31a00a4033086f3c28386d763ad14a57e6cdfb82a1ed79bcfef16b1bd68d285c27e35ddbafa33654d1a3912ce8a4de4e948a033c07892d04a8c75d3f476388ac91b8ffb73fd0519ab0d545dbdec76f0667500199f951d72a0257eaf8e33a82757002b03b4e7f5ecbc97a6559b826238194e99cd55b3955d336ccef991916a4079bc83f98a9929efb51f8fe6f39de6ca706765433f6ea57550a5889a6b1668ec3d5838e2df436cf01d080949fec60701b4e6b64ca1afac84a343891fa082001e8ca5c97b57a0daea66452587d0902c76cc45497bb1287b1c3246d6f67d2651d902329bfd72210be390827bc4666e38031646a7dd86a79d7e8a4aabd0a6b689258e3ccea7564ffe9f26e19a6d936ef36d010245f84f0371f07bbeecc70fc94e90803a87582b4543158e7b9f9ed1a8ceacb0e871f74fa0d8184a3892e01540385d0a6e6f707cd5b75316834f6c2e4a1e9125c97879ad388f78448a49a9cdeca375032e16a2df855802367213d4b4ef188931b8511172fc74979aad8c5e16c7a42c42daaff2ef3db08c1f864c1bbde3d39c61c029b2d8831bf057e72d5154591b66ed409d6a3306da694db4d8bcb5403709ca6cb856c5af0894652d4ca2abd9d8bc1e59d01cb8690bd33401b634e88df3f3a0b899361d9980cfd50dcbd2ff88466a76f5bac8677f355899ee24bc2c4f984ef54963132ecc9d4ce21a97100f76ebf749ee0b5d7c5e864df51c92781d567e96e842dd453d87fe9651a91b12d7f49541abde3e6d2b784f981f1da2c5b532e90c87036f61386d9ddc87f0d6f877c9ae30accc9c38e2591986713715bafad4927bb59706662f850e12d3bf98404e9ca12e46ca1cf09c1fb7ba60c32d903d7d16183e4af91faa323b100fe0ffd84693c0c0eb2ee99b3b70a77aad5d4a958ebf1d611395b89660d71bc2ae69a0c5d66646637aa62fb4f7b484ab22555602b381a891dff6b28dd596e20ff0347790139f25a1b4efb80ab9ba462207ca03aaee1415e4f461a16f5510af612c9183444fb8e8220875dd04ab369113c8e07f15ae10833905d60822e8528dcd4036e13d9c9ae9ce5161d31eb86f705c4e99f174997f33cb90382f78abda6cda6a50a601b2c8e88e48f607c5939eece85fd76cdeb3726c28b9a17ce42908751304bc1af71131ceb181b33b7a2423820f5fabfadbbfe9349e576bebd674e7f9ad0bf04dec03bf242a50dd93d08ef80ed5506ce32cde23fca7f4dd05fd4a56d9215fd1b2192bebb02b82b3305733c6c4567807a21b12ae214e44b58a37a41d480b7e3507be8515c071af2fdf33f18a264256e7393f8610dab6c44b36313c0a6f54a96e88fa98b100ec72529bb39960328f4db9816631956b22f13fa54c7d9954dbc64320163b4913fd4fc80ae471f9364efe4a7a23eab0c7446e6df290308432902db3ecae31570cba6c41ac5ddf75347b49cba57d47632d465c1fada9df4edb2c38e4ab68fadf0ab98517c42ef66c53287b2d1a4d27140f3b9c69a7523e7d234ac2aae231cd7c4a825d2dcf66320f28be6e742dee4aec12af1bbad488c84cbeb288b31f2aaca883f50b5e82b4b746d5d9b82dd6a09731a69bb4259a19ec96b1e94ccd910e8a76f56216f724413366d32e3d5a95c757f6a8b8ffb4b6ea812a61ff7d69f0c00b7d8ec09111c2240cc5c8d065438f8851f083d4fc52fdf801d5eae788869d6221f18210ea97c2ac1bfc5211579913fff4d7029bc99113e19f711ff07dbbd00bef961c4c99827561c13c9b226366084dc40841907bf5d37450d063c985192f2c656ac1e7144828583b666abaf6213cc743ede517513500fdf1635909f6be8bbbc06dbff24da83467a1088ed8489651b08b7859b5c6ba378ccfb0475bd6d485988268bdad25c66524cc2adab753350e6504bbfb54d25408d290c5d4ff900ce67bda09c62f4f43bc646adca99cb3efb2efc686f167ba26f3161fb6be86074f882337ebbd1b397bb9b106b6373aa2d455db90f2e416e30e160d0e63dd366a57f6a7e2fcac485552a9b6e8627a115c82c9f78de88890a7afa240a7516c0f6eaf4def7a640c7cb65f88959a2920862f8e14e96d9078ba1ba03bc562c9eccb4dd475a1a7ee242bdf76c9baa8bf66ea4585200406740f893f5dd73b4550538d66bea7a0d2e3163eb33750a6cdbef8ed6c0203d0e289470377e182988d8d1dca048cebc0c72e932c2955fd319bb4909cb881eddd21a8866daaa5e9f6f2a7a7a4576c647f32b7408edb727eb6d7f0252e66bbd1ae29b7e2ee97af4ff317353055c1ba111610073185dccbed26ca1d08196a0ffb8b62b88d4d9ca7cbc3772d399f58d3ff08f77ed0a0dce16ca8cd37036228fb7f0825f26344bac2e3a148f90d3dd6df6de5d6d75800ebb3faf7b799a5a3e720f44288f4da3cca9a665c10c1fa3ec3cebb7864cb9ee25b08c663e3a08d35b83d175042e2fd6d988e0f625fd35305e0385f486bbb01aeabe1be31e23832666cd9da468a602cc970622697d67342b6542147c58c9e357fe87294fdefa92bd5217e6111d2eaebc23246b36c369222f31f234992897fd7529fed7150651018432e5a148605191c58650fc28f7d9f81687e8656fa1dea03431f44960503f8cd4680d077b5c509c10f90cfc0031ff5378e07fe7924becd9c553096396003bb4de2890f04fb2aaaf33331ca940965cbbac920e3aa07892f62635f78e00fb7ad75da0f69c1a50cf99010506db2088627836755b99d544d51e80d31085cc3c825cad758fede7ff34abbb18f9079754da722faf413d04c736490a2f64d428dd35d443509a021f3a29bcac432b4433c12bb54f1c6982ce40b4454ff8035e26ae4cbd794c7443ad5b9a13e345729b8d4f11408798058b2286e3af21bc18d0206ac3e71ffe1f1d380c1d82ddf74625b2cc2eb1c3c5554c4bcf2b154bf2a6f2eee4cf2ec21c1ba64c0d710c7150a6487dfb306df58092b489de8e74f54c7c78ae8f1f7ecfe6b17a0590ddbe4cff9d37ca79ed9540f09c373aa02dc2fe8b1f27b074280df3801940b6671048afaefcb73ae026e4d3a2000b7e3d6f585c56c1770ee98e2f8cdac9ea9baa257b0573d2ac410f1aa37b6e900ca68678106d6b497f7ebe7f02c2ea085e9ee557c09fa05947d1b4114d09cef068d683d56f07e75615d61a71dfbba1e28190ab5349e38c75642497d19575289cd8a05ce046edbf237c85bf5d719d44fe6084dcaadf0edadc2e2e15fe88d1d3a2d7cd691b35651ffa311bf412a59b493b4b41d0560853f133b384e8141198e97c004e1ddc047d1fc48c139805a82155cbf121f5cafbe6a00776abb1e0a58e9c5fdf562e66749ab1a18e234d1ec4b1b8284b266197a0cda49e442ec16fdb131f69c84cb0d5bdaefaad8546c25cc70c90c1447a1bbe62bfa80391173369e44ce4d4cda492f36da4e4390d51ca125e0921ac2a68f09d98b33dfdd555c972f7259afcceec688f99a8c86846fbab5d0f43d8519bf23c17e6a4eb6a9f99c4da32e92ef1bb143c4242e2c86ddd9cd4b3ba9cd283a36ef73ba3e5c7ce27bc1d7f250ab5ee5eaa316bb32c50897a0b68fc11693cbac34cffcf6f155536cbd276fecd6e01209af4ffdb519c92abbfe175090fd289327055f83e63674801f2aafa4d2a8b2b4315b511fa470bc5185a844fafabd1115c1a51660a8f13adda41aab32519eb101d664b51fc0e4fd5459fb06bed0296791a6cc67af964c4a0bbd9ae43475f57ae348d2f5469a386022cd4a628353c0deeaa0259071244c112448c42349d45094c6a4cace3f1024f06b27c6f8dabd6f811137fe213dfec2b6f8772c9e85d5493db9e5fe203a08bbe59964bf2c678ecb879b1a739924573c8f38c20652571333f635ac75587bd3878fc4e9ff20878e08cf9b155cbaeeabcd04a85a2638d06c542c352b93555cdb4488635a0b294fdad81750e7c6bbe469090ce29313fae55f1a8127b08182a13f317dfc2671aa54c059be42c649a77746da1f0d582227f05b33d77c9dcfa80d1772b87b907fc03d5860001afd8947b10a0c730d70cf6702765dbaf38d6e5f6975a5d535a3f999821f20f07cc9e96dfb58b03aa5d317ee34a9d860858480e126933817560d91bacc69b9c376a4d08ccaf2ac3f4d667754a4a9551dea61ee2c88993d79ed7f47a61773f9cd85d2d0482565aade2cdb09d3847fc5e15ef0d6bbd53374d9fd38356e30b05b78d879ae9ca2a4f918f7b48629a26c24001dbf42431a45773b30b5c5f4630c114ed7b0d3a26bc568394ce565b905266722744d9e24e00bac0f513674905b77c39ccc4ed8d517321672a9fd6e6c618e7aa5ab401e2a4c013deadb0c04f3879b1339f3d57891a6bbafedf2625e65104e3bebaebda842c74848fa10cbfdf9949eddce1a9723abf030f11adcfe63b25a704357ae45b1105e50507b41e243e78e1abd31a6efe21109bd8a3eee0302789ae6c90833b6e23c942d5656f3d813d76c35d14019fd5a9705db2add9dd351d57c15928ebb1b3aafa1dc5c1577ec7bc5a16f55c489baef4c07363d497ce0c8d4955377c61199babb11939d2fa4e40be9baddf9779219b25a4e15029b089b5f1ef74a3b42d8ee53317ace44f8072fcd9f511ed8d16693b9907ec9ca1133e8b79efcd2e4c461d8a07bdde9aa7b5a7c1c7d92a389bf3ead8a14830f826c3180180b4968357b10a9eb3bf9f16ca8d5001d0e48b85c50f222a0fce2b48b411d6a14e8f1ee4b64e6987c8992a405fd1efcbec98ee58cb4b95ad62fff22f743276587cda98cedcf4d7130165aea0d88736f2ff1c1c1924bcc39c8bb4653e54cf91a87049e6574ed19be9f9966922c28ca4a5e3a2a9733c8f5df27f0e4331b3ad55c97ac604aa6c8a2352fc070cfd12d02533fdc5ebcc2e53fc18ab3a7037f36d34ebd79faedc06ecb5ed4f101056cb9b0685c4b7e4d299415f5691b672872c322f7ab59cf335c5fa7b893cd17f43f77fbdb0c584ee60f6a67eadb1a68cd2ff5e7222aa77a6692bf7b3e17dcf086ebfb08192a5f49b445d7776c6b43b925b4eb1b7eecc15094759cfdf4818ad76ef4e0fa2931c70634bc025ec2a131f4b6cd90a4833f865f74d256ed2c3ebccd4e6e33f8ccfd1252f63064b047b95451202fddf1e6edf222155e01912ad1dcef73a897fc65043049cfc0953dfabe3fadcde612410146ee65e812b6a78f2d456478fd2d3e19286d0087fed892eca36440b8dbbf47b3e6fe37b02910c4a522c162f44d703101b0924b82c9c9b50157597e78bbc292c1f6d5bf2d99ec50ab8ac0c14d5771183394cda3288e8dfb2b67e6b1dbcb0fba36df19358818059af3b24ce47de194f9c9b83039c2a173287b541fac10c4d0a70055332af685631e0b45e21512738538e001a33b6a85bff8f9e1639d22eb66b2317b53d6b207415ce5e916e03ad60e86efdc843dbf132c2ef36c6380e35146f7aaf3feed286adde7f0f9b74c270077324dcf7bf0d38224bc71b98f85e56bb944124c4b8153db86bb159451c757242f65121246c152700015af591ccc15dc2666e86574d13a66b44fbfb4252837f7bdbc8928e7eb0ab13f39648a95b60917f3a91d17832cf112c901c8fa546d90254ee31a9351cfca33527ae42691a362b10c044d2c090e2c53ffc3574e0be1699c3ec6bc31999d31727e005c0e8cb4dfd9bd9649f3f5a7f9176625047e9aab263429a76c5250bc58a42cfadd86b66f42b949b485d17a78abee4a5b568c5a6eac42fdfa34b302beb5b94a16d2fb5047e287b105feb19f267960024cb923398867b231d729b9651d02d10012aa5e37f3ad0cf346a438f7dac97c1876fb6329c3dde1ea5a8e553b3b4335e98786f58011d0ac1463615d7c2ab31fdecd238009cd688d7dbf150e4a7d2162cda62c0ffbf489eb5b89c423b43732ef51c270b09266d91715d97d7cc91b263e537ff991af9c8f43dd071c69a3cc1d8d0c06da7db56e86d7c7fc6a3a1197b1a11c0c20b645f190cfa30795f3604fbf779f3b96e37624150906b1c7837cbff5582ae54bd008032247757d7a011d1c2ff2a868a94b901198e6634ec9c8a13e0001f506efd80b2bfe687f0dab9aa180d08d173f7cac159fc7fdc656164344bd5309186cfc319939d41a1d731a4bb420d205197c279e4653abd3b160b31121720e9063af1283bd04a264beac078f981d2f399384289cb4daabf6f9ad10cfd8f2ab93439c3fc5e24bb5480a273dc7d96b7cfae80c05b51e194ca91953fe687847347f0a1bf0153afe2a38e7be666ab764df99c44bd3185d76f744fa53edde51ca2341eab6cec3da19387fbb5bf660ac9d47bbefd18d350164e68ec33e98605ffe22901e3add883a0cd15a386aa02729760fa3d91ebab1d126a6898485350e202b3886307e50b5d423ee1861035fdecb23ca844885dd022a44c1fb5ca495a2065e36727a1880dc1596b0c324d754bdbacde8415af3cda4472776b57a185444fda0b0f3949e55385c71ea451dcea139488747afca16f50d67a02767ca0a5f339912e39b377a670ba33ea3ced84ec5b8b8584d404b849254ee0cbca596cadcad5b44086059b3dc5447b2fe104734d03b538563038f33e45027d50eda6928ac440cd139ae88f5bf62dd45c34484781f9f31b150ae9c0e1156b447a33ff848f7badf30c2800bd1d5de5dd61f96beb2dadc121cef2fb191fc84a1dc1adc6bc9d0d14e582233a4f02b23f3566d600dd48cbcbc8543cacb713a8a8ec802f1e5f87a39c1110732e3051ac6bb62605787104194345533f8ebfc93b6b66f0c80fbd3aec17bcd7ddaafc3a50e8587bc760d551b9aa39c86642d9b5d12dcd1392665a62c7801ffbedc4f031bd3ef94aa5ef97509973fb849e642d763bf414a3ba00648b49243f0b772ed7ab245540e9e5c76ee3215234fb119f1f71befcd5eacb1797763766bbf725adc992afe8fea8837e719326984db2f170022a8eb6f153b5a6281915b80f54d586ddff30418a4530d2c51895acde04632e63d0802f7d148f406e4018d8087a54190fb526adfac7fbf11c724059593eee05595620ad83e696f3d9a9c1707f3bee9a593b5f5702d84342d762e23d8689c4b0b09f936568a93181fea2c291bad58149746a72d2257e3cb7a70c2042bfea4afe216e774a968494939a4a5e69d3e47f74bf085bbddb3910d903af8a6b454ea8758e27046a90336dd3f0e86f7f47d7d561da0aa0f7e093a66013e8f9b7f279ed6193dda5d135f3bbb17639f7935e458a2c36df2a9e3cac543cece46927ee373320f488753c7a5e1845b3cb5597b1ba1c33be5683f107da84b3043f2f0e62b1652d5c7491bce1cab9dacb16d5f05e1c08c8a97436852bea80112050e6bfa7643f40de03efb61da0dc13ec1a852b90b90f9bf680f94a3ebd724a59ef6f223fa9d708a8052d4f4721251609ecd862db45689199fe704732cf543190ffa6316208823ce5b87bdd741e2db0dab287f26c83cb07f209843599b0a252f80ac17e286cc6949015842eec67fcd31719c18c5ce3ecbe43d211ee8767a4bc8115f4ca250120ba6f4200dedca8d8592f701c86e3decd37659b843fe735a1a14b5fb6b4b82505a45c42a89d569b656bd2c603681201f1dbc160965d8d24a6012f74fceb103769e57a5294593f0361ea5963368bfa4085461573b22c64677d251e58446f158e741bf4660bb0d423bb4ee1ab6ceaf2f264ae4bcf09fc8ddbf496660303cdb50c5ab56033140818ad1a34ae7670609ee56f7ffe43b5f1c9e526b342d73f5fd88b0861680eedc38ab6b726ecf4baba9521f036c79c3a4499b27a50c118929c7c7e46583fbb26f84c131c13fb0e22857ec22e240b25ca8399be0ab4be8a142d3b75747adf207a51607bedc29d45fa3c1ce71ea439e0e16cf0cb050aa9f459b90356c77abb38af8e3f2263f3f9950a9d52452e94bca7fe9f9a7c96efe90729230609b2f93678dc63adc342a4ddc2a610b3672db8d71318a42a11863d36be23dfd2f60c6c6724af4583b6124a8308032d2f7e0537a9e344d6125ff04e77efd1af8d791cf5637d186672f7a25f58b640222559fd72401fc6b888945b906140e2afd8e6accf6012b985f1dab4c4b8a4c50e6ffd5518d084b81e40e2b53a6a55d7c1873f5c4e90c1d0d57ee255a1ae2f05f6ef5b30344119bc852ee7ff4f9fabb7c13a121c7dd4b4ea9e3ae2e0fc8dedaa629394fc968d508a0b0525828c88a05556abac2126a8806919e8bd65f1bd36e877eb2bd8e61e43569f1be0eb69e2af408ef77a1e412163790f262411b394883ae7f3161685db5a61b3b657fbfb313dd4146dcc7268fa8db8e4767cdf629c4550b36e1993f45394df94e4965925682506cbf3c313bd4ccf19cf7f2199b446dac983c233aa6346847cbcbeb2d23ec0c513441fc7b0bd52b8e0e39d3fe1aa9bbcedbe833ecbb34218e4c302bb9120823391a9fca08677d2818a6310ac0cf15de490d0d17ee8adb1d543b3559c913373c3699fe65edba568fb8358c335ac7262d8142e6744cbb3b1d276d4fa26fb26642c901959b57af78f194e98dae9d43da465a555739c5e43408021feb6d5b75baf9125fcda7faf3678d1d6a50e1e734e76b3945ce9ba339cbedec28837f10c66a0bea7def4e5026ca2159607e34a26343d9d3b5b0baffe0b737c1784ea5dabbcf22c0d0b0eb87e58f607b86385e2e9ddf604d140296950cd2668223b2e3ddeb795d394d5fe0d5e3348c7183044c080e34e591a29754fbed158714ae2b9040492dc3d447d84a5794a16245a81df557332966ac1b787b887ebe1e7f94ef09e367ceba079f8a231f91e888d3c9f83787055b8fbde484ae479258d87d94c361fa21a2ae234f465aeca9bb8e447464838c188216e1ad38146026a7f860e9bb2f23d32c16baef5477629e4a49d52f7c4d78f32ad30f7969c086f35500bfae265bd18d0b87e0d5d5859ec5dd0c4e09783c10ada5c7ad408080d3d057f956ecdbc8ecb3115a592591d27ea2e7f583c455041496c13c8692b1771a62be084528ff6e5bd13114687225e74fac7d4625224497875d7be15a064440e7209fbe468f2d819253b6385ab296536ecd6c1ab9aeab538431644a939aed771916fafc36ffd04a55e3e71695c85078237c56faa5701381e0eb418f5a5be8fbd994896ef6df625fd697db1b9b7bc3546d3d038fdfa8e168b84eee848124dd80d16a0e653033765fc4c820d18d759e50b99d6de8ddbb1daede5ddceca89297bdc91698ee849d30386d758f500ca6c922cb926db5cb597bba2e9ce2e06a8bcc044e34d169bc7b15074a0d8578d08e0a48184510f7f79b9c6aa243b893a6efa289293c02ad92ce77393e14efcd6decbc91401e23bb857739001578b25ba8ce3f548191683498ab0ff01f6b195c99d2728e9d86755ea862d82f3a49be97f3aed818be131cde37167c646ae5e75d1206fdf5d0352fb959cf13ebb4b46e6339f8e446fa83c5ce66acf6ef34dd0d41f2d82f35b1fe6cb5f9a95e9b0b4131408bf08d3a20a487aca527a9d75630d2a5ce192bf05e74636bebd577f4b902863334b9caec095fbbb6ddae7b62cd3dee643c49ed42b37002e1c3eaa1e9544eec5a79044cb45f0794277ed8e246e73f73a8b42aa1f235379b7fc2c1482c99200771015a6af0cba651dc9f36836c3ca73e54dbca70f46f6c0dde4626c382a80a0ce00adcb510d5885851a1f721a785eeecdf201d9877c84e1937547eaeef5eff7d32ec529d4615c5ebf95a925e88e2953fd6d9943642dac15ce78b33b4e7e752be68e0a726dde3319d49f022f87412aa8f9ef75c7b07c748865023c534a154506f08a652a34b7db885cd746ca65fd46e5eb425d95d52f5e57c1fbb836e7a00929e3ef6cc289754d2f45d05e3b8893da979a2c87c242111ceb1ac281f05ec8831b17f54a2a7f883e8e008804d32644d1ec8f7e893e142c45c5dbe56258f6cb4f5ee7726ba27ca32be84ac879afa658bdb59a3aab03ff86252cdd367d363c4520bffaf6bc38e390d9d58f911d118cbfc4c091f913a4c63e15cff81d44243ce710c2bce3700777cc0b922598d459694b6b087be2d833ce49869fac82c34a86370a2f7f3721bc64692045ab4e5ac5be6ddad58595aae90dcfb172cda4466a04205e77d5101a08e45138df5d1a6cff51d4c6610e157b1e0fcb983aa2edeaf18394c3df861b0f8820782ed4bb36b2f2c3a9d4be2b8f3c8f65ea3eddbf42e7c3764ab1616ed222426775b57c95eeb6a52d5e263526c175adfe7eb16f4ffe280cece23d239dd409dd88b479713065e480d9abd7a691ab9ae6dae45febbfc862ebf800c2edcd305bfc406db27cc15029f2cd458c006bc363d99ac64f20bfa62def1733ee5f2927a884d8358e8445270a0161af071af90aec6f8c0602705b737dd7c1dfa3e6fe1b5b5777e76f218c2814e27e0274a03c1ae595a8267532b2549c59837aa2a993b15b8b0842937b8ef7cac54a0cd3bd9bcecb27daf2a6ee0ee407fcada6f3e735537e889ed1f30d9e14486b8e608ac8387165a667b992bda964504533c358996f1173232870461c5357c72946dd8daadc7791d9e7f0de6d79d9298b9178125d25751c58ca7318e30f251c78d744b14906132af1feb12cf77cd8e57dadb81665237ee7dc35b358abefc8df67a8ca29a636dea0e0ef33ceb61c3f22a4be9343ce5faf6aa9ab768dbf168169edf55d6b77fa693f019edc21556b3beb7ed2f1860ccf3cb57ce5a8a8d3cb2695619557bbf1d6c713cd2070569c0e51a3bd8d2ba1f1fc3d8bc4f2ef42a699c0311050e80e306e6c242d7495d03eb5176035a77c211dac991859d2c91d0c371613b128e7aa55d3acd8e4c0a2f3a9217a6415e025de2114060b0cb7725ea03ffd6e94317590f3aa495f82e93e2594a8a992f8d93d36c4c335f11e984088d2f918f6f82abdde85d2f380440ddc99d71920b5be85f2628c5146755efd4be49fc25ecfc357445d5081e6c16a8121e186bb2bde4ba43070c525242c1dfa1555340e689e72084b776167101f561eec864c4438617fa4063587776ca4274b57d3ec147aabc268e837ae47a5b01324a1ffdfda4cf999f2e19abfe804e630b54516f5654f297165bb61a104d893ff88857094009ffaddd19319b89deadabf0fdb3295ed31ea9efae1a08efa5abb66497f6f3c3b70873111a6a798f860a71368aa689566bda1ee8429a82939a63e091480f474b4e6f8e8857a35a1618628507bc0d461683d6857feede7632f7b3ca7cc845df49f657c667e6f7fd04ef609fbe13116f9a8356cd4bf0d692dc334471182d7e100584fcd04e3b582b694bb04ab2dd8f7f41f887f3db3e511970663a7d8d193ad1533e6b50b6f2627b8c8c4f79865c9e895d994345d690a2c0dd09f115ee27f877b352765f70ce4dfa121ba482b230df4c35756eb5401317ebbf216df2415097da254b1e697423e960a89c32390f28e1f7b4ee20783c58d5a573f21f14ff35be0af8fa5f43ef6a11605314669d27b321224b4ca5e963b08b1de0f10badaaf058c1dc5163ad08e0e95f9251e755d5dca890bd480973e734035cb352cb209dfe3c2ff1082369c580276374b53c780d04ddf0a2bc4f1d12771abacb2c6073debba791f905000104537e969d13189a924ed7da318c0e1915648a1e233bff5ab0eb521c9e660c5aacb71766b09d44b8befa8da6c946c94547b742e470dc5415c0461a3502d710cec1cfa7b4ce444349d875b92bf041b6b58665e5bd32f6740483ea579a0704dec661fe201009dff324b902512fe836cd36d4eeed9b6813c3712d005603dc44f5216b8a82c1c2036d1d171a2b4d59c71aab1a216ab763d29555883e9731e07656e8487087e45214f44ec9b6d7dcea0076001efc367259e14bf822944cc67ec8b61d9bb086ac6d99d6fc0c5a8f480d833ec7b71e48fe5ad6b73d8d69d642fb807153a1219b6c42568e5856c614687c731ffe337240ee01558a48991282f3cba861b7011947f8947b137ab633e188083bcbb03d5fb8191f60b3f5f4eb4a1acee0864ecd9898b14cdaefe91dffef4748fd726b2be54b47e879b2f9621e919a37b4ebcec39bef144d4ae812ce7cd6dbee5c3afe475dc80d8b16bb6b8d118579c07ae31f02c33165ae5159ac311641759559554d19cc133212ae015056e8c3e61d018878bb84af4167304813ed11b76574e24d4b5d5830886977f87425ec03ecffc998801d58c5de0fa17a399a24e19d2d1d3277bd2c4944a9ac8ebc30086b0e20b9966a3d5604d3e902ead76c6d6f4f105ba6767fbcef27466f71a8a7aebfcd88b96f5ee00002ad16d147252c49c0832ead71b05507b01f897d6e213cf7e713f0278c982f330e3c7013058132cbbe1c9e6e44609afa0f66a6f913d3cd57f6fbe9fa694c490dcdf53de23fffb8c0289a40f4408359b609df32973aaddbdec610f75a0569cadc4683282db5095a767ccc73b8ff387d8b4398aabbdff2406de9f26d69e34cbf705cbf420d600c9018e7f1b17cd4e69f2a11c0bca98377a006c9fe60482056df9fb176649852401170554022723be49e0b85b47703c3b81c88846e31ee899674fe9839909bfaa5ed442781163b1fafeef7cdcad8632c747e199bc9e21fb9eba318041c56f74992d75b35b69d8372de731f373bae3afe2b162bc5ad4d40d0753a7e53f9be7aba9193fce321a98406e41eff5f16ebe176c72c3e596de6d04d3de6f07a0b8dbb04a6334a92af9b6131be401b6491d97b27410bc5720855c167975f825d5393dd5dfdcb69791c1a267b5b745e8a7797a5572b7fd1a1b3dd017cf607eeb53c19aba778459c8703c8a07becb95438ae5a46d409a31f21a75360f7139cfda9f5c72086b3dbbdc4db538f0d5ee09e6b1535b6e9055ca54b174b00174ec91f15cb6d584248c729e8ebc939711492569c407a17fca81fce8baa96ff4c006c030e4d81964e1af2de035fede0aed47ed19bd86fda3ef0061088a3cc417509e540e09f6efbece2e27e2e08a7fc125bbbf5e8505c6b9bf3c487d6a43ffe7713ab048debe543e772a3dcd52a395b744e748e1ea07db9d4a42666ccd6ef99826101b0657921fe39c9aa117b377029a9841275b004f2368a4e954adead7efe694fb6f932bba3d46969f58bbc66ff53d9d54ef93e8f40aa3303a67c925ded6f596433eef1c176f6768499c3552bbaaa166721bf5f4919c20cdfbb8cb9e27547a11a01c80e801696f6612d0a530d10f1c21783d5beec8ce63806327b4b651fbc500dc89d7d4764d99b6b79ada48ca7a4687a08ce1ebcf20fe823493148a33b49fb36a8b7dfb684995443dd9109b3f260bde3628cc20c87f863a7ea88a0334ddcd4fe675227f0b683242672f14466990e856ec3c7a1853b3f011638fef0422c954436646bda03210f75aafa9e1906869c06ffd5c0999dbf73b9d2d5c7abd592a64d97ed7074ef05598fae0431bab5fb456af7b47bdc4acac3dcbf500e8e04f3bd263df2fe348481fb8b32b57b151c31842013fc6aaa5ac00c588e647a6f2dc73a92a2e29b2a232fb137ad440eeaf767a893f804c278ae26f9a4e401845a8c5b94a7c2566744f9258aa1989f6afd299e4ce8fdf587087d6ca48ce3ef228f9492fa2dd6c0e557455e4c44cf2e961a74f685b3292a434ad6178f58a8c78ff19a7f8d9818a583ab926c9dda25feb92a83d115642d2bb00e172363aba87e136484aa7f0ae020bfeeafc13d115f8e11f5efe5c311e9c4e91ec57e15e668de4cdeed345beaaea4aabb5e8a1820bb6287d7a01998489f40bdd27de74a6a2847550fd9fae50035784420dc6b83a3cf07f9bea5191e0f7bf92e8ae76f7b5161a251be01e806c32188cb24299fc6c636a87f5b2b414e36bd0c859c99e27f9e99f22cb3be77f323aa4a652f54cbe3a11a232a40c51911f9dac27a51d239888d4539dc413c336adc4881eb5db6be184a8e63afd1d816b1b37fe3d1c4298b84ee540f8c0f13a35416d73fb3e52674a54cbc16ffd60648646617f413cdf82ff2cecc8242c4930013b39e7c029ef7027b8b089a436130c3fac2014088dac612111c78fc40b877909346d855b34ec38eef40443b1ecffde4262f2726d6483b0ae777eaf76ffc1c3900b78ae443ebfaa0e7e9815f8d07fe2efbded3ff3064c761300fa8609c811dd4f82eea55a7414e5d4fc77d8d8e4643db8abb12303805f97b1ff519855c7f70d4e830ebcb5db57f08dc16bbd02babc1839c92aed5fb1e566fd898ca73710c87edad3a12524cc8861f6a17c5eebcf0289320365a03c636b48806812510c5359421fd4f50618e5ba37bd9c2aac5b5e2db75c68f3ae28512024ef11730ff12d6e841ac72ce0b5b42e788e531c091489a53a24ef7bd5a5bc5f36ba0d1bb5be288d1dd63b6c5051022e1e406d2a09efd153e003aaaea343547b738917e78d9c5d036e07eafc90bbfdcccad7ebfdae64c049b7a04a9875001e51d2198d6c8fc5bff8f526e96b0ab3c84224d479bd5c342e6605b6d6ebc02eb72a2d99cc1749e3037bca09af5ea0f51dff95e6eafa41a458dc3156ed21cd690df895e86a8223d7d627a366f41fda943f3229e0fa6d13bc1b858f98f559ab7ca1dec370e29d5d4aba3e4f8b9ec29f75fd9f6a89f5c035231d270da31252bbce7b035e40e71e500a3a46c5894ab798b81c4f514bb977cf17e25330ec8cfaf520c42f88215ef937b68758c8fd3b4085477f1076fb985f52d74e155f73c54559a93b727be398d911d83ad36a95cb2034b397a6cac1940bf73ac6b0816cd945240c21d6e73f3b12857d1c2f9968f2cdf3115010e092fc653dccc242a8afd7ffbed9368c77bb7d711372e1e76aca070fd34c03fd9990475f40f8dc9288c523ea739f0573deec1997f5c002cb027819ddeee84adc0a535153b249ddc823f0cd4e73cd0bdcb997933c3031805d0c20a0a2c964bde38c798e4c49adadaa8fb6e6d081cd0b862af2e1be470b2dcff40f7a6e80c7a7ba6bca2cb30293bd1e7297543e50335d6bb907c3f0b6799fb11969abad570b4cde18a338b153470fd1ec1a7f27c7c05049c7fa04896df59adb8ac7c928fe880a316a3b46e49d1fd484f002a38201fd2d230705f7eb344a56ad2071ca6596dcc490b189b6eb5d6f3ad68700761139facf104fc074d0e3d59bfd669c128e9951af1b33b60a35a3adc934e336baed7fde3def5bfb7eb4e5610e3c43e45b98facf003f2787bba93ff28256cc21184d71cc7770ec5de0bcfc8eae7f6fbff50b6094d40a16b67dd3628bbd9d8ab699e0dcbf92a430427f92e7cd09261f8b5830bc2983733e4a8459bebeaaa94f52bb783155846fac5c4c75a6de9867a259d8dd2fd0bcbecc2b30cba65387502369f49535c53b77ad6013b92dedc536d2fc4bf7dadb625792e73b2d47d0554c319324c6d485d7b91f3f715269772c9c1179e4f1ea8e2988e3522f0afe8b7da71e90e09b6c9ba3172d483f047ba8005705953a8bf1ee5456f34cbe0f119b704783cf937849200e349ccade80579f8d5d11695a5f6f83f761e2606160b6bb7b6afca654afbd6b2994ea7e3713b7e41515dd86f853d9f70b4240d4dfbd05b0749cc04721a62d666b401d61574f3a8702ef854032b774348869f942cc9866402cdc0225baf9c6b92b847d07b4d101838626e541ffc9218b224246f84fdaf1cd44ca5fdaaa87466ba233c6d96d596a94fdd8538fa531863e1db78868550f32b11e16c16ccd8fe6067bc0b3921849b2f800ae31a80047400e01813469d5192234252d41619442ba1964be9d6c0271c12d8c455e9c9ab381f13a6e9f0a8ecb40c4a529e130ac889e6e6775154c9b4d52c3c1cfaab719214ab2a346378a716c4066c6cd33a4af00f774e613ecf2b34d3d322bbcc2f5dfde078cac66c036ade3b08cd52b0ea883e010612fc8beb2e1d477af2a770dffda106504d410d233cee9dfe87ddbdc5c2429c4ee8c1331556432654edb5e7669b321ae7ac93a9d5285c7e3d604a906cc06d2a3d7682ef80883cb92a7c75d36d2b9037b08766aaaae121a7de1913880ce4d916142990de0b17831b6fb6debb51c0cb3f711f8be2625117dc81fbc9571a00d4abbfd38ce173f8fc2fe809cd1d792bc71a9a7593270f49ab24b2562440b1d249b493d0d78dc9ff77e1e0a8fc217093fffa40395b42e3384d33ca37e8e27e22ad285812cbd4df46f37015901310c12f0076e05deb5da76eb7c72946e469ccfe62d285bef85f4ca5e096e5214dcc81af2d71d7f30a7bec019cb8a7226874da5391f2134fc3ae5b2828770c6c516dd87e0eafb549fe4b867275d6e490b9c5c5493399e79c02499c3bc48e1f85b564704a965b80e9f0c72da918955d210cf3da70de303901bb5f58c1318719dba4d1f599d974162edd2eb14c179ecd8517a92bc048189e43953d3a82a4b817bf3fa034d0fff71b0d09e600df9faa629b49464f43a60019893616dbe99bea67abc68a3a46cef359989d66583ff463b021abe74595f4152614b85b192ce2a7deb72f151fbb79cf443c739da6f731a00e8338bf0e9c80c148ff351c7bd6132ebc31b8d9f13c0b22ec140d2574ffe9c510e352ea103546d4f6b8fd11946891c80612f954300101ee53b5e114b783fc60477563b7a9eeeab1357e1d605991bbd8cef8891bd11f19eeb418617f538bc62614ae934994b0747f14896ef84c8108a13b7e34c2ce826e566a5680ccef8d2fe78305070a90ad11ac4b6e7438921e86faceaf4b6e158bc55646a294abd21203c5e7661b824505a365a609303631d513ea124a6525cbaf8b47418d55233af757ebea683150ef45d67336154b6be9f9dc9d241e1532ddb26e0b237d192ced599d4066bdd613914b46eb2adf78ae15d974adc37a8117698f257caaaa35faaac9fe909e7344d7fd515904d059f0e0310203c092bc30572e2a4b572fc860d636b23e56f569ebb1b0599decb190c80039a95c13b098d0a4535ace86295a725d22e4901d109bd553767ceca3259a73f9d54546ede97f400f38def1e3fdecdac335139a52108db361aacc15ffe54eaeb0f29f312b3092ed0a96fbf88a8aa8752022f47e7f743e888b7c62d1afc04217b9ea1cccf3ca31e070d544d90d04db47a14a05f4537b377362c8d99ef80e4c02dbcc1f4d5e385861cf4d8c6ecf20521d728f9c8696fc015d8ce39e3944747f5a4a539a5df15d0f11bfc6f47b0d8ef0dc415d1db2f4dceff51286e27adae96b85f1b7b20ef32fbae506cfa31f0cbb182ea1cc917ea2932a837540121ce20bd0584f3a7387edba07f6487177a1d88b703c42ed0a04928bfea40bbfadac37e76e12ec835ff0cd2e775c698d1067c5e635b6ae0edf722396014c4c4fb28a68aa370d945ac228b62825e354f244e8f0801820fe6c326021044140e40ac377f8da948fe69813a898009b3ffc6211763f2cba4c3090139bb79aae80430785e530f081d6c812d52a825f7f54fddea951dfd43cd987c64b0fe7046ad86c35aee430cc76b07655046090dad1766cd9d9fe2922475e44ef28a71acb02fef0e478a3d3e9c10543cd10d29f083a894c5bb07bb61a984dcf4d0398facb8a960f7d76e69ef9c951a5d664ce109616f20a2be3e98f3a25b70ef6f7e9dfb8a054aa12c3049d313b3fae9edd72602a7f93882868c60c40a5d108eebf85e4e8b33ef2ff7b145dad2a2e2d85a8592cee738962feee2a00c4d986c0f68ade4e0a1f41dff67c3c86f8a9b830af1e232b56feffd82a37e700f3d4e6be410e66bbbe46c17431a3b5acff03fd894eedbb0d06668305f5eb286a8052372171a342136b6d6180531a66522fd9f7e28628c78b4810a5c317625e30c44d6b2b77b7ff6d60566e1b82e88bb68fca0d323ca8ac27312fb9267883f86c0879bfe035333cc78cf8cf47172ac36b9df2f38d87f13362d1e3f2b33379d5a83285520e491e3fab9bac33fa0d50874c4782e47fb3266bc30d520291b57de92db06172c9142173e36b648e1f21460be207821b4b5efb0ad718b6e27d5d5236f6d8ede8245888f8308890b33147a2f7f3e305e2a0016156ba69862ed059b4659c47c5277e3e092162fb64c9b1ed60b0d5b6c836207c4e0510f1336ff044a0b5bcfddd255799a7c8edfa0842faf8fe0f16335e470dd9e1a71924a93ace4d3a06f1fca03500aa2069e57352275dbc80b3925e8d60e38ccaa14bf8ca67ab7a08a039a95614dba5c7d374cad5814590aa8f41600c53ed81ae84c442b51dd066f344ecf1dfc2b62ebf7d5d35807965099d64a35964732f3aa1f7633470788b453bd021dbfbf1f0ef104715324b3bd09803668294632fd005c9ace9b8fa8569dfb0246a2d2b1dcb24415b9304f5606e9a7dca0137dfd77919a66631f1727a31697f5bb1ede3285580526765e31d4aaf5beed4c0b4a577b04afd0030df5c66dd18110971aff7b43f72ca0c0289fb72b56a013a97fc2f0f8da66f83649a4901fce913128d1902ab1fb37daf52cc0f956882ac2d54369bcda1f45cfb261ec1a37e0c3c28bfafd21e13a354ebc8a012a2150849a29fac3f1e5ba5dfd7da83678e85b18d5d9e2f3a4d6274f8268a0cfd87d80dd1e19af90dd846833dede97a7396dbe8c8fae58793bca38cddeb4e0728fe65ae8455c35bbeccb0d9910c03bb4ade86986533e4600305761e428c257c1d7a3ec9b9806305b98d40236bba270dbaf2f24fdd30a47ea46b75d5cc945ef75f88997f5b42630ffd89e6d519de419359964840823efe4bcbf60e2d82625c6f53d121d3209ce7a31460d3dc6f1eb4498b51a9d81209fff6b5401be5ee5bbad49711617e743b793a0275895c3031869fe197770a1e32df9de92fa5f559c5aaed9402c33a252fb2372cb57efe0e21af2a84425b6239baf16044415da2cda7121ade114f177e0084f2dc677ea6771fae56980d59ad04a3f394f3c24f9fa131c1c4cf20a282e10995431afe6696a04708c1218faf990bf1a7d5fce176b2f03ddcfcfe4e458980a78a30997b7949514439e259d9c4bc2ae7330ca85b35830fa4efe9b29b66b6770a159a68dd978b4896653d9e3e2ecd28e08543c5f8ae0abd261e9f2a49033fd42d0a85bebf1deacc0bcd154ad4f56ba8fd9ee603ad6e85bfa1c1c68f0baa7a3fc098593d671d526b15ef6aee9d0ffcafaedd055e8e9dd283836096dc8193ae97d642c5b5305f9076d32a717bbdc69681c5dedb46dd27d3e9ae37f11a8c32233bb80607b55c98326b2229c65010a33222be5c934889749fc17c97da30e4c113967f794e9181b836447fecf64469b771a4a06faf027f029609f8df0021e1f661b7b3c2dbc73f6c9b5a53227d5411b415e9e569951e950a5761c2dfcd10cd62d5d5f3b562e850674cb411b1f08cf9d6d7f2808dc45670c69cee5adaf68c43127d55d9d55e52bf1302fcc94c3f8f18c8e0d37cb4e6644bc473710331381d0fabc8d2f6a42a5f057e4f9366af2c4da7075e45d774547056d98c279efc91b6ce66641ce36da55ffd2d6e63eec267a60b78d8dc0d623e18acfb79aa886d447f0c27b1d68d8f8e9f69d4c799afbaa88d73017d6ff91c183ba21f721b932f4405d57d566aba0b9562b7f70d689dfed83c33c1f2788db112869adae518db75bb39a52cb8bdc81ca17a31c95a693d5b50b832ab17f34b1025cf465db2a94260871c97acf83797f6b34a6753933e32e81580e992ed7bd02c7323a899f5560a53468f5999ca472a52c0e349da64fed6425f814aaaee459fcb91076a13a0ed51249b98bc4f6c47978140a52c5ea86ced8ac126a66baa6baea495cda30353c67c6e80989b2018d19af2957fd6db765c5f4c7bee4795e55596e81cab2bb1ad717bcd1ccce8a8f11bf184a0ac0e855a75047ee028f8fd7db28d8a6bf6f4a0961ff9a698d268587809f0ced4d342783ed426d6ff2ab01bf805329959fdf5d6b8c577ba0b26ee4b9872ae6cc2ed330e9127bcb9ba8edd6666156a933735121cf2914cb54d932d725bcc2e920945298c76a8c802c8f134b514b96fc345b07da1c4fcbdc7c0d83ec2f83309dd3c1ecee680a3ecd960e02f0d52a6520ba1233cf1acff2e4786a98ebbbb506e98914a7f874f1ef0bf3f4d93e558e278869cc57c253374ac89ad500e46eeab08e2928dab5bd51f02ffc3bec7a2866634435563aaeab3a27f8733d1cfd3da985675ab835d5fb86e2cbc0f07709be9c4f01daae6ad4d8c235ca26700a6e60b5de39a02d84dede92423f74df7b5b1c38d92040ec3f15e9e9659a714db0cc62421fd73742d09aa1943e44e2064cdb04a56ef8d8ba03e4ae4f1a7b5135776ea662ca522197938bbb305a6c17d92389ed95b37af803704a3c3e7982142c19fa4d20f1263ea32aa4571ecaeadd20707cf895ba6c969d15e17b4b9a70951244f18f3574d9e5a4559b09f0e406ea788ae28c856b93e98277a353e4b6eae0d8dc6395c599c1f12a04ce711fa3a2c10686dbf2fcbb9d0ec28e804d0c0c0b44683fbd1b6f681effd262be741901dbd9e7249fa4b38ed0a3be9f216c145dc043dfd09fb3e90c9bc1cbd8e72dca3a236be8e4b97e7850563aa71b5628d7ec60c18b13024affd4d195ae420105897200ef48f00093b020b9a0d0d3d9e5b1d58b4d1f13c8a1621347e9a88f8d48e3aa61e27a1c8649a5e5b1978432732af7ee0048471148be53ddc8cddc55b724e1a046628fa2068daf45e9b2a39819947a2b76787fe8e121486e88e4e50b219d5a83f1a7689d694f370b9deba1f307455deffbc80e8c747a63d50a3e90a6f989e0e44a582ae336c32fe4aac04805f8f606c9e6859064ccc61aee93e339de10ab67db60ab56fdd7188b6d57fd9ab0b33badfeda9b30fe130443908099b65f694be101bec88a73d29565b349687d482f4433156b3bbe9667b07851d3a6d3c01be34671e0856a8cbc20e7ad1b10816bc9621be4f9f4f3c4091d48091d091d9584f6cc143851ae02b7988d5f2a631a9b4d29b4dc7479050a0e363b2debdee7a83d8285f6063506fcdadc33f0c00061c8c131a22f1870eff69a6602e2b9c770dad967497aa368faa25180abef97257bdfe98d0155e134efdedf4ee31ac44563a510e7245718bd053f3b8cddd6f826c1e81b79dc9e4ee2acc7eabd7d9957a74b24932bb0010cf3f1e61bf2edd152d2191dd201cb867a58f0a7371622cc7e67dbb229e50118c96f48eb6fe9aef68375251574bc985818b6e4f60f4fbc99af28cd9f6aa34abbe81f040446ef3263c4758fecfdb324b927b04be0396f2855d847f2e093f17f8c6fdbd4208c441a9871793db0fb7ddd982e2706a209c101f8a55674fb5345b21723968b93b79f70194cd0af6f7ce2b3e7214485606ec76482c8e94ed61344f83b38be63020082cdfbe512ba639f4b88f836b7f9f2da97b70f698bdaa8e3e62d2c8109b32e2c67ba2de0fdb9832c59b17fd1809443758a0c0da0a3b18f3e9b184888e7335e72bbadf6d7c2341b8cf1e5f5357c6e41011cdd5c053c6e8ea3ec72138e4d43e17463834bda91697e7fd1948344d0bfb6fe6db16bf6a8a54be30cfd2f73223d61c9bbc7d8dbdb7138d995d2466361c228c7bac023e648a778d98b2245934d09be288862518f748eae02861525ab2d6478bbe8dabd3954aab1befe14876fd7dfe1787a436e419f8eff2ee218642f0ca3c6bbe5bba4273f942af2d0be04d4ebfc16698aa0eaa7b37f76fa5ec512ff7855f8f976874f8128ad8da7a4fbfab2d0c57da621ee5469f86c9d71c1be5955cbcae1f790e717fbb7f807ba612da95a09536712321fe5fc8d8b5e639bc9e5204ec222ea51e1fe85ac74697da8e959bf31b6d4bb121068dad8f1090e4c9bea56299a51018979c59aa0f288b94b2b3418f868c35e1ca073e78e072eb4d3e9378b4dd3a1a538fd15e15256433352c43ba550cfc54535271ea74895d1b2d781dffcda2e4b463c6816e32c3ffdaa0c95c6faa7f4796465d9f3ead4853a50410d64d22a5e87a74f311979fe791113b27f926730644a82a5848af2ff4fe4345c5bc2d6b6bbeef4eaa2062026f835f50712f0eff6d40c45299fa5328777d67089027d944bdee060573159a4bec085b778d8eaa86d69c8e445e90ac2076bd26f0cb368373fad545dddd8a5f46078923f659b277321d356a1fe2eb2815f9b659248ac8d16a1973075a984c08a1ed8172f2e88d54dba07b28be73ff74cd1fe2a488b6f451a7fa2c3265d0d0ef5688e88460e8af853e77d3a7871edbe03625d3658988d30c0b568a9dca3dee5eb43bb9293e6729f26df43d681d4a6f7423925bd69fc3530e2b3a79c54b3429d2a225657506e8297dd1d53c28d0ab2f3816379ebc4e63caea3cae56b2fb6149e9622acb4296ddf9d4f28f21a44083e9b699a32da3df6162778e9a81f9a475c38dfb5b66100590fbbe7aa16580cfc9d1c31da76ce8e6661b28b8cd05d6cb216aa4e4be622dd6b83a8fb0b4ff48a99fa4c6c9a5629a9009ca50af4c0aa952ddb17334489e160d3fe918f0201b1cfd810225aa72f494ce33fc55391022715a124904e4e4afe6ba9c986f08f312d0273007e346ea5a5f004cefbf4415d8f18ac8e6c90c54ec0526c4bc4f5270f629f8243003225bb2eb3d0aac65bdbdf56d6d42d51047a4e2ff33fda038315c1ab2d53fe95700562a0a341734f6df70c8404387bdde3d54c89f486806c73e82712d12e16d5c19a7cc497eee03438cc76b0c5676e27b6c594d2be7dcf0486a81397f3404fa84adcd27259031dd97053749f7d325752a81a1c5f34198bc7eec9381f7e73bef16d944903ce41074fed928a583eb83061797f32274ca75488f6d445fdb54dd1406efa2c7b1ded8513f83b00c38cc6531ba0b57322c1be3e14a23de6ba56028ac6c1d1ebe41458b13e91aa5e02335f266e54819b5a34e0c5ef74350c473ff56bc457a06d52b569f2dc394dc3ff4c4294b900ba1f0a6f770f8c0659eb03a39955d4ae6041f0746d87a0e103e0c1ff270d04a0e563a8d88e7dc1133d82c231a0b20856c39e63dbb3ed028e6ff9cb540993d12667b6c30e8a6979027c1ffa87b60f4e65ddaa5306a6daadc6ee114b7e39e1659fcb1cf6a5b1a123470fef721e083153d4fc87469a9759b9b8dfa381cbc65670db02bc8308131e7973a14cbcc08e3378ee1ca873df360894d55ac3273f67e943f89842a2315874a6c9fcec061bb602eb8caecad20910eea9612d566077e10354efdc9095af504ecf481189907700a865a7fec848211d244b04ca77005ec21abc2b61695c583025846fdb341f5aac5576b4f74065213cc3e15f14fb23b231fae09024320f4b06b507ee26a8f69fea5a5dc48fd23c796955a2260892ae61755653f2cd8bd667f18ae80141430638ef4a9eb3dda18775aea9d789b38ebe50c4b9d927be97e056cf864d5752c6a4d46bd997543ebc6980795f733cac4ef2d4605885d7844da060cce04f574ff74aac3c1c63dd667dcd12ccaa91e34fdf1c54cf23f265271f776d61b2c33e0b6574ed76cb4fb58745c08f9c680f1709dca848cca0c40630522bf2f62b226e666880344467f2f073dc31e613ff7e2bce69e5ceec0a22a034e4b70e7cced930a527a7eb0a03edd571b13a1a18ff6fd0403892138d9971397aace3e982fa2e6a990c5043c25e8d6cba49faf13bb7b13735dac1620b139a3c3b22cbb1253a79f9d729f513169751da772143d11ca8361ce3759adf4d8c7088289d5931bf2457cb7d634cb9ad0183d257c76b27f22ad37702df354d382e079816c4f783e10889c689207b7a74f05e48da1f9c3478bc51e6b2951920f31f35baeaec846899299caf4a732a0d8ad0eba15123a0957cf5a95195c0b2d50988250abc808e54d51a65bafb18d9ffd61a1871adb3b4178cb4080fd32f600ae48262bd35cb7fafe27007fb951362b15c615e8e2c5753eb5188f2a10f7f5b798567759c3c1e617daf72e9271c429362b13061221a67173acaac3cce94f42ea800e09b5726693bd8224f65482398d92a101737be277ace664ea690fd0e3a317aacb50d8912943a7f61ebc23be15c6d0cef9dc9e7e316f90bd3d3be64422005634d3350f1ffa8cb7cbec3d1e1023a320fdb7180a6b3f6a034a255a1a33d19db2bdd2a4cdd6dda91427052d00d2b1e8b3d05426d2751573471373f9ae342a8d30339a191e2f78b5b1ffe6fabdb2b1faa8c2b8d7f566aa5d3fb344d5e83fefcd9042f2bd32f57da0f4617d40ac164585a66baef700cbdc271bf726db4cc95840128af905f7f2cb335297c6e926e624a6ce364b970d7f74e1de5f30ef0e0fb9dfc07a94acd9dc5a17f2257032e7062db9bb588808b9505f8cb18386ee7e07a9a0779f94e4f36ba394bab68642ffe6f39133ac44d43547737aeb5e8e3a85a9a916a328c3e908e227bca91619fae9bb9226cda18c4759a540a3af2e88e5150055e28512d21c5ed8b860fe42262c5d6a3b88e1fa484226c79cd7c796570dbd1032f5def0087cc66f235c73de40f59dbef7e6c9ba95c70eac6cf6f75df6eb64a37a1ea12d4ded453bedf694130649ffa91aedcfb7e2bdbd83c13e3bc9945b919818a35d7f68ebde6a1f9de7af856a3a49f1d7bede97d6e9de89152c242554013ff969308604f2289826bc8723109edb150c217d569591aae9dc62f66de8c12d59a798aa0b928115000554ec7569def34532672bb667e18c2137f9538edaca4aa2d34a03d6f327f027d6ea99086a34bcec116257b5fb7f25c31955eb6568c444be8914d8e81919b3c7c89fa99116b07887022929707661d69ff4d65df30c215123157ac4f81e2b6854228fb09fa3b2a8bf4f7d9731a669ffb4fe1c7c7c158ea65b82a07d8d4081c08ddcfd9a51594490faba21b70d444095c2efc4cf40bad2124c7c7360a87aa81491d28360b7b5219ff44b123b1b96336432f91b6272030c5a68fb13b546d68f7c3f523ac8588ba396dbe6eb3425640decc6193d8319cf57a2625a2f736642aa8f88c166bfa6c6d83f2eb12ba35a1522cf1b883f92d125b51613337079ad7a2ab46a77098dc1c6c1e2c0ec5436be00984eef7a8d33d8dae2708fd26b74f4ed70621203cb1359e29921bee70df33ecda64a6ee39a1b937ac908b8d769a6ec2e13a0efbdac8feb314bcfb6863f107be2e95289ab8d08275c349e51774b46173b29b200bdb76a4fc78bd7f9f161449e0ccf2c335a9150cfa74d218f58700539fe42a974157e34566c3997a9f5c82cd09019916ae1be9fa4b8da8b043c9c3ae1dfe5a92a9891b01d55fa3d7690641f11e713db9d8b3e375be88c1d9a2d7716dd446f136917863746a1dd25f3c47b020451275cdffda047c471b746949f3114cb0af5ddd293901766c69cac029b85102e839fee903da1d27319d8429b989a5916c6577cd378315f63151ccbaccdf98ccb4625b64f3ada8ed9b1971854bd1866cfc5a7dee4c2de64db0a39bf1e6930ea2e4c13c7f181990cb39c4cf90836ed8cdaca5ee3805d0dd7d6fde3f5a5797a0be428a22d3e6acf569315a0e2cba776b67716c0ce18a04826d7a4eadaf884230617c7583666f9759adccaf5b3c0f0508d8a0f43587bd2cdb6ee00f20f26b182248ddf68c907c35b2082da4031768ed620ffe6ad888b4e52eae7029dc68d1e8b24b96439615fe939e8e242ab24a523e1e179fcacd1f90ac737aeebb857c36e3b670cd6870ab1b487f36bc192a3546f06a86400e8c4c5d6b7d26b50194165b7ad007a5afee24e9c4a41ad6b3f85f1e3db8e6b32ff8c195382c7f771de1c90629039cdbfda9ae5ed83b0aabcd61e6c7f03ec86cfc372af02133c9c197e43e351df67749b6a4e8818de6f148f7d4482e7cadb173b17ac4594af863507f3d961ec0ab173b5c1d1083633b50355c70451342a2cd6cdeb2f07ca76f52e4ad99b9861b81adb11d6ea1adafe04e6197c7fb276b35a1134ec14af740964ce26ee5ae11a915ef42fb02feeec59797618148b33b6bae9f35ea78dea2d61a53eedb4a757d8a4e909171425903d1ae0724ae7f1d197782616a1e3057fc7f4f187f571e6c4c1075c71c74d5dee50b257cb9e80088efe460d405ec4776bcc52e2e6e61f284f0f8b84501e92b0ed2062e60cbd6ccdc300a9c9897d337de1891376fdbd5e83e87c183c4d28894fd3138873fe552825d58441e1b548bc1716c55ff6da4290f82ff4d82277f5ed0c7538e64dc25ae47f3bce10454e406e1a5c7ac4cbb52e9f90228ef7818231b3b1adec38fad59c1572677bed65360969574fe91cf842b8a47d47af44f6261416638054bc1677c91ad0130570cbf999a00f3c2e1f3914e7c501836a36b9cf6989906b93dcbe05badf4514b6b75c4669e1fd3d11f7775b67b2b073d7429399f2d62cb5502d79fc36387460cab28c12bd4c8fdee69e29fccf600d96aded77cb250f72b75b96e32faa10e0f5087259e8e793503f5c13ac854f62a47aebb674f7adde1f5d9df344430f46939219ac77e86b9a901591b710cc80f7a246ee018f335dba5211261e65ee653ca27c4022c7149c2f3e9634a79de73ef35af6cad1fbc7e8bb67da1269655ca747c38d001701847c90d04cb5bacdbf10b3c77b973b61f564757997b12aeed348382533c863318da64dd6b1a80d3c01460c8549b1eb891397ada7cbd2cb344d5cde81c504c74c785bc6de68d1b75092fdae1e1ff6157e3f7908c1abc303d95ad914eb8aa59c6aab75dacf8e23f0e0c9d79f1fe786e4671695cad09f5df37a0a80261f57db609d56c5f986aa8e79c21bfeb83db378184ca30a5b8b50bd4def7818f891ba0492d46d15fff76c04a2b53d24e0fe4692a828bbf85192cd631dac5fb4fc84d25c7bb6a4011ce8795ab143dfd8d6b11e024da4a50a4601202ec98652697dc81dae57addb1ba58a7e7a7ebf78c5198d4a5369f01d767a3e675f2f19e8bae70fc26872983f08fdd6255c7311b70d92ed322e9e0464e58db670c14b378fc31e49c6d89cedca475e7e6927a030faf3b8c880ab8f20898f3ab120ff9ba791d5d6328624b989f9ac671be244f0c2d48cbba6c088734d3ac76869a9737b9313df5f2097359e44a6b32d4e9db9b3dfeb74214575b2673d5a5ad030d511e25003ae8ed2b3d8492afd5e5a6f489a09064d5a08d3f20ea1e09cd0d1d1b51d761db97a39bb999dbaaac8f2c09a439c6a38ee782d4580fb6607d1672bc67ce1e9e8d470fac9930f9ebb10e314fa0f2865baf4efd14d1df775bc712a92845ee94b22c4ad8bfaa58daf99d90bbe26ecb126d97e9b5ba4fbd92acb543f0e72849a8747170448943d17fa729a4a40dd137c0cc4960ae31163bf883b18051bbedb37e5a3e1fa27e465657b806e748096a7bb7f8f5e7468fc7c8da3bace31eae67d94c481d54fb06c424536c9ba59db6cfe319f2d21f052cf3fc8dc5aa968a33c8c4329563d4cf0a57e411266a0c59846b700180914498ea7155451ad6acfe8e12462cc6f1c7840c47d9bf42bc8412a67eb399f888d69295aefcc3cdc4d9c3f0548a7c27c1df31baa0a7c2c8e4e4c2718a46290b20ac18c3749970ead58e5400d2d99024984d4b13dae4a7cfbee6c226c9d4e5565f13256e169f806180f5af16d842617c6a4d02396bc9945bee915cc7c4cbab46cca9cd3593d8f86bf4ef22ef1875fd3d75013aa26a6fec01bb7ecf44ddb380733a1c2bfd5563e1548fa7dfaec92dc5f73888e491536123a21ad22832c6c40d5b0534635aaf6200db42282056b4f76c2f80d3899d408e7d03964531559916e24f357c24a0ca6478743b7d16c5bae5baff1154ec8f6bed2add6003b1a0de1f7ad518177ec8acdd7892da471f892867def35d2ba00ccf55199d904c8f98ac5cc0bc57a5fefc2e50a9747f13830e5a9c0a8825867efdcc16070c55cb95ae5a6a96db5d473541869c8607951e74d7fc9f0abdbff73550d6f92f465c7c9c56a095a249f6181eabd28e7a695e957ff6121a710d03396d0d076eaf8b6f1078019ae68b17945de480edf53b19039da47b6e9964785bd111cab279b0adfe39edc34eb11debf31368427b87be3bbf8a53f7d8436f6ab738cbdcb35e5ea8d3089ce540300d1af65d5213419cdfde7bcd23bd18dad81eb820c2b603378ad68abb740006564e08fd1acaa337787fd27a8c11373b41cc6eae8fc42f658205ea7fd60f8186cb656dfd3c2e888cff43bac1279be2021b5b1586a78ccbf29ddd430c267f00c18e0bf1f4645548391c6202ed81567412447d582411d238a3dabc20b3ac367487332c726d11550926c67a9a9f7beeeb0f017768b99a787badb4568c2a5ba2fed7415e62ab1ac415e023416ba5b743ca85e3fac352b41d839ed6d8af3b306e3f8753e865c52f333d3be22f4475466dfadad12c1cfdbd57403918c10f8f12432582e79ab2b5c0e790802a1c2d11fe53dc1895019ff722bdf164db125dcc41f29412c0505ada82fd0c047c62ed555d1c06af98bd8b7137c066e5a686a8b4c0fb55e380ed1abef834462f532e54c35773f2906881317784003ee0165586f7af02aaa066641e6f8bf129e5d909adac85d6af07fbfb605cc538dd2358f1c81f8b17b4c8ad10d35b38abb643597592af365595960fb6f0384fcf342a7166eb73208d2bfb1752c1f5890bab8a6fc47fb3433d8c18e445c7036c8f7aeeede588a7375375571d64c40fdd6d7c9fab9b9eb4cc7aef7ee0ad49d2e3a8b00102053907c602a95344bdd9bc51d4b87b972d364cfdb2483d972eb21aefe3fcb43d65f936d189743469a771be0f9d4433fe8ee33fa95459a000dbf6f45cf3592f29ad7e2b03f3f640bb99e8d4ff20df765fbb88d299286775d565057965ca0f4ddacd719757d9aa56c5620b2f276f65b4b5f52b352d19d1e97406ea3f628f62b3f7aaaa7dd6a646d7e84973799e77eadd1473e25b30d75ecdbc68760a31e6690ab57d0a842f94bebae7b704e481b7862a77ef0cf7d28df7924b8c3e4f1927925a4acd6627fe1930c7fd61f74613a488fd903f052b25a0ccb817caecc3bdeef44f8140bf7e4d2a4c0ab966e10676a4d12d991ec7a20fee0219c8528174ec9842a7ae3b47226bc327ecdfe1eaee956f872402020f14026bd918dedb7f32052e153826d3dd2c902107becc5b3aee2b6062f35d16850c17ee97c31f7326a6c9ae2fa6b6f7274ab50cc6888c94bd221456206da4e05c56ce59ae559379d3a47b9ca85afd4fd049a5aa5cabffc535e4581ed9c2477124e2e180ea1e2560c46f8c796fa6f8605ad79209fda06d46ba9005a83a0a3b3a9f0e70c33d87dfa4b7420937121e4bd79f6e350d618459e1675a8784c510ddecb014c06e74503ba0b7ba94e96fc3ce3dc83ba427874d0374dad72cff178290430a482fac55c673b07176c57ac2892f70ae6d5e9a5c92260b6646bcc9a696ee3048d3eb0bb55bb69a6e4f7704e9e33fcbacf4dc41ba42ff35d58182bbc7744c53534529b3024afce037560c1eda72aa0b3f9fe049e6b7a2ef8d9bb4cb9bbf78b69e1c6504c2b9af34c20a759ac63fc0978ebd4431df768b8d8f91ec2c6564e51c4eb626555fda6c9694ccddb9cd7b18a41bcf6d048f5a6b3b8cdb3bf70bdb46a8613bc7f341337efc8805078d43f9ec51090cc4000c2de22b447223819c8adcf8bdd70b9fbefeeab819770835504c16e22e2a9aa16174be01701e0c1ecaa172744667a3a50da3bd82297e69139df31ab56ec6eccd0ad5a6d8278afbbb970609445612176436c8d2590d07e0523ebceccb67ca86b2f12778ea6150674055fec37d9ac5abaff0876cb812ee093fe64b44df4847b1280634412a09274e4790b8b209c0cb026a2e0dc9df5e1b27ed8a126b4d31c959b246396c09235ed274fed58c6d923e0f68746ef863149bdd823ff88734421bc0090a196fa061ef3bc8e556117389f0a13fac46337ffb2ff806c232a080de100866ab1a23483a807960401682e4fb5f4c4e4fc88cf5179151b194ea892cd9e85d5d1624ab8387921008fffb90af27c5bf4cc1df78d14aa093a44630d5dca4417ea8e20fcd4eeb0960a5052fd038e0447bf32afa519202b41fc5681860189119d4c3ad347b882b41452faeb890eaaa80a89d43fbc0f4ebcafc95a4545008335b003991cfff937d747eb6a383a437bc63d82fb73076e8de05068d681764a54454cbb5ae77ac377e9de63fc1fa5b7df771b4371b988fdb5c1cf0823eae4f5fc105d041069426846e5dd690e362cf933cdf0f26bc5958be51b05e12da9a804bdef81d4057722cefecfb7750becaff874ec03dccfed3e12586d9600a007146f7f57ab5063faa0220778efd2389989358789f3d78def74924ba3523e9128052ecf20ae41617c2cd8d70ebc3d51124cd0a9dd2921c40b06a97867098a8f8fb260415bbe2197a638fda4fb389152057172a1e9c40ee19e0ea492fb0a20dd51e4ed41e7ba35076f7a0f5aef5421e86399a133243004bc0f8653a15e65b0dcb9e72befc921c1c54b333cb9d947201f43868c24b5bda4ba342d0242708f50e71f73c48bec5eefe2e3718b33a34e61697c4a2c28aaddef10e0cad1a2457165f34c10ae41861889718dd7433f2ef152e41545f509e0db447f0dc4dddb005aa55d95c963d78fb27029ebb45862bcca167dcd0f8ad9bec1dea8ccb2dfca4b1c3ca3e7f9752d98e13c01316121ff4906bafa8b6c30b3c8247bfc493067810f4b556cc879d4b441fad524c6e049527e0104307742800bc6c342af0fe9312c6c31a605c3385062472787f447ca20a6ed272d08e1ccb8f571b4ffe8e5dfe33b0a776d0f50d83fd5708362002c5d49d0de5b263adbda31dd89217f89e78c7ea93cfb62cf1e1ffb8df568af72d922849d43f90cf6c3df27a68dac8b3c00852158d3da49842cb6663a222ce05ed464b1e4745ee6168157cbb4eb45e695601e877d6b048eff9b49712ba0a00806d5627285f628a535ff7ec88a7e4fd912197f07e2e5a24321a78a3dbf62f60a7538df1b9158c10cc8fecbbe2c1f71cc97d0cb0c256c0137e652203155cf54843c772cc3d8c77c37500817c256bf67fdf88509cacb11bdbf27e22a765626fe7e77fa12b13cb8c55cd117ab08f5ac7c5a0a805c2260f70fe5541985edea5efdadbb7a749aa10fac0a85d37714178d65fe7d04e7261a5f4149ee3776d034a753c8a0410b45809da0292b431fa4dd7b52cff0ca418f112413707853f07fe68f0b5f8e5879cecf38fb11300908980a5187fd728931dffd4ddf02807d20841166f03241f8aa26c7ac532895b2cc027f9b97b6280f4d83a7a5edac8fdd0e5954c1e1f7fb82e5c4783ed3e6a264d8ef1c439273f42e29a04ebf99fcb69fa532b36a6b9c3d2a8e91db2c43e9b4d9e51219fcde790e0c4bc8e8a7b44572fab23490eb6c98be05c8e87da171d49cc44a53dd913a606d14485aa658214b8ca1ee4ad001bd2bb00a1b9210f44fc2b90d47ff1d64d43fdbaadf279d94c159183879e5b4f47052cc5ea04d67d53482acd99cf38d36e784b694714e9a20ef257697e9604a3a54a1e686322012f7a0d944ac98b10821e160ae4a5043f57c1ae1ca1e6a4fc54c1d65f466ac9959b5d074bb525183922edf529de77890237af638c0dded4a472ab3dc185913af6de956a22100ea6f930d07d47ce299f7fb9a86a06e0d3f87fd7745a1e12d39a2611888bd413182c7baa828dd0a0c8a3c001fbfb46454d47f451b65ea515429758fd5ff4d693aa88706876b0c6534a88553e442a991a96c5a3ed9bde910879653c2a4b218cc2095bee8632c90628f7e09efecf1da0d62953d60c82ecdd92b61649f636cbaf00848ebb4638afbe14b560f413f45436bc3bb8e0d9f6244618f949792b8e042390fb73cd0756e4886685434dc6dfa3f0a3ad4e36e18788afb008f662dd2c3bd9e1633b5cf1a9a0db7ff81e24b8e181a338cf30c6503867e60fad00362a3a7475539ff21fa2bc6303dd98f14bbf5e1bb186c9f91c6f4f2919036f3fea4bdf273210c32da7abfe71979a39e4c0c3a650df57d46b304365d67084ab0ba4098e41c3f78087cc5cfca9aaeac7950c217e00844e124ed1840ac833d38ea09b0029adea2c83d51c5671378738924991fd1ceec18d95cdb50d65005f5e6bd5b34ed22bb0103844eacce5ade196540da3dfd2cb1fdc8c3713520da877545e744f9c5fa84062e4f14ecb704b7b62a217930f6e79938cca96ac5d11d07569b85d553fe59f1885f39c5028a914cf831bbdc8f4c2af4653922db8cf0cf813f88d4b63419add83a1cc7df7b65aedc9c85cccc601ed666b63521ba4b174769e390e9b02117126c81b6613e6870135b80a2844a8b66faed4ce0651bcf88bc65de1025121110815ebe15e85b201a9c12a9d0809dc8f9eb01009dfe05129c22713d907d0622e46a764f5393937ac7da8fbd7743f3ed9c89e19aceb81dc06c823229d7a251735e8b722bf6e6832140ed75356022bc642f0aaf1d07cd5b5d44eb7059aa052a318d61096f1377effcbafa2b6b0556f1e4ad24d67dd51ee17a63d0ec627d5aa21303f5479536dd7fe4b0daba8e3739c6ab20586aa3c5591ebdd3ddf8588d9902698d3d97e0f67b4e9309b7546717a9bd9fa0bf7f281633beda122eb2debba612ee35edc8bc84043bcc6942a578b71fd7a0e0c54ace18b1d3efbb5c555b76245fbc6605814e6e92783610280a56f0d41cb7e79519095f066d197bb2b6a3431fab77ae4b8ca112d52b51baaf8224ffce4eb00bf80afd63e91e38333c7ec55e8ef326cde3ecec7331f01fdb407e09a978e4951f73294dbba2a668e813c13d2ebe8a5ce8c66cb1699550cfc6f58084a01cfa0dab60da1e02302a17acc065e5eb6b26825cae292f99f3a8b61f8c1fb222087f8086ea8bb7afd9e5a8849822e42470e839a1bdd9155bf35ee10cafa70e9c6d097079414e2815715a4f182e95a110d5ca76eb588ba593a759dae48fc46d87574126b913b24bbeb920192e5cb92ae94d76e9de70c63fe1df609fde4e034143d968841d6a951892d942400bb60617fd3c9dc368a7119678f02199d657b9f6126c05c80341589998ba0a29040b377f46c29f21fd93243997fcd91f8b58363afae0355975607b8c8f47a6729c7678cf5e6dd880f1bb31b93c50ab472e67574246e3eda23852a53c2829a3ad577739f97dd7da0c33557d20f70f8aff9d9fd68de2181206b543a2919e16fe0542ec142722be2ce24e1dac65b7469716b274ac81cc879188ee3a65c455f97fe1d842260c9e86a8b223807d637bddea4048578cd857bdd1f630ed95eff2f05e9b7126693f50f6add806669b3409a893eabba902005a8f91c50fa0e2b0407d47db6c080240d808f84ac53237220fd605dd03438120ee82beba5b0eef69ca042a66ec59f55b9fd0b717daee45cb63fd494ef82195d1e23d511cf669c9a2f09e0fb8b4b60741761f47de1a05e8124ab3a51ca3889eab368a43e7a40046a7f9fb55b4bf06fd8c02c38a6e70e84d9a904467987c44a4d67390a4f57741f54d46302d15904dd6a81ea96f67cf1bfb0686106b141b2eafdb47d5299a9e00600b12b0969d88eed86ef7ebb20535c34f39a4b73a34c514e2145626f37b10e60f48f1cfc46ca5715204d1851e90ed99c45582274c25bd371bc2a6381974f952bca82c9e31dcdf015e5694737e9a551b9cfa4eb2bb19a9863a7f554206a8be2417175b64deb317fdb203a1dac0e900bfc840721f7ab365678c52da4e9b3b217f0a06af9ce282f984120cd6caee5f68982e70d627d444fd67ba678bccf7670dc6574255cd4c8936a6acd7e0137b5f3520f5e02172cc5f7dffed3eb428dbcdad48b26489f89875d1eff8a27be5ebc2e6539cf9c87f52c1cae34b94ebc463a725c11962f0d50b4515367e866af2627caef585864ef84c359bc24bf595aaf6906b77a2809dd90227f127b68d674f48fb10fcadce546a451a12dbb6b4524426276294592b62c3e4edd2e7661884c3938dc226c3d204caa1ca08f5ad3367b3c956d31a63a16e7ce1a0e99b5f1873e1f4301d0feea17e0536f15a872e2f3432a3b32d8872b0872f5da749027c505f20eede26824cc9e177f58485453167a3a185251ce4c221a751eca78ae3f907b40c14068878c2352a4e3b0bbb5a9d8e168443c68e2ca72a7b8200703bb9ae520935f059355a20f2c9b0639821eb3b02696b1b19ccb8f27a05c2a79551c352e2d4d078b742946567fd9ec16ca37497f1aa144c63ca7124b7cb59ad0e1f1e6d2ed431ba941d50abf085f34c40557e7e2e11ad2697ae994dd00574907fecab81c2575974844e6a8f44c0498110aa876cfb25d43190f90bcce4706e8d59cc4374cf31e4975429f14b3a06aca9cbde32242abea9ddadd4037ad6a926d89e0fa24f257c3a046c1c8719ad6abafdd9f0b16dabbf39054df88e95f88bf26bdf7d1c0fafe955c268ccfda35697839c1f94998fa45dbffbe0048f8b242256e23e375dff60f474bed826f136b847120ff44d004c4e9afbfcc8a50952588f0fb9a930e50cfdff1d5e995d97f1d37ce64ed35b31acf8a82fe5b2c5c214ba5026b7c52da44e600e082b259de05a1c372b51597a520dff3cf76927215b58e2364be79258bf283634803887ea81319d2deb0c90246ea9c09373b67fe120a66b2f46834e1eec2486c34157d7467a24e7f64ea0a51dcf219a10f608ba814149a9cde7c67d2ba84ab448ff6c6e15ce5cecc6defc47c8ab7e40f45e6ebdc5da88deec6552c007e1d13455a6fe726d8a674c398328e21b3a9ed983e042fc99dc13d7aac9e7002548e2c376c48b48468bb3283e16877682c5f0e78a67cdd4bd811603e0fc5191831356fd1d69118b189e5fe9c8747712a71c253eca9fa17586d2647e725141a7d32cb9557d80a189043e6934f86889b0bf741170822d56af67c212ec7d9ab3d3dc37d0af0714c34244df79c5b805a09cc4fb0189206894e5ec6eb51dcc2c6e1afbf00f2eb4d26cf20cb6c83bbeef897582d542cee8ef32205de572106fd5208348a22adcb23b01731900982cb16daa6c2e9e8a11989250790f86ddd93794e815928d7ebb6e3e50969b32e7a21e35bf7d851027d93efbeacfc8c0b8e4411ed8141a98575974775fe62018ecb25d934c2da83d8c7c3a33f428bdd872cb791f2e68bea8a7fb5d68155e5ca260999af7a7f6fee2fa5be9abb7896dbd586a7526101c732f3b74deb3b07416dd3b6eafe70d1e5f6232f186881610e761756e1c7903f7e8291f06c04d1e793cf82a61ee32f3c44c2f2a6ddecef37f8f7ece70e5af13553e12d72b48fab882a97614ed198e43906ae74cbf12dd7dd3fcd7abd358e3aae6007aeddc9eb2f402752706782df66e63df5ac95dd05e38fd17cf226ce86888c15c02eaeb29ab582ec5a62320c86c5a9d39e55d90028b2dac16d66d79ad9236c81407d4ceca6d75a6493a65fbc0dd4007ad4c5355996a82835c24a4690e1038d2e365ea5d013a12fbea45c2c02a168f36eab557ceb9ce85f8e7b21eb6bbe07982f0c3ece459f161fe2a6c8808f1fbc7836ebb3a438636cf2b3b5fe3ee69d2d406a4e53ebeb541590840c2f8fe6e39a266cba7dfa50f7f0daca0a4a95449f5290a6807dbd4c8664701ec5b5ed72782f6ccff4b5e659db3cd3068a4578f89c6ea404c4f4b72458b53728228aead0765c39d6edf51914494d0a909f82778d0184b90bc74eb4094855f41bbdaf9c836b4fc08bfe63213a3a3527e06355a30698f7dc84080c72bc693c49540bc4555e7dcda87a86a38b7e927657b828dce517241ddbe91bd25299bf51555534978a0c58565aad56ab08816bc992567a009c5a59a55849329a073d42cd13ad0b0d838b3750138c2feb6ed4f242b683997c497977470451b5fb01dd1398a752c33e3e9163d496374707c00d512660d8ff04492a31bf3c98a1ccfbb328bc2afa36a8734cec4cebe2beee11a01a712b9dc0bc295d904e6abe3b3c29f101e4561683242e7b8790a43611b9417070b87bf9593f20e1722a5210aafd3ceca5bb4d69073772804df575720ab3d792510a7f3c716555493e1e0b1bc9ca2e2f4470136e221b2f2bc4d7a4826ae20f4edff2298f9b943a5ba2466b2b6d2d992b7f93f0154b23fbe5daf6efa7b13e476dedff694ee5ab67804b8c35099329cbdfdffc274f991d35b05fc361db5526c606e240bf099053fb8e7913892e8cd864656d13112f1c4c9a5d1dfb66852926312d60b879d0598ccc312f524413565df998ebf2e1c02f9df2e02ff623b14380e6661a6b4bad2622f32539a09fcb76c3608a00d2cd5c05b4ced0b9a5eb85548b5fa5b6430c25031d95c7e3697bf2c45fd742f54ed9fa83171b1f83bad6d140cfa31e7cd2d3e1d29a91acef643034dc5d68bb1cb25cfa020fa103f11000f647c6730656744f004415c0180feab3e3c97285eacca3cf97a3cfbb05bf168b9e6cded4f6c1a1b3ba8694d67080092b1bcb1bfcf0061e641ea7aa1d1fdbb2d8480b24f1d06e9cb1630b84de8bc6905b9fba9822e0b142508ac51c7022284746c6302198e57553910171c6cdc1c450c1266ff3fbe9d54710bdd8044e903c49b4f90b4de43d523d171ca1808627f0d15d58a8eea28c71798bfb07f41126be850aaf4710a1ca7cf501ef2353a9169d5bd9336557d442d7e2df11df90eeeeda648d8f07e67dd733976807b2d8f80cb4d165b2bd6037e117fbb8a66143e6770559e86520aa0b7bb69bc7432abfbf3fb548e73634701c663783224e3490832e7040d438c7bbde6f48ed8c045e2c075022d149cdb829911868fde2f46b123cc697a95b68afca06df01d71953fbfb98317823579821d4e3182f68a3c0aea503b1e03675362ec09394f6f15446a18e28f1e46545572426dc632fb3039be40cc770cf8582ecbe590bfe7e22708a5f2666a148feffccfb41d187984c9978e2d16f32faa1a15c20e3ade8bf14f130f9381b0db443fd013a62b78717fc977ac336ea425506b552177717ecadd1399e846a755e2302ca9c6a618b4e33c44229a1e783e647b93c7158c7cc5ffd81941773e07299666c5df350f09b15fe8555ed44b9f4932a65b82eeda0ae304c14f27b08dad5ce14f100fec20df7fd8a819131dd119ca097d0c20df5b86d103f9ce2afdc9e97939e6a18bd9aa9c4d7f63803280cffe1800f5fc1ff020c88a0bcc73b415b5436fb4bbf271db5a2562d91e7dfd3fcddb6e3cf9c724a830b16bddd1b466b41110d02b43a951d075af8b67fe80313ed1b0ae2182bb1736dd9678a96714e18ed4837ef4f2454541d22c7f9478e96b0005f8e8d08114adbf2fb85cb7b8818c4b56ea37e51b15f316e803cac2d8598a044ac348f9ecc9f372247c21a94072f77a486d45103c6e63eb5458273019e64761c675cb234ba63d29078f640883019b6e2d104ec9f1bef1ace7ac32dc75374bf0074548eacc56bdf96643287b80ec7254cc63ca457f87b83a774fe679740e0c4e50d70644670eb0a5be030a6a5c71cc73fb9b36462cd75f401a17215da897b4199cf2676ab8ff807441e024f7f871123e1198584c16d27d07c53233b4d09b092dcdcfbf5fe1d31aa00b5053d05fc3878630bd255d7b2762c6fd488288a2d0e06eda7727bcf6aa717d54ec22b8291a6fdae1cf503f5f48cafde3bc6116f0ec8b7115cdd7e6f9d269624bc8c689c4129041dee1672a71fb0a762c3f0184535375a7c9e16074306e4dfde50a7bafe8db5480a1953b17245b4c0cb4fbfc9c58f63d5a2f15a7e1888a7361fc4cc8c32074608892bfe8ced0e3f90f74c6c7e84d3390c11f3691bc539e10e2c52e38b3ff7dcd622507d8493f6ec02d2d112453f87d9ecf517cb76c7e96b111a67ae7948d72dd5bd66a996ddd8aff90febc8e03a1149dab0023c8f4881b171ca06a53167d2012c2140d698d2bba5fc585e4b45395f0de3959b1388d2b812281fcd9eb8807abb883a0d0e2ed202774661e8cbeb8c7d5ddb8ae52c28f0ce1b1fabaa09b8b83006af73d8d85c45f2c34df5a948a55dcbb2d0892e8b7e3fd4c34d00246b6991727cff1fdda7f9ba39778e2f813a2e02d54e9527716f25d47ce24b033af7a957a14c37f783c3c01bce0bf9787c03df48c146aec8ff9be816bd18b8d10563b575f48a69456eced42dcb5e46902a810b5437b282579a71ee3d50bb759b9f5f6ada2b1bea78274009e3c9189a67bce0aa42cf6f20bd4229ddf3baf53bdea318e76d56e63597f36e72409e86ec31328ec3d05b87703faae22c096847bbea81392e431356a15da07b5cbbfa21360f4fbe2bfef6af429750e88c01b0f3bc4c6a83d7b4d2fb74ec3dd616117d005c773ff59f75f5771215d6769111c5957113d6a206e111f3cd085657cf226c10e1216d000011c72efd87cda99b926fea18b080ef104edc415c372d5704029d833cd7d3da75e91d9cedd1a7ac4d14b6153bde1fa33b079bf796f8ac13397ec84207499f24047151cee14b17c74f15e1c092c7bed79b458e103d76018830eeb6134ed393f803c920b3a4c4c8d0b7d899ae79a3c4e1c9bb954aef9ba46d9faab34aa44579dfaf6a2208c8728a3b17e3c127c1a6a6ffa7ae4b71884f59e84b7a8f9e8e348d53930862992fae920cafdd2e0a93d64744e330518ab065c11c1d054bf5a53e424fb452f2a62797f4ebb687d3d77111b28bbedf26133818b2083dc94acb39d245111a3045243e074eceef08c8fc26b152e34a6e01702466b87f155b2790310c43aeb8e4cc21fc293981dbb83559a5af48b8e4a94af9cb53d50705f1e9cd18b541204dcecc527dfd5b91f1f6d5308f5d30a97041c017c1aa4ab46bbb3831c3521298d9f5fa55a3de096c9a24a8341d9d07d19f2d6732f2a5da8cfcbb0e5dbf555300f65599c452a8aae5aab32a43d5b85c2d30ed8413fea2ddb3dc2027356cd119d287540ff73a2c2cb9ce54b145a914fa4f6829d6f2aad11f7d50d1f7e53f59adca6ee146f21ef337c5be15e6daeab2022411ebaabbe26aca95749760509068671bfbb462dc618d11825b7bc3b11b58e2eca9f8105415ea2b5120f0e72b2970d063be744afd81efb4520d51e5d04d129beae43af63a3e3887d0d12de3ec7a718f6ca676b9b5fdc68399b98082db652a7607087fecbfbf71afd8f101b92c8ffa4e7c13c819a8466b85191317229b75e8e034451de7b334f0d8683a0ca447b09a45b8063006e579631e2452d40ac16d09044dc927aac4d3b5271e0f9d643774d7d81d2bea27d9cc97ffbf40a158029a5aeb0ab619644b2bb3a4f85f1c1703af8057e63d476476e81a175c4bbd45cad22eeb0a4f4ceacd824cc7d187c71b5f1c82db9948bcafe002a624559cc1c683dfbdf45e2d2f5a1f71841b4b1b6f833735edb4d08d7b2ae4b409717464c7e71ae436687fb0d172b1e9ec8311e8554ff750d16b5ffcf27e829299416c0d9118acf1c71010b85db2e8f9949ca897241b176f8967adc314bc9476c749997feb019300ce1fadc3c488dff3cc9213b8a3cc4064564028cf6175c93c04066fbf50b63fda308eb9e8eb421e49aa5f817ff8a33acc65ef228b82aeffacd9620abb576b49aa920e5c7b5b23f2ee2ab8b14619e71e2be9ccab6945f247337344a3865d518e2992966085ba5a248450dc99bdd54eda2a9cd8555c9ad74b9ea76debbb8abc7beae0d64ff788c56580f7c04bfffdfcc26af602bb6708e0846b131264a8251ccaa9b5f69726eb427e1947c41d1cb16c9ad10d496f2247eab6fdd36de5f87f7df9ec86c7d52553002f1340c7f331b71bee5f68606f3352beb062f58f8ca6bee7c9c24ad49a614ef44d33d16bf2d66a9e62bcfb16bb06af0afca40cf492ebca4b4d9b2da2557e932ca738ba8bc10699872f0a276c04692368483aa640d345f0a2dbf27689965e9167826d985ea5ac6e4dd5c1f96b7feaa2700953c5dfabe6a093ec57fd6fb00ac79680ac952d8bb4d2ac5d3f11c5d275995449c3ddbf7e1b286e80ef358e760cc74aace85118efc852e6faf1bce225a0c07f0c305a070777baf32cf274928857e15d9764e47909c6c395ff660e257fd542ce517e790d8586adf3a121dc43c1744191d7c669c01d1cdd462f0e89e698a32f69cf9a840b0479735e4efd8433f4f3e9ec254a53d603058c644563dbd76974dd681168d1f6fa0dff79ef520bed082a287fb7048afc0ceaca854cb846e4c5ea0cb231075f027617e876cbb4aa88e512bc4303eedb5ed16211ef4f30b78e995ce248e0d98c9594f0c82503972096a54c41face022bee2c54ed1c14fbd3ff246e857265ae998ddcf811ca6cc6ece2240dd857866c0a75aed17b64d94e58a044b6817824fc4fae96f887b20b1ef9ac1db31bea7f6ab031b97fe4ed35e036476dde4c6c0d232236d464bb57cf3eb3eca9c9106ffb034625e0cc40f85af4b448a16966869bcea59c7b7ae9d670f94a60a4832274c25f208af13e539b97290e213e1475ef01f8abdde4da5ed8bde0f415ee33bd639c287ae320a68dd7d7fb29dd7a5c7c27cca35bcef38c7b5b62ed989038afe77048b6bdc36fb02ee2d8c955eb22ccb7060c58b91e819c6176b8d0c605066900a337a9d1ac9c0fabe9483275cf3075f5d5138f11e75bcc9ff60065d2c728b6b0c78b5e626eeecb0f035d84b0980fd43dbc6b12ab98f96130a9f145b2d0d9f5a037b2a956ac9a1c9e813b546b29f5f8bd413ab9ec48e1df0fbaf4db279590069413ddeb287e5d482eb1f8dc50bc466e3d8fc11bc2bb767a78d4ee741beda43b09352f5a615c14bc9ae53d31747a67d6c4eeaffc2aaeea140fd47f1887ba0b301a7c35eed1ad55adb7dc04f13deb55a7dbe5eb8b4a59ed67c91db4034add006baebd70a9c2a251a8e3828dee5640c0b8f926bc8bc9fe14a5d1d423be2e335235cdbed49168c73f833d9c6240235f298136bfed0cfef5e5278d70b312d6aeee8b583843bd6aefcd7d4552287f01ecafaee273ee02a8a8ff0f8f858f096f54bcd30c13c898614e3090dc2bbb369e4e9653e0c0c6a277b7d3b63c66fd6ce4536ae57728d1c20debd6affa3354553bea01ce5d614076c45df61a14ddd970941d551d7477a8adf8bb764bab39b05401bd43c3927926c4a7e1a6da2a2c42bf4ec6ed2d050c126daa3156741a44d06657c7fa8b3b75e73918687f4fe5e61adae0eaa54e9fde46a46822bf2c0f3b0889d595f94268591cb213e88329606c95eb2076d98a707f603dce634c9caa590e45e509bf3c3c591ee67e39689163aec15648e2e396e019208a1edf56d21a211eccadf8f23013d24f688b79367c30a3569adad617471623870bb1103f7544c4d7e36ee8fb69668e45741c562098cad671cad1a7cd9d2239f8c5e619050fd82b77d1822903248883f48b5080404d3cb824920b52ae0f3e0c0509c37487991eb357b77cd4973250c3fdc1e9c7deaffe1284297e3551881535c0defb0e30a036bd233f46ebca56ac076bb5ac9bf021810570db2d7a147662ed9c02b11c7e8646a49e8aa789b71f8f091bfbca4aa32b380cf85be7624f063a49f9d761545c4e30c75d961225fd8e87bcef2dbf802c646129e18553dce664cadc75cfff94a31b231ec295a87a3fb2951b3be7350da3ed561aa34d3fbd261b22e5500b9cc283da8eb93158334a773edf9fc2b3e0b93d8525febb17d97544871339ca533955c50b9b83fdf8181e59dac6abc77f411a9b69e788352caf698ad064bc3ee838ebaa1597b964b560b94ca2d0990380fb501438454e018ad77380fdead5a9d3818fc6255340eb4dd253bd14bb80c73d282ec8b0a02ea636e7e5f1b822061e7e052951e6d062cafc749f1e0126084163c34606e243e6e32790fb7996176ee622a734669afedfc8d9f60a9be521142cd67812d57d6a26d9cb94be87f25b7dd7eade3cb19cd9ccf22bd5960551194d9bca2e426b630a111a27dadf58a78647296cc1b9a64824f72a8cb328459198121ecd8b4829784a85596e8a8cd33e827ad3c247837b4f15b9adfb722a1dd21b79e747fb0ec1db4db38ee1fd2bec0fceb616023c72cf6792984256c307d139bfafd48e15076c164a8b3cdbfbeb4971609285c1edb80bde36f733d18de8a761151bac5de72d547890948c165583956950f957c54339116f6d59384ffc77c1a6bc55f70b58bf3c4b2aa4eb9e7ca0bac0e889e465af3c2d5ddbcf42f457113539bf23bed8d76e20c471e0c7593524f6b3ba903e95eccb94ae51d6626a36d4e4d7e12807e13446b17bac0f61643420071b399a97ba74fca7b9a4c57d912115b28c356bb54eba57885f6c7d0c8ebd2214f6bf10387e94d4de70e530c55dd755b91a89c7398097e603f49d7e3e0aa2fb893fe392494e7e62721f63bf49a1b4dddf662779dcd2534022e9ce9d764419605642ce9be5dc18c4093317ebca60ee52f7b35e4bc77b928f33ae0de9408543b57496f4f001fb6c873a2fd8219422a9e7a007347dffcc872c904c637bab39ac47da7d82aaa0644463e8a9739809fc73665c2f8fed522b5e28e20984b8ccb45a4e02e13628873fdb6d0450360f3a7fa159e8e19cf34f5c95a12b755817a40616a9c466cd93e53142f0f4c6a9eb260bcef999d972bc446b0e1e8e9cdfd58ed679c2cec6c95b3a86481f55b59f3ee2643d56e7835fdecbbbd427525ea27fe134cd1666f8f1917962ec6d74e40a0564e4af3d85ce27811c5cf2ef6651ba7b465a9b5de9c4fda77ae10d486931436f6a43cb58f789b67cb0705158db95bb0c42286deb83f32f218b7b571706c97aa3b178b67e9538bd683ad0de26fb36b57007a83d72198196dc051d4d8a70ac9e68d1d3c21fb81c840093461cb854d4e004afb3055e41305499ccbc6777475a2d3a33137ca655d32dd33d99d864192ca49d416769dd3d63547804b1296324ddd5bdc53c23b3e13a446ad1ce6fe9b0302042be2a56ff0b878ecab028cee6114d6c4d285adbc4e55edeefa19389ea24d61f162297fecbc1c982dfb0d4a79e89598138cb7ec74acb9b532b9dcb7ab30458dd6ea26a897b5e602c10cebe967cfe3fdf45a71094da6fb9e228d51b5cc7c5e307d24e89c00a7c8f7935aff899b20068fdd4ae92cd56205eb8adcfd5e4d30db6c7d61d7a9cb82d64559897e6c04ad8cb9704461ad94783e7e0ed0eacaafb849bef858610d93939e44cff8c05d652ad49ce94a6a668e83e25abd843b5f766db4c7cfbaa180990a4a74e47e2a6c9f8e158ff9cea0bcea053f46f79baa5d65acfdfeb7a44a9cba1bce774a74227d2006c831a40ef974535bc729e296f14de6411dd3b931ff493db45e735e050b7fc81b2b94961fb79c86b7541a53be4d2faba2c536c0a6a7c06c7116278e44c09cb21dcd250335799e86d2a07e7257966a053d3c1c525c83cb7f83ab9e534a20b5a446eb0b8c63f94b3180ff4aeb55e0ea1f883cec9a6923a64d1d0b12f1de26d7e4ec1de3017cd96634e605417564d5ce5ac2b399842c7fd3d43ee5b0baa1ec695d898e637bd2d00cdfa02f78229a091982bee6a903bda4ec3954061a009dd3f04ef384d0b3cf47bdbc029afa3e83c04697c0b4c0f9c794498ff33a310804119d62171ef0ca887e7b117717e2c03221fd58edb412723bb1348ced3f1077a26c4300ed6937bef20af3a71490431468f12bce08f51b4bd0552925c44899f7dc40e8b9db53162fcc740f7dd6dbb7bfd1934df9bac67dd5d15006e5ee5111236b1dc088cbf6d6beb23807f1c2bc33acaf80aad45bdd55b3a36559a4c72b9acd05377a609095d36ac9e31aaa004107e50d7c3e7f5dae2794c179815cd4dedd14c93918cfe8e94bd3f3686512fc00f04e1f0818fa129791bcce51f1ae90e24101973bb70f3699ab03f103248909d4413a5eac6b80f4d6230564a0d95a99b1e2d348c89b5426167e41ea6556b4dec494876b37467f5c4601fc57b6bb2a195cd9d4f4e61cd15fd922160f01872cbe080e0df081dfcc55e5b010c163e15a67c645bb5f540d44ba91e620dfca37e44248a7ff0c68cc0ab8ef61772e8184c6bb77c4adf40069fec7d4cc6ff2bbe5f26e1ce1c4dc8fbd004c2c6cc72d486700abf2c53e483f909e1a45495d1c3c91aeceb9564353afc5e503f636729bf5aaa4de0cac3988d9809f9c46e59447e09c96ae658078790ef83adb5232d9b8d3c2219349e150142c00616ed9cf67e4ac5f265d977c7e7af108e7302af3f938280b92fd7781e1f5c5531eabd849435e7d3ac17443487922f0eba023e1dbbe28df4e584b69f593c441f480642d81bfb654c8e05065ba628118293271709ebea1ed9976bb1424853c0c478548a8fc11eee3f900bd8f55d7cceae6c30998d2dc6e9b416507acdacba527ab653d7b4f2f52fa0b092459b97ac0519fb150722089a9bb40e81e51918722829f54c935399fc61b25e40ea2ee5c60a648e8969494918eb35ef8e25471649db43bd2762b54083d1a53ab749d29734827dfda26bd2fdbc3c57bfb939422032dca52c9475c9d949b71670ef456864c87012f9fb0485a7670c87d5ac67ccbfb7219328ae18bdd1b9c8e12c474fa43d58ff941e65200a466617e9d10c2ac3ee4143d953b1b8dc4a41b5978d4adedd748f6e4aa43d20a380dc869db3e7e0be8d4f7192e9aea5084a723524a538a90647f97161c505893ad5e0919e515652ee8d16f5ae3e96d62775235d686ddc73b03b4060d8d1aedec68ca6d65992359d67dc5ebe231f405d5ab366c8ea65c9e267c96804c5013fc69dc44a3149aff4920c09397de00a070bb05a559b2a4a884a1747b4c3256bbd170dd351eee27643fcd8ce1775f3c1cf64911211bcacbf57a5b1fbab4fe1ab4c5bc0ab5dea9bc3a9dbc247be26ac0f371e02368bb7330c9d60d8e16318a1d6accf040b914620e65b108b3a7054072ae880ed7f8f60c783639332c5416faebd14808a16bfd76e40aadd653d6e806c8541a1b2a9e404a7bb9b45e35249fd95f5c672d247ea71ef9375ea9ed4dfe992284221f51f6d52a9b781204cca7bc108ce75a0dc5c80f8edbd6e5b0dc6c61e220941c123ad6d6334bed72af3b03c806fe368606ca6ecc0898178581d5f187f08c2a943b40fe286cf709347bd3e2bd720dee8c7f5c6d5402dd81420b17fb5fbaebd2e878e71ffa09751c119e02e96f8e1eea906a0cec6f9e7367c39b931a99fc5fa329f59c1a41b9c189bed64d288fd559924b99581c60034f3fc7af09a69f033963142d75cb106b8177c639fb6e385ef0f8573e8b6b852e8f0afd7c9336e9bc510ec7d889d542bae6389624f123178941d32729b44c93c45340312e774801f5011db048e82dda6f6febe1c00564c89bbf76e347c71a06949599894fa24062fb159bfb915e6ff26005956843bbe2997d4fea5115b940e3448a306f6ee86a4f4c094ff1b0fab0d60b50cdc688838d6ff0ed35ba1b4bac43a6ae2938f5e9d492cf3a71834fa5d39cf54ab7ab07653d3b0e45543de86fdaec91df8b34098542ce60c20de78f402e3048bf521075d8e92d57049f7d56a1efbc810107666d2cc08b85ef4bf0d16c25ca9b873ab4b9d1def7b0bf9a006048a0a000ed53450ad797ab30cb68ec877bb3a559c2c3320ac851442e8b12907b37425cc51a3215cef433b6ecf83ece5c791d81eaca6b04b14599e18ce480e9638fa015fbc582439eeda4d96720b8260023c8edacb74eddca81123afca4e3ac745f90b033cc086013a3498e8930496cda4599e0d5b7199265c7e32b3b60da29b8b6804225ce79a05eacdf48aabb1403b8dc3e842175192c6bacc51bc8b6155577934157b975c9a291760865ba8d4b68fa4bfa3446fccb8885acb855b6761f85511f11ab036ccb7486aeb06ed15b0f7172876e20a26fe689a1d5e3deb14ab8eec7f4a634e79758e09513f5cbb737daeedc37f2aecf15c02d52fee44961c712340f14e6cdb1b713b11cb89cf3ec5b7beb7ba1a3409f5d8098d5231752cb110ed8291eaaf5a51403d8c397cf73e9a1f2abe35061534c4f07baed6128873e37fdd2ae62dfaffc5500659f00c81d0de2e8b7d32e8054aa290651b7e793db96becb188aea548abad404478cf84205c6d3042a1f538895b8821f77fe06248d124b628dcbe8a5ca401015f0ecefcebf9e4155de87f988bf8850071d681cefbbe6779e67416b9dc75e36c45a546b63ad255ba624e041348da0664179f59ca43da132e01d13aa85958bd251290face933c5a52e614d5329c8da7ce558829d124629a5d8e6f8eee8eff833221e803e6e2e3c1837cf3f4f62a6403cc8b5a44ba93cdab49e672cf501aef75bd5b56f2b1d34b5d881ce1146913c44eb4afde387f92b661b392de05d11bbb6533a5e29fa3c668779ec04fbdad103c89e70c40cb9d7f4d6ca204730dad452ee8d70a0b7e6868bfe2645d1c8b657bfa594eff8f59d4ca056af6ed7fd26d6adcde7a766e4aa00359679ef3fc4a6690659083a72cd1c5f3c5409e76150b6dba1b403fa589fe22dc717110b0ef55a090af8683153968176ca6033c04949c76596b44a5c1d8aa948e5ac93e2950c3ace8632278b06c877cdadff517690b5b035fc80734e51e28226ed610ce644dadc1eab51a1ed550ac1b81f34cd6a667f37a2c820e972d87f5b5086e6289b57f8fe593a4a27d09deb82ea63f4a37743d4ee4244f899bb3e7215f8d65b2b8602755cc5f14fa9dd5f95eadd56b32955ac998e1492149c4a5a6a3405662147c919d44c78dcf77102fee699f34ea6df53b585d7b6b2375997bbb98cf131927c64cffe9c63cdf46b427e857fdf7bb427dafb6660fac67388fba96586f9310afcf5310008b2680fe9ee2693707e2fbe0f1ae24fe9b46a4a75bcb6f8c75313740133c4372de31c22d9fa76dfcc500fda9eceb97ef08ccbe825887ac22f1edea2a60a0c29325afbf8360cc48b137a66d78cb23b3496bac1149c6f997286c79de1d939ce063bf08902e8d7e4a4c0618e1efd5b4a84e21458dad7d0d3467035d7f5bec03cb4d792eed67c5cfa135e8ce9cf4580cbbd226d6d04570a582c12cb96afe15d6621395886a847973121472c2150f971e4acb6a501853058a7e7875062ad519cf2dc5c254fe7b14dea7dfa9c289566a74f372dd391b0bcdf3b2122852bd545e033515680293d81ce9852e4f68fe945e59f5561b3f0dc21a3c3851ab8d75092f299c15025a7f91249f6c7c755633b5c61a50faaeb292a60dc9803cee728b5167d6f029c1e72d090fa626c3ae857efc813a642f834393b261faf2997c7cd7abc7b1968a055a825126993ec6ad9885bb1be199dd24140b1c45264d0ca9ccc470ad2c19486ce3681e84614b60507d16c5f850933b6b18990fb999cc7c51382d2e323bc81be6224d523bed539b8532b4144624f67b7f38a6525e08b04b27a8bd7b32522f5bb2b2d52937badcc4a54c18490d4b197685edd5fa59bdb2eb67b458424516d1836da9aba6748ef145a7fb613fabeb894a69c122c5694e4d6e1ab0f56fa95f88787b81aefac8744a01e471bb883ffbc9550edf3e759533f8aa8ad7a787f286fac1eccb1b462d41dff290518f5b8f75746be96e2d32e838eb85200ddc854f7402d5df70e57896bf98c37fbf51e6c2d372d222dbad58fdb50c2894c99859f1017eeed18d2fa669eec9450a8b6029dde182c6443920826e9916502c98bbd057d8f9ff1768fc2e34024cd9eb1cecc631c48c27bd6994afe5655399eb50c1644082ef98d15c72cfd6bd1b8f997c970dd245e33c24ef73437f77b49eb050f8987b49b298b61557d0a1860e62055ee65c7f2d0eeda81663037a774bcf7b15d8f50bc1077ebcbe2c5e5a71884661a049fe6bb99534e55ab42540f1b22fe6f49c70035cc2f589ceea46dab27002f2ad80d8d2a80091b5e0993ef951b10585382849068d0ec4f00f7ca92d01722241e5ccb86a7e4f82fe639c06ad59ea54a5160ba775f96487448fbf412df9eab9215cf0b1f7fa4aab06ec8a7b3ea3a24d9909d34cc60cf5ee1aad2b7d03c48fc2e01e757f0e8a6ede8f96be5b8f95fec3b6404438a35cdc0a4c667ff878bac1e00451956a7ca9d4ac12d620ecbabdb52927febd699538067fb60762b021bca5986f274f2a17089c35116887f6c1806e40676248b1ed3a0ea20ae77063128f4129c5381a2687bea8b8ced6a5b22148c2620c2683166aab82223baa55b02864fa92ea93b46e7bcb719ecc8d17333673abd29b07c791310c5f4dc934e5d9a657581f09897466785e12500b0f006ccf777483775a4321532f0e88ec84503f32f0736b50bf67487b9c0186898ffa0d9029967f46474cce66220dcc2f90e15b0c9adb9f3b4ee9dd01bb312db1b5d76a74958ad3ee912a40162ecfc2bc39ff5503cd319ac106dbaddb2be499a822c955e8ec97c7a97a0263f931d324c0c230c6f65aed30560b874b7b7b3463fab767e3c59619eac0cae62b806378a602b7c904ebceab1ada5ff5b67f6004bc7ed0918835daace30c55931423266f3c601094b8e99816ab3b383b6624cc45ac4efadea6ecd6f19dd1e50975706c99e27a833bf43f615ea7bbb8c98a7443195e526eb8339248a329e1749608d3b9acecba1c7ac7fcff62f7d3b189ddb05f0146cc4012aff2e5334ccf96147dd35bcf641497f45407286bcf5b7c10f3947e8aefc0ef2899f1221ea7fc8a89dec71fe58a1c0cc5aa4ef44c2a33338257f031db20a84f81b703b5344b8dd1ac0241be9387460ef008d3e17bfa5e8dfee19001e18ad02bc1c67b87604fbcb516ab382c8ef8a2cc052f4576087f8aa87010b91dba4e1bcf7a18a41025779728d5c92a2eace76c8c7676dedf8c606c7655f974bd4f482888e79e122a9f03c24a293a129f4efbc16aab130510f464b7b079c69c390776517be3bc782426c49859a2bfeb4f81e3e61de7fd8d7a82fe70f2299d28d6c245462abf116223711f369d66570f791765916190da3fa5ad1c203ca01c933bb23108fa6b971b7a21cc390575b7131380dedb475a75390aff6e8dd63b5821d8bb7d74b56d065fa878c5ceb4ff4a34b790a70a1be8d3e1e1e8cfe3607a3591730fc0a8bc0518a49ceff7bfa2f58fe53bbfe909d743d7c7699931010ab6e66a0b5aec687a94eb4d7554f7e8e8b5dfe2c2150ae8e09393331cbd7a8d6dee17cce785ca980b9d697cd855a971d175233a1342bb90e9510d7ecb65c2bce7615d4eff896d1fc326cf3421ab190abe36fb327f0d15bb8cd196e8bd3d70f94f09e88fe353a56bad25a9d5d43eec2fa07fcdbf803b2d37d592bbc17994c2ac063038c878f8f2179161c1dfeea056e8d0f984f2409319039952120cb887ad4349015b4b2ceca2f75cae7f15b22d090fff2bff59ab33b9d212d9d8f884c726dc7b1c7f8558781bf3e71cde6399f74fe3f00b8cdf4413b5a1b54c08b9f20d7024f8ef8df20e69db4c0515577b0a8399de79c8433c23d6b29408a97c84d0fa13b6262f02d30f582ea1aea590de44034d6c9b9fdbd7be7ae7ddf104f5b5769fba9c64cbf9fcb91d4f18bf70d5718ef27ced201d91b6b442e77626aaff1445648bd6969e7269f706e8aa1c8d70248cf142146d1660dcdd268e8bde88000f2bcf3120748c7292e5b5d3d837b0cc079f02d784dc5f2c62e63687c17c6ca18f91a3dbf094f1be24ee0fcb52bad25f72c81b2034ace04d12c596613130fc8abea17473a697c8ef8cbbbfb05c16237443e0990e3d6b07e4bab863dae3fa957d6b018ab9d29006a1dac946e09922b3a6ec3f81da47d730ba20c76d6de61566530e44b61e181f58c117b9ee3ee66162b7a050a67e5cca2db51333e44b50c9fce37f189ddf0f7715784cc4e41ed53d41737de38960747f8f393aae4c3b1896122691f5e11354ec3b0afa40e139e44c342699449ddd05957446d43f44d94280ce9067bba5e8c0912e3ddca6ee2878896516fd86168798c909ed00ba59cad5b2abd77b0ece482f53970beea8401b6c3afab27a7ddf706053fd5570768ea69de93c894b35357637ecde8794d46505b1922944ee3145c720047bc352e190ead13cc53bc320c40d16def27e541b4792384560ae32cad6d5cb221648a6d2402c237ebdd1843143113606f2e2a9e2f4f6d8b6a51dae6384710e90cfe508ce5fbeb46c68e4b7ad2a4856247fe8ffa53c502b3d24fdd2547558a90d3d97e8526e9c1b061e7ae3ca0230ee3331afd77271f352414af489279f6feb1246e04f0abee9d427aa370d3030ece854d2a425849c5283251b5ee9fd043f441ff9ba52265aa82f1b514459ee10026305fd01150b83bdcc8bca5d0c7141ae9742d7082e780402f03c85eb333485f85b880bce4c991ae609f3f1a37099c7cb50ac891133bf70fa06a1c23b72ff7aa63d25b7dc602cd07e37cd4cab4821beeb47ac045927acdd75c377a0b42c74c024d22ad74a9c2cb4c30eb702416aad2cc09c415752fe484479db2e7dfdec0fe795f1b13e7a4b7a2085e6d7be2fcc0277c82585b2960003ba0ec6ac67b8f53787d806ea93d919c604e2291a5d53a5640b4b259224cf9fa9d622e777142e79c8b8d296a8d71f7cc617471dc1f6dddfb0d7fbcdc3572652abfebc6df023d148d0f0bd1b9fbee91c581c213917f0d523801d606bd69998f590e09d2a58b8f8fe75a541fa44a37579e114d33e4189d7de590cc78c69680ff58bb459206e62b3f52efdba25eeedfc839fc375f4f55672bc516f95d8da6839835e3332065eceb0e55b87f45df8b48377ccc65c2169f1413716ba6e6d0f07a8f1538b7c5c1cb93092aec970e149c0db76d3928374d1c38d0f1e466d660b7a8a3dc06b206789d34efce893c976899c1d7fad413904c7b32ee2c9e60f3f08875d307a99a57f13e438dded13a68de5d9562804c421fb014e165ec6f49f085d64380e406f4aa9a7d18a55d0d35ef3cb640d6fa91fd8278b6d14e728f8699da6802fe29acea7d146c65b976339e40fc7be9f7a517ebb9f88ba9bf6f31fd05c677a4bc02e47609303e3bd0db3292fb251922edc777aebdeac6b3a60e8fc5514088c99b52bbd64cdafbc20015b6ac5e1feb20fff0602ac0606d2ce3958e91c6275fee6f508ebae2a226eeab7c44a85a13e856b12935c7dd4b4d3a476825262471a17e371a863a019d4523a82299cfcc11475d4633efc8397e8e92827814a70e569235a5d310bd68bddb7be7b2168033256e5b58e37fdc5c781f4bac49703ab8c849829cf59b8c542a8e103408e84126e2abb7ab5b28a1fa33bc8aea01f500dcc877e13cf3b0d235401a37bd7218e8adbb1cffc14cf5f968819d52e3801f20cafe72fd7e706dd300f3729eb1914e4021c409bb7485144e084e39c3297ab5171939170a7467bea7fd28fb903b1a933de82a3cd55883f24af0ae8b6fc622d1918cfe14a939aa0ee84432eb801f3599dbf9f051faef981919db2e95fe035f4c4e15b65a3a7fc9b6e7d633b3f6b9d7c8a68451d6810a400407d20cf4d9e884fa1a3962a6b3a2f01fffda6df05ef1ab72587b9fe42fdc06d1c1e07fe828d9f5d0a79d7a11dcea27a4e054a484d88ea6b48404efd5ae588e3946ffa0b049b6f626d0d83398f11e5a62c35e488e01aa53a04aa1c8b9cfe33fc78c0db26203dcbc4b4744e74f2d488e29819291a9ab73a9417f1e439def326a8fd8a5bca7415e28b354bbbee3e087a7fcd78c884da3d9b3134b1d217bbe96e443006d4cda53c66d967206256d5fec445e719fc645d756cf005e11348b46ab9b5edced677ad349a7056ad46fa262257815a381e75acc4139593709b5a359a3a5361ab4eee40456a3e6b5b51631e430439a3f0f7800704700421e09b2f31717f742128ab5fdfe2382a534211b204aec4f6768185da13a613a292d08627780e1ff158cab2824a82b98f7651639313a2ffa14c0642d2cd8b78d8c858155b31e7975d28ca6804709e0a1ea64319b1e8e8c4385fadc60591d8b415130ee44303443a4724e283a050d2561cfdaecdbc5a11244df6c0791837866f8c469fbf93ca01ac2ab60b2f668076cd959d0b14537fa4c1a17e200e4a0cd0e294b5d1243b6653b35a1aacc4e958246e7c7fcbebbe9ab859228291555a8a6f521d4b9f6bee1c3e0e857a10fc8f9483e192ecb743ab7f8b1facc18965fa79aa7a4c4a85813ea375a6dbbcce96c9756dcf7452fe0c539dfcc4af807f70da292da41ab9eb8cbc951c8e9c89269a599a977d63ca11ccc4a819b0bf5d5933fd7d30a4c7017451be70ddc1594ceba344e9b38f9261202e6ad2f624e94cc2defec6d6b4e99845a06b1f7222d0e40f07657bc447b7b9b633fb7ea4463faf1654ece20397ab2db93ff472eb2f0999a4ab4299d69e41d3b3eb7fa705adf34a91ed32f0396d58243758adeec6f012f9640a8cb5a665e95fbf98a4e609deb1dba690046ac993fd5235c919aa98b874817afd3532fca1549d04c27006256c995c76a87f7240024b9d163ac980caa320fa25c0241529d92ce7380718fea5f9d5b882e92aee6194207fc60e117b59828b131bb7049664015ccef281994e0207ef1a38b09dee202354b1124fb711043672b112b9e3711d5db452f0c9a2c63babb3379dd4ee47b87a6265f5dca84426a8ff241fcdd80494e0b4a7d3b04d15c2badfa985c027ccca5f03fd547c36c21b69dc00db46eca8153e30984338412634a13a8a77537f228fd46a93a824489c1c181c23d74a9f1ee9c9d8bcaf27f6b91af26578198c950106f8e29fe2ccdc9c50185f2b770e71380470a851167ef61bf6bc19e227ab68db7393c58f0591462c5964eff324c861041c21bcd4d7dba59806f4c4ce59367b2afb8d84a263d8f527c7221e787d0b5a78a57c2c26f358922658230be274b470409b475f40abe099172d762a8cfdc1e22f77ecb0e32168fb8d476d673a5760f24e4832bb1b18627638222898b2c71a0babb539c65cb6696d9870be5125fa05e0697d1c6cfe86de85c828eb5d1a927ace5bb30d550bba80d25e8386dd9cc812a8b49183748ee505bf0a33e4251dfff18ea4fd278093b8d07a7a95bb430285d62f7ef39565e66e07891297eb487bb9bc4131ad4977e5d0a5794a4fd848557a6aec0516e1e1ae66be1f3325d366ff9f9ac55e9577220a90324939bf36274bf9b3ffeaa327183ec2c1306528eb83211155be768c75d2785bb05c24eb311f9683b731c6b0f1d368e9b9b9517fdb741b765fbd25bc802e90a607e003a49050662b051a8c38606e6004e89c54b21165aabba8b032b05abcc2abc98771376e53ef6cbe6725892c436c0f1364edd5d3146b9338c7a05f3c172247e83c6b107427651685c868b8b5ef02a2c9f0fb33bb00d4cecc26742154e40acd3aed8e8e96b1d490448f1c07abd81fc9b1c8fee901af9c26b7d7a24bd1298db38511e027e6f55ca84d5bb2026ff4783342e6fefe96ba278164cb61ff7ccac32ddde48dbe4fdb227340d2de8df715ae1de9ddc4fe8c782d1ab15dee295de501ecc7bf5221cb09e2935d9f2bd3e2568df69d0befd666922bab7b342258db6232af6233e4e10beb7db19f4e117d64071681a16c492a5b5e63a0899bc09fca06609e80132710d1eab069a0e221084b56f22b5c7548f6257a440dbfd8d9e42cee7302b74b3243488b8ca9501fa919f5bcf8c5f817f905c9efc33d36ec0cb41d3c0086122c116d2ac1abe6d41d46aba29fefdf63b1b91ad383ac377b5e8e701d2216e3d42c97d65c64e3b99fc060a37aff2c50215b301eb9c0a30f0b02877959d753d9d3b6070e8f369b33b6990793d4cf45e46d7c6fb43c41225b776fb6a9e8981418354844147d8852fb115545bf78f2fe92306a2c960ed09e11015175e4e44ae969e265af3baab1c0e97a0526d409367570a00d23dc4d21bd4382b803fd42c675e89e0763f0e1c3e9985ba4bb51e0b2cf02cd1c6733eb5adea8fe9299e817ae4574bad076adf87a7c09bd38fef80dcf19f0085f21d92c2dc97bb41c0067c9a4e62def0ba6b325938873dbc9947dbb49c3d83f1562ec6c0c1cd330f7fe23d5d66af1e1fe26545dfdb1750329ca5050106f9170356330c97bef5ab267f5d8a5edcc3d1a5edc91b46ab54e77852e38edbf1caf97e64eb03950e012969948bbe712bb23f8f36f4a059e61c357d18de139a3f71b9c38ccb8b0776c452b60088a33dff2350dfd7973d52f24f12e7edb9f3d97f310371d4ed1a2b54c37d8fc216b7aa44eabe441f9b22d076a437853b0703687f790423ce6cf955b3c7edac6a8889d0860314799e2b5ea9d1d99737a1a8745570a9b77ef582f9ec62029b49b3c8ecef892ecc4e2405f7a674455d51173cc55f5057942f127b2cc5b81f170803106b6560ce308e22e0c439588331593852e6ed0bcfd3ddf4aaf6a88d697ca611260c80f00d2f0fe102a3bbe51d9dc4e59f6b49a4fc694181afc0cb20c95961d4b5e15c70b0395cd7c3490f03b622c16f01a96c45f7752175c4e7dfc592c3cd4b2e66f7e0930162a5609edd4911ec7fc277648dd8c8b03f7237e5496dd3ede76f9da98825541f0a84bfb3f5a268112aa293288df8b302e317404fc511e9c87fe4523113e9d9f9a65ef1df49baf7133fc684c85623ae499aa291d767d71859d782335be7db11bb3e24ab5963b1062c52c2f253f9e09e023cc8a99741756c0eb7a033e7612565c501ad486a80b77c8cbb576c5d75d7453b251273e93bc85d73eaa03cf9853cb29857e27b51de98eb788c050ba352db8e961a0de56a593f1811708dea067a10c02d98fa778e1944b4d7aee4f52912051d915886e637479ab0a5b7046c8e1f81be2ebc992ac55f902b256e4250559601b6ab8089cc85818085ddd2d773587dcf25fd4fc607c1abad53e4e28c64ec2b19aa8ff08ed4a7640bd02bd3803b1c0b08036f36dc781dbaacdfcfab60770b471f54f11ad925a140eb35c7d89604a0c049f93e826ffb296497d69100f628be1b4d40bdffb6172e07bfd87f628665adf7041a8dec5b97b6d66ce13c7b21e45693760d06c8bc26f3fdfdffe233375cfec4b97a166a0ed1e8a724546800efcc6a305d3c2b070eedca542375620f93e0762bee1f52696632a713393d651834daece85f3e4b438406a5874300e1b07b67ab72c4502c55d154665169c819901d8425ff61314dbfe956d45a3d4a7b2462b132ef6fcf3f9d4d646c4ec427f87420663cddf451ee5bfd1856211f4ed8c71e853c86e6871711afd003b8dd4fe2605e465e15b7aa513d728e88414072f2c3e4b679bd458e4371563a5f15906591dd3fd77c0e2304c693fb246b201d5e769539f45518b5c3dae50df7615dd0e5b4f4a49246c98516f9ad6212d6fc492525e94317caefbfb0798210856bd7dcbcd37808fec34940e8ace98b86ed9dc31d53d418a9396023e538553e7ea62a9ffe4aac96460c50ea4984205751efd05b0c7cfaff25fae2dc3785175f9e44d622e17bcb14d6ddec3f68d39828b7aa86802fbdfc4ac3905e234ea0400ea8c59a1e783dd2b1c02fa81e1936a482c4b227e8982fe3402061cf3e55c5dc7d5144fb4f63cc374d042ebbcddf0d88bae72fc8c9510ab278c98251d75dda2d56d70686746c47df46cb37597517c0aa47b81cb9cc6af4df6c9defce7dcfe2154b8e898ab2df301af5d0d8974e22385cd18281979a77f46b5af3148d03c41fa5919799d4be1d1d70fae89d9e0104a21c0e222b44c03fbe60f934992982e7bc49aceb6a38091efb4aa1b9dae73915807abe03ae3a1d5c8c04dbd32a04b3876fb8086af0cea2b13be26c5872eeb11f9efcf14cbe4d29e9474006448fe39c660ddf184c352d613165c7167b8bd89dfee2ad34555376372df5eb13564575056d8ace1d31ce53d704d7e68d7eb33637cc8616918bbf7453606410f49d4f987ae7b69216ffe5d969bf35e0ed5a469f57b8ee90dca1ccaef0adab695ae41cd6d5bff6093edc3f827c7765117bbc4f0d357fb75119c97ff56adfa3d8301dd4ce097148362363435241a0f18eaf15d0d24880eb3ace5b301c71376cdb089b1618eb6411fb4dba14fe58d41270dd61b70a8074533b91a0fcd9b544ca9b7c890cffa8ce427869e10943c591a694eb446b0a890423a51c357556c49b7c6fde5e8d89ec4896296555f6ebb2eb7a5159103ae63eb93f5adbaae3aefaa49d475ea3d98030e7e68167a2549771d343e533c1500c785b1bfceb8750b08e99c559781720e6ef7e2ab6f1ec65b35af6452cba46a5ec9ebb988b6ada3c37ce75d9bc9be098d1cdfad6c187ce6a9b72a3529b840ffc0bb8cc922e653004cc4fb1dc36fb7a03f05e15f8add857f9d8916bfbc4b2c059bb53e145c357921fee8fe0e97f9fea5969680950da5ca513caa9c267d41cc26c9cbb17bf1f7abca56953a0bf9b3f671022162014fdd0bbfca09cd5181c72e3d99effcffecec2aa30cf9422ed695c6a301766c6dec4c7e70e4394d7a4efcebfa7a689d03d7b2d2f05b4010670f3e23ee6039f9072c48c3c55ce95895883bdacf983b3239686d6164c665cade992ce2d13d4187c951ea39fb93825a1c0a7db7caf2bdc8ae6596fea6c45c80e124a80839596405bfe1c370f605dc7df17d2a8dce7f9b23163082018d98f2b24ad058f728ab187f7474322887b53422948530029deabde933cba7b961204e15e59f7bc2d5170885b934f233bbc5ae8ed8294752ef3b17c978e6ca4c7fd4c6546bee10ed13c72f541607f7d999cd10a6102a2ce49203030cbafa08594f8fab2951945edd4e9324cd7fcf0d06838d2b29de6c7796017a268810879ca1e5694a25c4cd14d0caeb7a0b1b81c9e02b7b7f4a11604ba48d9969fe807d04839672a3a24a76c834f3a26b3f81ed7ab60579cc8eb3d62b50cb599ce800585add84b8f486fd0072f59532cb0f645bf6910650cfd773edb02c173f541e409e5841073f7a2d3bddf0b6bb86ffaa20a5036526846a5f80ad69de1b826bf9112bf42d31351256fa8fbc6cc4318bb365d071a6ac6a8f28622d5dc05fe6b24c0ee22fd9bb8029a56e0ae57d9ad827b1775035238c1dd8706c6434b16df6d8c291aa6697dd447f7cd94ce7c98372f2fc3ca7a105cff664ce1afd8589900e29514f57d02f75cfdaf43a976810dd924d6e0d19fb87f78405ded495886c3aac1af3422b90e2f89bccdc368f796ca349e382d84b117311130520d71dbcc53ef14ccb44f37dc51e606d363bf81cf4c98afbee2e0b5a8ee8226699ecba7ab1a8477f2e0744e239aeba33841a303765960c7cb8e5b61900d7fede74a753bf5a7e0bf5cd50e8f4ecd811dffdbd8e225adbb5dc3f1e1e7476db52f0697f0b9a6848971cfae093a67a4bf8c391fcda9261eb8691ab0d4fc1a1342a51ec303207da07e44646d253ced3588683898e7a5ba40ebaea1394ef304d16650c3107cd88a483f75205a9ffe007df105db05ab4caae792270be47501c6c1375877b6707da748b1f6ae16e46a186bde3abdaa6e14e86c93a63ca6e8a53b7e2c23feeeede457731cd840523f737da449c430b1f2d00a1a48e214d312d20f6d57a7b8298329bb9a2aa9072a55c385857ed3140857de0e9c912d20971e2e31890d04e49fc15cc4878ef31d35ca1d811f82f2fc63d6f867050db9cff27ed2be4504cbd1df1132fbd020cc8b3ca3440668e8cd30b50c136f72fc17f3a363c5e4bd751172e696ae17675593042b4dfbb642027d07e484e6d502904f9371f8e52c044e3868532ea0726716a3a8c5bba749b9cf2ca4db9d56b5fefcff79136aaa1e7d8cecd5d9bc62091f1cefcca67a1faef5158b3a35ede9c1b55df26a4c779647ddb3f2d119add075ae3bc888ee80be845846f0c3c034ef6e76b6121f52d625f96d5b3b22b4cadfdb195aeb1743f41163d04ce34f8ee5e9b690b15c0b46574349ed6b965528e93155dbc1b4add1ce74d743089fd3aa97918b1b13ebd1f672b925795d80779c9cd050231599b77f37e41d1f1cf9e19592282a31f56f0783b28efbbc6365f1b7648b54bbc81163edb917769af396094628e8348fde3de04e635a27bc4d73caacb49d14b0905501958b9d7a8d72a72d408e6477870f3b23d3a0dbf8c3d5d1165a1e787f6541ddc79622e42be60451ca91e47a778f6e71e8b7077efdae23a5ee35d6eddf248b8f7b7501bbb21e305f4ddabc8a9538beec2c849e59e8df2c84a878d35957a2116be25389ca7fee6e0df96afec6eaf5324cf5d6e97f17c84553b6071feebe0b50c52655ec4dd1807964d74b1e36a58094bc29c4138e72277e691dfe06a0db12cac8ad7ca6f75bfc7f8754942bcf705810f873f7692755e77da7c9ed98926588e3107624fbbd723a33d090138f6c7c9aa19b3b5ea406c787488a124064e5d440c683668fa0160e7a936a06b51cf8fed3858bfeb86730f3f2c64d5d3f1f75cc5f87b3343fcfae1d180389bfe7a2536acb457ec5c6b9a3a9076a57d09a4de9062db57c566503997fcd88750a284e75fbad0858240948570f12c3a06be3ea4a565ae8cf09e06b8883007ed916401efdbd4895a82ad96ceaac6eeac67bf24558c69609ab26aae609a524c8aa204d85c6ba52a2390e79b07704ed80c8963d1614c81dfb4a1cefe8ee5f6a5246eafd1407ede5e16258b9bb2a4c6da2e64c6ca8848f88f6e68aa58a79e1223218db67e9088d51bbfda1890b02fd958789a774159cc6f608e791018be4d4c195a9e83e7078bc15da9aab69b48c6a2bf76527b5dacfe4f1b9dc70a0714291ef2ad44440d852401dc6b9db437d2cae17f359ab68dd2e16cbf00e751bc67e36ac4ee90c8bf03af9be155010473f94fbf8ea4ba59b7fbae2bd33a650b7c3e8d0a92e6ed7d07f32bd87b10c9dec36f926b0d9ca7d02aeaead97d0469b2ac2a0a2206a20404ffd3aae1d90bccabd61002b492b58c7c0a2b43c0a990aa4014ecbfa2a191133d3c6ceffb5489959fee987fe478e1948073048d300dae3f36a4452d983efdb9c77f94205b0c4865a2b99838750efbcfa4f3628ff3f8e50fbbaf0cf47f12f00e90bb95c8a44b654b9207858d8e69a9e3c082df0a97ee4d8d5707e19b33f34bf25a16bfdcd273e60768831479f7da1a74cdc3d032d408372a62e06564ee7d0a1e72f172a8b33157d344b5f4d40a3e3e94cb6cbfa91976c998c361de19c65e0ee056b2a25eb6738a11adfb43cf5065cd4a071e329b7be3c30e49cefe74de573a27444eeffc689665dfae667c19006ede1bd30351666baf55cb0413572d9025b2bcd817d0eb5431c279c72b60d717d7c8ac5812c90a1f8232dda94b574f900432d6a78f2fc48042d858f881f85ef1d4cade1311085279acc524df27c26c3e6dbe90f07c29244cd3c964c75b9fa8a0d083fc3ab206f4d01d2002de31e0a0ca1c9887c406c4ceeddc9ed6fb16a518e5fa8ceed2103f7223dce924af6d99bf5974f1e263d2b3257ec11a66202cfb14d467d72629f04e06cdf20fd1cc4576426afdf697105dcb8a7d779baf5e111445e7ba34b15becb96c86ef2a23e8bcce2df761948720f8c093e5cbe4aa9245603739cf408e9958b460066cef3b196fc874dbe2ef24373e695a3a643f8000f326e77e4bf031efcf64d29f366e762ee27277ec87af534ef4bea4e09cfdaff0a1a8d33e69e0ae1a6ed618886201cd418fa48bc51a4e928c8e32763c9cac4e7f3c28db97f4d695d8113e764718382dfcf2b4e2ca1b5fbcc16b3db2b340e6d46628b1164fba75b4fba77829140485cf7acdafa3f8690eeafb071974b2827e84d66a4a4c4160a645b8ddc6019e474ee957da89abff5a979ad12d31bbec5554a85d804b85efe852dc3428123b9695b43a0169476cf983352b8ca02a6c4281b23b5ebc7ac7f2f6be3a2415e906dfc4c796eeba3f7b7e873e6663779ca5ea884b363d936518b4a432762a176615752bf851cab636ac75f083c22f4840fc6c4e39d83458d89e07fed588536e978b5044cee11ce06747658f5fc5318388f2dc6fcd461c1e32d33b9233e8f9cac892391c67d791c9b9e0aa1628901e17f252ba6b5c47a275783e394c71dfa3d422f317da540bce4212f16a5b712f961db2712d20c8f5a6e9d928d11cf978f9cc7da80f83dd225af685e3422c6ee924caaadfc6f9a816ff543385eaedf5bf7016917f6fad95550d5dc51052643811c1b2a745321991687feaa4572b3b1650289697cc25099841db35aa5a806927a565502fa3a98b8b9f1c1966dce31f9d43df17632dd0ec30a15c95e6f3326209a86969c863263cb8736f8f789e8688d583d91b5db4af4e4d9ffb4332aa4ea0374c21ce44f1dc7b37871e51f786847082b48fc28deb15b11f794818bd4b78161e9893fff21b941eb05fe3736aa0710527e711c63754ca77f55518aaf6c3866fe70fdb5fd6460555a533412d3a8655b02f91fc362f13e746fa72e0506fe0973cba1e9c24f053bde2afab6fb6e681224d0d42e837180adafa7aefb154a439fdf05a0bf28ee9274eace744c20f325bd4e5bc8b9ac0c89e13c1da0f6d81c00b22980494ef6f8e9500d6f12cdf356fc4e2d2f84616d952db1d92f87893a4df521962915c6e69493d07098151ae0689c700870c51cc7458ab841c12f275d65ad2da4f1a68f4937a4848f0653cf8b632141f2fffad66c34d70fe8b8bfc49706286f027086040112a4a408a6ab5c177230274bf42f2f7b40ab32d73f4124c144a74d9aaef2ecde86c401038be7884893acc0009a5b2e24bd2b93f2807a11779a5a42d118b0294d001155bd8abf554704882c475376a94b19ff656a15bc073b27fde0a857c1c70119f6b34b136eb712a8f2999711475e8f89699a094f54617fb41452bb83389714ed36a1de933ec49d8f1d76828a0c17bed02fef17e32d7f5cc013272dbdb93e808e61aea7e86718faf4429430f604f20333c4b0b66378dfdc117ca0dbdc0badeebf30281f5ca94d811ce665a8d1c77dc2d5bd723231f3dd23f16d9919404f716d933e5988511f2e2ae38ff51b8107db3c60de57bb46a8a6779fc7e3728143b67e123fa4237b59d85a01dfa2fb7b42e223885fe94b9e0649094e1ebf4a1d70bc93ebc0ee3099999f3bd3721695d743cb1c8ede136b52781500c220044372335c7353626e5c39c773dff9bcd9811f5d3243a52b9d763071e37a50e26eabf44d17e8338f4873b4156114fd3fa258d38c2191f62c95b88b78c96c264200e1cefca36a7d3bb79677a9f64f1aa9d276bf3babe495fb60b5b0cc40dea377c6fb950d31ee63e3c44fe49c3ae76aaff25c8c1902438bc232bd6ebe68510756e850520ad3859416f86aecb1796f70e733f6c4b8826e069df9c8f1d9315aa8e56fd9da837f97a50bae648fa46fc25ede7e22b818833f1bb7521d8c7d5db0713e39b83bd2c1f1a17b25261cd1ad5a9cdc8252d0a05dfec59f8862a67250e4ea4c7436906173517298ad474d968295a8d60b1cb9fee2577bd1ff7adab62aeda2b81ba425aa3680ccaf3220da1bcd9991c5aea9693fe8d9f7fa01551a331cbfc5faf649d2d036b843c84bb0e2eff309fe1aefcb4a6d53c447dc657467205837554383349cb86cf9e33cb33250c9a7e17e009a304176da4d0707167164ec0e90cefc93575f268836ac3665dce5d35de277a9569e585c01e087479a12e3d8216d3663a5dab6e743de8f935c354cb47f4fcca712ea8abf09cb85c5ca9ab0a0f1d18e8827aa86d6e0603200eacb847026ba015a7f07a3a1345cd4648526aa2f6dbb0710dfebfe1cbec91c5f2abc2fc9d2dd897bcc09ccb6096d7cbcfbaa0bd9b17bba1f89e6533159d97bb444d3364a85d6a5fe847cdc549c4ea6a96493256da324e68146c9be7b3c2935503643c8077e14df062aeb318443173cf2dc00c16e93ca3c0bbebb55276186104011573ab91048fbf438be5ed826f7dabf1baed4eefcaa9c838b640395e5e13269ddaef48291bc3db1261e41095b820136ee1ea01e4844d4bc448db7b4c6bac600e3728f7bf07fc9e9a101be1c0d119a8d741c253146777272450d9c56c2e813eea0cc652ef29beda0e98cda5d919a5babfae35267cf36557838e7f15f621129dae0a3a6e556a2b6cf3a84f3a6057366b070f190258ddfd0d3f39fb37a8ad4135bc09f620f98185d6e5fceb1e15cb22ad2cb794bb19035d7b2ca1c576ec78797c54c5926c76304cefe30ce826d5eb6677213a39f1fad1a241cd11aac6c88ca174a58f4fee989e006ac4456e88e333656ecdc5ba16d63f7c270968cd805b92f7ba62a996cd544ddddb33a32a61aabfe06604917898c0ce2b3fcbb46cd5cc662c18ffa4a9160573ccb726d9c14ca7496f1c9b2003ed03316b2557f2baaf9ddb547b0f601b8f256a206f59f3e7a4ae05ad629ad92229ab58405d8b13755cbd80e32c7a80acf031306140720734b9a77075f267648a5f170a1db6e5c701374221b57d9fb14eb8febc1375dd2e53343c0136ed7d4df8a95c3755d05bd8143550d5bbce2a55c86686d0d8444d333d02b07f8b478534f047814899ddff67627e4c47f26107fd41a08e40d19ef725efd4479614b8531a715ff60dd5c81216791650a23310906828b8bdc4ee8fa0eafe3c69e22a5bdcc14083baaa957c9599f97b69241e13ca106e3cea6b6102c49089b75f36a0093b3c00fc624a1bbd32d0e16385f46b592ba57b825aa4556a825fa48cf6efb289fe6c59a895d372876399c2545ff63dfbd87cb5211c1a60d2c8f4b9f90e8dbd873204afe14b55d05f4c601e08f325e4f8b4915396980274b0c969752ae679ea592bd759ec33874668a670299cf2ffa0bebd03cdf65161ef702268ab3aa4780cb50350e204b5c4c1e482ae8a88818dc5cb5132284e8c5de51988ec6cef70a62d96495c73042c352e016e2660bd7b1274a2b6168b6671e95e48d0e51462093df92f7efa235bbf46595b9685a65910389369b4c0c8544624de859df91d5bdcb990b973ad01429557559505572343a33fe8ec7d2671003cf0e65aaddca4ce6d8cfa144ca133d1540ee0e869b8d4975f0f2b08469d633ef574517a3c3c94fb4ae6feb4950473d48a8290e6683a40855a8b0f279159e38e13f8a6f72df4ae5f6ec1ee9062f725bacf06b002ffbfaf988678d754a287fb245de93924b88bccfffc67a9c6f74791478ddf9599205b5a61b91b3f6510ed0b28061e017779326f9a5590e35dad5cf9c1162d290bb4f274242ddc0cbf626bd9e4c5f9aa31955f5ffca3838a25a874e3b8ff680a4ab6a78fd21ac9e5c512ac7c820eb0c48af2937d13a4e8373667d7df977ecdf3818adf2b868ab9f1f8d6cf1bb0ae215fea10a42a098599463f1611247b9d7ddb4c1bfe92566319eb3e8a2ccab83d99d9d5d5bfd2584506d323913e5e2cf9e700a924a88acc834f1186fad455f1086df317583bb7fe8343825d4db95b56402e8663fa0e558afa8d83d23bcc33cb68c9f47e64f621f814e741393c0b01bd78769e0848d1544a1087f99c7652fd70863fcc385fb1ba2c592ad1a238a2a954f8ed7440daf8070b92d0289bd308c0fb5b54d383de5a5834adc3e2853f70aec4adda2db554ab808fc1ca170a8a10aa0c51cfc64159193576ffcc4b36b7113281a12f112bebcb4475fa963fd25eb6e17338d3c346c5b85ef272547b375fc9ab0bce44c479ba1143870ceab53da8a9b640a9173223fad7535bdd6962ffb05c2f20c378cc72b95b74bc501eb9205538b4f660a9f918b47bc15a99c132d55023e11d87efaabd1fce5014f06957c8a0285786bbca1644bfc72308e840f5cfaa211c6d4af7b1ab698d3b8de569b0171ad6e1015fc91bd11dc41658ab800fc2e1df2e8b1c2b60c262cbd5f69e1b7d8c8dec011603631ab6e8fe08b1d32d8c8d7ab161f8e053b5bd9d72a1ae1c3486e8631acdb96461c982f4f6bdd1f57dd3be4613e47637738ce58d5ce8b9fcc7cdd963ea7100d14252f652176f19a40fc740e926997601be6d928e7931980bc1828fc7b3d00ad1323cf2d1c5cb176736f987aa7c7fb90341b4662409d0686e5dfec297f08f5b3f8c4f95ee74090bd393a12532c18ee67f58763ad94ff095df562fc917b149508f450b6b9a8ce5ac81f430f9121a03b52e614408f2816437c49b2477fbd98b85fd645e528013c9b347dbf97e00118c0ead0b80253e79a4e54a8e5e5b1b507ce29e70832d3075f42a1e4282312a035e07b9cd99907ac6a09b073a76329d5aadf91a9f9f6741ac500ac4a79912bf9b9bcf7f5a775129e2774abb320503caf1aefb9867b26b261892785dbe79530ccf631cfd7adf7cd3d152ef9e4693f428c91b8b9a925db0fdf2c0eeb992371aad8f742f3bfa2bf1eedf843c2aad1591d6265674e95b6cf8e073b4fb335007170b7452ec2856b3d6260cdfa0daadcb26833c2aa4115032fed0fcc03f1ab52734ef2095d71937e05739a523998c19fdcaaf752033152e9a73cd65853f175310d12c1fb8c3b95d571613bc557da2b83371910bbbb43bb862c7629ec5b5b9516b746a7090f72314e1aaed25e7314aa1f80bfaab0431b2d03b2919bf2b607ab62517d356ebacbbf0c538c89f81677e84131ef3384e80c48dcc74101364850ec971d923031b98faaff92912c3333f0fa9f20955ca33afba7ad7f6a0dd0f27e5a6744b439a07871613db41805623f4d825a18e36addb59e14ddd33dbe671d31547e55381ad6691b39a990ceef2b29b1d856d2019b0d8d4ec3f612112c2a41d625d3f987f8a05e8cbaaee3c206d27bea526b7d030f41dba38a10f7af1b312c90cea111b9d84babd2e36b1dd3772dbe6662d47094a1af7d5e07cb72b6310d6a6d461f5cf9d76b21f63c61d1621eb4a846d0e55ccd44f8399dcf764b156b57cefb53348c3572db1a4a0375ae688dd4c87540fd9b03b00902a26968b6a17bf956cf14364f9bcce5296b84e2c228ef49f667380caf5a9012669f2cf1505986ab4e859140ac47ea421701b31ac321e78a2185740b194b9e60addf40975f5bcb738970b0572c11a9a0080b4db7b80185fcae86534ed762c533d3c3897089ab2caab336c82861629875b2adca79ccd560a85d098d3a9f7779d97afc350dbd4470135874e167f869fefcb9d73f666d638793c626d88c60dde817c1b85f075496b3ded7dfe076069da422f941d5eb950aa0fb615d483fd83e95c72e36f10d332d3edd805f2dfb923c70ebc642b56abf51fcc405a849d1df5a713b18f8221c67c90f0003f292b54312d554e7e9aa9868ddcd90e2f9cc3e4954c7b55611f0b2f7d8cbc5acf70b5efe22d99cf96d2cf0f6db4019888507be2e5fa9c4b689284ff6851809392d4668b3163ff49a923d0a51791003f932ad0c809a36abb43927ed05ffb035c2d436a7f406ec2c7fa30f860651846118e6d4c17fa147132c1ed75664ff195dbcfc5178cc2c1db695e8999da05bf452fa9ef46eafc99ea6eebdd481c1bb255a5e96f66a431d078d18808003f9c429f5ad347fadaf59dc0304e7fa1d6f117e9bb3ee78b985ea3e0b8077727425c27c177b3d63954836e2661ef79732129787f9889fb25ad6a74a1fbb1403889fd5106c52564aab37cbf5bd1fbb36f7380b1f7531d4cc619558791f05f7c27a90d105706ba8b12218d2750420282c86211b90005ee9e2939a9cf9ddbfa444d6243fa61cd3bc7c38f16d3dbac93309882fdb37694b78a6420646dc3698277f247b30c0f72f28e05147e383fee8a52a2156d6ecd1b281ad7b595634bfd87a83bcd0ce1e40dd99049078a237d824c02e118ed86b93cc13ac3fdb5b9132a384a7843b27f68bed195b76ebda6511c27bf7713c18990d35267aafdb53981707d8c550a901dbadd46150890a242dfd11541351a9fad9ce90bbc5c634b0b5d57bfc88cc7483071b0cf2a7d06a316b92214eb62cf54855221432e70234d660f8b57968434e4260712cf0d19a44da250db75de3a45ff8f076c9fe386d8a42cf394fc61dc5f6521759c7db147e81637b6f0efbc1efa67f637a4ceabbc8aaa43b9e3b7a495bdc85f3f768322df0a9731fa18762bbf75165c3f2a07de181ca6cb5dc25978ae58cde4bae3eecc7bfc3708d230a0ce9417ae47b4ea577655a3b9c668abf7ae59a65e79cfe55c23f7b0c62e8282efb17bf6a292d5ecbfe6914e484c20879430ba757fa759e5725568aba72a4c5b50d745bdcc45e0e00f5a28046a4e671c265df696afe7db9c5055fc698ed9684a59e6bbaeb1a5cb5e1d77c210edf9b26ca16b9437884c97d84aa084c3339c92113acbc85cff1a32b6ac3f0767ddfb24606504a5dd141bf0c3c3f49271ed96c813e24160612642a01670edf701928154bce3cc8ef633167aed4af1f15c537c7239732383b97e346497c5d1443d1671daa07a54629916046f77b22105177430f4515ddc64765084cc305f19be654b0590d3e86a0468ffdb0b9f91f74b1ae1e1231f680256a9316b2d2975ff291343328ffe1290f78e7a6b8ab27a9427966fcd92c1c0c1d12d25ce93861317fc6f82e22e8131c7d219dede58269c8caed9d0b9605b70b98ca650a60ba96a5794cdbbbbd53c1f0d90042073b76fc6996d3daef947bf01bcd619d7723b1730fc2054d41697a18409d2928cd384ff092e7d3198c4a4afe7b98ef51761c9cc537ca8ce183b7e3aa1ad107b85e7b5a192ba5888f03a40ee109baa91e6e1b341896840d4b5fab914bea2bf7f7178751451b0ec76c7fd3d418d30b6b138d3b1f180f3b51732e140ef489f55d3a0414a0ed9bc20fd26ab97df14658a0c547a595fc46f1611b655ce06f51eb4af3e9e915013429f5846c4c6dd0f82a0f6b8cb8adf998abf8e6c77d29cdaba80393408b78565e485782007586dfcf1bf59af3de70cad4df04e400d60cc2d2b8e34f60d3840e00424ae0a9f8581301020a291748a2fb868289c0ef8a77c32c141ebf2649097133ebb2dc244586fb2cd9a4bd2a45fb8172baa1f7ab182725d095f71322e05cdb9398cb112426f5ab85111d3964c74bceac96527d5ebdcd5a92a421677f2810ad55a7dbe13a60a60c1c8ba74db7c5c07c0cfe9b38c5b861c5b954195588d196446183f72ae29139a9b7b29edf355b21245bf5c5deca1cc815bc2aebdad67dd1583cbfa5026495fcb8109f6905f128c1799ccf8e50976114de89a9c0dc845f52b3ad021dc020e6847fc84d440f5066e58176853158220f851da76985268101d186cb6aa46cee4dd76f2879e177c60aefb6593a19756aebf18d1807fab9f2dd034d463d0ab358f06c50be4680b38337017065a5fc98aa6feeff523342f1b39b07d85f1769a1115097d5678a41cf3609e507c4f3944587dbaaf0354f4363e85187408c624ed546358f050a3d334823b8596e436da5c172f99af01f7c5b0831cdd75102d37e2931b7bee9fb591736fe6ce5d46592905228b5ecb78a22a1c1e15cd3b81f542157b673e91935f2be1f701db2cac584dce56d234db12ac38c7c61098736c49ad36e848aacf3df5fa1934d63e3109d73d140c9806a25b30e959158045dcc8693acea92407a17410d5bf9793981130a2c9cd01aea40f57e1d8667f8d1447569cbe69ee5e185c1b4792d3265fdf479521c6e5dc3932a38a2c7dbc3019089e1a57b8fb6ce576d410e9553777bf34cbd1edcf414ad35cd32acdaa242988cfc471a08dd9637e78876df944eee2f5a2e5b464fe8a62e4e043dc8414aa5934d2f184fc5c0bfa59cb14bbd45fdf70419bcf7f877f246830c78d15ededea271d3638830f159fe7604ea6d19bf24a46dd482766da65f66c064ee0726c154f6587fe596dcc5334449558402354e4d1d61fb29357b09b99f8b2b11af246cff177d66ae0929952e5a5f07bffdc20e1d4ff31ef4c77e2a1c22565e746e5bb83df02a23e3cc54529ea556aa34647c9acd12834d2854b44d5fe02ec46b878937054d58e008374db5961d6fc6af23a3594a04bacf608bb4bb95a7869b3f3e7a9e107690a52ca0ddd10433b07ace54b6d6d87a39eb9ca8fb929df93f3ee513cd272bbfde33307883148c9dfe596302ccaa6e91e20bca10046aa2d2a36071fb8b00bac8c4c8f1ac1451b9ae58617e7caaa92149a78724166e79928cb8974abc4126c75fff44bc41af10dbda02bd9b07172361ea00438fa4a08c801739f4241b49b4ec0d7960edd7f9b3db8fa91f335dad4ef3cf1dea2c68bf480e8cb68e38bc848dd9a9dd4d2170145144dde00431ff329a3e9d7f9dd3c0c2fee8cbf7b9424c69b4a530a03c162fde67e907e9c1d98b4d1e7e7808fa6b72aac931aab5ac9ef24d382f921b6bf27515b2ce0651665f1da0f40cb86c5104872480cbfbdc7d4f6e745dda631964378b5503680e64d8fbfbaf48c4d2ac1a9c722f65f1a3a8ff54a0af8812809ecc91a564c450cd850a4cf90c0efecc7847d5a64f692f2bd99946fb256123dca03aae2e62a403e7e2f4a6544d3231e8533fc8be9a217577d0bf6538a0ad95c716b029dc52b029a20820b7dda6f2ac2a76e098e4d5cb6c22a4cf1a27e3ed9e83f0c97404521a7fd90c4855ddd95912eb0346dcb5641834a169378bce1a89c4baa935b78031029f8e1a2ae91b00230a15dbcd82a9e776fcaaca37e1ba617b2bcfa5062e7ec8e45498b1bcbe1acff04488fa27afcccda6f6843fe2145e4f324b402ce1337fbbf5aad59168b13b8428ba4f38a20bd74cbc886ed1d69b1f367e032fe9b6aa2563ab6032a1f4df3c9f5cf575bf2ebe9482bf3c8922ae5045e78ec78a629ce1f42dfd7b324492f027f1a76150b57000751d40074a868d08b7c5854946277b0fd7f4a22c87a92429c32f08a53a64534a9b676efc37a7def5789868083b9d782f37c95199e8ee4de15dbb1c157a780b688a13adcb7628c3eb0fcfe112619a72c6d29f55f8da0de042ab18e3343a42e73830153b483c01c0b0619026036ca7eeb5fa0968dfc682d348ff58a0b3bd77431c704c3c00a84e5528725d642f464b9850108573d8fc51a3b87e84f50746e3218d812c9d2cb731429ec0a7d404a992d2696971ce486d195569187fb24e9d25a1a4076d6eec66017c4f3fb870e39a84cd3c6142568b31e19f762993f171b21073e5fe7b00f4e2d34274e7ff3468ea2c98593e6d6b7c23523b5140c1722ff57e34b0a71e487df306053fa1df39a6694c779be824885c81dc2ec95bdee9b42e557d6e520fcc967754074aa7a0f4550f21c34293dc67fe6a576bbe4c280c137efedfc48b1c379c6c58a2b435b7b9086d1ba07d2067adcf6cdcd217a519e5158379a177c6297b066edf8632f1f13d84dcbd19b187227e69c6b0243993a572d5214667dfe8d12171a1add0aed72a51e828fd8745d71ec8b4284a4c472845c07f7b5e902d80a2a651356c5c24b56761e31271688b339e6a7fa674b16dfb0c13fe7a5f6ca6f5c0491b95f944faa165f146d73329f2b44fbd2bb7fa17dbd341124a7ff33a3ed46fd88465c9f9e2ebc6469044de0efec46418606ab85bd636893e46e19d006b6d2d1e2889b44b5d70aba3d4428617e7e651f5392dc1881527cf09bc9a907e42f50fd9ccdb93a4518dcdf4cb4afdf7f64fb2d4c0a7a102ba107ed5792efdc78b892605dddd49ba13d0b548d277caf35bf31a86f8da683b26091e29888ddc85203369fd7242954d388c97ef0993371de430a0be8f5eb434b528c392f1564bbf4fb204a884f8ad0e621ea39b18f90fdf4795002fa9b581d2fba9786e5379c568c1a9709ddc64a0f4ca530c5fdcab606794d51f03875f1d66793e8d1dfc01cf095e13a940d92d7f56641e6359add522a032962d1acdc2705e0bf1761992f074f20738966b0b93f52f44d91070578b4165d41ee99062a7ed8b2f8cef3bc27bc0c1a62c699f32bed9c3606db28c9bc96427a3ea57fe09280fe67f2ccb936cf4e73446300ac794de20bdc1f86ddbcdede3b06e750293fc6c22dcbaa64ce03f1e7e89e8691aabfdb0ab479424c55d401bb4e25d8c4c3bc87f1d41d0a1c1199955d4667018fda24e4ae0771c076443c9290d827cc1f520d3319481efbdd1c637d58ca6a2f0c482bb50f7afe1ba688937a28cd1091b6e723e249f4b5f57e7b1b6524bc3e2596544fb8649d28baba464674296f8c692df5c9aecced17d9ec40a8e2ce91101216746a2e4ba03b235fe1f83d0b08765de1873a4e17045a5f1f1bb457e9776bb91381300419c82095879835d03e718188a6a94b6ad03e0f569a5d37acf181110c33104e94833c860e0af0306203eff8585176170e6923d60f6eb6326f94c18e7c27279f5fcdc28e519b796862acb585775111120f3ad5d5b4b0e72b9416b0d8287b658ae305a35117a601ad2a77566deab3893b0697ebc4ec1b10dd28565f6899adefb82090ac83ed11b25f323bdbfda038b3e737853a9ae044ae80ed424c830f8009966ac430e6cca88e526c7632f76e3372657e6c69f64cbd63d5d1f2b8e209ac37ab51680fa030dd0f21eccc451bc8f7282a99d4ddd4b0d2909fcaca9668b395ace001cbff1af98df9cdf5697eda08b7b2e2e4cf336edba9d005d345243aba5f59c954bf14885fdaddf45009812d27e748bb0da06a795ecc06d760f91fc6f6e0ebf258c9821f577614f9ca75817e57a273a84e5708d1b7de4019826b815df84130f87f28c4bf450fd4ffdce4ce3797130fd992e4a23bf40031e0a92fbd9a1e28396159197eeff7f5ed0cc682aec65dfaf22fec79087961f218e760f17b2ab98d4ed030d7a662b307051acaa0803acd9ea59217ae62c274d00e2c139393f61fd7c7fd3e17eefb349722e33cc4445bd2e959cd9de14235b3de241090797e88f3ecaa7376fc2a4e657736279b2a2c80234ea031a02d83e4d28d869a5394607a5613a9baf99cda31c1cdfcf34c176b8c5da87133c675b1cf9b3983337edc2ea115b9c6d5115b69e88ce48bb7c67e245109c86d85f1ca2c069e94bd0060281d147e243d914e90fca02bcdad55a57855d59cc95875c3a106fb4dece7e3de6bd4df10244133337101991966226708aba36ecd4b7560bffd866fa2ad2162db11fae1b2a978a047952c5d52722b7598a8dd3f8c1aa1264e93a7a41266b5259e337cc11b83c1640478fec831f2c46d9dcdf33405fcc78c562baf520110b69d0db2fe784b5a7bbbd0f2f431c33e2420c8723b6946cb2c2797c7ce8ab97eb01df63289a77f1104ff8ec5ec0b4454fd40adfbfe0dff4bc0d3eb2649955d54a6275c7f11eb9596638dc1c77c2f200c44f0d93efb528a51554f1a85e9188d9fe8dad670677d2e3d4243782a4355ac8bd67efba41cbdaec4af043462ae3946f1b338ea5f6ccfc2762615fc944caf78adf8412efb79316a7a9ab9faecc4eed06a44e51f430525dfba04d44ec1d67bd044b769cc2e91fb869575082b60b4d51c1718f4c472d0a34e9969edd81a993f8b6a4ffc4758026f62a12aea1d1e19dd6a3007a4f75bf4667c1eb0214ece6270b43c27f888b50a8e55b325232b8a97a96d9ee4a0c437ddc95c0e8c12fe1520318c47d507528249a047d709159ee5255a33e11db551b3a5e832606b4e20ee9bad71629da526aa524600032c6eedb65f9f7e17cd63df02cc0405a05902f0355c9d2e6340d65b476fdaa6978a653e46ef7ca4bae3dae9999bb2865740a215820bcbfbf7ba4e89c506f5d3b673075256dacd62610978e5a2cf2c9bc5e93def4ef8267bfdd2736d31ab3d8fa0bb167d25fe7fdb0594feb3cc4180b284033dedca5b1759ccef0e0c67eacae3eef468a20899eaacf30267c98c15dbb3761a5a4336072b2f3e2d41f755dc17823bc28a4d4dc6b3ac1e1aa46f4bae2278540a8bea66078ca31a9cf9fe9b52a9a7e0a7362d921a6b6daa1881546d9bbc17d05ddaab049418944368e49a7324deb9b020082d2e2876b83d46de6b15481a9235300b9b1e000f12c7a81259594915c8af5b87ad7f573e16773bfa668425a2bd20f23950d56bcdf489c271cd7b3286b080bdc5648d651f2cacae72448b498fd80cb822be8f9e1a57ee56f86f44ea15f324e1d78499022b2f362a98c25b0fab1cb2740330814cda772bed8ac8e986a64e27139231491be499aaa66c2a1a2ab23a251daacbc2fa2dfa740111764abfffb1fca1418e62263e602e11d9a32858a71dfa9f09e610bd318a3c6fcb1f81e6374b1d291284159ff97d24d240bb5a8c4d303238165c01f837d9398b7a95a268378f0f46284228211bfef8c5d82fb118654c1aa35b65c6946a9ea545988a634636b1a158a7c22bdb96c02f63eed112eb529c43e4fccec946f71bc958338c3ab0e76417d87095f6b9cbfbc69a0861fa0d5d8bc36aeb6ecdb076d77ff030a75d8651f61c153e3786350bf2e679c7cfb8175d7018d9d01bebdfd9b12abacc58c76568df5bb4204213474c21f88a7de44197120c4e7f748680aec5fba0b4fa9b80441277e1dfecd1dbf2686257d85701f051516d57f8b3d526d45284333055897a82c0a03fe358cf1247bdf5b309799070dc676ff24704d11ec73331d6eb5aa0b6fd515db2c9fd60dda9924c1ff37754b14acbbd0a5cf8ba204e4ba5888eb05e8bebee2cc30ad1fd93748c31e623424cd60bffe4b7e3d8e6e74be7e2b48e81b4ad032ed5618e1887a453896c32c48c2185d102fe25d344181d42e9238be1052df44c6705fc3fcc8df0df2b4402d7825e6ea079a763a5446e070b615e7eb4bb56812c367a0014960b3d6e99bf634c590476ede121ba2dbb3eee6b7826e46cfcb3a2d1500a8450ad14c2765f745100c8461943f6196bd254c8784a03d90d96686307ef381ebae42c25a0b18338935f1b3a21b5f096c88ab2f9c1102092c7633e2f3a1e247246d7cd0b3493541cb856cb522c2f6d04b25fcedc655764c35aa95c3683a3ee6a94944abc840fc8776982a043ec8cfcb684d9841064adc939f3963a2dcefe6d6e53d30b6cc3fbf0502119de37c9b21b07240043541127cd4dce1f368e1a4b47badd136d49df0c8c20ab3da6b16483705b68d34e4dbbbde73fda725176a61e354fce2ac684fe19b269b3563af7ea6977e6f88daa6549180bd8d66777997179e100d5a735a4973d6b061899203c8cb3b8f5df9b822731746785391cdfbfbbb6f6fb1ad0f7f8f351708622fac603f51cff17ff37b1589c86a0a3fb0a67ca4c3d91488fe7fd0854cbe90b8fa7418f6cca234b2719b60bea2430580fdaf94f1809c7ac0cf9aca0e229a575d746127ef50a645b0002d79c721b3c019be28ef21c5c47a30d2eecabb1af628db691dce42d1660bea5e87be45b796fe28eb40c16c70ead3f167a475d57ff8f433c9ee403a3e6aeb6577c7b8dc2f80abf076accc9d36a4562278725b8593da015c4c38d7d049f3aa160be5e86c2828ddc7014787afd703fa87f09aaa33a5f24e65d94fe11b116f7a3ee0676f74d46ef2af4aa617d4ff42fa482250d617618d172cb27a2653a2fd77698787c25b9b4974f3c1b46827afa0a6b27495577a9977084ee4061299cd51307887d3b4710206d172663481cd6d6877ce8688d45b37d4cf0cd2f13491c7aeb0dd174b4ddb77160f5399f5579093c7e48973b1c979ab3e7bdd23f8eb2e331214446af3e90978c1a8e7cb6931705d2adf47715c0aaf5ea5204cd0383b2aac5eac71e5dc0bb2651081bfae912a811bceec8c87e12e37edcef4f2daad874e7649d556ab416aae828c415df4ace8e47080349a7e7fcaf237b91228afe5952cf0f124969a5fae2923996a688213ffa8db05c1bc277a979a598040c2d0db05fb2e1598e5b2480156c3aa5b3973134382d215d0449a6f28d927cc638c7271719a5f2f83ca45eeb10fe49860cea5ac3b3a446d8575265b7309eab4302e08eee957324e20cb418281abb38d4f65e1cc4859b88bf186c5fed19f129c3833ff0fb25cb4f702f660462e951d40f74a7405b451b9ddf9c7c274f000e3666da393a5d63420360051a0a00f1853d84a67f4fa105ca5db21e0eed5a97fb5b9b0996570b320e9048a467a0c5b2acfead41f66ae3b8e3a9860f995096ae3caf82101d19ab81be8e090c4bc19d5716148906b17d7d5d24efe126387a699dccf2903ae89b8389d3f7e7376d2c5c856c2a1e786b615fe5e7bb3fb3daadc47754889c06b711a9be5acbe236eb20d5e5b608b731bceff1e2ca02d9f9d94f6ed76e94928ac51e8022a8d8ae7af373c230169e2718d7bd345a05d9f074a065712d73f5be4f6c6c38f96490ee3e27107b8e0025d7f53027ee36d88ba20ccad4d8888746375abd3f26b83bd2518ca1c925049a4d31bddbaef6537afb9510a4fd125b94bae0ca62cd485bff4358ca097c95dcc419c44da4aedb2bbf7b5c789f178fd813d26c29de0cb2f8b234620dd559d50d33f2a519156351a21caf245555134438e9a2a90a6ceb3647103c24687e7c0aa95467f351be809956dbc5d55f6eb74231f9cf2bd656530aeb69fc02f1eb660b5b4d76fd7e3889f7878f5114562695b23928edb2352a3b130a7daf3b4031ca4963fdfe021937d0132d590d04998b1701d769bc7f51facf07b0039f78109694bb12f9717759717630a7a3f75a4d9fc6ec56855dfb17b2c263267075d896a480898e58e340f367d83228c795ad4fc6930d75588121a28d20706a439a16df4629b4d7af2e6a3f3881f95feb1eb87b191187a53f54513cb709fd56c19825ac040c3b1d7e452deb34a0a6c66b24e8935c0c4141a98b7211cbfb8c2914a7893988ff3ad6889c9607d53795d3345a8d44ffdd3c4bb39a20a0c29b3e8c26ffda7278a31c9dfb82b13fb04be41e1af590e2dfc6e372f926f5ab5a167ce9381d1a002b63cbc356b2c8fb78d5de6db4ff93b9af542c92871a240db8cd7c83cd72b6199a32a81b89a2e5d93730a534cd1d9dc5f347cffc9aaa7f59b1e80c0aad1e97c7a96e62d5c059fabf3b56d6041dce4e5cf9c4bbc8d223ccf13485e1f6dc588b014ceb089450f36f38c1675982fc84e76e79c8d89b8de824ca7bc1e3b5bb4f190a5a0f9499be414bd39fc01de7981d76ebd74551d092342fddf80f29591613a57a03a60e736433901dc29fc6f093dd4bad094c445f23c9f63f4c6d30cdf35b739d2ff6a5c2f3813277acfe0da220c087f483fe7f07e4b55f5831eb2eb156257ff4e9428701ba4b95fd652ab430f7996c3a3cb7e66a24d8e1e8b5cfda2ef5cc79900e517d562ff130e1682fa6ff316f5eed52e31ad7ee78c2a845c45d64748fa13801602bf4641d89db40d48d1ea2d4b189d1c2cea474c89c4a70f22f8614996317aa6e61d9e93b26ed3bf966c2298a40437f043b68e86a5f8b33764a40fe1f2caae62116028e11174a3d7cc69606d9375fbff382cf45d78cfb979bdf6afeb36bde6eeb64c87d64349e31433e48a34421da166e267ee5ce0908064b74a05be9778397cb7c4842437707a6d158e16a1926931e0ef915b3c665fba781a54cfba1da8a63fea11dd00c981dde8d49f1e0a97c8a689cbf1c9aa70e564dbc6d23b533c870db5ac3b516c78edb53de8ce7754d9afd0fc6bbcd4cc795a90f6b22b4db576fe1da443df99f8f24834fdbc0d2f5c4e74112b5cfc10a23cb78717ac953bf4ca7d86cc73fe11f9d8a78e506670bb9ea58c92597f666a051cf945e3071cfc8e45bf65397c6354d24fea959dc1f96cf4e6379ce981345dbf9764e8e659c70d8d9872fe2c4982983b7704265b95d92b2b5588fba34e40aad1fcf5c68132fd6a5aea34c10ba36b5f635cf4164505d679d71ac4a605653332a340342d81daaa9ab1f9ff7c4db5e20fe7cebcc382929ca5346eaf373290248e310b0c55382746f3c16b20ec1fbc1e1740ab773e3e98492e6fb1e5ce31b466cac25e61df9d5497c02f4248e0d19153c1e99ac4937f85f0cd67a6a463c08ddcf45864bc14beda62cd7264c5323a823cb9abf852be078a46caab6b314712626b6964592c10b8df0a78dd97c9ed011e28391405c8b6caa78ae0c0fa3be93c176ab798536801fa4970f086ca808a5e48ea34b61e97387e5016ba45acfe92754e03f948389aaad73642d466be526a9f6ec5059c10ef0a90ffcf9debd5f5267d642bdc5999178fda5319d32a2a5ae16c89ad9a29d55cc99477239b0e3842e163814e098fd66e5bac57859bdee29d4d4d412ed1e12e839803518071b5563dc7e5b2ff9567d03bf061ad5345245744b7c97a96488b05b11302ce019e9eb922339f86bb0ecb44a53a63dfbbba8627cddcadb960a0d600aea2c6393301fda9dcfbe24e32ae52d25f686b2fd5c572781db826ee0b92a6ca523b66142fd9b5a61c2e1362b15e8452cc5013a94a38d6ae13e760fe0fe3ac4d4ebb823e6a84be1ac47142ac41b80e340bc97d90a277b34752b031caf48991775ee885b5d644abd6bba2a3ab414725ee858053c490d0af4f37f46b747e6ef212abf462e59673222afffa04d6c0692418bdfe5482e6378138711e95ae3a23d2182a68876b9dc434b9b6f7b562b27455f742e325200fb217891f17eb8c4aeeb349d42b9d2aa3496edf12310ed25ce50480bc79903e46e4b3d9642d6c66220371f382fe61750b6ba8b9269dc6ebcc412357d451c7c357af51088f0b41e46adc44df01c4087012f8f0169c6f0ba1e2851e8e567970faf4ca1b7919c238d0e4a348bc4c032ff4371d7bf06ca7ddc8062ace85ededc1742130d122545ae69915508f70041dce981f212133fd7cf4441b494d86fe2afdc43e1e8a222e6b8fdb34e326b133c7911ad2f5e4b2b9bd70dc4438b5a7abbb0df55be9f8a87643c131c343b043dd4055241ef20d0798e06e97ff5e6501a3e74540c6ead78eccfaa97f9bcc458b309d28a2ca31e6989b9f32167383fa7daaaf095afcef2345d917f17102d1cf8de4cf2f74179b33976b44f6b50232d5f980d5a7b14b73990f7cec39763ab0630a29fcbd2b5535ce67f9f2b665b4d56c2579dba6df8871b0531d5d7d55727563aff624c690bfcb45754b0963f668445ef234f0cbf09b6da285d5842713726395f6818cda3dc2334141ba2292940f977eb093e60157bba166add75fbbaf604cc17a96226bc0f0dbe65f728cdd5f8bc12ca2712dacdf760fefb5c8599ccabd1a25b6c8da9f192333a33f5bee5c1e8fc6b42d9f5ed37bcf93286969058e1f9e619bb93a9b4defe59f08ad0327a94f31aa3d92173708ecdf9072325c86f165d74da5f49d70cbda7429bde65a72be038b52b38c65b40d46df6c9bff8f16ea229c80aa6419a398813fd71c03274218be1ce33471f87a0632486fe9f84003cf1c80b5a4e22322ffb7f0bd3ab7a06a93c85f3357500f95dab937659a2fa9790022cba6dc0cbc5ca89a40ab8feb1940eeed7e1a8582a4066c5e5c22d1eae19b427f5bc569d4a61b63f0276613210f1f344bb57ce6cdd48578d8e90188751a60b3720c3087950c4664049a2f3a33ba39f49bd0aae5abb27199dd8e0c5286ffa42888dd265c768c29894e5ce663c917c0c8b21656385b1872c85d00412859a1de2f615dd1f95cc5ba91ba39e9eea100197745b030e276aca6b8e5059105c52b163ee60ff959d6530839aff75e9cf57947e1e236b06d4cf39cbb6eea4f21f93d7d757b924a58fe1bd9c8d7bffc07871d402417ed50a99365bedd519235c445a64fe2b095b7f63f299fe2725a0e6771d98c925853a4d09b8b23e4d7df5aa401e292a95b946a0eacab0a8b500e27ad40130ac9591a1ce2ab57f6a314e0df39f337c0397c78b10fe7545aa133a2f1e1a8a21c4fab9948e1c5bdc69d4937d3def318ae79f242efe8615c9e5d51d049e902284f86042e25c6ec8c40b8227a5c60d105199b895869cc89f41b76e7267d63db91b3632ae34a7575a012841d7f51411cceef4b0ddf3f5d48a004d7a109877da6373ae4f61424a58309592741a61404c0e86a9158b5c1450ed968e3b2c4a1c7f3e5b497db9a0f43028ecc5925a24a06413fb2ecedca072d4fe71ffc899a5db6046051491453664382e18182d677f58b8030f0df0106551ecc7fa25f8aedb75ac2052fbfbc222d42a7c4cd045339c1b7c1d3060cdf41ae6e33dfffb096601e1d93dd3ec012dd074e0b6e9fde756b7c3629378af131b38cceada97219b9a731a0864bd43e3ed3e3d16ce9654804783a976dd35ade6d5ce3f0dd3cded9b1cc6c0bd80cf4ef5c106e1f8a2e63c8dca8017f0be9fb96de47990d247dc843884ce18813bed6a7334929484ed5ee7fbd83ae201113d8f3d27b79b76ed3afc4cd39a6460d37a98715d845e54adb3065e9dc5d7c1b83826ff31ce36786d4a61a3e79a1d236760a25946a8f679706665dd4fa971aadfb75e278a09f87fc7c7fc7b443468aa163e1b8bdf977199b7b2bad5a6074b161f340f2fd02c1df86aad1868c49a8078287a83ebeb67c2ad158ea11aee085ada0f69fe9fe8fa4fa2dd72a17ae036ff17c0c0c176c25a4cc39836d177c49a0da055acefc9007461300b67909023d4ed622b8447b9e644381fd3027be84a7200f3b10fdabfa39cd89cf0da4f15bed1ffd98d3c686dde2b68f62a3953a32f489070a03818b967af6986881fbf179d3c3681ea2064082dabaa76869f3bca49adb8ebe43e7ff58656bc419aae2954668b47f2989a92e02224b970905b3609407568a93a2ef680a837f5cdfe757a439418be70ba7267ca4df38e8a698fc791889ca93a2a983a665880aca38d4f3baed6a9a9d4be9224e347d48e651b31f7df0c7898bf5f9a45b84da96afc2c02efbdb646b886d65568a0cc1a58da38e3e39d2ce542654f504605f8c88abea022ae871bbdae4e10f964166e5b7d3ba66a4e4134fc3f20d0306829ba68827866984b9b60bdfa685c4e64fd445bcada4ef37acfc1a8c1fa75b51eb832619b1bdafbb5774967e00615be1cfb305a0e99e567e150d398a58d8b297ed7d3f4879d66bb9bc9eec3dd5afdedcab79d7db37aa83a8380c7c1902163c9eb35af149b4b3886f013b30f63f0bc3421456efe26ea9b7025a0fe6bb16ff73b37dac1494871f32e35c524de81a59fbcde99fea7663d34b722d4533f8e3c1461a4124802b21b9dac0b46e7af6463d19de7109cdf271361ef016026c92a77074f72770d47f3130d8a0ceb41a6adf63eb115f78a70398ec6e89d84af61bb41b5a312b70549b86a6601e1d5f0ed74ebbda942be50beb6fcbf650b0c5b324ddfa2be21f865c86b4e240763c0260757b81534d61baf14a235e32444dea16b0a365efaff5805dcb18cd3f02acb7affdfe0d9a9754f2f2e980149ad5299bdee7d9f08f8d0e62c5e1aebdfc5a15788644f67edc3cb42e7eabc51ab9be316801406c1146be990af5f913b9b94cf188f96392af08fdbf6b6eeb0251c186a5752c31d7c74fe07ff5c7c604b826a75eaf4fdb68790d72d27e367ef7edacbd7b2d8ef97732a31d2ceb51c0c67b504fe20dc494d1a86b2b714542a02aa3fc6c6682820fc11accb0fd0ad1135a825be88734d1d89306f806ea747d9ffa0a0aeb755b1bce828cf23f5fe56460ef0694a6e9113244f90da5a516e4afacdfeb9eb6d266e1d2c891afb5df8b4aa1b42c5aebc964033906382ff1301b66ff3be2b473b1eab5ced1f3a2cdfee6e788d9d4591b36b22b3df8003b23e6e54e7869aa040e601352fe865fe0a5e92921586f69ceea8fc33c68704d3c15b648e9c84e4ec5b312a84588325e35f10f6c1428c00c4058091de3b3b7cc47f347a2cdc3fbb7adb8d2e3d97872c49f8078630c3bab9d2ace4db6542a4b426a6c11256c21b06ef5473d2c92debe572c3ec5360d2f16d3ae61444244fb5dfaa4f47cb5bd198f01efbcea4e162a50c9820fec5d4c2fd4782f826f863963b0e9ff0843364b068851cd9e7083d5e6879076fad1a4f4d0aaf86d7e87bf331e3dd6222e93c8aecf6493112ec2439d6f25f2af16e4dc97935ac035eabb179c831c7f986d3cb6884fa08f4338ff8a54dfbfd810e4115679ad555ebcca962b182bc5261287569a741d9b0bd8aca599a2c7da1263c3759abcd05d2ce00c16ab71380ec4b999caac3512e8bc3c3c3e7d1b922f33b9a645c2a580edde49f4426c46f08d63b371f71dea645f99b7afb7f86a73ce278a0754f497e318868f9909a9a04486810c955244701ff8e80bee93533c2c2eb87ff3b4682b60314b39f412a6472ea61d346f400533d4505a60e0836a0c6ec42e728ae855fc07da3b8c1f6f9c30343a514b56a50fdf974e04ba3f318b313cecb4ea6bb64e2716d19d54e12db726d5574e0e7f8b2252323c493cd60bfa3681162bcdff659833ff23e83a60302d3c5542387a9f5e9039086f90143f1bf68a2d39cbf324aed7bc19c7eae6ad1c90e7c5e75611919a65130b7427588e5037bc7184c063f369b0bc61214ea0d3657381278bc59a66e25a11c9f3e710053a4d27689d6c8dc33c2de986ef0edb1913b8155090464725420234b608d4d93a07deefbf58d9e9b3535358114fb7a363395d016f367c5bac2faf7d23437dbe1645eb75be6dc371591d560ca4c5f3a9886154364738e856892624813424fbdc2751d2b75bbe7364a507bcf0e29c040249d2281ba0271b8a740a938b8f753108bb273cca373291e9e93aa2f508a81e25c8a5c8cfeb0f14bc059e8e24ab0d707eb2580127e1f3e92785eba19eb439cb8de7a55210ba8f07c830724aa40c231f3158caeb958de02a24a844023fd57adcf9d6c3fe975196a4529c329946fd6b465c88ab1e946b6c38a7f781c70774579b5d855b14250feefcfce653117beabf06bca31eed9e573ac64799c1c577472085950fb5c762eb1364dcbb5ab6619b6cf6714566229888cd268f620f3031f2f3aac4e9727bb75b0dce8b1b37058fcbd822e7dda15dbb70a8121e92ba892468db9b916488d8a6b1978e52f3415a41d64cc72af0ab445d8c26b5af824dd770949eaac953cf3d037b9c210e1a7bbccb6e0649825a7b6edd3bc3e1ac8a572b8eb815fa268a2406a21c9f04847d5784fcae8d2663c1d5451e2d9b4d573498545a25d8163f3070d2e083bd313c003553bc268b443426a82470fe525471cd55385c1a72905f3af6f79b04f4c8c977f139a8d73a485b2f8d629aacee1b57d322e5ffb9c502210e0009871e48683a6c15f3c6690ab3fc7bc7bd66f89a56f1a0c18cb92cf632097097f2f340f22ed2fd3b904888b6061a57e964b56af2c5213eac98a8981783b77f1330459988fca6d7f33a93bccdc9ae7efef6579de7fc9272f5934d66449f920c1e209ba72ff0a333f3583957909d014562d35c36ba92969c2953800d96821b7d094f162402d2504ab36aee8354b7cc1a3013b5a64dba922bb9c308fd769ffcf859900eb18b89a932c7ab909a1d938ee8878f9051ece24d926253ea7e35cf13beca8e3c12bc776d410a3424bd5be970f2eecc38d043f5e8febb8bc4a8d20490c5d0a0303109e536bbdd8076f41afd12e575211d55c68682963ef71027396dfb79f2974172d646e524d21e0f465052368e8a8a325b763f2e7df39d1748cd99d5ae57c329089444bdd9f4c00fb1a609a10d11995e2efb903f5d1e518db85d093f0d82dc463fc6742209267cde5cab400c1f117c02cb79a8775828248b182f0da9174ac3b283558ad524062f792341ec47df0a4048619f4ffccf41a972224f6c6f33c06a8965ccd62b9b1cda3560fdd6210e6d45925db0058445ef5752c1c37155da4813606664218896b0642332147e57513f44608ba939ef3a20440df35420ca6c454fd0b6f6df227acb6eced69b9648469c368c476fb7cf2d4cc11ab099e190020899ce6c4c0c6024aa4ebf78e902442e7991ee342cc5cd5cd2778fdfa0ea1b4eefc98c6eb5acee9489b80ffc68930f2be3e5a25ceb910ce0f9fe61478d80a2c42102750c28ab7f9699b77b99ee45d4a9e655e69ea77b2a9887774ea7deb4f8f650ae1c3e5f538d79bae2fdf1e7050546b3ed70502c13f155995756381715c9fe658b277b58fc40caff3757322fb0b87bfc4f02682bf63e29fdd418f8d55f3036755ca2255d42e69dd72bf6d6ce2e029ede762e515860bcd425ab5add7e313c935425c41234fd765a3ccfa2dfacb1707c6a19bb9f10b902387d3657dcb0eb94cac2b3a3ddcff374da4b3473bb929e95e45df7df81d022b8458a7ca34d013f1fca8e98d73cdd7b781477141e3f4ed76cd48361d9bd2dfbd4644a2cc93115ca8a80333028321afbb90448f6df200fb08f0dc64dbe5d5b2d17a23f6ccdb2283d0e6b904290522ef9945ea50e2a94212ee8f8febea2f9cbb73933233b879f87f2b7bd5ffff4c7b7ad736ae85b40de2b99590b8b10068a9e6337e8808d4725b2b47948a01e642f757fc45c14f6f3d576836c828e5d53acee0870073f493123526760c697bc0968723a2b1185b2e210bb321fc7aef4fcbd52de741c15b302d74fb245e096e010206053a25c85cf09f14f09054ba7f7b34f62d8acb93295076e8ad92c0840c304c0f5725caaff68c141eb6f10467cc1339fe0dd14326054bed3066cb67ceec2d8f22edaebe0ce522abbf3618af16ba84d549fb6a2d99711e9e2416d42a53d3f5e101f01b00afa5bce5df0ba147daa699cb259bb2d33459913fe8a034b4af564a2ae1655a2a63360f133f259bb62cde3533c8f083067ebcf3c9485dffaab8a2fd7db77a7dc7a5c4c34de77aab9f57d6ebe253de5846f7a167078222d58d74eb6daf4ecfd8ab9e3f4eda03f3895dea081fa5585cc373b2e600516d29673ff85cc8c4e3c3f43bad4b8e3bdaf539e7dfccfd561541420ca0ec1e49b22bfc5a67f62d6762c5eee4d93192f46226f01c4b83298e89e25609b4cd71b7df3bedf24311e1519e8a8652b15b30f3cb467c63e1f5665cc7b792c4a850a134de5308a7ed2d8ab9ac15acd07d423c289a9c2258b35a55089deea8259fcb0a90837dbb3e51f89639e0ac91695b784e095b4057fe63638ff1f88e9155986323db17ac3fd6d3cfeedd259cbeff12402c2957f00f0d63f9d431daa685344f4f42651ad150abc129fb5906b3a4a073c960c32ebbf1bdefeb2d16fcb7856c61ae7559fafbc8b03c93a4ff5fc69ed60a52472ee0de3ae76935b6b7f505ed03791fecef7ae00d9580a950e31e3ad7df4263f636fc7592329634e53f424d827757c12a243fa0b4d15f4a9f85bbb19860f3c86f950710f68c1fc931fbb5fd18016ffa5f1be4cc1d8106b0af2d73730ffc0388315950112fe38640d15a9a16767097dc779fa98009bd7ca3b3598e40c21f817c5d357695778d73e155146f87fc8393d69d35ae2e0d7a1b20e99c441ce79ca273c6cd23aa71eb836305e35dd4f70dbfb2ae52021e99b659efaf73a8b7dcd66dfa54428d4c65d03a5ffa0fe90427adeef530c9f06d87fef6800cb6e547a7b4a5143792c8a5990331f5477cfa728141ea69d2af79835c017fe08af856db3f1d344f40a154f044ef3633cb3e8dcdcccfcc8353e9ade52d2affb1ecc363904ead910e58a191cb526a116951f90290cf8c2c134acbd649d5366400c722bd7576dc8d0a407763035e24d5de16637f03e7a42ec9acf8d4cb4aca772e6b6e50858cc4e40699a03c5d2fa913ce2f55273d0a93152d734e673d8d4243dcf605125d4506b30bf6336e6e5b666c0b7b8e97d1acbd6b9eb995204f7054d2632a40590a4680de7b7693652a9d966dbb6e16360b2b0d857add2cee1811742febfd7e7eb5bff390ac5ae666c9113be73fe87b25ec08324a91d8ecfe6f18a66926bc5230e74f80f7a5d6ec9dbf3c382f4dbe8f2daff45aeef8ae9a8d4c3ff47285679a9af3d95c9df03673de429ac42c90cd3e3419fcb4bc151d81398c4bc2f40bfcd78c2acfe40e43823e2b1b23687d259373494f8d8a65d5b0745ab673a4058822f7b2d594e8a2a04c133da5082fc4dd5155be9aab0233a7b20e4d6ff5e60a59a5cff097238695e82cb4aab19892fc163e0862c8aaf04c2d071ae24258c62695c381e680c9b8cba86ae9250a27138c4da5e9f3320346b9815fd30792b7c428846083eaaec244d38150259f295f8141d913440cc6cc83175f1a587aa4069d636516c5a748463be16fcbc0952e5af0fd0ebc514806e4f8b1bc7fefa1ad76fc4d0a9a758f8cd3092e5f9284dbf17b799a83c33b5f2bd3ea07ae460c610c873e5aae77c567e2f164dce8ebf02f39cc4940796627642715d36f43641aadb788c3e021860835b0b9f9ca2e012fb48cac269407c97d3259f2f11c4224fc01b0a6373f37d09afe10ae3da72a0237cd6f11880d2f83ff2cfd94287e0cc2eba1b5225e8ad1ee0578e19510fa76d28d0d64022f89a2e895dd85772f1f8400d6b85816b824fdf3783055ebf9875373aa92150af2cf99956aa49dfeff0f7170b611330e7eed19f03dcb3d2d8a39e27a441d5633af3985edec841818c7c187d4271b9aaab920ee35a30f3bc6100ec1ad93029f8c0c0225f6a24c419d3bcf793bed6879865fbf9c80af008771748e5653fd97a07f19ff6a0666a64a60623853ace1f40daec37415444fd06bf78163097dca0decd34b4d6bed576af0db6d3c7bd2c44ac5e2c1ece5d748ed2908747c3999c9e85eaa113bd240a6f1fe8294e8d1af8007528566daad1d1dd687262136a0010f040f0a1eed7a9b3a5e096a60ccc0073362d2df9d18de4ddfb8e0456ebc3860024fc93281060ff909e982a0bf9278309c3d899afe9056e0b905befb4b6d0a090dd8b2b05ac9d417e7c2098d1ce801f4ae106a997a6dea0a6c002d97f89b7d340da87a3271f98dfbe1848f2e9259a9ae374bdb32bc0d017f62aaa9c9d9fd575df0c4f4d45232248bbd8978fe3685714a918abd539e032fde75b0de51b233c08ccfb6e9ff84c20df1406d35d7ce3065ed4297187c79d9051aeb8e4c75b9fd10ff31331103c6e52a0cff0d7caff877f7a01d36e9071b7531451ceed33498ec2470440d5217fbd9cddc9dba52ea24885fc29608a0962f600b25cc3e0354c727147bcc85cbf606729c062887a2e28170780701834eaef27235e26f92c7dbbcd600cecf383a9b15072e9843e277f6020fdedac97b358584fbb17f57856fcbb1b82b4401c81e2674b051911897da7d8ee1a434feeb6b996a205a0e8a0cf3d3af7c5cc48863b79e967777e19b67c808e2bee3b2b5bc1df535a232265c09bc114b335f9b34d284c7d032c4fbbd2249f4bca14962e64cecef7f0a43aa96802331dbf7df6e49022ea2d011a3f7160caffd46b5df3f25d109d5490dc44b7125087d032f995f772be4e719a7557418b584ad1fd5b49d6fa4734cc3bc614fae00b505131f097934470c0f67f5708df80196741e29a86ca77799e46ef9388c310a6f136c8d88a94ed4ad75c084b2698a96e53ab03a9c24870048e27a12dcd7a24fc9c11a9000af09ccc873d9870522407b79007a641261347702ba907af2888057d564849602e6e626d280227067bc8ab7fc7546e1aef6aa0b61a8985622815f82ba43f629fb5b91e7c0bc30ba1cd48c09145aa0e6d3c5c35d48bc2cb42a17b715f6b44f26277d6ac058045eea0d58b7c8e3004c85331725e14df2172194a328f713156bda8c1493d0ca92f56da202d4f222c99af9c2a3844d9351c7e24e33be588f63657c82fbc172afb9abc85200b77bf5d51cffcc240448ebbfe9163d171a18493435aa2fadb2b7c8473b28169ee50269e6ef930adcb087efa4fd3be668ef5ed6e7f472201490784af8e78af20f6a7e8de9a5efc4cc823f5ab9fe730a71d33ef9bba779189d552d4a545599b64b05b7b389d35326bc361fdd2c36a05447e849f4303798a1f6ddefb5557e75ffe409460059aa7b36c89decfd1169d909faa2ea435a17f457d27c81906886d0921d8093dd0a8be57c8ee777520b53137a9e3a50cc9d3eb2aee56ef4c6361372de6d7a1983f21e32769c2d5b61374469e8527bb7bb4c17d478a33d0e98a12fb748d7604dd2058c45bff4782fee0dfb1b9b8ee0cfe62002ae1bfc3e95ce2884b2e020fe0b53c0ebc1557fcc30a24a6a5fe5ceb4478026645ef9c277865024d9594274b67155d62ce62acc375ec17fd9dbfe97488c7955e14b34f0f33acfced76c51a3f06d87cedd64fd34b800a4a20f35f3695a14716ab7e8381cb23cd885513d1c848c6a24ad7c208f0330a62bb4388a473de284a28af35363da8d497babd7c30b7aa30bb24146ff339cc9204c15c5d6cdae4757e2670a3d574c9e7a1328b44b127126780a0f8ff1e29ff134fcafaa02568a481754475e1b541aa6bcdc34bb640b12abaaabb39b643b27d2f1c3fbcf8b16fb8f47cab00888ea21fd4bd18560eb6f826997cda06454dfff0a6e420dc5b04d1d186c01f09d7aecaef38be8cf344185143314254f8201a9d83c86d91b453f065dcee1085818a7f8e1e7c6dd6cc5dc49fd03c6e4d5d0df7fbc80a72c6715c7a3c9af23d3f0670d878cbffa286eb3639db5ec3d3e055a1c721c237344d1a14f20737d0276a13ef3a0ae2f5f5e0570d0096c7a6df3885380a5e02c72b00d9a8fbc101617ab18901a29c03b18548b9ddd78c78e53e21a875a00aa63ae46cac48f4c904e7b2bd92af01ccfb57b06190280acfcb3439ed52e778528d514b42f761ea6c90079f1b6cba8754499b1960d8f9182edb602ab8317719af802c33a307d90ee6e9d9ae1a3ee4160ca865c63840a946748120369b9ab99d0b62645129d8147909e66a8199f5f0cd7012c3e7f335e3e27f44347c593983c31da19b3fb6c9c61b8d35d16f88d915a3b7677fb12a61d3db567a15aa066522039c316232edc04b03cfb1d387391bd4a45a936e1108b6bcea26e2234bfba0b85ca1e934beb0fe0ca75ff2f972dbb89de313d8950ea961ee946bb53137e8427e58a21da0d14eef5c11bc75c6d580e57ea6ab660ee3d194e5f92b63d51b12eed383ccc35c0969a0ff2ac9fc0c009168409c149107ef2ed7d446734df9a001be7dc1c86d20783a355c9da91a844a7b5570fcb286aa248c2a5d0a962453d536d0bbc2693d3112c4b3491663e4b51096941bcd5d96aba71e948ede2a31fbaf98b9ae3a05f7a52a2bb747e7776349515878c48fb41187ba00752018f5986220c6fb1e1352c3f5ca687367977dc000e26571443debed3df32f695bd32a4561df9c8caf09ee0fa52cb91e72943603d06478c2e2a7f84233ef485f36a9dcf97c2849dbb71919c00dd91a92e071a7d6a7b5c42ecb4ac475d8877135d64258cfd9d394125a49162194a3902ca6c1228108535511a2ec783996a312cdf8748a2a2a97cfb3170ab36a0e38aec126cf9da9bbe3f2f76e5bd26b5615746bdc0500958c72d6d40c2e33bd8c6fa55285d9c5fba98a2af9134485a0889742c36cef0c584881ba736ad8988e6596b26a3584dc19987822baf7fc824467083a06622a81112f2d98b0401a8c5a717c5d231b9ead51e31c3d373e332247a49f60de997fc8f1d88b200f0ea89ff7c6091b1734df37414485dedf586e6529c22e8362fb809ddb143f5d00f78c6d441652846fc6a85acd1c91619fe889a6308a29abd22b60e595554e9cc60e1eb6599c7056ac9ab38351d80255cc316c2526e69231c492632c1772e7c8148e5e752feac26fdf68262f3db2a5f190c2fbc08c181411ca83278176a30b02b07d189244f495752e2a78e73d31cee7046d666ba3d3cbde9068db65cb5c4a320558632b651da4da73d8919cae5b67476340e3f00003e32289d1f70e79d3e42c51d7beafa4d0e7459e83a3fa9f03d0f60a6d5ebc2a1c65ae018bf33bc14f0c625902eef69abdb2c98b29b69e613ea90857ccd9df70e53ba43f38589919aff33b957a417afadcb0d37c95ab3aef59c32f3f196dfd693e30177d625435668f8828479213489af0853c6c0753e0e90089f690f066e0117663918a0c21e21902a52f284c9fc2360a262edde870af47c46e510a34cb7cf3ac2f03ad76591c5a302df87dc7c4ed7a02b8d57f0e2b792718f11870e2de380edb0628391af9193c3219df80b93ea907022b4b5d892bc8d05c3c1bc496fc2d06ec38c94f3e132881251e43f2761f60ee222c27607000b2751f055278efa4dbd50d9699b2fbbc1f9b5651f706564462bf1ba5343cc786624e0b72a3879d8169228ce229183e956f69f9333b86ec625e04e1f83edb7ba43dbd6cc26d6109f653ff00da8ed60d1b2c6afcbcc7e16f0258720331e4934988396013819cc4208255ef616ce31dee26c4bb6d4c117a62e858fdf01c13e80f0d120af2c30d3dbce52b939d63336a58ac34922f077535a202856f69e111969cd05a745e624ecaea95f004747bfd99984ffc99d28c8bf5af08986f3e49f06badf2eca6ca3741e8cefda9ab7ede6289c4216d870c91e8020b54e319072e43f61dcb78418184db3cc80ade6e2dcde1b6a8d4300633c91e3294290a9412cb91485042868f46ed97a33160360c851781b83b93c69d9dc10b2094bb2bb6799adf22514361a775c58104f4a9138c0be703717651f925d071d26ffe4bd92537b447d1b9447cd7595abb7d138ff39f9e6a271c1e03786deeb052ccc6490992512cdfac9d8c587fdabcc6b6092dea160101db362e1ba6107805d6d12965387f8462a38e4ec1f323012716066ef4a2db374b4764fa151fa23ac3ea0f7efe776bb2f09591d01e1ab56ad0b59e8aa4c0940826db5072dd346775143c135590e2a93705c784a4d1bd27eee52113cacc7288b1c2f3e492cd11b35af21d2d2a41e39f585f71c6b65487e6b5c8f0fc53daf15c3915205f3a66ce0ae418d03293336ca1b3b2bb5fb6154af80bec9001f130ed1c2a91630f424b5f0d68a2a49378baeacd37203431aa13412bdfa5cf0521c85b9b9be9ad6b5ae6ea4b498a616d62526fec1da2d3b741c7dd6beba5b5499677ad660c8d8a71e75d186ce6ed942099cd8ccd2e2b04033dbe8402b251bc634dcb24236c2e26267b7c9647a31849e305287134d51ad434ca4007aacef8abbbe00b137fcd6e4d609dba935017ddaa3f10a419f3b8e1067cc8c78f66ad4643ec7d951f5909d956f6bcfeaf887a06b19362f58d13c9976af0007c7d9309b5da492f8f36b246b5ce565feebce6db663258299fb78789b37aac719e9fcb62fbc69fe881b7f90c15e5ac0e43c0e731bac74584d2467eea04291885dede1999ae8acc0767494d19247021bcbd02477732eecaf245886814e596f34d5c26697232f27b479665f825ef2dc619aaa22b08e43cc08c77ed1d79963a9c1305cba28a79bcf153f3c48340b10206d040a1ca22b982816be5c7d8fb7414c9871ff9fc0250901bf834e95a821f317f8a76216a8f1b25ec865deec958cf5537f0f898ce50e622478c4c7f9722d1de1fda0112c8bc056e53b32d3a26790ed68d34bbd55879c411c15953ec5dd7e8be8e6d9c83a963e8c18a216f22d5efdc39dcca2ae234ce5f3bf12606a9634334e11074da96ed73662494801b82ef496eb5e6d48285db5889449ba73226e40dba4f81061d0a04c1af8e1010d20df495b7aedc5b4721970e8776aa5dc02e428baa4f8d328b8ba5c36f7cf41ffb1bc348c9887bbb8f1866f1afe2f19ed7546abb345c111f3c1be48dcf02b970890c890578a3d1ddb276a17bb2b6058f4122b893dc3faf401c5773ab9b6b902e9fb2909b67a11c69722ad63bb98543cdce1758f37dba6101517cad2458ea915167f347590c7239053b634c4588a7780037ba623819c034253db51212c2c50b82b52f7a79fe716a56e72a68b00603f2ddc74638f21c1743db7494f73b509e9caa2be31d8d879775a92d50b9663b32c6662822d32c7acccf810493e79fe222aa5712a463d435906721fff7043905661e57f0da961d99578c4319f5cca37e8588c340c14612dc3bc8244154f41e02a53366640218a7e2005ef688cfd9eec3cda0f683b630d3b62408eb8d959286fe6a53aac739f95385a062b336b384f0031bc2d5a57d7ba393c0aadf07c11160e2d0fd7434641a392c23bfce999572a7866a2e5dddbfb291b35c8a9e37ffda1bbe250449d5fc87d44d744179fca0cde8c38ed88e419eb482092ce67c61c3e5614354289048f0ab5a61c939929d41a28063b74bc517a8a6c205387935f3a42f7fae3f1101cbed26e7266be64ca77d62a716a98fda5a1336178120467636995f02777c6134693944d042d26b41bd5fed2a0d3c276eeffa12da9432ef8fc623165d45f52d85d1b6f0fe27f25ce2ad38697f8a36bd693c46046e5f7e0153c30f4ee1f99039225eda154862f04d002692aafbc251a47cd186710003cea9c81169da12f52534850e3c914efb30c4b8a238f2f45dd153c1601f4be86454588e2006599c6175a2b3eb25f24d49a5e3006ebfce238c0f5f31515190da29307a4348fb29093ed2aca313c8adbcf6270ac2c7dd20cd8abcfda1549bbae322073dea05be43afada2ee0146dd8de650eda1cc2f1f273ea482ea6db99af96fd9f4adbfb07e530d118926aa70feaddb8399acadcb1435f843ba4c07565bc1532bf68fe359a3f77eca5fb12cedab0673618c8b4904bdbe6462b52b5eed554cd107915851c3ef7fcd55473fc3ee0cf8bf34d60c54d8385a5a205f8440c6dbb33652da9c25271da6487a21f368b0554401a8948803ccd0f8a1fc487b237a05959ca4d66495b939b05ba5a8ef2f8a7d73a2d47551c529697b5d70cfe3ed1c13f5628214a858926262f80108d90df4cc382e1d55480edd10b7beb16996e01555a6697beffff4666d243e22d5c9c3abe33c044afd6c3a64b1e905df8820091854370f2e57d6da6b9bbc4680fb6ee3ff3bff604d88ee281c35110754fb27c83d94591e3e93431532b5f15f5156520e4048ee788803485fe20aa7635c459ed35dbbca3d77286c0a6361913db509f531637c1327ad97eab40f0ecabbc58258ae10e9644be85d262f437f5e084476854c22ca8cab6a97240624a712cc501f06d906913ed5bcd231a2bcf2e1bd87208af759ccd38f1106d55b8836de1809ff063883e9a00df9a06330701fa07401de8c1a1de192a4681e984742da11ee48a0eee95cb0aa04c57a3d9718ae5567238453e4295c00fec6aef52525c65bcacf8a91af6bbce6bb213f381ed6c0321d2cec7ac628da55b004e41876a04dcd7f9f970580528483736c8ea1ac293e67d3e258f3adc37071449e5a7c9192234c72081350476e169528e661b56f328e4af9c9c1964030910e909da3eb3ec18d0806fd082245eb0144b5106eabe52f4c7ec03004c845bb90a86c7dc2093cf2c9db9978066f3546d7736dcdeb85f79b1cc4c9635395a50f3b948be55c2c7145865ec2218683f7d0499961dce70c300d4ed90bc27bc3b3e2239747efdd185469d0d1ee7363b69ab35ee83cb366148ebd9027e8f730cab6600a231879c9effa2317801256a7b9e14d8284378e536cdc3d148fe51929afd9a43410cf72f976897e33ec970d50dddbebbc2337b1f8876fb9ae3fcc63db4fcfcf76de88e3474801c9cd9c0ed5f6c88f0d54f132ae3d9a8e15b7febe71abc11232de6bbc593205825867da91f4296a207e17947e49540a575aba12846cf4d1de5565d5a518ed8058028919d32a54882abc7123e215ab2764bd17050db7d670b13063e0bab0f61c64a3c05c8f324508dde906a4b28988e7e2331707f1b0e3917895a729387aa9b2323857120f26ca1b24852b2f3f39a8cb32f70d7cf601c4ce5e3d8f1c1f449a6368ed0366e24c0c6350193199464a7ad0da0875daf90c91194ddbc614b0a3a9bf53efa2b15d690b75e9fe02ef90467f3bc83c29c5d756ee8fa17815413e45f1eedf844b5c7ad2ce447ffd175141fd576600cda6c8bb5fe940eb61d559b07c07265b14202c67c839da729f1893cd54fc5a93cad9a770ace92f1c3df49e9978740d748ba00d7d3471b2049daac1342aafafcca03cc595e539c35f180da47b7ac30c218496465479612b06b546968ead4a4d2d230a03c2311fcf99e6cc41d72cc781cc352104fb42f31fe15beeea89c5c0d82f316ee44e202165fe7cdfde5b34f891bce52f4bf370d23ac5cb756b3afd3047bdefb1923d4042c95431023e5e0378cbf7007c3b5968f62a3e2cba526cef7acf0fdeccc2c54bf6cf0864f278010478d0d5071d0726994003ca0b77b03705fcddae30deee1aa233d042b4100ab7dc9c521e27c50ad1a68ab3cbda14354670fa43a1522a59136224245074bd04c277ffdf5025b63a30265e8ee64c9e4d2412a221d65cb9521516d47b6a965419ec6013a1a8be3851c319dc0f15e3518f3061f6cbd31f29b6ba214d841e3da8ccb721902d0d12895a0ea56b8047873242aabd22b685db2fef527fcbd2460e1d65c1cdc2c14bc036d745792d69a6103dfecb3f27e6b0d40a50587472168089c3f88b7b7fb9537e5c22dd94d2bd46fc30598a3d6418c85ef2df3ed8ffee9fb0bbdbbe667ee84cc824cbdc45a70d07dac8f9b473889874e4bd97731b88121ce5e80ed26ce027f05cbf3b9d019248fda376c5a25c6eab33f958a766ca1b7a0a64c848f706973e9a2f35dca6101fa496b0757f64ac1bacb9882e541c0184db73433451be77bf63e1cb8e7c674866a1bc9ffd9e9cdf2c68ff1346f3ce76e7fbfec390550a4dfad4b93a34728787b1878978c2b1a62ba4ae7baed245d833ea09a9fb0e8f39d511710e4429148d9804e9370e901736c6c401cd7a2b2d160850f1b33af941820a752a420389e9c4caed509a1b78356f22824595ce318d3edc4a0f34c597c223bed9f7a43a6a45f7aa51730221c0cae31875cd587394e7c53d562dffcac9f280ace1eb32bd5bd7e7289d5a1426d691e2eec11f4d94bdac3f3c76777ef9e1f4dbc575ee85ae0275e992ce23a74b5386d308c491a221d7a929cb67cdc6717ec11efe4b4843a2ae5df9e7f092f5cf3c63f469a0aad51615a7be9f20380c1481d7fb50c8a61382eab05e1cdd1aa55ebf7916d7e752c409e503e6763d0caf6ff1d1426b9675512dc5b57f980768aced96d47b1876fcde88d0526be5414a7dc7dccaab86dc2d81598993dc255fea2300d60692dc445aae8e757b8f88ad44350d50701939376b33e9196155d89c13d725cdc461c0ceedd782c77df18ddb2f277e9205875326432d2c2adf2090676e17053a1b87030b0142e46be9d17859d8f72a24884c90bb556e8feb8d2bd2134b8b97d16b0ac87991108bc8e777935a57ffb6cb39feff826b1dda91f9bb15c95ba8550b483909865d5e8cd6f8dec9753f23486e6f799cfabbd00f93619362f5d24cd9843a0aa7df0f8dfa58ed66f1951acb4663c3651e5948b8b20223f44e8dd48d3b7207dcde61991f538cd776b2c0153db19d92093be2cc49dadd79d96df6fb5865ca64b0e537728c57f56bec97652738862aa05a9c04f7e454733b50b462742803909c864568d667003c39862ac54793737ee0ef32b20e5f79c8a386e7dbc432559f75a80a5e46a6b285bdd2749a03ea0fd8962db710b4969bbfc3145549d923f562f14254900417e898fcb9ea8e00c1cd918d291f8d4e8f3e35d96fd60699bd43aec9adcb4376ad7c660f7f147bc1fb34c0a9ff5688f8add22920fbcb17ef283136630dd62ebcea148b65462b7e947a8649aebb01ba162f228651f69d748dcc6808c9cbf0931de5c3e0bb27551ce101c161b2bc0c604aeb088a79218da760d762dcc8f58520794bccb2942cca8a4b033a08a5542e4be4a2233ae2ebcc0a05c3a9814d8bac8547b73c837d5bedb5d496c2f9f225d6b8b5e932c76ace0248ccab4ca1c44fb4104bce058a2916fae8c5a8b1b53451e10efd20dbacc9d669fa77e449ebb53ed10ee3dad8b8d6ae57b8ab27da1f94dbd02a5698ad99569c5096b94c38ba9775bd9d649c6265043a6e360e3e6d3537b0de566cde66618050dd8d41fbfb41eea518fad9eb201b78ab0c2e236b3a2b667b6a3a199e803523db981f87600e448c9962bdf404865b3134ed59da1007be4b543222f96bf7ba53152865e8fa3418274f63529a3d1f4e217b69ee57eee652a95de0a9165f9515b496f21e3f70d4a04d99b2574e06c7370e5eaf32b98c3b87e8415833da8078b500e5a9d335bab018e10b8c248006a48a58449d38b24de3fe8b96f2ce118a0122eaebf49181ab738476ec9b7738ab71fde84b1dafd4636fb069d29025c5ef48f2b2f78cac5b242cba919627a7e826fc2b118a97b04644464c35531560b8d14c237c2ae42d320dcaa2479c32e2d798b02fd4cd20a545cff91e7a072bd1ad2fb513ac610c420412f011debd2bc408bba212f5058f25fc0d81dc5f35262338ab04954352b198b39023baf40ebdc478f1bc427acbd83e81ec58a7f7393d65f0bf36a7746e3d61fdeb3d55639a36088c67bc8916b62d6b9dff3d502315d0af83a4d3431a6b2b2f3a9285e5ae18feb5b47bdf79f77f548e5f9d759f60943092d296f5493404493e18e580b86fa32664a370f28c43a0518f679586b5cc2bc051b5f09558db30437bc7778220b0c6353e6ec3c46f0db249b101cc8794968d64983a4dd193fb43d889d15d12009f98e8ddf3d6545c767befcb3d5cdd30107e1ebfa0e82dc8b6b45eac404262f2e66e73500b9feef1ddc170da9b00146b118582ac589b88d36872dcd823bc76f9001be239007d72d7dc0fb457404e0e6c264f212adca708c6cbcab5d1420423cb8ec7ad9e34948053d3b852083a4ebd61ed526760d6f9d99961339f1f3f3f9ea534086899383572c060e14dc8c252e92c273bdc07363e0b946752d957a8f8c4097a27b0158b3ad39c72d86c56c334fe192c93a349b220e48fe2a4e017946c41309483602a91a12035c46f497928d9b366d8190f833eabacdd4307e98382ae20b5f94f77a3ff76f92aec87e98bedb9826f44cc5906179fe3e1dab766ca413d7177b5f49498ffde093a36087312722aa7afd14c4cf5a8b41487e86dd72a4e36c5b17210c5ac9b68c36f1e9f204249cd9e78fdbe5adce75bf24fa4b5f06d153260085b9b8459cff71125faec805fb11ea7f23717a8d485a8fa21609cda03cf69eee183383f17c230e1df6d7688b7965c6ae92373165d32bf714f5ed1009d79899bf0ee222a2e0e88a1445f30ec67df93e968977519fc01f4a664603b7c55ff61a05e26b846073092ed9bb5f01f0bcfd8db16982228eab4e79dfe54f7eeccfd384674712c93a7cdf976f559124b5cbac636546bfcd29c27e443251831efdd54dcd2188afb8b852ee977232b1c405a8f35f854dc94cd3af8c5854577ea1cfd11d7c2145a0b20bd1ff898b00b7be6d8a05f34999f9f239abf8e76f9c89b31fdf6fcf7f1a80bbf39268baff30f2dc217dd899c4fac972a7911bc078648e2a8b4eadb14ce8fbebca509426d3d2528a38766323e0b825fefbd03a3770eedef3a0610bc61b73bbb6befb30e34c1091c9151643714f640f8667157393c194a5e60bf44d78ff175d0413af68b37089e54673f54d942f17d740d2065bcbd94a570488a0654e1abcb58cbafb94b9e52e9fcf0b8eee0be601fdbe75f378a90bdc2119ac964ac192fa983af4b89c40028bef43f5c48c58afd440026d437443b1f67121f8915be0d331836247b8f125efd533895749ff26f4eb6f2c9087bc91307ce173250235ee28c2eb799b109eb1f68865af98f896e120c3f91ae3bf4afdaa7bd675e498895979f2b138f77decca9b502e378e7c9f205061dc44d5aca9af705d4d76cbc6ef7015750c36560edaefbdf4ccad70ec5792dd9c0894060a3024ebafd435469d0e074510a763fe101d8dbf67fbed959db3117f0ba3eddc44fea044c99ad5f1ec60bf69815d9970fdf18a5f675b9518ed193d13cb70ff784b1bb10699b9981b2343aa5f1208fd9621fe63a17151fe4b9e44b3d625b70999b2ce7dec4c491a83eebacf71e261e5b9aa442ec896a084bd66a795b138fe17df02962238a6b61f3c322bbd30c586762a632f729af3e18e9e8dde8d0cd005b1d9997fdce9f9eb6977ef6838f6ebdaa18a7814e76da6454adff7d4f3965b9b35322f9b0eb37377ffeef25dbe884da61f57de909ccb16ca755228a9d85fb237dc1bca7fe188ee66f4afc73ebf46e20ca02743cd402bc313fe85c0af526e6dc7295b75d2783fca82158d77b9f94ada2e7a515d01e7ce16b874ebffdae6e8164e8ee3dd56992c4f340a067cece0bc2ed036086cbe67a8d7135f846a224c471fad9c68736d0dc92919280564dc55853d09f4a1ed4c2ed202bf013be1c0c7f1887768208c198b07c6a337c197f2f1ffd8b798c47e91154926d77f13490a2f682a9e6ca51d8448550f292c35da4b547c0e04988acec79915e5fae447ba712606eaf1fd92b38371605863351dd582a0b2d929ba94fce7e9a59896d2dbb18da9be83e274e8318e019e9609d8af55993e301e6a133dacaf26ac6d68c686e388c84b9fc8005b8e4e77ba44bbc661bd3afc8af642dc2350199195fa4b207184654de1784609edcb4c2e408d7b5cd0560aeda0961da5bbccb431b5240dd00a787c3dab99a123d7ea0036fa7e34eb29ed52b41cdf3148ddd5020077623a0a67ce5c6bd47f0933dbb85a6cd21027cff4d4ccdc40a4f02a6ba6c1c705705cf94244fb5a15a55710ba6031695a1be1217e2c686d3f29daaa88a717f653f663b020ab1d9ee4b30c04fa7f38a7a854a47b849db89eeabff7bfa4f790ad7fc7d958ffad8803f3119fc7fde8859fceb3238d00fe1e2b2859f09c00a6daeef4d2d135095894df1ca1568e8b7f92fc784db3111e4a52e262c2b3fa680f223d4cb14dabaafd475bf9b860b1e61551d1f53f83c485a22155016a2121583c2f74b2a53a2af86851802ad5e57068f7207821efea599b2a97a06c6d64d4ccb0d1a161e4a79d5d2fb6410554ef7c354a40e60034892b67503db522d82ada3200e4712c51a3ec847c75b9c8c71b3a22489458254659c45fe0741debaeab94e0fa391d35aefadb7d1a5103ef741241061ee69610bb4161970650a7ea7a9bf3e9379881fd724016285e0a5270becc0e57e57761e608dab61ed37dcf5113da0aa73150363fcf14e8a67cf146b0fa932c97dd982e2682cd76eca366282c94905d9be6d2023c39dd76849d276851acff810254cf990d6e0f598831c42cdf369f7bc69951155c0760e5fc7f41be64dda40c2711cfcec54e63b77f4aa8c395a7aa20910b620644234d11bc66071863174aa167d85accdd23d3a22cab90974281e03d1926d35da02db413aef584e9a41392525ad93a80bd0e4486a9baba68ecac267f870b2fe559a88080801f284a50d5b271c87b8faeb70baa3135780d2b8dd35120ada9cc2c40cda0db76d7bee770157c92b3e78978a532444e95a3dfa3836bf114b20c3e9f6515ad5aef2dd25ca6adfbd565f17d66ec199fa68e7c148a153b446285d1289cf9eeda56e3a80d4ac1a7f487073a0f78cb01ab94a10a3fcbe83f696876540e87423d00f5ded174d1b91b95c1e4132b3e65bd79d91633c866c2e0e4967ac1da1979279770cc82ee35f8ad0da71bbd8a9c952b4b33c201d4a15a415f0938d8297941d333b9551e6b0d55270e0ccda97242eab42e896778e82e400a4625fec3b2022e31a213d22596baf33fc9ed5918d491763fdcaf77f5d80b8a9872235b2ea5228d118f6ccbca37007a9574d5d28f4a8c3de2f056fb4dee69708b33ea18b96201c8f86541c4ca896c3c322f6ecf583e6296a8a7550c825846c253694424140ad89b49aa91216807cafd1f56cd66324ec5840a37ba5ba52f88259bf7cd12b240103f346b2fe251ba96fc4e65f017310fe5919ff0196570bfd94ba59f31991bd4805a06708ee97166939b3a3b262d4d5f31278deabdcab873719e64ccbf1618f7d067477aa396ecdb74cfbdc2fafeed559e14017d1f3f3a25a526ca8da2b4cc8938000bec9c5aa3ec8b95611a679b34e5229cb91be5e12383676536fb6199830f075a640a558157ca35e2882db61413082bc2a22d42b4f1a0561d2de1dae9408ed351d1d730064c11e1161ee3f23fbc67aefe898ae900d8a6e880f1975c66d7a0b91a7b15b0678804aaa92e65b76e0485b3b0cbd5e17ee69e4087e43045d5c1e666b09d34b3a1991bc7789d516656ec68534f3274df6d1010cf9673a15788e5400ff84cae4dabe92cba0f88914b83c9ca1b4af2b83643873682d8f3e978da26b228634f50987a8a57f16ddf2a87ac0e76ff19145978dae19152d7f1a9033e440ca970f6fea0ae2759b6b8b69ef30bf87f68f806aaee72d14a08a71d58b19bbe476b868829342ff7bde4aa193c8408e6b4c6d71b0791ffaa0bc8e244c3735d00029c21bcc997b8fc3432ebf55b594d79cf8b93d0332ad0c937271d0e0d1285ec79fbdf5c98618713f235aebfd7a502e61bfdf048cd7cd4d54be312be3452253cccf64d4e17fa367b47518b6f77e8a7acc2900a0113e4b70c4904b158de559ccf4e39914c672a7334455ffb6eb056ad942e2ebe026fdab785fa916b5272c1c3ed75f43fa050c1ad611b862cd2a7ca847a45089fa6585ebc62670663ea6119b4f65c36ad10fa677c272a7830ce2d14e7bedb61ac18ae7c89411fd5794f89f3f10c0d9e811befcf670946d8b223a0efd60ef38f3757035c68a15f2475afb09f8b03be2e9f1850d71955b2ed0695762ea6c665355c06e700b325dc6a32756607ad298724b1988fac7c8933c909ed885852ab077a8cc14f371f71a987ef5b57c4352aba7262f5414d5fb367b87b433a6a62af2fc56f5d6a8526e2c5d8485c15f04c419afab7d60ffedb4ddc80dfa3473b87f771da50c0c8e257b9ee209a0ed2e951f97d2a395fb144eeed029bc2346a754a80deae30b9e179cd5b68a96c89f2b0d31f9c886fa3739182bd574f2158adf5e256d2bd7abbfbcfc0adef53df56348040ca6f1f7d6494309281fc87605e01a33afd858028fa86274c6ede3d4d284b9824ef75b82799ee577107f6decd0fa808379cea94c7e0df34fe64e42fe2202fabd469256244053165209b7aaa3f2b9129cb64430d63dd1a6cd1e4557b67b743531fc73e1b2a1669a0ebef2658abf7dd52e41c53b6cb3a2cbb30b3e9babf929e3a7ed1db2fbbe4067512105fad1f623572dcc987ce7d5a422232777bf95cd4e6cce5dafb81b2454e30342278cdbb70b9160d089f543ae402f7596af4403390a5acee64f52327ca4d989acc6bcf7565d414aa48353f1e8761a84c3cf6fdc6f94827b2be98fd927bfe4082f074269153b9d6f77cdc1be436bdb737369adc373d92ca6fdea2661b753e39b5d0afc8f79de50c010dd9ccda915d22af3c5231c143f89a9a743c3ab03113db2a7feece9a3b25cc4f3d05a1dd8090327c2a917743770436eea3f788f13cb28c627fe03f37b305f121d3abbb28f9ddd4e6459ea526a4cb14a6bc8785546ff32867064b17122d9306802bbc1987107bdb6ebdc6059d343406ad0b72870c2278867927248dcf936dee04632b71ae1a778ffc49c868e2dd317f58735ea750243e5d4973c0c15b4f4a07c5c9ba953e290f5100294b1d9b7731d10bc22197d07b259e2ba94467a1d9bc3ee85fadb6a6dcfd7fb4b6d23d83c02c056e599927575851f53f331c990e994fb131e45204d8b270ccbe998f8dd69a6ab82f5ffb33bd102bcc10c28b4b3e3831b29f6dac972f7a54463fcee99fec4603ccb7915ba1aea12fefaf15270d10d411c7cf3214dd3cf913eb15cf311f838a64bdee192ea8711ea9c1ebd9d79a8af711f0821e7f0c3dd5252b020cdbb3c392d7de292f0a8d4024e1a938f4af896020f89a251ae05c969bbd6c75285a3b2e88cb80dc0a3e14f38c05bb1cf25a12115cf98d3fca4cb3fce7687c0cb7817c9702a8131e9d8987fa55cb7698ad2891296913b575bd30ed138363408d3c0874ccc3921775f45bbd664b1d64a1933abe83d95a1b03092efd61faea06e573b9a826665fe1659229dc26f8f4e0212b9fd0e3a54f4d56c5ed48825720180e62986af1a5f1646f63f564ff0ebdeeb538d23059ad7aab26e123623b7a66ced4eacd9efcd921b73d8afb9b280155a34c511fecbea7b5571525d8a20b30036e65639ea392f793e897728326bbc489b57b0d528be87e464ce39ac2d2676aeca0e7d87e6f77fcabc4f0fc8b2bc132f2275cc352d89ba2bde740fab9b90fd5c610e3837649c0695f6f8753403a9ff1aae99dcd34477fffa8247e9eecc72ba2dbccbfdce67f6bf74d1fefc15a7b6951d07cc56cfecd36284c9da23634c7feef90cfd85bdac67485e897118bf9bb3a12ea220a0c6bedba76b5b75fe892df91e4d763f6d9ff72ad2728f3fda6ceb3d418fe8bfa7eb7928a7c2db7e5062703f4818b3bc6280578fa739c6cf70ff2c0021558b8b9a66568e66d0f696e545a23f12413f2b884294dd34b2932b87506f2a9875bf6d2191d09db0b2ebf34aaa5016cc576e7a919b538cc92829ffe4a009f57e2324d36bc750ca541b4099474545535a1884c8028fd5ae07bf71d6048e40faf493a2df174d23823a801ee5805e4d46e40c899596e8fad30d9e3549d1ded222118ad2503d5e5f5c07d18e904aa1abbf3aa2b1580a99c65ed4215560df823e7ced859d2a05f9beed99b6d0ffda483911af38244a38ed706a7dd2ce6323657c3d989d134a22e5a9b65737b8587ed397f5a6365b3f484550091209d3f46e358a6f6254e5bb0f96ad9bcbf613cdcdddec940cb04cd6dcdae99c6f4b7f8fcdac4b201c36716205021ceafde1faf07533d5835df3afda65b27db36b08c6664fb05ec6b96939cd8269bf5c540147f6b721528769bf4d4ed183804f42a1e44f5cfdf296d25f7566e823e4fa3857daa09fa8590d1f69e5a9aad7766f92a2faa93805771d23c21808f33df22cd326ffb25b4220cbf6dff28df0ed132278af27d47121e00159306c7d5408570d555044725137037020a6e31bb65b1d3b86ded7d997079a747f5410a82c60d55b43c47d150b395a70c7d0d4574ea47f8b4f123c10a581cd558399cc50f54f1bedfe444c49eee1bc545ca96b54403aa739fdd85c615aca1bac62bd31a8ac3837ee2a8e4351b725385fdadb58c8bdba7cb547cd39eb98abe2776aac197405213f6c6e3402e4e274875541ce1ec7369f663dc505aa06040d6680ec799167b3ef3d8450dab38e537dfd6a0ad58417698c33a1ae3cd26dfd3a2034ab9d30c5f5bc64b0985370e7bbc8aa1b7f2509cbb8a74e55b80b3b603ab2665de025586bf30d7712fc08c01ce9b36aa512094ca624e4f4584175b2faa8e279dbf9930425d0143e35735eb4c04487b7478173e8e99110a96fe0e021eef2f465fcef6dd492534d8c978d32837a4a7a642ff9b00b221bfe4198c2931417fe907c2fd00a752ca96ff6e71e2e3df256c84a45fbcbb3071ec6f11b003f72146b68d4fe18e235fe63e6fde2ae9af5671ae5ca3096c28877da778eb21233ceccda8afad31a016744fe028c309ef4e0626e4bb0844f9ebaad6a74b8f15bfb890b4ea74caf9cb3a5cc3d9ad765c48ac6d16e8f51584345b457575c4559e346cd11492a2b54bab37e3934ff53fa5cff986d8314380ae5c97ffcc50781835f5f4941bf534f7e41405204c794ae305d12fb5e95f614b6523936b08ce70d3defab5e5cbf0b1246ad6676d3d67b7cb916ca733c6d063b8147a627866e02ff1c75f379f18fbd5d0b675721975f4fc8ab5aca5fa1098b10578486bf1224939149bb422c40661f01233ad8254dd3d47e2bb6c1f26c8bf49300c000b2afec90680f8f658ae4c7aee4540e5449b076a2a9a509725dbfe3d77af9db16f7856c2c896a9eef788bccc3203b1b939b5ffd5fdc85c4a69244415d23c00174c58500da849cefcda1ada247b4653352e3ecf442c5280a856fa7cb37dbdfc415ec9b346c7b263a73fa5d2be73950a34543d29f87bd1c2c993c6e042ed72649c4343a04cb114ae0a32d2f01a637ad13c7f0ccc240065b41adbbc05e0b06c0b2634006c13f9e5a4ef9d714cca9fca984b5b5816d53c06d00cde701b357bf76a66d66a27cd1da9d51a140f7f6b6fd39aa902ca13652a6506eb1cc44b08be766d217547f072c172674605ef0a845d33e16223b4c0e91ad9089edd7bbb0ab79df771444db578d3dae37891dc807fc65b3c7e207449a3e2b0ba141dd5ddd361a9fa463545999e11c63917ee139672da5b4a708e1f3f2cdca330c1e21378f8812ad882bb25583790d46c6f5bd42eb6c3d62542b8158a13a5a32cc5f47c899e377944ded8ef9ca3955353bd64ce9d322d986c4a2714b2d04fbfa2679768bb38986d62152c6f0a52c6f603b90233dabeb3c824b1523ed7a6cde5335860161351ea1fbbe996589c41b0aed39eebe7ba963c6dfed148119e07395c7bb2c52f3229b17811c38e195410e9934dfb16c931720193d608be648b85cc41fb113f8a211ca64ba2440e950ddcef640b82899a2c7954e307f1a425f36c6caeae2c6f11f6f9645c19d890f9b3f0ff4dac35996ac573df1bb1f01b6c9d80acd4355a43680497eb5d341bbdc2a088ba92d767226161655ca281456c6e8316786d8e56cdc8d557eb3e0d31d4663703b4f6318c59a62dc1e4f2d371678959023458ff6d865d3037cb244de3fc62e1146e58e69843b274832a8daf0b926cfdcacd1dff5a87ff1302e8dfe644b29b1f4beb32e3c2d2534914d7268a2a0748c3536824e08f105066b10bad94d44986cdd69c008e5d6e2a095a8e944aeb729fb8558ec74d914db34fec63178fdea2d27d945e6fef410be493d3dbe02da358d351c817a4d8de13cda40731e99534830df888b9bda453ce54998a2ac8cca8bcc787834eb8a4fd72f64d6c8e9b0e1e148d43c2d4fcbee2d99068ae1ab855160fcf3df7ce285e62b3a319395f57adcd088931d1f3883360c35766b5da2a6f836fd88878c5973c2062e83a59520bf6f2b345eaa2eb4010f2a8183e1eaba76ded9ecfb36b683000c284df8fca304deadb991a749570b255028c2be296a291f026d32375fd4b7942ef19c3d7771b95fe79de5ef22f2de3c4612eca49243d7965b92b9918729ffc928218979f816b8f3ac6e9457ef81e50303829a028bcf06ba5004480452f29130c2b91843f650442f385e31b0f9f60d500e64752929f680b04958d9ab7f1fd75a1c0955542363964f213c8fbf1d70e6384ee1102e745f7fd7307642e93c7d6d4f5abf94a8a24bc370af43832e4ceaa76d441066a6d3b81d9e6e918dbf35d708be787fdc8e1f1c6b537e254c68777f83ef8f8b8ec48284e5646c379e1c4680f9e898e759ecace012f7774897d1c1598b18d97dcb33ca4b7c19d0a7e94a40f22fcb51090e9a713bb6467b315141d57a9bbebf777882b909606cba30d873c7ff25b22a715bf656f2f917badf705f801677e3270b719e59ee94f66e98bec183cbe3066ecb55207d053f4b1cb77cd4e6ab6981b22a33fd82dab51077e6877138409c70417c55c5875f5723bb1e9524970b404092124a3de3592981e3b4beb0a5077683c5b006ebbaf86372254a10d0c046abadd23b1647c95e190beee06bafdbdea929866c1b4b632269e1c04ed03bc74145c928816e7a63b4c79c30d1eb508ec4f3dc7c82078d6f28176d117a82db66c58108fe901f72d7877446184aeccdaa88c71988ae58eaeba3d4f4495ab4606e37a6624ef494c267143a9663480a571d94b999c4062760342719d5000094086b7ca6e99a3dce651e199cb160c8d74b83d858bc952857106464051b330ea68be29ad3b643d470eb9abca06f797c346cf186595ab7d61c7dd3dfcd1d5fa8dbe4673be96075a912b6dfee560914d0fe26a69806664b9d3b93adcde3fa79317651db8a38fb49661ab8b4b842780b3bf54a91af52d6402faf689b91a50a8c9e9882e3f0a3edcea23607ff2ce98d9a0346cc5a761069a40d66ff8d3c8f952cad6676c56b8747d88626ca68539241a9bd8f0fdde6bd861c139918b7c64012af302a9d73910057ceb3f5f2216c7a6fbdb076d4839be2b2fcefa219e49f7cbd0fa856860f6c3df898f2bc6db8190f6bbca3c12dc3facf019307aa43ceee2c002da79803641a1ee41f5e2e578e32d95aa0420c8c68958cebc4b94d6d170228ee15e238fdf72cf69b28ad618b6351301d7a72c93330233c7ca7e21e3cf1b9b072b9c27519d01685f1ad4b76de999e114ab7493e5920117e34175d96113f930c59504d460db1a518f31775cae4e3014b427b1670dec57b56b79197c4e007f4e8c35b8ba0643a39941dad956f4b27ed0ec6da9cfba3b8f7a1beca94f9a86c7f52b4e1c3557b49e40c4d411d041372911d385dcf7a0e889a0ef843020a1f56a66a7e64b2cdb42a68b2b28c28cfe8b6ee631ee40beb36150985cc1503df77f8592510540a27849196e685d10ac2cf6ba31328987947d48e929cdc2114a2122e66b9d5c2ff3ef0733ecf0f335b679d19133c63b24ea78d94cef8b88e5a5c4b9dbcc5a265103f6c29591f081e14144a837723d50c12b8605874ceaa2942fbd87ab7743f7c3b407a1eb05a457f2ee79be0a583354008904514cdf8fe8f37a402a118cb88de66bf19b84bb67ca913da7f47b8ebd6881a0fc99fdff6b47ea8c275bb419a3a303583f29f83fd43f4ce54eaf3a3abd511e518e2d11817a9a29ef40116218c9f786efff57f490549169b5cded032728cedd1f2b7beec15e2f2460282a6e8bb33cd5df221ef6f5df752b941cd905d8512f27070c4e1d4a5a9fd6711d84428b677e854983edbc2ea3625b1b590216ce4cb38d2577a8c2d2446e14553d2bec301618674a3252898b667fdf24e440f85e6a7709179565c96ea30618588234c4f500ec1a90ebaf9110dfa385cbfc22ce071d7200c9ea14314bde3e3b65f7aa3ae524272aa0cdca886d2b8df48b58173e54ce57cdd4cfb63e5316b6f67660771bad4bb073ed3c58fe85a36e0a3432be3b8df5c2f51f31e4043686ad018c8bc1ca617e66fd794b13f113cc22b430e9719f5e1000c5be108f08d745a1e76dc6402d85e865a79913edf838e0321160e366aee5ec7624792f7b5eb515b52d9029523e81a3c585156a5dd6bfda02193117d37d6237c890160b07744bd50d28c90e53ff407c478d7a02a81872d2da8f96aaa2592027888584a8e6a842654c1e6370cd9c4ee7767264cb4b9890c5c8a93a3cc864bf3028fbe0ec4edd191b85a8a735d13cabb3efaa44c6ae4e78bc0262d1b286e7b3f4b609425bb5d5c62ea72de45d9d1aa0ab1a56c2e73f46186b0ca920ebddbf6bb079c18dc83ae0d02eee183950b493b0b4aec8a8f1660a1ec2545e4b6536aecf553836df462390c243f1388b7b947faa44e04c314d611d55c4b2887219f8149c8980e21db30ed0250666b5be92bffffefa8c7ec4f2e81a8e15634aef2b614a9853f4962a39df4ad6a818eaafa779a7431eef0b87789d4304023588571f785a8dda58927339bf8c116da4f9cb37802b7be6d9cc6b210a0344d64f7a801f219c9cfad35ae5f843b3793d4f0a37d64a33d1b970a851ca5ea5b68f7fc3158e060107cb1da89570f84ac1d8b70951c890d4a79cd974572059a8a2115e9c1e32f0a8c2475c4759fe4dc8715fb7745c679da38074ea94018c4098df5fe698886296b240f5c7a525bce6bc198ce08d792b67ecffc92cc5a266830024bffe71119d9b2bb564cae730f8080bf7a069426a2c92e29fb156ca6bb026fdf3a34abd360f2c3c13974ed31910bd9eac28037da051d912541faf4847e77d774b8d449a6c582e4531e49f3df8c11d8a9059fb678f8e3b47bd18c821a9f23cc56ede4a30daac014aaf4b7e2880d55374a0ca11d814e251875df2af3053abac4445910545bb9171fa941e506b03db95b443bbbf5562607c673640d5a1bc4c8c0b1fa257ff8ac2176cb38c20adb8fad646aa26dbb1d86a76dcbcb6d4807dbb57942433063390cbed6ff4a9da388f43238b560040b4d13aad2da1670048fef4675492af2b337daafb58d6523b62af4dd497f50d8a80088aeefa338687947320d81a8a4d9185980f67d7a568ba768d297a595456c1bfdc9dd5cf1a314089781df108b122d224236913b88a763463f8a11fb70b7721cc51eca8cc1fd19f2c94039ff476ed5694844b7725ccf1c9abb24efcd025c4bc67f28dc730e234b1c755160f1717b22292359241756b448a710a7da0acf93e0feb9085a79cc3608748bd043245ad28c1d8b015fcac48a96a1b7dc447e6ec0d02c70041525959216d21e439e4e4fa7277b056345474ba2ecd0466801d188539f8fc6d6bcfbb8057c9959043803caed04ce50e08e05e345770bf513f6ae09fb1eb73eb001cfeada0dbb83c2635fc73e463a27e7d6ce9656ce83ea762a21badb06834acf9f3ae89999b16b857f563717724e10b1370403a94934f5a834df97fa1590dc033a18e406eea5bd38db0eea85a81fd03c519413d229b630bde0bbd0ef62b70c253bf660f6adfa3a0d3a1862f107e0b7754c12df5a00e1bd322862da0a7adfdb9dfe395cd219d3fcfc76500901997067544f2be16b7545f7e7ffdaf9ce8484ed636c1b41fa5083c1d4c6b9dd841cad4df21310474bc84f539f7f871d34a1201fe7f2aa535c8608d243665aff01c45ca9ac8d232aeac29f358c6094f525b129201dedf511ca9220844a29411f24fb2664fc91f1c0caa8656f9f308208a55b1ac56710f05f291b7c3b7fe058aedcf6308f635b4ed6160ccf7b177c3bf0a822ad2c680fb1a73fbbcafd43caaea9ce70fbdfa925aebcefb17d1bc3fc9c305906a54ede36e36a19853a4acb1c7c41f6dbab3d55f5838713f800fc59377cc928bdb7f0502f81d7e36ea5d5f8aff7c9b18078b350e0bd3d1dc33504b5c1fa9074315a2197b642fc530c58648a0e617ee2645bc1ec134c5f55f59382d18d97950bd12f8c7b993abc9a9286e8656ba861726d2dac9b778106cdce69e4d014a33bfa68fb70ee791a820d6a7739dc02e666c89e75a5d527d2cd09ce34fb491c08aad7bda9c2d68021f6f07f30c4ebae177d2c526ab04f1c9091406e90a87098ecaa377e9fdf2d318c32d0bc7b8ea086ffce7d8690578becdbebdd009d4abbab44769cf1135e17a6598906e6601a77590a3785e300051f24fe6a42bc729dd1faa2504e59bcdb826f060888aac51ef94d8b85eaa397dc66921da93eddbde05bdae21ac64aa4e1a45a31610f330dcfb38c55d387d7ffb72e3157468ebda82433688320519e7b2cab14c58652c1bbce19348babdbaa3d8dca872993c2d45b98c683d0b3a3b976d731e58422aed85b31fa0855a77443110cf5766b057cfbd20f1c6a28046ef549c3054f2304be89f98e029878fba481cfadb780ce8315f75bb969f070baf048cebf266544eba6cff2577143a1586f6873fceb0924e4b52d121e6d1f881288b5edeed3d613508aec866afcc4decee179d5983389c0ab3f3436291a286f8f05ed08df15a297074c09aea1778b6b11c69083bd003dfb8a6601ff335e7b4d70f5fd7e74fb29cdb5bcaa38fff0a7b05d8e0e712d625d7ee86e98b4f66962df50ec7a18356135b3bf03e2d289a71d0b7d20a62829271a54ee88c71c107619821b6da21068c27cfc5e030c1785548d1f0df6471b375b2d80e4d27c144157263156de0da9cd4b7585e76bbfc3a8be2ec219f2581e4d5d16c07636012b5c81c113c1b20f481414d3c5eb603f7a29690c1d6b768a05068114d123844f60b43a96e9e7526331b733be90e6218e4211472954e4a5fbee6c0b25a744c1201ee0c8946b1b6c1c1852f935b9cf0cb6c2dcd67b71acb5a690f0b1306c5c0a38bf5010e8a85118cd147005dde8fb410f0e21dfcf280ef7a971ce0b333673a8557afc31f4a6dcc3a90f80f187c6549a497e646c18706380ff902ed44fd4dcca5fbf8d3c1980b4b3d337c24bd3b3c7c7816bfbdbe6855e5ddddfee64e673e971267fe5fedcf98d89f92177041c79b4cea95e89a130f7e9c9410551de0fb381027ee31e4ba8e54bdeeb36a59f9ac358ce9307f7736bf4ced9383f3d6bf5e1f7ee661fd4a11901458f657703ebaf7941cb8705becc1c8740331dafc7b2473260e1ca7ab10c1d141354e490d4b10370da65f2021792f7539ba466ec93000038115c3e56cf9747bc5b1661c528efe6618f61c3e44cc4f3ceb76534ffc6e4940545826068bfa2f4c21706a1c42125ff05de5125e12b0ff7d386ef8dd5067e11a67f728ebdbc6c55a4447b8b7a53de530b5235e2a32b28fcb5b08ace20e554b31272310dc1128194a4fc935a38fca5be95ce9210f8fb83354aa25da447036a111b812e350750eb7018017e287afb7af66a44cf57e4c83e725f2b27ec5c5684aa9b74ed358040b055adc58ce68d1ee7cc1f4b37f22ecaf59ae6ef26804062a6d61176174d6ffd2378cb2d26393b0a6e27b2679122ee37ce1b43f9c85d9fc1e3026ba258cfd2c6e95b70aca297a9e8102a6e0ac396ef03d1ade8245d8456cc73a07a263eb53dd5fdcf17877f6425112abbe3578fcd6a7728cc9caaa6022ceefb38c2dc6619f9ebb80ad20e4fc8dc6ebefa13263e31f6b091c4040a261ef57ca24b9a3b25e2f7c28bb83cab5093c87cf35eb0865d5332d9661f6f2032df950732cecfa7292f9f45f4c05ce3b2cb1debaa7d10045e22b6baa2aeb8c54362c75f75dd3cb3f3f6fbaa0ad0e6cc744e5cb14445c5acb8d47be17c5ba34672e45f56cf475d5ed2d506a177fae96ac7c5f0f530132cb5326433e2dabeab280beea94036b6022a2cdd7afb7cd1b393db25baf38d91f8dbfa7eb9a05e3d7f303f75a8378e04bf548fd48fb6c5442a6c232b5da6bac53ea4088a0aebd9d6165071f18dd75fb7a45d5f57e73284a25f1ab52fe7c6a26caba61cc576344674c3192db9eed8469119f101eb0d31372dee449904685a1643454534540e4628f76b68c94d0df0adb4acdb5d13ddcc76d248897ad002f53717627c0548ca5eb89c05c849a7733cb3a2eda115988afa0cc9c095510d64bee5e59aa4405920403af736ce181a152ae65f605df9a40d5e209b38b7253867159546cbd2acfa67fcc9aa7927b6e2a3788fcea392147738f30d6aaf9e352cf6175555eb8e139d3ae5fc3f5254b7332d40281591a0cb91a79b8474f0b79792e62563d2d414e589a4a946e16e3cf1112a2191131f0fc1067894e57dc8c1b9a7e24faec3968d469a3aab91c46e57cd7c4b64159f5610725bbbe7e785c9c9d0bc3cc34a2fcf876a5b5d33754bbca8509ff8e56394ce5f693be378f156fc068c8c1dac7a322e3005898faa6eb81438664b0ba34b6e2e4877a87a9ddb8f4ba0bef2efd1c8ad138b3f83e7f9715765b24a008af404f102c959eec070ae1c8823f381d205acd76b20780d67fca119d462efbbd99e24b9225cc3062b89079ee303eab241eb1342390ba8ed1031271cc140dd54a4b7048a7394c93e8db74c5e6f021ee465563f911554d0f45b24315bc661c761fc12d41f04f00158f05e2ef5240338cc87b5094b6df83fa96f164e5d11f549755748a56c8ede297e8e43ad42429d4f885e3a114acc4bccd6c78a13f28bc55eed261914e270543f9c84c5886e02591e88f5f2138646e60a5a97023d1bc5b63f7ce97e6c190c5fb13a051dc38c6a3fe6cc3e3d7af0eb281b464d1c4734d7b6bb779fccf070fd9db9bd5742495cc0cc769bde270f4ed01a3664b33aab9001d61ceb14d00c67f971925aa636a834dc47fdc6c6172964b33ce9b87c82b7dadc93e158d1f39b3ad43b08fbd00259728c89accafb6c798764cd9d9340face35fc62fd4f1872a5929bc48d554c290998f59da077f1795f94ff0602b5d59475f7b4798391c5753c7b5f306bf35af0448324c72fc2a434438693b5fac974cded9918007a1ddd7520eb93879d538ba729d31bd5584d4e8d85e0e29b64073dd77d101dcf42390c790961b6829d01ec31959511393055205f1143c5990dbd9a4181f3b741778f6ed0c54137d035471561f04d27d3197dffb1cfc4c1f63cad5fa18a53c9e933b307e395762236985d0ca8a6ebdb56bb7dd13ca9b379eafa346b1a83002f2c6074a8011c12e5a36474e614daf8cb7c3b3e87e56d629223f3a2c5b3faa097d8b5c31c175fc0fc8184c732ac296811ba7fa37294962f36bbf19e51826916a814953ee560d86ed3b202e8f95d4ea0bd7a239ef79fc91e5beee60d56a72c1840fa626c4cb6aa73e2c9539bb469b6ddd5717f82260d3cb92444384d64cc47bc78b6269cf255a5ff2e3c1651f1cd8a024668f4a393d89652e530e3ed8999c3a119a91149530463261b9259aa65cd2ddbf2e71691a2bef12e5f4d42b142c9e313dd25a48d6becbff1a405f9827c56026af54436a2769472083c0592aca3a607dd254307a549bb3b2c2e2280e562665d9e700acd3c9131fa8f6f3cfd1b03b9ad96e30cc35714b995eb922a072eca674547fd9ae0c63589e58165f69cd1cb705ff559bd29e840d1272f533e479a56dd1ddbab1b54a191a295758d4a478b8f2a9186014f56c723116d91762bd894750c3389e97bcd6bad7c63a5d5ab8565aa750f45764ae3219eb6f3678ba0bb0a6c7ae0c65eebbccfad63256647a9a9856e9a1e14f6679a0548d388a2ceebb62a80d76be973a5ca64a888768bc750da62c69741cfff1216613c711de0c1428ba4b23e48b69bf087916f100d76392d99c58d4d3401bfbd06798b8362e6584d9c8dad1714abc35f12e2267367da717fcf67fbab1b5858dd3a83ac87843767d504783cd671dfc488543cd20a65b8dc1e36008b9965cb1bf6ff98518f2e7689170c8662ba1e9f742c52e8e6bd914729748d321b775d1bd9aae30f228db964788de388709d9deafe1f87668231613446c7c390ac9f186764ae80865dbfb4ffb1720946f5acb3ebdbe79ba312544e98b4d6da7d2ed56eb5094679c541a5a49b1a77c97d472c2b4adaf604c8ae76049d3d7013c3acdb4f31cb4fe6ff044b022ad61221e676fbb7044e0da8f78ed9bee7763255550bfd3fe2a2ac9787a89388600f26362151afaf29a737a4315e061e56992c3e37500ca7d9c50db868c5a412ed4a5563959c11706575970c69f08bc9e36bc6f6dafc88ded1230b18f371dc2b2f8250c5b54ef931dbce48a9962987f61ac4b6bd5ae7ee8270e0f947fee12af840ed170f4d5ea2fccad6b00b485311cc3ba5d97265b798d1a2a7fe3b38f4c3a66cae1706908f0ebf54bdc52ef69c9043c27b04d55015aceda6c02aff5c4beb58e09b1e680636fa6cea9f2beb315873948d677f70dc8623b70bd547c3cdee20fa7918510c4a38548dab0b34f2368988f1382ee262820cfab225b52c260374897690361a0da59ef2ee9943b8b1c282c1ecb2e6a0beaf91b7a53aa5d9032afca5f91b7e839634d404c7c275ede2a00d89da54f61a96d76b96de7eddfd9b49e008eb02d84b61eedd468245dd5042f57b6b0e1a9e6c77963427330e672f8c3cfaede0ba304d6563941fecf0665ca03182bac106029bb88f0df2389b51c5b2611f70d16ca71384eef57d94820daca2fd4960d834ef17c58e408c6f6557f3b19ed6386d5b1761791beb079b7b2ce55e72bbbc3e099cbd788700aa595b4410075f37bccf4644cce8c9c1446c9e8869a1b0bddcf16a01e8c242aa6c5833f48a1536e44a80840c69fb0c935722d0efc96cfbd6ac94fc8885cf906a42dc21a5eb545dd8360542da910a2127c1233624dc4f85a32031298b5fc51af8961f1fba43c50e55f5c7b78808a0caf4c9d67ec93bce676e6067a9dfda25bd3765cc4f76330879157c53c996f2825a8cc2573e6ceba830614c294c417989011aa184acad6b5ce32d57a6d8d6a50b3229168a1ffb9f3a28f800f86d8af0edd6ff96923648e686432b4b73f7f781ca6379c3d98df743394b4845ffb787974d248fc18cebb91a1910fc669d9c6470a8ab4bdb87bc9b4b643c4415989a08f631d342c3c518613f10d6baea35d024a3527c28abba55c3652949d96f303254b41fbf69ecd4f42d1921ffe0b6d8ffe041f9d9832fd1bb128f866122c5f4ddd685993361c10e44070b3fdae6e5abbe79ad00901645b3ac6ee1915d3a1c9d6c05ef0987039d7c63b7144fb459e27e7ae6eb48501bf4cac9d2086cd3736a122868db998ae1f2beacbb99540ae583f11227d445a2648c90c3b8a73523acc68dbd6d143202e57ccd2e60fc1f6b1ecb6b13184ba6884654be5af6de93e8d0ec1ab1728f100cc371a0c76dca42be81599a1019509f59d6fa0984a244e90d060f3b0252c0fe3f07402060a6d7a5c12c171f7ab2ddc86f691cf8f38debf451a97038b327150be6fdd0e8d4de1f812bc177c86a90e3a01de46ef585bb4d951e61c7e151ba5bed54693d9a6b90c8cdb18f9a64d132c024c65f101affce3ab2672fb76d5149c1d475536587532348bcbfc83e0a339f6f954e9414725bde6cdfc74e095333263f3bca47a178457a9860a7dbc3df6481908fc8bc40c36f6c64832cb4b318bd330d71cc97e8a375a6cb02e677dd2d6898cb3ffd6f4d4e986f152ae5aa9927738ea245c360a18cfb1149c75a4ce6b49bd1caaa040b017f01633f36277ce90145029efab76df8d0dc04719313893e0eb3d3e469ba8a6072bffabaee63308637b1ead4b38ca2c71dd2bd342d838d5bcd81ed27913252eed360d9b2cd6bf9f870e13a164e41fec0bbaa980281095f511b56bfc78b0bea0bae55118c2ab33472949783bec863e17b51d892fd371a878b88e58293601d716faf5193917210045b1ca7c3a125bddf9103cca086e3b8799f103622ece074b65a5ffab2ed2e4acc958277493c78aadbbcac7563c7d5496bd1163108b56b7d2081146c189faf86ffbdc522b9f88f633105ddaceb45c23508a573ac5f3c35c08a284deb4633a011a5e9cb1c8ffc055acff7c35b5fa258f1ec15e386c98617de2087cf81606a86ddb1623a85bbccae4c9fd34f7cead8b93e793e8a2c74f67a87dd228dc9c56ad6e6bfa1bc6de831f02aaf05fcc28284eec81ec28df6fbbd9ed61c5861e4000f11f166c874e86279af61c907fb0c113558a872f735019cd0a64a7c21956867f3ccee27ed62452815201699b7f77ea8d136b9e620e2514c79c9436cb8cb42d62fb52a63ee7d8a92e98ba5b02c4ebedb70480539bc9aa28bb1db330c8a53daf42ab2c4542e7ff8a279644b49f6555f68e9a8a87f45f8d1831eba9b9b8174f8ac8b9e97b8a4d476765fe3853777107af4e97531edb61446e3d68692a3e6253d620241836315cba86b0f2792fc89a9fee2d2cad6855d2f3d7211dc9ec999147f05a7098cf9d836fa08d7f421800a72dcca75323b5770fafe40c644b4ad7862f64a48908644f717eded47502b1dac00e763c0342aca67f874da740e85a51a25497fd686151656897275f197b070d8e1ddeff0ce99476cf5fbf2e82c95b2fe4523b65823ae152303f1dd1c2b56edceb2a87b07165671e373618f6d257e664b292f2744499c9f2a9d05b42a0cacb97c86ad9185445bfe1edaa984244e2a4971bb4b30f533939a478cd2e3e366edcf2e699ca397253bcc4dad0135a1de14748745e1e384409aa9a93d21118f7f53153ad8ed904d65e9e18fd01f584dd4348baa9fc9b70ea597e87fa28fbb5fc9317b68569cefd01813c0d0d57a85038445f8f47427cd17c6fb049a5080e43a2fdc55ebb28fa2bcfbead2515b5ed79b4a1538af321047bc232bb3a4d76d8a27c48dd75027bad819cce8565eecb54ea8e28b0f153c9d48931550fd5088764d1e8ccf3208e4c70607e7277f96c8070cebb1bc30e51b9b6abb71451d93017cef8e778db963e6026d28569341ec5b4743c9cadf81638e5500006a7e2d38773540c1296285bc073e4b3f2d4c72324cb4cdf44b7b1fd37a5748c6cc96c78091b052af71eab32dca328329f10e3a8d1474736a3d403b15a5a1d172ef4d709a421935d51323942283a784b1f16a3cb04efa832fb0f67045044bdc9475a4039bb1ef02ef223fdb8ee4bb5f5f221a9616dd3334956ead9247c9a003a21adf0420c555dd9b24ee64aeb130b7e5d38c9147340db7191aca87324a2edbca7e4f29ba41a839ed87b663839094e2b107537b04d07e5bbb03448fed2e67ff04458c97567fe9a159b5d16d7ecc175192b723d7d5d964b9bb940bdd104d72e3ba23a0fab79a0f40b113d74211fecb1edf2e7d5743f13beb3b3c1bcf21b02ce0ad8d28818356093b0fbcea286bf7b89571a4cd455c5916522743e26849d620116033015e0ea2329a1bc86997baf1fd743bb657d93b0051d6dea510acb7e5383e45740700dbd3199b15763dab3b8a2f8ee5bd5cafb04b7fdd93884830d9b06c9f253dbd77e91bcb6a0500a101c28a8f13dda7c6f507a1965c6007955923921bf6727598ad5b291be37cc010f6f2408ea09de94bf700b95f6879aa97692e5d95edf35ec5ee7fa03d2051859ecd6ccddb8352b4823ad2954cba611f03ad5b533e01c7d3dbb2c3b91cac0995b1b0f5a1fe2cf6296d8947148b803c2c002de22d796d0cfd144e55bdbbd52d0e054fad9238a5245755c461db78009d06aa07ce6cfa216b1df2de2d05d77d51eaefe200f2f47411406d3206f652b0011faa78f0c9b5619a02c5507a9c311e983c25b0be7eecacaecca1f282f4d6eed6d1d0d37320c8dea5ff3cc44b64d5e5253f3f6cb49a980ad0a9947d70db196fca2805ce707d146acde346b7ccba1d2b8fe9b812d53debfecaea81dadfe957dfc74625ab2f0d82589f6e020a410149235829318a92db938b2e542f6e68e43dadeedd051fc645d6b0cc8aeb6c4c4d6defbf0d9db61c44cb095168fe0dd0f71197d4540352aa6b543380edf6ec28d7e7618d1fc85f5cb02378ad10dc2b0b040f90557def854d2c1cd9137329cad773bc2dbc5c2561a0ced2de7a7d1f2c0a4ddcf0b3b0b15dce4580551889972fa2dd5bae3d52c524c182a55ac4ed127e17e2590fba099d1c218e06e83d07ff2c35dc2ed8352128c8cdd23ec075714af728fa03868ce4d642a45957e6eaf264bcf318aaf43dcf039fc6a318ebef244ace864fc8fb5497bd5672f2c3f2930990203152da4a555fb11b598c9e892a3dd392ac1267e034d2cbdbb70d7e796db37c184a10d966a0ab9e5d2a5a0e052d91034e9a6ea9330bd9b3754500ddbab7c5bb0de7aa493f892364821a18c8d3f5ff03470390f9007aeefb76c53ef798730f1a8ff0e7f9c78a32f9e36a8b4c5599c34b632854c5a4eb6ecd428ae4088983817991c8f971e67923fac5924118fe107e0391b4ab40667343ba0e664b907ee02041c4b0b209cc23af8e56fb36480204bd98e2630809cea4447f25dd5d4765eae14d6881bd5f8068c54b524b0a1bc07be5eb6a4c632f3433aa2478ed3a6622b3cab37025f6883a9e6e1939506152bb64d6d6f8d3e0e957ea1ea3d213c35774a2451710a4f65a652935208f3b614a7b3841ce2ca8c9af1d59d880489b28cef53b839fadeed295347e2b4423bdc05795172199fe75d994c6efea7d4efc1cb490218d30772a5dd9345fbbc2b80cfafd54a40360e3419851bd94ce0fd74470b20a5e2a273702ddcecab4253d0375c44d3fab4915cc0ad2c993f1fe69086d4869865339b91f8098cd2a6a49c682a968f7438df646df5cd23e0381a47dc57a63fcc074559088678bdfa768ffa358759d89de5cd6918a58ba413befb55b755251345ad28a3f9b56ffca98aab02b8264d76956018bbcc24209ed4ed91da15b58ec474808edbe11707799d7597558a277731828447bc279e648b4e6d4653b0613e44e3ebb9e0cd12db8fb2a4102fe0b0e82b43f15b19bf2e3af14532db575c6095bbc2a57f727c241bab022fe924a54d3887a0f143c2026f7590d5d9e06af004e3afa4f27edfe7a9d2230ff4da9a0d882c20c4abbef9f01a13b11153d3b92cf063922dd12a1a290f7844f79be3cbc55687bf3d8e7647d8f329320639f4c0d333ead1ff70d025394aacb01a265d226f9953ccc6fee5114c3e0b70e760a8b91325f85ee063a3d4c14225ba594513548503858769b11bcc28e59214c6597ebec246e079d98789007a430d9771b22c9317a3374ca84eef78688052c30517435c125cece0916acd7a11dee14eba98752b9d4db12e45d2782898a15f7de7c3bd5ed00994e7e8f51694a56f5e6f47e0ae2142a152a2189344a327adca2b37404e6290802f1e2964a515faee73434e19f46f735227b3026aac174e023df50444049b88bf6809a037fbf2a8cb2c1bdb69f5dbb26358431fb48ebfad03c07da09325a439f80f4184d9baa655459c0cd07fd9b88dec15a99bf2cff1e7717c8ca1be80bc9fb63cde7cab8ec2f7d49c66ba78af10bf4c055084a293a971b23a82072fecd9fc6ead2c68f7639f68280cafbf95c4e8d33d676407115ad16d96c5faff54c706e4825ddcd487ddac379c6a08b44bf8a38fd6b29638b08f995685979ad0f617cfd886d7c40cf0ed0d40d7aaacf034e6d099b2ea5a85b5c9d75c61992490fa7c38268e91ab9d7c49c63821084713b31deb802919bc7716a0e1d352a032a3771620e0dc67487cc219eb5f453ee7de47cb27dbbad6a16e3aacd77b6a57529d0f40e1867b576a5b1eca01c483bc86da70e1b1bb203846493003441fdf8e49099e8a8a9938ca75b2a01aad244ab29461f57ca7e02c3ed65f1f2f0c3d0c7d5f5c4a4f1866a544072bf5f234213365690c1a76d675132d1a79dea610e32b4be2a1d11941d0deac017092ea25445aba80ad836e78efeeb8c25d81325f3a9d5cd5fc0ae09c4c7ce57ff225e8cf506c3562db9901c7a0836fad8d36d9191c6c2be327a88687518d3f48eef3816df8f49538e01e8504333d17dcaca450248327ed2b19367be35e24be7f103988f3d2efe9e92cc27e3a245af9ae4d8cfc54e915511bb95560bc356c1c2b315ddad7d9b36a2816cfaf72e4fba57a75f1f150c2c2083be1dc4d700a383f345252227ebbb71a535cb931e10696479ac475abafe8ea8da45dceaa174fa53645112fc2836cb956cce2af4d4940e73b4320eef0a541f11ff9572a787f7912b7caffba01441b679239ad2bb45f4da6a3d2bc5de697b21a7b14b1840db5bdff9a6699f6051a45f6182b72040f0a0611c5d191e57d52864ffb6788368dbd81f766e41c85540e20376d52d8f9e29959fae6dcb59919834dad99cbfe7f7b0491880af066a51eec0bd1c9bbe0ee656cb7a6b101b0029b36d393f45ee53490cc91a8717af7635180dac28aee9ca81b78ebc06c26dc4cc0034966516d2b23a87b1fec4b37ea90c47eb40626bc06bc49c3d6e189f928a60ce049d1c0e9ae5ab7836c363795385a0cfbfd3ed2efbd8539356e8d3fa0d7fc94fdc1aec50b71f7de6302f8d94240b8a5acae0597f4cab69b7002f8b2e4a81c77d685f95389cf8fb6353051e09f5907b168b695fd98cdb883733f0c8728bce578f54dfe7d5c60c0d5eb3536e2e35d9781c2b124d02873e9937be2c3e6d3472a88ed9b34d732742a7a13cdddf097e10b8f1144ac8ec5b130fe2c6ac1998c88148b039c2e3b1b4bcf7b2ed551cb1d033ed57356cce03f52529b3a3ac8edb5e0ae220cefcc52f876bd82f8d0e1fe831fa5456a8232e4b762ca631bce9ee8bd57d5c556fe7dcff65f1d335eec6d0ab9cd4f6f76284c6b7ba5e2ef857efac58d09fb280b57de18706b1bda2bf9a3154f3402d6f866a4532f73d43ccdc6756649ea67227f68bfcb4fdffc013eed78ad902cb1e8179e9a6abcde8c7de826b85394a3730ae8d5176a7e61cfefd64ba11a70a21a190d0b9b20b80f3dc4f54b0f6f88dd3dc6d63a798cd9a3d829a8bb64411a13a60be788036fdc16d72b0dab9e5e380c43bf45331419b7bbf15ade97755a5a1fa7c6e8514f949aed872d2108358cfbdaf85285cbf3c5e6bdc817dbb5c090b3f7d0324d1155ab39340bcb4b990db7e02c6572b17504450da0cbf4712f0abeb4dbda80c7d2144a0c3b1abadbfec75a901c3bbe73eb111ace87162688bafe1a6eda25a00b8598ba5e12fc3f94ee7891834e3f9e63b5898d5dc37bb29291b60120d9fb5114f52577a6c575e7ba47794ce7607b3ecfb0314d00eac68b7ec2a7f83d8d998ec06b1ed8da510b3f66db306c4bdf89ab532b720f5b77fc0d5c5e329a5a47199c5cc5ed53ed4b2e8ad44990f36dfcdef90740d0a90c034a9ae66af7d50dbda78b740ce9ceaf6a95cc7d7c97eee5ee111c123f61c5e03f59784ca51253210d21099f2a98035f5abe014a210e3ff6aac775276dda425ec7bff5e99f76630d8594b04965c1ed31f4b114788f59807b43fd85137385f5fdd32a2677fe5677b152e7304ed65e2fe05e4c6231f44bcc9d491d31c7d9c3b7ea2d2b35335c071aad397ce271fb8dad72e115a400f5f353c72aa5ce8809ac4c4f2c173a02eefa5b13228f2c1c4625e41abdf22af94f715f4cd2715c3cca2003337536e584c95199261c4ed60c01ee607e0c3e2f682829b6a19b0d7fa44a62608cb56c408d5092174e63e62c59e019dadbc499cf87566b9cc850d8ef3ce677cab163c104db63f251ad9e1697a467a9209f4ca9ab063ae5c5e1da628743a53b59a4a42b83ca9f8c0f1ad28f0b2f66ba4dd291ad0824ba5be2641ec5863ece6d0eb8a3e7e083b773c3d761b1b755e4c5e9f0959103443ee2e20e28fa8d99a36aef33ab69c6c25e635206132c0e94ae95f75792cc7115d6fe875fad458723d6b50420814349494a927948b65a18dac985bdcf96481faf3e597f57d479443348435fc30a5d49146d17801b33a043a29c31ce22099fe6cc5503fda032e361bb43f138b1f05ec7c15d8cd56d9bc1cdd8f615105412a3e22ce7a42e63d79aac57d0a3bf65f6c9f0c0e3046645ab00cc726f5233e884179e675dba35cd08cd934bef944c6567a792dc9ff123067808df100720cd881095ca0fff1f7dc09c05282d8164bd985cd672bbeaa8128734aa76c6de57e933b379247ad0140678fabf66ab0699d0f986f7d025d527cc028e2618c86a64f99c4dba9143bca85a4112b39e3c1d533bcbd51fda179cf6ef51acf55021446e146f3a36704823d16d2c07c0d7d8fa4c4f8862af905cc3d12ae53ab523213b42cc8cfa9cd03b49f0785c95f6e3819e8ceebce2a892972520faccf8ecf24ebb6da77970c288b34cfd07ac417cf0c099cadf3d2e7f317ce47b736f15c59431a9df7694a66d5b96ea9a76c3a6a36b63ceaca7267b293d0165148af37023095b67c40fe2330e8326871eb4c17ca4a1b808273bb8be6906f6ce875871c441eebfebe009a4f9c8cebd6bc6b11160ac995e469b38f1c9070bfae7840b13b062cc5acd542d6e2a4f1978779b2bbbae8935f16b3bed2a4c3bcff99de0149c86a59b75300690635256968dd486e33652f272dc12c09f4703a2297270045d47a2eed875c34ba6ce392d5ad8f4c1a1d8ee9f180634743564d5600fd5b980488ba92c596259614bad527ee59086814ea97df44198180942e75df6d2d91bdc576e74c15214ab89a3e7fc58c54c6f137f1710fd96b2f0d87d67715b410b79b1db6215f60eeb7076bae3f08c0007c688d5adb0428a9168985e50db5f50b991614d22fb855b79cb2f117eab63f71a19046c2646d20eacad40fbce41ddf643611491989d87a1aea6040939bb1cb1c9534ea636c8d981d4939686ce10b68b0acd946dd4b5e24aaa857856f9d81900aa3b59e97d359f7ab6fa2d2b6d04fe04bc34fe83f8e82e13c34c5544bded51e2ef2425802ce8c43709449ac17036fa16952ed4ab31aebae0d3760454c7d31465b239e423319ede5d81f0ff772b18de08a0c7028724032aa4020c32c4932b1264472e2a454203f8c008ba01c1687eb77aac0ac795cf819bdb9507c6cd80e025809d6ed00f322eb57d6a01e1825d86139ede444a54740c73d2f7660c0245e85858efa335d6f58e9ec9c6d50d308f5e86935fcb4790f60eb3b3118048154838bd9a6e7e609cf3752e297de0318dfee9d40637f697d8bc172e3395cc1b8972ed1a68d844e8d238f55a3ae4303ba80888994a80c08e6d304b401b374a4e1d651303ad3fa6d042ebdc361bd72969cbacf2270c6ddbe50e938ad0dce1339b80179066611ed558a2eeef0785db151990fea81de81b82f4f02a2bca204bafe0870ac6a34b37cfaa76585f3d2fbf11038eb7629cc73a236dc42f083fb67a722a0725572428c91803fa1b66d990deb59671938df11f46c6fcfa5458940f3b365ca3b271c26b7844ac82f429b6c16d467e7e166fcb2ffd9d00df0ddaefea42ec2ea7733640f453b7406d8d402bab74c9f5deae728ab92e27c5e224f1cb0a45a73db0611ea412f39c9222b7c88f3c7c58e7cec02ea2b972213d17a7753d791a5d40d5b9a50377282a1e9069afff2cef074938f578d0444fd5722fa8c097df0ac74f3378106e3acb08f322e2de5a78d6dbe83a6098f6b2f0672e95846298468f7513afbb06f4cdcb470d69acbfd99535ab1e611cd95334065ee7bff0b6e1e656ac082d6ef0cbd9d657a4786f685a518486252b506f6a2493db7d58726f826a9a772995a4ea500383337c97243111e50f5087a84813e2ff90af0f1ff4ff69635099df61af2b3063f7ee45f866ce58069b949d3a943bef5a7741116ff7951272671bb49c6ce53279b4fc60d70a0179568d66f5197a6328eaa59abb78ce112cd34abd9adb70760bdea35d98dca0b6ec17af1fb2496094fd7bac344d31a7b3c50395f11aa8bc09aaf8b35f63ed9a28ae7d42ab1693fed747ed2bea0606e526187fdb0952b15e91ba68b70a8d9797c5601235fd3c3c241b2b5bf2c5dfe838c4c9ebbc74ddc88f9924a15815c67d0c5007cecec578974d02fdc1601c14b7167afa289f157153ce8a5d0b41b6883509fce047a47e4600e697556c13b15a5e9f396ea5a056af335ff9b9009afb15085b4384da80b410573508024df21065ff78b7811ee6ef65362e43da499a913607fa4969ecc8fa69a689b02e8f20adb8584d0de38637b3c84fa3a4c633c4558ec837092461a2b8924af14e86fe1382662e8a9adee83c31e2dce0825193af334f84c29d034b71389e1ef9945d7dcf7b884d674a1963bb03fd5ec143b045c349253e939f82dce1991f76512e3b698c446e34997bd792a3b3ca1170d5bb8167084ba5cc0547d262a37e37f0bb36805bcd5804a011f20654f41700d766da8679e11328dd0a71a54c2ed16ba83a601d4010a86adc46107f893955dd5be483968e659f7b1b6ac5600bc00815ba1faefc514d202cd8b2527074df7289ba146aa021a6255361f8c69a0a549acd460aff39f11f2077fd7f165c71131a63570973eb38a987a80e8affc58c1d8d6d425b3dcfcf6e8635bb447e9aad02295c76032c4e5d920cfdcf6dad716e77dbd1aa0cc8eb2ba52f1735c2a17ef955483a5e665d82ac97734a4f00e3fc78c43bb688aa675555084ce4dd64f33b65cc37b4147f95561569cad93b4f121020a9193088694a284a8f585615fbd663d6bb5d13e0741cdefcd40c7c036fdede0f59e5285439ac0bbfb8220fac6232b36b3ffb43c8f625c64e135bfceedbce4547a9516e16c501e95655b71f2653719c5f6709d8747ad82e1cbd2dbd9d1f7040657bfbebcd71bbd014c444d7c0bee8d789acfbeff42e0e2cb84ad10a1fa82e29ba3da43e2447e4907cc07136266eaf36d2ff7b7edf57953fbf3d101803dde08f9a8609e91da41c4caac5e64575c3ce58f03324d762a75657a06f72d407822258f241992df5c391954669b8da484fe38fe2a4664006939923bfcd17bee92e4c02770441967e82bce9e97439be7cb8332fd9c1f7704dd030247b55d2504dd8badb13ac0ae63916d87b015e4d8245fb39853a3aa33679373c8ea92fe76c0fe193547b497e3e23540fd6bea663dc7a07e9979ee25c4f6a8b456364d4cda40eea52a4b9da0ed86c1127564f9fe6f5981f0051e3ae36a28eaa23108a7265f17dac17d1cc16ebdd7a38c262ed4a185a3759d1da1ac27c17126f702b02b3ec10b8b57a3884b053d42b3b112db598e085460973d5dcc0520a3da21d68ba1e1ae8e153611f92b049ead760ba1d94d6e349f79b2071f3dfa16ba8a2a0bb2cb60a855d7942f6be6c2f87c1c9bf2fb085d38cea17dc697170c1a096dfc48e21f3616fc3ccfdfd94f96aac6191ccb88e44f1bac2e6e01409acfe62da3cec89a3a07b549369716a2df84c42e94a60300f05d3aabdb4e7c73053276586dc5e6ca4f71b733b66f990a30fc0be6b0b840526ff716dbe2acb154af4ef3a3e8be857c9d802f8fe086d746fe4da5c42babb32249a848c742401875d6a8baf7e12426153cec4bcf4f3e5d59f21d106a4d9fd03deeb50a27886e9a782c8ea69253d38091a5516a880973150960ab7011552f0ad315988021710890f94fde7985589709bcae4dfef0efa093d0024391a14b753a87b9bb6a687e6b67e6a2d5f431e874a302ec7e3696e7cd248e33e09be7c1a88956d7dbd915fb0ef6ba08490403cfb58378f7734c62433f6046ae83c2ebeaff7b0ac6f6cf84cdea57ab709ff4153431fac853e1e0211aabbe64e7b6e59088495c5eb4b5671c256577ff7cc780816fb08d2309ef20ba1c40971f9a9a84bc1e30b28a3e83d7e345e7a8ba2f4b31eb4e7f928252fb4664a9dc7bc3472f0168362f6143f260319a2d5c0a7e1907dcf507fd08169befc9318401c26e3618b1360330b62ae6e3d021ebaf7b893ff890edcaab8fd5c49068cc64702ba237127631da88d07c2b701831adf96578338775f5cb736a51b6f731086cb3e0018bb8bb518032fef7b604a30dd51e58b68b22c640fd813e3f5addd1de50a90af3dd38808f1cd3338d6f1a73a1d7658e6be24173fea214d701001204c01a0230877ce9c8e9155ed064afb56a1c74ef0b3882a084711ca023ca98dceb7cacf74f99a8b55e6b5fd58d084cd6273f0c6312227d9b4b3d2f1ef996c412d13c61a5708bbe2ecba4a43c75dde127aea7b18fb30c4816806ea3bb10d461fa9423fbc8d47a2d3b4e866bbf2baeb1163d0cdec8c04e932ec2209a42045117b2d8c41a495ca555f2b2c73eed7092c8c3323897eae7f6b87ac094e297453c49949f8fe0ca652bcbd693bd72534b42012e7f80fcaa88e458ab95668ff2f365a95ef097ba6a0d58a50317281cd2a125d81d500e63361c9d5968e52f07fb5bd877aa0d8668885ef91a78304bd8519ecbca46f82915a6efbd4e5d76059c7af9f5864a35e6cb70ad364878b3d45d642ae421b81a512c10bf0ef3c1d584bad0790e35fa3577636ada5826a9c1056c017cb463e04e61c1e31fe5699979d2c9981a06809325ef5faf66ad6ee33bf6489fd251190643cf750a2d2d132551bb52963eefe197c0b06be51c8f4fd9a0f822f36d5a711c9449a9c7e47c66378981cece8ae57f4b0ff1c6325a630e9227ab67fdf39b59380ade87b5dd84b5ba508f5f8150e97faf97a2f67c76752d9c28b7667322676c75406d9574404aa46a7deb0a4c885af0662d4fe6396cd0bb975ac0beda85bbfb0d8ed928ca6e55a01ad345e92875fd126fe016a2ffed48b3227826318b79516ef08684a78b97ba30a02d5c23f131b7f87eeba17f588fdbfb46dd59cf2052721dd2bc2fb212410c2b2c6ef3fb9e2e8d5fb95dd7717a7d0a801407df267231a33b12ed7ac9742867ea249b9d6504225ba159ed3f5515fc87b88348436c9f783e1411e7ab34b5d1162ed7ffd6469ed5797ef281376ebb67402bb2d69ba80ee7db080624511989e0f325f04ab7d5072d08b69509001c5a760c893faec305bd4ebceeeaebc86e63ec76631ca3932db7f3938aa583fbe372776c5904ac517b1c48478ff41d0b44db50f910b4b9eacd3e81a68a8fe05921dfe7fc16367f0d3bf95519faa139052d53351813d06ae7fb608e4b3d7eebd2147c77b13bcb7a564407f236f296697b0000b5af27f3460e2927e9c70614868d11b86fc793913abe920348193bae445a0feb213430387b079aa09652362ccf4232ac12dcfc3beaa5f08b034350a4ef3bde34c2225a6cf7c880151d7a915b121853078aee0bf9c839b98408980cca61b81be99779e090b03ff1ccf7e2684fe411366f0dfeef10c654ea7c3e4e539fc0994e73d204609b49dc91e090612bf0d24faf303824697aef5e94b442590eba16186ff2eeda57e2656736e34dcd20cb43cb20bbc40c469d121bc81722a89cb8fadede8c7239ef7356905941a4911cc981ea66a41e445ded1d4df68e60622481ef42e02096d2db7ad6bdf72b1be22c4f2cc4dba0ae022bf7dca55795438fd298301b8e718e6bac9a39932f137f9ff1fd0092aa64e6efa3cc6a1ea270204d06ceae7e804bec8246d0a2aa52f570d2533c3895ccb95ad14ccff53bbb29d06224c0a2ebd521d6e59de9bef9ffce7c331400adf658dcde66dead98076a8876ec5f38395942bc6ec36bab5f77edeaecb096f60321be0f982d21cd7e443b2cf51998238ecaa23ce646b8138b51c7ff2c230ebf69f678b72fa2a688c7b9a619796e449991a07406179ca3237c910ab3d7ef78d538795f11265db56f58fbcce5366104fb58b2a199308805663b0205001862fdebca7b952a5f3d586bd1e10b7c458fa3be18f9653a3221034c2be329375498391b8428a6ef029d981d80ec6d8ca19bb4d72f31131c0681bc340f71d18149a5ece1a3d50722407c67d246ee141e51c2068cce40e2f2b13f4e21c3f7a23bfd275aea4dfdaacf4cf75c7d7dc638858061de6b6f1d6c138fe60ed0c38a52eb6e127bd2c59205a08534ab55bf303186e25669c74f930eba452ed4eb6fec3dd18a6a0908bc773c30de9af1b01b818d570ac09a3678dcd55ed07855e104ca78ca73f95eb850cc40d49236de0aeeea08439320b4b8d5c582db5c0729e8fe49c596fbde0a69538ef6f302401848356aa09cc50a953adaad9cabb228d0810ca6ef4d1dd80e1104b2d678e4040460c08fffea1a69f685e87cf673f5409d61f77d32c2a5517de7ae0b58a781e97ac2633230dc25ec059e0b76e613e411fc91172b144fca70de668d33abf9dea561ea90d4b88bf983fa9bef61e6c9daef9da824db2909e4589637605adebe2e5c87355534ebe8d34ac842e500dad0fb0aa426c3cc4e53208e8f1a5c006db01d807b4be116bfeead9a07faa9fd57b20e77875cf277978392d90c482d40db475f1bd1983eafaff18118700b729e3128a8f51e66485a702f01fba3b0b8e45d1a1d5f6b0e2984ebf47e203371ac57ee716955c2e1bb2db74c43592186e135cac60414253aa685527afe7f80c80fceb7cf55d0b4ed15061c883f10ba6f9bdb60336ee7c6c8c0571e5942255d20418023ff9b9630acf9362e74d9a88da5fb1c7b272c9b3842261d2fcb20ebf1ec8bd07ee98184037d7f799b56144e179c72e045359a9b44b4805500403ad42b36ff3c5c60cc6cc1a7b4ba07f522c4f61a6e1cbb0ec8b574de80dc3d4d99482942ecb2e8ee898bdd82f3c9f4cd68ff1e0866414ece930ba1d958869df61f87701c389b1311bbc3a555273ef178e5807a5afd3cea662840d71d8d6d89e3e8a5cbd921aab8b592cff4de1f37c2bcd57698847a3084d3a5d57d9f479374b930306db9b9ce8e7f177eb52646b507585428bd39ab8a619bad605c6bd099be18531c2d4cb9f2a756a5f5c45674363ee8d080c705d9ba56da9232b0dd237c00d714cc62e237b1d78c6188b7d5539cd6a8eeeed8d50f24d1ce48035590a4666c39862e0cd76195570249b050b8f3ecd6e332614cebe687571dee618652430a07692fd25818d86ce2a1a3b7b98992dc28e30f162182d6d7c829fdd16fb38ac2c2f74cae17ddfd158396abb690d34cf15ad3b7e9e536a4976a384f1e6bdf2a75d216b1e3cdb63f8fdc6856f024726db82265f0f59778aaccc9e19f7ba1dfedd1d0ea1724703c5f1aa959897893e1e859ebe558cf52ba0ed9fb9d006802e0b6fc7f13a281675436c2eb3ee08f7065fa2c32825917a3feba56a7c56ba7740ca62463dff44fe9d93f7b6c819e6c1a3f79607821ac04c4fe1e5a11086b4048fd3c378fd5b9e033604259f8fc84443bba097f84542a7366eb88e63007b6d57fdf7d3506ec0520450663a8f5ab091a5efc790ca243d196f8b27dc45b568d1f03dd0feef3a9c98e1c66dba82c58b3d0379a9f93a2e9013494a1d6a83e8298207ac05db78a245b3f8361f617ae52739516a2aad64caa96ee2810c090172962a3f2aa3d9542ad6baf42ac4fbdb110ff22c114fd155dc8f666390de079310eed1cad47db70bc9fc513e64bd48905718389b2172c7e9662eccd69f0b8da06ad759ee7a32ac0543a13e66cf53770af60ac8e60b4a095cb213c0f7f76ffd54367d422aa62a4b78c66711f24c4be84ad73c15e0cbe60b88e546ef7e7a10069c01e5e40c34078fb0c98fe8feb1b2cf0573b7ac8bd22c449840c37d03f9a742d4caede94c8e489f9d513ae819aa31bed9c3453b6de780d431d412dfccd97c1f287ef118a0b04209c13cc8a850a9497ed54d5a3e0011d3ef789e5bcc379f45a23c8e318866dcd0f37a5ab7f60ccb10a4cf7cf657142998fc8a2c8b3eb19c0a666e96abf10441b07e035ade38e5e8af6713eb61bc22d7492e2db18135267a460493faa34cede253b2c7c930991508a446c27b1360c83263683f396dd26a41f1ed634a0cf66590ca9e21cde8c30c8d05c0ab6c50a158aca6a9c05d1a1134019a978f0a03730e373d6009f0aaadafa9d9d0fd539485faf22e1fe68004469c7d1a70619bab5842081fbb4164abe1714b123b97138b57380f3282c7f9dbe0ee58fb6bb0806591114261385da61a087fd6c7e2cfd81cb747e27325e7beb983990df116c22ccd24a005664c0955a1e8a35b61156c054fbb73e283caaa35c1df7c34bdc5a21d8a21cb03951c3f73aff34a73d68d22060e1cbe3af0e46125bfa0430fc1637d65d13f475262b219564833b3c2bfd6c4cd9b95128918f1a5fac86168b504414a23e8a9ce6f83cc0288fd2aa12540f24a78c39c28ad9ba381fbc496557916dca30d3751dd9444d5dd123d707a35709446a654848c63f93e179f2016588f6a18658d632024f455ca3d1084a2e5ceb9ab7323f221fa801112536ece4edfb9344c198e59980c4bbf555df77162c6b22d6504aec6c18be22368122860b5c3cbee9bb1de97fb6e97c1c3262afd442c46fcff0de7b2dd4607fb483afcbeba2dc92d4c5060d11664a0805f89cbd53048589f12bb222ffc2ee9627e2eb7e6ff622ad2b8dcc789813f226ba35b7a0f08c02474505de488f212f315dc522e39c82b9dbc1db4eae65b7d455ae387328360e9c2475d856b2f9a3229ab2c250bae4a98eacdcd7eef932602bdc13114ed6441a1a213f69a4909e46bb84dee246a76590c6bd2eb36650a89c5b56cbede87f475f1a31469f085c5e902b9bb40eab9d16959d720c1f1188f7a81edac0f5f9b402bd8a21e15f6f12438c1d6723a891ca56662ea4ff2322fc1cb1f56406c51e1b2d9296f66986f458279c19e05270e3930b8ffdaebcd9f3c7c1c5302531c25305194d42fda96e8a5e285e91dd3a528d15ad64789daaace78fff8102a01e4bdbba01c02332896bd6f0f5e2ac56012c81c188f3fad76ab3060386e4acaee1d570be920b0761ba72d447811bfe6a54d0a643206a350bbe96d4a82ca43ac3dbcb8f151b1ae2e4d065f9b0ea16d774c5084e6707690cbe5055373c5621a4e1282ced7e708866a66e6070a41afe10f0f399a9d1e1731353d9d51ff03da864efee27e16a464c8ae56db77dc75401fcabe50a72d6efa3abb59996f1b4688faa92cde5c959b4b9eaff27966e5ccc3a7ceead441d0868118d7b872105bd8defb291daaef3e20b060ef1c924caaf659a702f2c376e7a4da4cab4d41d3ea606fb290e02dd429bf4809bdaade42c88b534f8d1382b778facf3e7909d92afef53a862a61e85c77511361af0a5f39073f7fb00241cc198eb9552c9ee0b75114946d4dd7d321f226b550726fed900f1afd5f361b729251a1faf430385c40fa7bf8b0297d8d0a6798fe629100b144246bb7f4dde3c669f92021d748e7c3e28bcb599c2fdf6ba0e689432a6ee5cb87ec270bd4afeed592c98909f97d35af6638acf944040933b487de9c1860a74aa21a70e2cbbfc18897dfba1baa8e6e93a7401ad496dbf61374bf752e8d1ae4521b399238ba0552fc05946a9a6ee37714b4868bdd055fe813feaa928b1ca8956276e1d592fb960ee0b03f95f14019c6879365136306140a05b9d77d35172a3e9ddd4899988f143f4dd4bc3f2a07316314a0f15ed8c642cb48daf49e6f9cf72938c3b1828384690139b07cc0d5479b9af380033ba0694e6847003d6e505fe8c0aad167808016680db6eb792c49b7670b125025f7c6e010f497a110889c0aea794ee6805b167c0ad383e18a13a00fb901da4620bc0aa8ecd44bcc11c735ff39ef8fedbf532a4a493a435b4469dbcc909f9690d9dd15a4ffefbbdca9922bcf23de95dbc366e30a30ea4a8d75d892567f1ede00e8555e03f001129ede5b95b3ef757733e9e0fcb4fc68d3f0346ad35b839cd7bae83f8a0c9f5128111708bafb4883275ea1e3d5e35a8df736e3a035913504cafdd3d1f9b7678f8d00a8d5ad49714c11ee2393a88eedc9abd4913bfe147daede42880ad0fadeb055fda4f61bbd5f9647cc52d808da5ac2fcabfc9c37b3af51cdcc52e045a871f4619a5e0e38695dc6cd3fb1133c66cc7c44fafd7dae392d81a8a07cc21ec592437945555c16813fe684b5f4a0be79844c2722bd6812325a0cfd45194e8ee212bad82e4da7e04418ab882ca7e6471895ed27ad47c31fffa40e5b7b9ad568e79140962166325d2dc73bf0e729c3e26eb42c4196e3a58866576722e0e471e16933884497a86d4a9c41b5c047f5bdbfd4e87a6b490974e05877ee1cfee2ca08475160694ae29b4540be41a46af1ca4ff8a8a9a573483c3922d828d20db75d3a926f8bb920a3e911d69adbd722255986db1cef5e9330c211d9eab083dc93ea6b52b77aaa6db1671fc707d7c1ae4e9bbc38247b5faf62694595f6523cb161409fe3a693f457c2ef63faacc97d15b7caef5a3a70b8e0d1fa4f69c3469efc1eb50749460820c0c3644c43a924e4e40269f960cbad043abc61715e8d2945c9b2d6aebe2f329ac8b87e4bda3e263d9701fcb250fbbcc440f366048df4ef73982dd697ab73d8ecf675ad20d8ed9bf904f1ef05e7b7f7d0af07f32df02c61e77a2f451b201b716dc07273226511c24ca8b389a8ca1d9663f2d7ad0947e62871d9246365053794537f6d9423823baeb7c684a435e612ab579cb7f16db891f262834712589e54ca96c8b6a1bfe64faa7c83e1fe3793551191d9f8082fea0c66a6f35fd2dc0b05449f21cb51c2b255675d4dd016f3959fc0067ae09e5adc69eb7e73a93aba9f09e5f5d405733e48bba9647a7d7478b17648a3c0dc632d4613b1317bbb9f863cb13ea7b0b4c10c35f6e7c6359638946a32f53178a22e85ccbbad77c565e17376c899d1e568bc8c3f495049cbb05f22c98f12afe2eeb4a0af5938c0e1154e975fe22ce3082a8493e34eca2eb9ac31d4ffa6a1aba409593a2e5567b69dbcfc170b0657c4874bfeebc9f975dc9938775df583b767be9115f7eb55d9e621fbf1f5e704194225066effdced663da36745b422478da55c1028ce700a442839cf4249bce49802d2cb66e285e0a860f0d54ae9046e2d5859740c683634b8351e1a69dfab0577f6fa0bfd47e94ccadf992377cea24a5718ea77efbc0e5a301cb6ffbbcde7a4679630cdb4eed5b01c3ddafe2066a207201c8c2354f256b3374d5445bf8f2f18399f17be162da37ae70e320c09230100b7c23c06bedda2bc37737eac656a6285d81607e4e44d958c93c581620f4badc3b8432a427d6e97e6a29b67179d2515bf1603cea9d8d5785fffba277de891df605025fe96d03d18bb75bd10430e4dd3c0412fa9c8a8ad7201fed6b41614ff132576a9a7e99a12fc6d6bc790efce11e33a1989d830b3b6a9de12830c86d9af09a68b8a87170ead8720afd8dec302a7356492da441022668d2721f0a37f3ee2c6bc3b562c2186cd66aa58052f66f07033128e310ec5af323ec2fa025b683235c2576eaf15c6758f2a5b2aa0fa468c0a2bd0bae3df02ea6ab26ce92762d2d7b2d4365cbff893953fbe8cb67b3430ce4c41e310d6f126b15c151ed6495a0c3f6148bfc25b5cf281504fc27b5a4d2c7e7972ca49fc2db2d120add72bfba615727b6b29038cda1069eea1a1993c0a2b3ac2fd3cdf6b7ec7e375bd9202dd59d88e395d690c62d8b4d1c6bbc327ab2762d3a520bea608afbf89b5691e2772edaecfe90cb6cbd245ce4797a1b730f568e97517af92525fe6e26bac9b307062944d323d44c9967e451a93172208223fcba4025a0f8f21c41c0d01932c2a34a9934262687022a5f9966a5de9bdefc7bc23041adeebd6c9377eb6153e5534d30ca3cbf318841f5d9edbedfe171da6a4dd5687549707bb6103a9ba396adadbe253e08eb9cd5573fde3f206fadec5203b626d8824c14f315acd9a3180a027ec6f776c503e87f5c45e787ccfb1fa3066774e7980e4c61fad1adda6882c4488cd712bb62804f45db026f8f046786250bbf8225345725024ecc0b47d138d25e9da9c79b6e124435c8747bafec2028af853933321ec6b319fdfeeb88cb2baf0c97369eb421a1e404f8bb7c69ecc5c3eba4bdb7c819d73ae393e73a51135be6ebddd1b31d5dac80d5062e19c2b6836898a448ea705c6a88289f3d27fd2109855a877a1732f3c1320b7ecb0564c8662278a7e24c2198b54de148b463551f6d592e8340ce809e5d18abd0e43ab11fa42bdb813abb5c98eba8bbf583a6e4d7f5e33ea4a56763ff69ebb653bfc96c7caf0fd4ba255ece1778944706d085c60a098af68c10a2926f5092a79f205669efec44eae23ffd27b51877f4863e99f4b80aee515213dc0610d05611d26bbb6f7299573acb4c9f388e7ba4dbd4eb1387110fd3f4eaf5f2b828ea08b7e4fe744d7ac0e9458a9355ed668dbdddcc859611f030f8a17a4a830b66a1a49b107d201037dfb4ddab04dfec500c34a87e0fe3b24565f78f3b5098c2de0c6908078fe1c966b83aaabff4e1042d238d02e28eb9ebee331f7215eeacf209acf48593954fc08c3179349399d53c4a68c9a49cf5f3d3fb14df6ff944d88b53d963fcdc86994a10941c4c6628ab2033110121c06490405c4024dc2f50f70a34b136855df68d61d919bcfd36ad27cc97cf627524000cc182ea469187e12d87675f61ab0d19b7ed962366e19db42d97a4351848cb5d84fd59da738dc345f65467eb75916d40a116091c544f4708d68a42b0bc779bab98cd7233f25e8c81cebd9f32e6734c1ae723b0d2a88f4ccdbe1008b0400bcf3a226a833a4bba3375cdd3aea98a5c99cc0f6f62ea7f06739201d4370313dabbba884546909188b087a6ebf9cf7fb3d90ebf6b85a09b65a3503964a0c97961bad5b7ba8260e5e3084340040170bdb88ff83014434386bad4a05717142d36c315e30ec102c1beca1034fab0351289c89744167e0927f18e6a4b6f1f527e13362d9cfc6a0ce7fc3c55b5a93d6ebb41328b6cc0701ad2528a240d74f7751bd2f2ca98f251be7aaf4001398380fd172c3073e2dbd145037960be8ce5c3fd5eb4c6040a9db3ee5017888565e116ad0ca09e7303d939332cd06affbfbd3161e84dd9318cf0714d9c59074de28e17a00d8fca5d17c6dcb922b4a6817dab451ef686bba99cbaaa4bb578581b45d59f130e083005b4ea1bb3724da1bedbe67135c4ba08eb619028334fb41071b31e49ada28dcf20e966e836146b38459593edf0c63c271d0d64c19f1880f6e10f3f0fe18e29ebefa493dea843357c557259e355319186d85a095bd31b4a5780fceab1ef09cb6e41714e9f92bfe82209002ffab13c397631d4e1c8a081efdebe11445636855a667d16b0453bf2dba3b45123aa18bb4819a567c6ccd0c91b28ecaa3c9b1add337ccc2f6c1717aa81b2d68499379d3fcbab7dc8904257a0c2317f9936c5043d5f6f6d29c2db4036ff51799dabcfdfa51fcef89b983967f6260ffcb5fae13d8add1e1054114c2f20f8ca50b53b30d15879ed7f184b2b3787b0cb8b411bd2865293c7d8878602e9c93a7169392a889781d6b82a30cc6860e62ff208cd52e790d50958b7961e8fe1d7e91a15168888930e3ac1f6787144777974e38ec2486f6759714d47b49e3568717057af0fd7e84c976638d6d97f53a11defe851ad01ee319d53e72b5f2265d1016679a1cc011e012b52b577131ee9043b40f8c91a699be467907ff1174f22840af2f7926ddaa5a0bd07cc619c4b70d9ee4949b93ecfd21331f17ea8d5b3a73a5f1133d8bac7efddaa2fa63d2c710fd525620370cf42d7af27e3237575e9211182f5c62aced684515ff5b2a12bcb15b67fbbd3e21691586c00a02cc2cb77566a771e127c9bb058c9edb99f384fe0ad40c12b92f4f4383bc3a55f34cd1a9f1de461ac574889af5c02dae4788e572328828f6b0ea701ecc1553425b3c31b04ec7549fcf61c20228d11fb45e6ac8252e3252008df6a9beb7873af0dae40f10f90a9ba1d1f43bc26ab275bfdc49597f38a9a33e92128b529c3364d433976fef21deaf4914feda8086d2963a2f22681e24477d291bed7d6ec3f665d4c2c107f9f46017f0e5ffa5f3a0986537dd4ff6cb0f2b6a383c01dc6b63a3d4259ac2ee4d4e9cfbde4547ad4d880bd1cd2f030fa47f61c105454be60fde648e308c0518d84335ea315ccd4169da12eb024e2bc0dc2dc49d920ea56e318dff4aaa36179b175f584c3dfab832309f83c44d056cb0b5512e623d761942c3980e124c5679f510757c2750f4c36237fbf88f7864c6d4f83714e409c629b7a9b3d085d15d608930bf43fc7568cee43a14a66823bc6d8d4c5f7ea6ac4fa81593e5540611b033303e044b696301e36ee3bcb206cc4671fb6f182dfdcf5c7aa13096aae4cedb2cab9c76a56f958c7903807498df3b33c6729c0bf4af7955080648f4d308f000fc76ac1797555de12eeacffd9d58906b66da158c4f1282c26bd33c63bb10c5e8b49f747ce1933e16b0474f2a80bfc4e96f584ae9c9b89ea68755388d424f3373da806be0618b371bf665e9de65da823eef737066ef90ab0193d29215b89289ebc752a96ca7871aebe2fc34513d9150525f660130fbf131697170910c8db18300301f79e16b6dbb5d6bea1b9b0364d0f30dac6dd248153db5b9fe2af7f655b932b9c2da8507a43217b6e383a8d4b0c226dbfc935ea8a246a1733e60a6ac051253fa13154372bdc226e39229bac6811b0d616df25c5252e166a4eba3b02ddd9f4ca3f1031b70f60c262a356dab02b659e4cc46e1361413819d6121dde82bd11dfef0e185e228d5db42a8d63ff8e0d1ff4aa1fce36a2bad42bc82a3602a66a14762a65768beab19ae2beb8f1e1cd576f8ecb65fea11af839b22c605c86a5c352656dfc07fc770a6b6a54c6ecf09f5339b4f3e19b7fead8a34d883e3e849d0952680ae9283772cd81f61007b58ade62f7679dc3749d80d25f1d00b960bd827ac4b4e8533c0a542149ab5b3b14aa9b6b51e1030a160aa445337cc27a68351d577ad135068196a9012780a1f48a0bf6d526cb02942b6d6a36fe36c2fe55c90825c5c445842d4bbe4cea1936a74cf9d28e5d0feb2acebd67d95e54a4f2cc3119d4d6bf58a0ac0b76fd0d9f08ace6997c70348d1c2f69879b593735f32b2af9f7d0a9a21f43d248311b41c8ae1a162ec45fb6506735f6a24e247bf37187039c237427269f80e97b033a1dc6fa0a90fcbdb4f307b80c9262c047999fae0fda3a84da09df12ba6fd014582b5a417c300767551824de17e1eb739af917d36f965bf04e7b2bd795308018220a4edba7b829306a1446362356e041eb5e330dab14cd9de2fc69b4e5f02e7dae10f52612e953318c534bd9093ab54deb455790f7a75ccb5e42651d8913a972bde5946c4fa9716fad47d8abb75d9c8ddc722cf21c2c2346fc298c87d09cef5610dda1215f378ab8204f3e939fc2aab264138864093400d1e0fe085a90855e4aa57386fb19c48dbaf9e69cc42afd698205f02a5594edac11caa8477495d5266e952f2b43fdfddb12facb8271e370ab2e3ee26f477d879957d56b6b703d867c35e5a35b826104dc9e4252f8989c0985c3b1e8801d8d864c77600c52dc88e3977523c4d6eacc411f0376e188e7ad16892818b806ba1ff9107531957799ad8756c7494b1616a6213e42375d01b223994a5e8e152fb068e16baaa9752c20457a74d7ba7f20461c187a088c8e1c4401eea246cacfae0552fbd5442d22beec22a16cc734bddbf49f594aa3bb2b2e8ca572fc6d688828b4165075051e2f874d25a57e7f8477e5244d5607adf898cc76bbae8c6a64b704d9058c6c01b68f63a4705b810f9ddd4470c4b7a3ba1ee3ce9769aab9e81d860d671412a30ce155a668159ab3b91f437f25a40b56b78f8cb4521861d7f81c8f5df1aa821420fdc5b79d9dd35318a50df327006a9168d870b295a9d5fdb4ec1676bb0299022f5a8c0a2ac34cec568ba20af7069af2864f1c3a7aee22919d5c7ac03896ef4e34bbaf57e85fe78b1ca80332176dce08b76c90576f07b81a086a9b76093326affb4f077813d722912613e1c1e97634622f5933107c90628e66d4f758f9c13ec5a758a7c9e3c8e26880eda81b63312b450720954fff4839aa65d5cff1e319bc1366f051726f917adeb8127824edae31d5a5d5165cb1706ba6edb95bd6f787d3f1346b5cb1048707578beab5d98850bb193cb90fc214bf02fa1227b0146ff0733048b826094ebfcf07d17be6b5140238eb55345b3b0e6582a612c28f75beb0aeee0e6bdd8047546801e10ec966194747ad68ebd8f1397a80ab2918cd1f2bed3bfebf6b33930e245d73b551f86dfd3d4c2b466add39e5c2b61143e7a5ef8070902fd457bf17ac9099d64b8dc09ca1e55902191d456713fd54f4c58681c315af0ef09ad3ec989082bcc4855c7ad58b09a852d3b3f284e438671458b11a362e204bfae26d294e6654550ea967b0b6bde26b0ee38cd01c9db69fbb22ee6d747575983cdd3a882c1ca424037b1ae3acd12d34b78b7aa5b75f07359f0b5a71ddc44e5c5a40d904130f10c635b72715dc31aaef2d50b656bdd9e47487d0940cca072d582ff800ce4fab57b2580a1fdc8954fff9fa7210db997e342b2551fb4f17e72b304b05408e8cc2bc50189bed25cd6b7d6f96015844b08552cff6e9691b98317b97607787a6f5ff7f8e6bba5f68723de3b6bffa96b6c60ff729b357f927bde469a100229001c88dd211c69f317ebaee7b0e24842962cb9d1bf2c91affd996519a9a0f63664cc92ab28fb599980a4375f7ffac96c825400bcb7ab784a6a70fe593d91c27a5eb1fc373653c22a97276f9178fc5f210e075b0b633e7e59f16138220540161f8a956d3aad1d4021459ea1d233b2cd7b51dddd7ad7f4590c2ecc40be3399120214befa4e1863bb8a79b7d12f0628204e81a5e58db8d2fcc9a793e959078a25100e41d5a2b7663b72a4994416c72749ddaa89a328d8f2127f153bcaa70d60c5f5292a05a142a9fcfcbf4ba60639ccd1c0f5ba5b0403820cfc6b276e58d78d589061aa01297e7162afcab25282527f1920b6798bc61ae48fb9a2ecf5736e60e3f88943924d2091155240b32defa833d9b26cb50ce5162ebd14c0bc9738ac14b0c5a808b0a6c8811ac4c26b6b522976b42123f0516b5cd8ca317cc97ddb31968972fe961ae330fc438cbafaaa81971925e58f995244e976bcab4b86b0ad66b047079674f5390f9a0453be22d06a550f3f8d8989fe4c068850e3b619071576bd5669325944bd7b3e3696162f5dfb42b098729d3e28c4c3b6da5120e739133ae55835d49930495d508ce941802b93121b2492a9631cf1dccfc50846110adc9b9ad9822e84e9ea6328b4908919290a33bc7958ea252b591898460999a1007a58080b3c08b7ec11c870610b3e5fa3338cc9e3e77cdd1f5f233c1c55f1019c3bde769354574d1fd2e65e5b243d0b1b8206b1a40d5bcd5489e24693dd1283f82cf3a9542811711481b46ced43eaf6a0417b28f8979f7650fd4700e1c5dfb129b367a55f28ce58aab030e4b26e7fe244390176468cc1f4890583aac42d6c9084e0997d9a34706f8e7c4a293f2d01202f43a362f10ed35a73d24e965b70b7bea9849cb9b1eadbaeb1d21ebffba84ee76645518e8602abd7bbf24c95d9dcffbcca96a4e6dced48d1fd1ec86f5d11431dc79fdafaae387e736ebbdab700e3c5b19d819973d6046a941af5b02cabaee5e1f0abd53167a623c9d0ac131acc2d33b4138dd11a65094c60f8285719ba9c7bd964bc261f7c3e0d5f3b78345885fcf8d1715a5cc8f290c8468ff10091eac60bd69ae3d67a1a5cdadedd62fb39cb2b7d29cb7a27b3b329b9882fb3bd452df23e81fa44a1731a338abe6dfbabf45e200578e1aa84890d41c233f649e53caa4cf1c0e2b05b1965989315ce0a2b94ac31b9ed52011ada9da00714cc510c13e93c60e23b75ee272b8fecc475862f23c402b56a0f9fababd0bbbcef78611289f7604ca39421271693b38bcba9aaf9bb8025bfbc14cd8176a74491ec11813d2953cb6cefdc30b6bdc868bdd6f0ebb6f1228d1811ba577adf6d11511371cfa5dcecb697c2dca366f629e9d0aa523fd12486e3c1ca77bbf4147c39c02f3f26181e0eb1111067893b4b612c796df4cdadba322a79b4e222200028675ea8fab55e555a06786b43317899f9b9a92c14bba9e6236e527f94a2ef0867a17d6d13d4eb541eac0adb7c342a0fefceebc07136d82fc8c082fb49e62ce56cb0101e534cc4ae41202f8c0d9d055af79d03038a68ebefb10dd2d55abc0536228f4eb3d50355c3de014dae12505754f162f06df119a57cfad397d33d24e558e5a9746a90c4bab4c0f50b28f74f5ce3dd52375dabc667d4c3bb8bab84b6f45d48526622a278995fbda2d67f7d78bbd31d02582c921275c96ef69e9a0866626982467ffe2ef92eb353e1352633041abc775d62615ab474ead90eec954607f5f7aef0ecd2d7bf43bbc3e67164f5db5d7970188ce81e4e3477ca7be7c987712dea8a76fcdb3fe37276c8697f6bf3172896cf70d9fcf62ac307bd291cc0f24de7a237c89c0a5a3202b0dca32022e1fba6e9c5db85bfe34b28ca943a1e66b993339065fa5a81b972e3e5c7d0fc287d4d5bde1f1d5a17359f2bd8ad22e897fdfe9ffb6430d143f93a1dca15deeff05289775d383d1db2689d0cd6fb4c972db00b57f9d1a2044233b134d819125593fb076b6ecac6a962a4a1946aaa4d9c94e849e323c6d29d0a03a45b5e97bf55a14fce2eb9cd113d3566af4ac45f289dcd179f06b486379fb8562afb0402081614e3f919138bd08583f0c68037efccc962cdb7de92ef339ba50ed7b1bb56fd6df012bdde5553bc8efe1894472a722c2bd44898650e2586ef797c04e17c77d2ab7eb378fdd6f178023905c3a149ae0353328c942987669c85cf9911d061369a978236f881281bb5a162bbe416f67275b69344ac3d8ea74ab9d479cc7043158764dec0824f9911c2c219efc35bcfa80c1213c9a5fb07b710099f08d80eaf26c45f9b4ede62e05afb8e0741db0cecece596d235dded8f9c78a0a8d3aa197307d77efb25ef0bd7e834b172f26053141d77227fe470f7bc6a64fc4b04f840c43044099b9794c03c452290adbee68f33757daa8f3627c6840815866b0ae8ab978c1b93d47476ea602a48f4466d78c090127c81e60f63f9fea578782aadd81dd22d115d16dc6eae6d877ed1df814d8e1756d914492796052e4a9bb5ec67926e827392e5ac372014ef50a21df436e50791a51243eb459f9f3d288adcc20a244322d3bf058b9caf8115c82504007ba9c6d4c13537f6f9d0a40cf62b3e23695c41954922732a3b834ea6fc65d7d9e8605b3a03387d791586357607fc616e8ee86f628c84c2466ab8b0f3c00ea54a2afcc2f72b6c611ced201fe36fde664ca2f1685fbf7da94ac927dc4f02140736e3fd97a134323aae790b5afb07b7b282d633dda688e646909b2aa425f8c9dbb49ac2ce8d3c0ea3de5c773a99f821b3ebf1cb6c2bc61e04e04d7e8957e2762a5f422b41bb33561e0322143ddde7488c733f826e430928710c718cbdfff5ceb3dd029089f3a17dbb284384df768bbfddf0ed5b5b11fedc26cf79b4dbaa551724aed2be9bcc6799a77aad2b83c2a577314bfb49062d6994a636fb97f1741d9360a8ad7013334265bed5e5e76f9d0ee9250c9b063c92c4fdb92087512cd7613c608fdcdf01e816fa4af663e76dcbeca05d2fee8c61032ed5f259ddc02a835cd2887e7c3001c671fa42cd6e46a0ec3e105eb714922b111c4437bc2486168ff13251efff2baba174519378d201db99b3abe7f7aa90666c572b2bda667caf88210486bd674ff81852dd6b96ce50caacad9ac0b2adc1c282b823c0224708be27835d50c611e4b279fc81f8a65e9e2f665ae63d5fa1865db1748fc8573aec304eaf8246c9d245786b1ec29ac4ba4607d7ce4960450ce6e413705f3523574a8369a802e129571eecf774942caf9bc534e4055facc679f5120521e8a0726a3e03a96d0ed63acc6b9fdf2791e1e92bd7d31ffb74b3958f809c41e324166297458256882226735d3bf75d8880f2070e9ba74848de34ea36bf4c6f7da89b786ac6145a448f238d8a9b53c44618e5d90a383389337f5af6b12290760e53022dfaca6041ade1e73af972221197c8615d8324eea25b4441afc6c60177255f3899161a15d648e0cd748aa9a51c83489b3408783d16c881aaa6a2e31317339896184dbeb20f57eefac50b5fefd1abe5ac8f74f09b35997165c3696ac28b31876eb856e541f5e4023378c567f147b6727d00318b7c2df668700429a9691cb4b528924ef25c30c48500629df509d529324033d85a97d58dcafd53289f46a756fccc1a0aa9f58b2dfded1167c720ece1a8fce9bd89f7a994c1743f4b2cf5bef8895301aa3dd396cd0e9713751062081f35825b314221cd81f40670ccd939e5130c54c3ce39b59328f523cccef586fafb8b1715a288e61b44c612482be88b55050589de0439e4f54b7b0dd777900ef799de5bc314da6e0d26e8f43e1f86e93c725cbc02a2f3b15911e7f9c34fcc8adcb97206054b0fe859b063b9b590ea210dc637bbcb8df6cac12fd37012a6cf01b445bc49243ed1b0627770ae9eff215cdc7b619190c1ca5bbde5ea7ab8e07a2187324cfa0ba62624761322b2b00f7867a1a6cbd81fd44525511566366e1172646aa87c818e12c3f324d8551b71a5c011c60f1d01109a569e6c28d739d532256e2de200fcf86fed5cacd33f903ab5a5fcb7821eb95e279233273e43693ec73e52039bfed4b8b359d08e4c6b11abdac24a6a96a2fcf2b2f220d3ac1467a385a94119f3c1b798fa535a8147f5b4e18fd59cbc82ca31301793bdb57f4d8097b07bb494b5be917c6037ac2901a2232863af1af20adfb47e8aefc19eb0bc3c3ff0b405ca20a58d5a241fbd7489a560452648ae4de812e88053cab9dd112c8db534a3d2f42e30b1526adeee54370c8be4f21dfe62fdc2c4d73be5f6d61ce55bcfc2a23534d2773dc05468cc5247064387fbf878eb8b3d8887f60f078429cc764c5457eb9a0f610d174986ea2226b3af15d5376a234368e031b0caf87d9f3e655de5a68f849dde250766172082185a83b5c501140dcc38a500cb76b472554ff1c806d947baacd2485f6badbc078edafd00978a0576d4b742caaeec3e5ac1d92cc731ac9d09717b57bb4a1203ab82bed4373f1824159566781ce069085cd436d00df419a77fbadb650963084f92ee25285e2800e6c1ff860bd963fe1a77489638308522c4c08b6d75aafca6b283ed28952b408f2753fd7226676267c9f26086a7f775b75eba55fa6427de37268e40270744c8ef3c71e0549023823740b3c67f6f3a5a5073f39b330a31ec368d2d920ecafc0022362ad25e8eb023bcdb0fa82bccf15250be23c2b42952daab6630d5fe0f3c1a1b28d37f0e051d96fc60bcaa8e8be20d19828a7ebafd9b3c517a2985434e15ff8b7dfbf2007646a070279dba527c815cef4a4dc47ffb4ca0ddecbfd504fcbb493dec56df1f6a55e24dc68d4537405bfef2e53411575ea6dcde8a9399750ef212061218ee09404c70c8c891bcfd4c6a7b83cb00b87304fc246fa00e05491de7e640f53c8a19f2105c2ab21f32a84cb02b238e34ad01670204cdb294755be57d12a16b01fbd45c772449f46123512cd556852d2d5f095beb8f9e1da3d9cef117e7f08f5b732be58aa0148accb322e4c84271d4609ae34a6bdafddb1ef012d694d3c93dd9340c8cdf2f207638d5f1f371ae2f145791ff86670f367c99892daa472b76b91447908cd46e4417d048b003db33cae4948866a5aacb48e14c25f61194b50d89c3d2ffb171703575e5ca200fb804ce576245d03b7a89004fe9bed077d2221a37005d2279bb7fa4587da22728805c03dd2a4b6e0031080880d1bdac99ee15accc9a96c6f44b19cc8273bcdf5e593589e9f63e7b2d71bb7c17e6e052f8821b0fc27297fc5b2e6c30c7626000b508303a398153d1b066d151e2e52d4d4eb040ea964899c9483bb7cc3d57f92c5ee017c0456acbd9cf5f8d70818feec0562b5d6aa35bae176a015d00d3b2b8451ab69b38fb6470c822f665c77b1e82d580a2a4dcbbc7ff490d3a2ce4869fcb51962b287da2038ea6d94fd37b48a53b99da1e019c23f82395350130e9813c6f053bc62fe34da8132006b93a7c5a04be3f9bbadb7482994f1c92ca8fdd54e27a9a872de05afeb2033bdfadacce7e5939aef4c724d6d5ba2eb95e1be6ab58e196bf226509cfc26fc6f191d7e331519626da24781b71142b3c5da71f7dd40684d4096fc59b69609b54cc5ce2ab873692e49ab95ae93648884bac5fc11096b42130c73c1df910a3e6debdc0b2c74f10863d7b73f05101fc603760fd472c77817e93901dd5ace5e89f9848b2f21f19f6d987d7e25e1ebb377ec12f4c7d29ba0c39bbc723776382b098cf4c889dde55195d12d6b6ac91e468ef56da9383dbd9ca087ee0149f20fb71cfa91baa6398c7f2125a8efca2298793c68cdc3e18455f1d7ce8842cbb4d25522a129df191ec7e284216842275ba7e24aab0a6db059f8ecb75aa044698dda66feda270d816f606a6d902500caa222629807055628dcc0e23684ddf9e9418b759b2f024f1d31b5d8e51c2a231b2885e7bc08e8c97229a6dc83d31f20ceec83f0ff8d61c6e8a830b206c9944291eba8dcd391e3beb0fcf981a2cfd136e757c1b76b36f6a357a21dbfd6cc544e0c29242aac3e7ff60bb98b1fdd73d3202ba75ca2a5b3323841e97b8eb21f324159813f10e124100b8695da185941a842c63346371e83ac0302a5118ff41c6d603085b1c9a7f487a74a68beb5f817b906f88ffaeed33912263b10455bfc72b23534cbf6ac50ec5f83be36bea7ef08e861570f8abeaff8d5d2b6aeb2a960d3583f812ec9804e4f0e30006f2c624e6ad0e0cbe3b8f7bd18e834530940c369ee10b0bd0378547dbe0e3e79ca7cd56d6c1486bfe39f8cf379bfd0522c00a575d3140d6d56629cf115b1c0306933c24a5bbeac0566273b7fd52744e3cdc3d772c636425ab6413331bfa3a9ee6b6e84494d38231440d82a6ca8aceeed025af59744251d27c930d5ac61bbaca79331d251aa8208be312efb2a85d639ffbee5b0ffb5c7dd806e317b99016860420eca1bcf57b698923b946fbc14d36b727ea52189fdd7e9320b7d9cea1f03a692279ff4eecbb9bd0ae9267208fc781776cdceab6c60b8fe763c24d13b2c0f1da4da124a89e76972376f8fc62447dbb151db516cf039a883c3e40b64c44592ddc8846e2e5977d609e1b7f6422aba36f75d8551e8bde19356c306b614c1dc5fdeabf2cf92e344bfec36abb158d2015b27544a6255502545d4cd57fa92d7d91a0fb2585ec2a93fab509ae5a8d87759f617fea5af749e1e543abf33ab91bf7c2aa281c02d7b98afef2a268e80811361880e122daa936e2082e241ec4b761ce3950c72bd266d7f356316dd74d7d9831e9ace1281a81d3ed8f4517ed49bb6e4f05fdfae34d2a071ee3d59e56deb0a30c5c22a8ba661e8e251ce1ea47ba2b838661edc2e93ea5088ae369236ded38ebee413eaa032a3517035446ce6d53494a384eae5aad39de2b19e8eef6dc39b37e03621f20d3dc07625e93ae81037b6ae4309c206342943b96eba3b8f210bbfea97fd80f03158347932cddfb5a02ef5df53a62241261cfd8765e1b113c4c57c7a65d75da5bad5d0b4df4f085c99eec5ba2066af6a4998bbc8ab730826c4f88e5a0e14ca30e9618d3fc5871aaa81b8791a7d760530132fccb28b5662c1d9efa2b91ffcfa86efde75267afb47ea5f7fe07ca276264e19bedebcaca14f79410846aae31ca22c4ff554179ac4f665de8b8aef4e7c3614dd6a759ec2ccc822356d69edd4a954194cb397c4cbc461781ad53e8348721c903bb6dcac1dd117f4b31e64f6c854758c2edbe99328ec4283f718382208a1d09d22f22f09c971954a92b522368d2db7145b8abd1d7db093a2fbac39942f6de202051209dc81876b5c7cc6baddf097031c847117c5d2e0daec401faabddae9848f5613cd14af9f71570be63afcb28760a58f5b8efc8cc0c2982675c5248fed0452c28487d71eee10c2461b68f763ecd7ef2ae41e40828db665fc684b346849040c920362fc451e655251372f3b58cce9b2a9920baa1c2232541bafaee9a10849c98304dd3d0a701fb815af0ec243c5f0499ef45957cc53a501c2a1a03e2df9e5645356f415e07e9748be212ad0158a61610910822e4c3762c3ac0ebf7b7475908efcea5a173dbcf51ce17d9a04b00ebad6c1915013c62c99be8819948641f0b88ab2dea17570eeb017504449a0e5814cef427e0422dc7d416081c797fb385669b35a8d42e092893e79339ecc039ed4b9205613a7ef1fb027ef10926bc3c3f124aad861ec0c176a10a3c8edf9b78884aa6ea868972b58231a7322431c0fd64ad7674621e14d86bb3116b1e6193c92316f4f0f6ac354cbc18429d1e7dca6bd2892316331ab8e20b8088e2c412c252b55a7377d155ebddc5ccbb8ed2a5afc2bcc27d736359853f2ede59ec5df931d03218fcba1eb69f660019f8df0514d0233283c7f56f47f6ce4fbee6db37d4026a9120bdd23ed0a03aeae53d6c4c61ec1dda61c4c61ab8c688ee8f8b108a30913d52d9c759f8c8ad1adbe20c1ad0cfa155f5aabf57f03113aabcca90f737a5caca74b530258a7ad5ffb714040359efe046ed3ca5261d53726fbf5cd6e8e9dd77a463ea9c51f65c415b95904d87ec1d473c6668cda4a0b6afc84cf44885a2cb6da1ed042051faa8e3974d7ab19475eab3bf179a517421fab3d6ff11ee1fd4882fee5d0f8ccd322e360ecadaabf4abebe841c4d9d8b8ce57d49a5670aec82dfac1b5bfd3ccd0d0af67e2f97c23ec27eb767293e5b224688ab13416041f884f93db5275805b85bc3419c23af5e325722a09004ac726e5e58fede0e5930af1f76174bcfbe5a8f6a7542ba83b3e21383f0d325b7fbf3e74b3eccc0f01ddf2119264e5b6b5b32351020b13a8821e18480821c99c89f371a86a259e4930e4979d6e513182263ebfaa369982fa01d34ccf3e240185aa50e297fc140bf61d8cb0046ac2ceb2bced6acb7698fc25e0cf70cfee42a90198cda59d57546423100fe8f3f28a0f52b6fecef78d33f2e8794925b960e17d24274f725104cc2e5220f57ca7e51b3cc19dc5745ac1b75c64a8a1b047a52f0157cf120851dd00cb5bf5ed6b36a404cffbb7e0fab1411e57398557d5eb45765d2798a930622ce34b3bf22eb9b19ea865aa90f13a6db28fcaabefe0db074763831240b1f93aacb89757edb1604aebc9481d046fce976e9875ae02b2d141d2864b58b367d6e5de0dd4c2e2b39d006c4ec2dcbf49fd4f8ca6af0d228e930b0105905c6c95ed9751b5db82c4b21a99d437dd77fe55561142575fca5a3d9c93926a9408ebcb43504c67fcfb1a24d6262e7cb36aca8cce746823adb5f52d2eb43a1f52ed2c8b193f50084049f034968acdfcef27ece5f18db8040de6ad35faa3c80626aabe37e048c5ac7bc5f81909ae8bc177699b91c4194516ec05c2eb5e29f645807a4dac92c0d12c2a975d0eebc26c5da8b7a83fa79e1f0c4fdb18a10c17f84124c846d887609db43b5865dbe20afa3060192bebc1f88aeb7fe903a2ae9aedeba99016d135533197c23cec9d59841b6b5778787f8bab10e9a8f2f79878a39f6a8a82d41354702dd9b7c17263718f3dbffbf5ea021b373e3814121dc1c07c1836572f3ecf9974e19bef019458de702a34a15bb17ae142df57ccffef4aff9812d608ad44741bc01e3faaac9f856de21275f8955880180a5636b87864b5610827d7378a9078b739282aee7613a80513b09ca518e8ea0d1530ee0dc82ecb1f526ce62a9db55758e5509908003031b5cc3fec6adacb1e3799c90eeb83b2e96e43f3e0caeefc6231c62de975a6eb86d0cb799b443c97acbd6c3386998e37aa55667d43ece0692c4b46eb9dce9b7af421eb48463f15380cdca7c1fd7bd75775b3a81eada35bc925c73febe432f5439151d87f1bb416b9b79c288fad4ce822acf8ea5914dd0114e3db6ba328f54612216c842f3fbbf86e5308cd012d60cf36131abb58652ff87c4ff865bf4996ddd601147a03e04f45a39f84995de025592124b7424ad7eb2e291a812ca93bc107f00e7b3a355952039a2d5355c7cfc03ef2d5df290aac6d904c63a69d31900a832c52f2c144f2816d924501edd8c2f6de730a794b50f10133c4b6d149fc35d102d4ba13b5bf6fae7b319abb1b187729d0c43643729e440b5845ba0599e127c48e9fbd4929e6f99465b058e3f08d471d2eae2ac0b3f4f301f8ef680dea722b31cacfbb63514603271b8a492a3aa6f13f37808b65429819dd7bc186b83148beb4725bf807cd4f8208eaa1038b5145b9c1b926b52b2014465bf7fec764f4bc721b9803e14f9309915b01275d0faaf6f056c40bbe9969a5d0bb29586190c7fbbd828f9e8f105171918738eeeaa8dfd17c10948150df673132016f66d95fc25cb25fa6a3125c0bb4193f12bc6fba9f23a1cb5fc88a9bf9bc1ce86c1732d978550338043ff46083acadb9c4720afeb0a7e07c6cd061e841368785f9ad4aef27d99f63cb6276d961cd2c5fdd184116f51c4e1e541da03e188fb3b6b3345de67eaa4265e0ceeee4c9a2c647607049a7f55640011ce03f0f9ee76f372b6c881da02d753668aac0494f6878853b98f8c5c3bb4b89b87e3ae18440f35bdb78296da0833ecb426076a50b36fd998f7b9a166cf6b5ec72cb749f17ae1f91a2dbb4e475b9b6a5c52846fa583b8ca4e7e2c9535154c0eb62223bdcbe551dd46fb614c48090ede36b19b60ef36ee6d56f64ba45c09aa4e499f792c035a5fb8467af22cd37072379cc0bf989ae5dd8023085c3a2af346b120ec6f492533e4b4ced03a87914902595fb7e730f3468e9c188576326b16210fed260356a3ba645648b7e8ce7c0c803e29693dc2eee3d6b3d1b74c2e953dcd19a3299a065b6bda452aaf2c1124884e5c69eaa6a9802c796c73ad707167c0b17f4d838cf675687511f1485f57ea1520e53e0983d532d94bc917d1f9ff4c419e6331e2c6b2147ef6c298ca6bded471fe2abb8d2cb2b95594dca486f136427852a13c9fcb652691930b7740a5321c19f75c49c9a3c4b13e742f50033711c3d800a5f7f0a1cbd8c12990b2a2566f437c415215b53017e5d7d34a33c5e3174b02697242074149ed10e5ea4c0f80671141d9be209b3823ad90872cb790b0c8a410a77dc807f369e0727848c1876c54525926f7206237be7d6bec485fe50547d25bebb33d7b17aa2e87b59a89fa6deb6bdae94c63365d40ff33872b76ec810c149cdfd0bd4a49f9e038e09fb1734f8a1d8e643a3cef7cdc578e62016cbd5d40c82d17965f13e87cd3b2679b825fc14957250e7c9a6041c24203369526c2e1bc9888ad2ecd8ba1c0b92439be13e61b14c90dd5cc95d01372175053187376b6b472a7db7d66218c85ce29e37f7c0c46ecabfb77981010afddf0057c01ed78a11d3bcc173afbd0215661a9bb3cf159f81adec4e2a2a5e693e959a0b62bf6de5d7211df0a21bf6dfb83c32d1b10b524486883e2a981244e1d7b7ab5d88353478809b899919fae40dc5894142197917f8955980507f0347c62e86404c2163b847c0164eaeacbefc91fd67d8f4b53be683817898fd7b61e99385325db636df9f4ef4056d16cb4ce9950debc8fffe1dae9421eca7ce14ea92e5d6047207e99e16c7b747a20a25a29296fa15e0088a2682009b0ebb8b56c45c86f3210b95e3a32bd4a6724f238f7644a855feafe7d6741c1bac835c909abc872974aa7ad7a23aafddd9b0be1d56eb3674912a870a4a5008a189f523b9913dfc0ece7f139f206527837c985a45af265b70738d565b50999fcd9e4d4f1de51166c3f4e810c82acced0a1c83fa6c120c9b48881ab6b494d5e73757bdaaf80afc728ad71b4c1714f4a6896a71c4f0bfe886cdb8943cd8784c3638feb18e46b78af9edb46574bd5ec8b805d705d172176a467f8d36436da55525ce88ddc7c66791769df6579b58f8203786d9f8d978480492a7ce2476213e558ade53f7856e3845760894f689f28211f0af2b049da21741928ecceeb239ea623c84c72648d7420ca09cccce813583b8fd3a19db5b6b045bb57b84744177633de813177668a147aa2f0a30de4daa9d0ce250054bf0d13a2a4317ccdb295b8fe4a8a1808c7149adf823c848bdabbb8764feb31f6203cdc52053f9859cc583a1b5fed4942b3c3f2cb1b2c1bf572abe52fa5b85a70e32db57def390d0cf6654b1eed1f91aa3a33d4c7d06ccfab1a57f55ef3c1db10530a13c1151dca2b1a03d4f7af5c6077c1596adfb2f4e735be3dd595a119bd53db8810c1879b0fa895e0890bdc5c5bd15718f4118c8ac708469f62a8e3b5d46208c988b1e1f1c80612c3f52b5edca00fa17d197ac6edcb49ff0018b4f9b6e29cf12d16663efb214704c95978e6e9298784dafec0ecd6cf63e5baa9d8b29c406dd48ff2f01938a25580eeab743f526b3fcf14efaff613caf72c36d5bd6edd8cf408c5a4583a639b21a28d9494890e20c18b4fa3106efb1f41283544d1ecbedecb6511248d0eeb4017ab641544c7e305abdd9f9dd58d591acbc2d68203e31d2252bb0b93f784589e0582082ea12035a0abc4c595d72047bf048e898e275e9089ddda8799b597303f3223d245c48a17555cfac6e223f688693184314f9d14b972d44e5d29706b66edac7056771d33bb3599c6d7a21be928e0bfcc180b0c11bb28094d17567b85718a8ea947e4f4c93889d6ca24052e6de24d89185c09b09afb94529bb51bbdc4a1ff50a99e15b6b9857b44040e7bf87dd507a27acc250d49e9850bbaec8230668d4e4f4863f8da11624cd61a3ebee9a7316f5e7afabb80f479de569f40a45adf99c0e8f152902149aa582fd0f26d618a52d5c3030fd40e500f77c047a47c82ebbec7990149d2128153ebd29f5a589d64893a118a05572019795cb5dc0f41822cae77c7772b76774d3360131bb697618021bf220acddb0ca8e9a881ed9dd23f63f7925ae6a19855711b782984bf0cae4e910156871d7bd421919ed540633986d25d02fec3ebd3f2d7053183c9cfcb9fc5454f1db09a2d2d5dad33e8b811f3a292701edab5ebea297ee375087a72983b2c5318cf7cd4f905920942596d5ab50116927e3618cd4558fd8c2d625ccc9f91d60436eaad33c1e61e017525e1971d87b62efc896991e5d84faf107dde2f1f77c2d736fb5f1d5ae5d6f6943840fc06efbd07509f05d57081189a0890f687e3000754f769acfb468dbcc456eb412d8022b1f7c358052c08c26e2859f502577e3ac168cca3b92fac1e00b280b5e8d13f4cab784f8a758642c9122117edf2a2406e15d7725c10a4d022ae9bc2684fc1da2eb8d17dc6099cc3e2b0dc473dd4fa9aacfe17baf0210f442cb2319575b800daf4068a4e3ab12b9c486b9e548321fede05fd16b955e1042d529887828749bc0f57c6528a5ff16844446d5352e2efb4ad2a573d97ab2e5789c43e32ab79d7529d44ffecc13749ce1ccc291329b3de6051ce0a16004c08ef1002bda91ca0465b23d37d84fed1c440303b7898586bc8c277b5285bca7710f48449a15f9cc75c107670d65e078ee562d33e3ed03d057fa891b3ec9e886cb65f4df42e4ad0f2841933beec1de2a4bd16704eff40c166ac63e96fd7ed12688f413aeb09f8c5117d8c7e4c6bfecb8935de201fdf548afd43b8c01178bc118a47c98940bfc9ff10ed0abdc9f8f720720e8c5f8d8321fd877315c105265baabd95e86ba47efe4837c6fc4548ef68f7a2c2778b6c654d0da68914283bbfb48c725af732b15c12c93d0c928c5d022588ea84c52ed9f033b6751019beddb1868efd99d7dd06a7cec2c4fda20da87c1f58b81b9b21e131d7e5cb9086d83e90255a837d03abf072358d8805740eb2de3b6c2f21babbbbd2e3bb86cd8a4a20f63be86832525f6adbcdba12f7b6f8d18be00a5cc321663ab750da4b5fd82548d4a4a1e4729cc71ae2e8e68498ae68eaa1e6825c968ceef433eb213c93e71ab549e7a6480b0d61e0ccf1a6e0dd08e5b524c907f19695e6811a41f002f731a9e1c5aa77c7ad0bcdb2084fb4104c6821204c50a86d4a69b3ac08be08812fdea484be6aebcf0302e724e41fb5a82d1472a1d2c0750c98ce5acb6bb4b020e9887a7a7a129d5e32df53bb87627400cf058bc6028c25c87fca18992109c87dfb39b40b8c2482230789409820bde42306c649d96c6e8a77384b828bbc0d4d9358fff7642b874e9c2dede26f3479d25c988790755e4bbb6327d3e32fa57acd141839dbab05bb1abd71e647ead0bd071fb2c0e3ce48bfb5d2a5209b00ce9a3a90bcaed19a51a3e9f72667c7c4bdb9be3a02be2781cb041c0a15747ba4b5b226bf3b96514f23b95c592cb2d387de4ea4a2dc8fe7d086be25952a30968af4c00a6c5b65d48c9bf354b34f8b36968d923e77acaea7c7a3777f6bc06c145b0cb48ad7fffbbffe9b8b8e34db7142b93ad00fd1cbde8ea33da4019ceee7dbdc694a87ace85279b44bf71621c8b18f4e39cb02d264399cb8dea3135201e434ebedbf99a3bc396ad29692ecb356984a8a0503e345664f0d9a0c653318252f7860bd9f892be733ef6bbcc8b384f8853be1721fb9a2bb5ebfa131cc4f6a45960c7b10519c61dc02e5db14af30141ac8cf8e758b4b0eb4bf03552abcaf25a4eebe6189bbed9e49060b8d24e9c6b1a17b5186329d6609249852b19eb209dc7c4a2e676156bfb7ae3425cd45dae92c9fc9873e147e3898f10c28f4d6fe880ed4e95b6aaa4020de46610ead89968ab71c6997451484b4cfb3efff265b55ee89a14c5c4303939386d3b1ed6b5c00cf571002d85318340134e75081e5de8d41ff34a06ce253d56ac222c8f12c782679e98567afea5a0463a91f40f8e7a10478a4d22bd5c801177834d722ac56a7b37bae0b26a7d01bb74c6b72976de2c399250b3c26b0fef5e94f390ab1b63ffdd9707cf7abe8bb65a96751813d398c8b9b7d6062f4854884eab42e49100ddd6996b22f786b4740a23356ac00b1a0d084b5442cec1215097399b1a5a04aa42da6ab66d6e321ec9edc151161dc8af03609774b716e8aed1cac8d6c0feed2adbb3ebfd79c576e42c6c596f607c7aa8ab167a648d7360281384d916484d93df5ca985d969425cdd5cf6a4930f3a5f23e9dc3227ae76cffcfb6821f5370484c388665649add2c7f7796b51e6a1c320895b7cab4f7ad0fb1a667697dccf30cb04eb0cd48ee95991a5ed93adbf64e3fe6a21b99c7dfc783d071f015fe42952388960e035c1102937d463a64b6d20e0d6c3d19baabffd835abb06e04daba29babcbc41c7586e5e0289dc18999dbd7f11fdebfd20ae08b2ac37b013dcc9a6087718d15103952ab2107f696c8893af91d55465fe3b12d0ad0e39a4537a60e158a27744df38d340b38febe982a8117ecb629982aa9381beb478c7a18b91fafaeb20e77a60cddf14aa49fcd807b2fe8d63740943380064dfda45ac8b112c7ce79f9be8ad4ed8b8815ff67d192b77870bf51b28cdf84acb18ef343581a7f9a9bd0b6dcb675f10fe39428cb47a66e6242695a93cb79805d0bd358d70bf279c540d8f3922f53a541802a2679cdefd1ed953c585a68a4da4d60a941e7fc97d44ff81c6d4a1c6b26a4dd1c4d9719776ed2e2e595dbdabacc54c39f1591da510e911bbd501960608893b4b826bd7184d7c2843f6b7a29f7a43d4773595c2a6853bd5b466405e6febea74a206ae055a5eb8b99760f1290007138fe4ca34ce28c0904585febd28c4f279ea14f37b4d8766ead51b85a6dbb23922925316d3128188e0a8c71a3c1d5b6550680c2560363670a65b48fdc596576ba385cf1bfcab871e7c0ffeb1ffdb06ea45019f6331fe0f52ec4ac3a5c44aafeabcdccf0c5ced38d3b35d13f678f0828099cb0fabf540218a230a7819bcf030fc9b509fd48ce0d5833dc654073ad2cbfbb9af9115f7a58c0be1db42e4cdaba0e3165f16ec8f76d97374ba9fa8184770a0b55df73ecd71b0113d09504ef4ea26f454fbc508a00b655cfd25c61845cdffb6559fc918df04c94a222c99070288f58bcf963f7022b3781d8eeee8f7720f6604cb4a9e5c47644ebc732e5b7bdd7a8cd6737f3ac3590417447779603543e09166cbff0c7b5ea19ff9994814a2f52508aa9f90bef3cc7714d52f00941d9c4d81d695a8b3c93f2f7b059e0e89b9ced3f8dc4526e21775c2094e5d34c8f56b8b843b0bafcba3d62ed9b8cb6b5cdffaf3d961e244b9aded856c6a44152dc81456c19166411dc9d0e6f68f17f26d00f8f91ece98fbd7a99261c71797ebc38b36bc6467754e0a3b113fd3cbf7a1c17e9ef69b5f6cce20b5e29ca4bbfe2691a5fffd0b3c62394d4215be904727b222998762df71dc661d408b2caf0dd031f3d1ab83735f1d844d99c8d5c0ed9763989a150ad0b377b054292025cbc3274e7e45d97732bf8420f8a17977ed361eb92c8d478cc0c05266bab362dcd54fc9416aa8845d961c08b6ccdd8fa89c8302404792a631dadf74d4b40637c9e42ab4981df6d1861bb23ec4e61197e66a47b60edea8a87e03a4e402659d95ce09276c3edb50eb3ef58bba30c1f0117b564595efdc2a1e90ebdd5ff96a1b1a061213b274b5ec6b46564d68f776552ab01b0f430a91f7ebdf8ab07f27439ae5f386c7b546ad91e05e03cdade6713d0505c70863aa27fcf354bab7c57ceb591eb17d234d340954094ac4cef500d54814cd7ee470175f6959f31e58ad50350cab86d45667a20a06a2a290082994110bf6fd051f937f7a3654c70c49f9257e927e6196bd82bfcf001bd95362130ffe85028c581f05ab26b55ecf5850e4fc9601c320010d490d6cad877a045fc649f7cfac16cf1d136eaccc2b50404cf2ec3b9f60a35fe4ad2123fbacce1885dd33d2ac0a0165f3683fecc2e00ba8d43a81d53c520c5778400b5dbe3f9351dc7c12cad6f6a877d1079c31c729750dd92eedb75d84a8b668b62e525c3529b613e25ba58560db23387a42ea1f065e175d86731d25c86d014cb743f7596239ad4578d66b9b2b7a3ca494f47e11ae3dcd6ee55bf90e3276d1cd1f8fa146eb9690e57f17f59a5208d6dbc1b3a4c1e757b0e90807f667ceeda0150fa1395020f1dd6d9adcb0c4e5b5608d3dc8c72c6c14272225e26f56841f64a973ff4af49feb4d409bfa0e11b6c45cf557d9058a66349e64bbdc42f7bc662fb7cb460148482f9c1dd4694c48fe55a51e7beb2f72c4fbb2ae89f12ddd94775be8095bbcad3dd4fbe6928cd7bef8e36e2f78379a5786270b0ad61026fe970d6a07167a49ea47ce47d6202ab4e71e0a9f53ae237f36b502770d814c00878c46a556a568ac2e5a3b090224a53201d27bd35a8bb539c64cbd80830cf727f7b408e0ed308b68eaf925e30ce4ba63441522a3393aafccaa971926702df753acbb9d18f1b17e4b9316fd4092f07e52e4f25448b92e6889c069db3e69de196bfffc0710cff250a4d47749ba4da234329967b096aec679c7eccf4400bc599f2b84f4ef75860c2fe87ae28cd63ae2af33859c9add809338235d41b8959c1a376f37427f659be3ca642c62368684cf40550fb2c048ef384f63c6e03898073d1a8fa24ead28a92f1c6dd1a7a03ef2f65e99744fd2cf152981eb8c61de8b1f5e6d8804470e0f3e2ccc53198fa0aec03aad8d67bf386ada0c974eb31e30ad7d961a99804aa27a57f028c3bd93bce43c5473d549afd0410ffbde928dcab597a2eebf1b5daf5982c335cc28200c9d5e8f95d27dd1037e0ae161ca7caac2f798e9d359bf1f6ccc18babb42c8f2ae0aae2bcc82ef18602230f49a3fdc73194ede4e16dd523a4cb75d0fdf266cede73254a7489b8a0624b0a50f8646827dcc026cde612cf72c4a06a45fabc40116b8199fbdf8e211528943883fa7ca5a787f8334849ed5e5f317bc2da0b2c449b31b9bab57baae338dbd81030770de3e381585b597ed4ddf5e2f6fb5b585616b370a4bca3ada884325300fd1e3ec26ba0162b17dc188a5fa3ae05a7c5593a659d99ba47b6153f7f8eb3c384e620601bd43be6f0ee0232aa97cf3f13d2be78578605b4cf50114ea39fe4529a54d7e0ed3385116d169f04c1129d6c8f48c95e25ac261c05f10aa96567b285e7533eecff453402fe4d1f2503eae90317fa509fd382f2059c02bac160391dc7bde9598925732d55bf5e63fe51429edb13a0dd5188666cd4abcf327190dca6f68cfa64652db2b26cf7a480e32f22f3562dadddc7ca4862874c0bb5fbb5c24bc61895c2870dcf35e91604a92076db99eeb4ec1618f1423a8bab097c4cf28979966a66d73a84dbcde62a62d9db17590d8120b5549d6f9f8cce6119b7ab010157e8f39122f3ab36de287cfff7302b3da8dbbfd417ad94855ceffd81ab946915c21343a0c40ea3e8b139c3c3ea9051e9c052d59773a60078b8713dab484ce48d212aafc128fab986d048356f54e12c9897800f2e92ca0c7f11a73a2f01e5ace786a0b282fea08075016ff3ae71e001f0f1ab258e0c7de555c02e40cac0dadf19cb5a0b9a415221511203a0fb07a562bd99184e97b84f5606c60edaea900bd996b5a0344355f2f6ea5f6fafd8717a229c1e156ecc49ecf3f445c2da2169b6e728cd7edfd449db0773e37bdae5f546ddeb1e4e955ee884adcd1886fc9030851c2538fa771d45152e5fee6993256d0bb21868f7c9923382b0de7e64122e42386dd8d9e235ce43197f867fff64eae1258a32e62c548be198c7a95c261275789978e8a043b29bb839c1fdec6a3647466ff2e419e7f90a8370fbd396b787d66c5bee7ddaa1a0192ba75b6bcb21c9965f586cbe316094a716e87f1b3fd976daf3d509b86b8792ce4eb5f74d11544ba4c3635ae7d8b0386c7a573262734326ea6e06166bb90783f8165c71c34b28b0146d0bae1f52e0fac2c2bf4f61e01aedbde474fb3929fafcc196c62970cc72d6053cd2ecd148d335d2108e7793d844478f7b9ed85548141237e7d6946a233c8322a3a3673993fc13a7380b9d6333618d4535d02ab4e4d8d232f60650962c6fb2cfad19b629bb489334c05bfdc122fbea34803cb021f350b26511aa86a078a115cf893934ad15ed580362a8e5dbbe18f3f024d272148a167fb0c7cf6778da3fdb392b4e8a537c64f0ef548f8c26553675a162e91b5de74740b739a62abb86f9aaa9dfd64dd69bfacdcf6517ec1f9a7650c13fab7204a05a446564cc741543eb444e59ea1184ce24300daca1b002d5dcce3068e5adce0eabad7464f4011d678e1bda0bbeb2b374166a96df409e4d950e48c605fb0c683b8f3ee3f7f64aed2dd7279a538fbbce33d1e25752582d0f413d19c313bea255edb634c11dc8b663da9d5d800fe829e5d423b712fc47702bb2f39a687f17143207b903f1beb422f6b6d7babb78a5bdbf3145fa69d6150275ec66a93a04b3c2071e72f06ef136cb2fbc47308ad84f80d2c6cd212bfb763bcf735fcd01a69e9ebbe89f737507447dbdf6ac1b428e70b0ebed5ccc623d2e67214982b5a44e00a5d4ca6e4d75f8afa358382f69578c7e860953e53e6a3a5486bf6e2a6987a1f8d84f517b292851d25a8774b7d6731a64de235c7cf7c7f176d995fc2b9d2c21a9749a14205b1e550a1b57bab74353b50957c688f20405124477d4ee9db5c81e21175f45d531ba93008a8d4eb6873e4b37cf4109a7518d4decc8c1a1ffd39abc9ddc4d7ca8322367304439f5154ecd57ec39914d3b1dd824bc02cf5b09bdfc6331b3c38de0cec1a1a2efdd20a15db434e0c734ef00d7c06369cffc4efccd5764e401532b3b60485118ef8784325b3fa75bea2c4e9a042124fec1733f22a8cbe03c7535c949112a797f68050998f397c31676b448b1a71f5c5708b84e18b94c6db57b8e5eb1c72ac6bc5e3628361b08e79289c672fd4b2d4c2d11ea9eb0d9f9cc42670f5be8002131d7bcb85614f5c988210874e1047f54ad568769bc4ee1908d8efb5a66ee681ec01188129641d6d9e7c3f43c33c8d0b994fcb9d93472166173cfe4d63b6a972f05f6b09b9213e7d12fbe8c4a870a855587fdeb4f0a114e788018e737c8d29b60c96fdb648c4964958cac24d3fb84701a6aa0a8b11920cfd509d2007eb7da55f4eb00b6882d1e82afe7565fc04c6a6472bb3c61b8ce862ce51396bb94594c3334439af62d30b8c65766a8b457876ed5e412f213c47ec029160ab1d2f5bc6de92fad1285e6ec20c4bec083e7045cdb24f9bb801aae8e2c1a932efb1f00c5e3b283ea7d93780689caae620feed7a3c0795e9c204cf773e0b9785755bea82e9d198fa5104a9a7f0c56439326ec5164625c6148b3737eb24258084aa242e2e86b58b27a5e29c6820587cb8ad2b911779d00d584096bfa68f17147757dae03f857c98127fc21a38d3542bf53f1987474ecb938871ae98959caa63d6188ae122e3577f6113a05b3b62e4c953fdf5c15afb2e95f1592feb7100c8752fc81714b4860926496e6959325a55a9824b56f4419e84d497e1c6f1b2eda6826e4daa79ef741db1ff6de2219f383d926b015dc34ca5e3839fd6cb3f8cb443ee83675ddfa88c55f97d5c0fa5fc96ce679a5a2bdc8b6ea1568bddd91d3fc5d55ee252f09dbbd94a3576049994010399cbab406d9bb3c9ec1a2656b359c1052fb5d1262b018d6591798436be24cb8215f80d22316ed0834f6de4cea01a1f17b94ff6fc9573d5c677b8988229bd7d8a599c84bd0ceee16548567cef61bd811b12df5d202d0738f74bf45bb6668c7eee2a64fb6cd0c8465a0b72f14c8360230d137ab5c120a7eb89e819eaf8dcbcf523b0b8985da3329ccf6da4da868803b1c281b10da2b97b2db8fe16bdebf9037277a9922b0eabc174abd884cb86dd1e55da1b550fc058e30bb93d5fc00f02e8abfbf99dfd7be61cc6ee42c146178c726b44e1d548f78685529af60e619e69e393fb28914a0f62b10fc32825e8b2d0ea8a58b3a95adbfca2ebe289b89f2cdf9e4cd7c02fa229f1d829bcf31a7be3ddd2d1f4f912575a053c724676633782d41eda65a69107aab93a8d89691e46810f40598cbd544767c79ae3b678f30f92a97b4e554d1971934fbb507c3f1d62e416252b6911443b466f6b795b8a107443c770f20208c103144dea166851a70a5ee031c38c0335dfeb2481284133443844b217c5428432ae400632142fd8df5137b115bd56ea0de712e1ecc6ef1baf9b2fe4c1d37964f2bc88db431e033c267068f3d4df962c5e943e420444836e2896c6ad893602f196ed8bb7e1b3c66f394109e9771bdaf60d04caac6b39ccf6748156a508dd472dd54824eec95ee8e64817dbf1afabd0fe128a0a89e0c0210330507c86cffd161d39c4ef4737ef13f9298a7ee9e1e261f93cb15d7a3238cbc257a237840cae718ab3fc3070c34ca5da7955e6ecdda237dfc0e0a9088c185b03c9054a804f5c962defaf38c812230b5453ebbc9556ed2f51e240da1d81989f8a2c70d35a6b2734b79d424602877ad7cf3dfd111e23e14d58df683f8a0293d2616b502d62fd7416f0e8e2b71b1f38a507cab8e92fb1ff7f2e859ac30d21f1b1c82a0e2c0acd01de32af8415518632f859fcee074a41888b82d3b18ff612626558b46fda2476209cf56e4874b2b4a98601a584b1264fb4ba6b11614d59cee253e949156ce31b7a19ccb05378c24d6addd005b1e11e52d40d367adef9215def53b82fc4a4feccc8715049511149fab163cf2dda32c999e1daee67c24be7ae447bc65263bf435388faf0fca577b63881a0672df68173f3ae0e1329c141c16d87f93243d48e0a903b40e439528db652da0632f330837af2f6c2bb12fce3ba00bad47d94a4a908f947c3e857cdc9ab65de29ba1af39ed48a39ed6858a022609a2446e70fff5200bd9bac05615f09b7e411a8062229e81abcc9460006147c79aa7553da1a92ad381d756bcbaa30b2540a26996142e6bf6e882ef460c90b472db5af4c6373c2587b10cc12757353291b353465c9312627047e4f9fa9668c511553850c4ce76063e1a9b0fc22148c4b14ecadb1b8c7e3239fb0e321e9c5bc18e86e2461b0dd2d7e1576d0182f17355fff854fad6da8a1a0ca08d3ff7ebe1cbdd4aaea3e80da44f1eac2984be3692845d20855ca64113fbb043782e3e97abbdaed381b521df0a053136b2d50f27872d8cc3369e458422c7f53674289994dfa02a05a81601b06ac2d9b19b28471b6478dd3ac5ee17b874f2588700bcdd85943e220f3738e383d7d2e9d3273a82d1f498dc332e2d98b02f6f4392abda44d61c253517a1388fa59b8a39fb39669e3d47ac224f085919b5a52476e311aaaf9682b5a30a4af7f57845da79a735b8cfba475deb0553131e92bcc08b911608610e5576821fc92b65a282e57b2a58d05534469e145be07a348977b71c45f499e13c693b9dba8cfc82435228018b328ee1a5f8a85be531f0d4dcfb0962d9455cbd3f91572985e61314233ab7ba9510296fb5795dc26b963961282a069870913bcde43e9f9488f0dac42bc5ed8865b43a432a32d0d3bbee7f067da6dfbcbcb5f2f5630acc67ba29528d6ea70ec9c8c51bd8e12e8ee9170a45ec8e9e4d922a8110da102ea92d93df64f907eea3bbab939150076108189923e23a650183734cd3b65446832de9238563286d2a5f3d99843adbb070e55e54539bf87e9cf2baf3fc785b47b4b2e7daa6b284fdfa3cf2079f09c266cd6fbf3e892025784e7042a7428e5618234c294f27324e54366ed5227d54f6df9131494f2fb1e427419236e097a7c019cdf041d4ab1c4fbcc55873561f56a397d8d2eb834cdfb133aeeecf9d914529335b1f8c44a9ca1e706b6f327ca11a62e0ce8c83759f969d39d887fd8979dbcecc333537d9a25498c4abd6102854852527ae5eb33c172a00fe5bb20421f3650243d555cbc222b213a67469bbf596f9206b960dc84585a9a71d0018f234c426a8a8cef2dce3527f6d552950de0d361ed0477444095ae80f4c0860a30bef66b2ba78794499143e28854c62291d4ec47f90364bbf3fcf7eb4df76eed0e7f569e897e061e33faa6db683025620e108b9e7c3eb5cdcdff143725a97ad954521802557c9f65c07be78446bb9b1e3bf0b26abda2ff66cf4571237411cdb70eec372ff5e2d18fd484ab79b37bcb6ce0f642d51aaf6b99e03f7f0b223e7810601447f79f223bd61ddf02195bfe6197812084394b07e52c787f458de1a8a6c3ad7b299bc3dda942f5372c26f2f08b885691e35c5217949528365d71f3eb3c59dcc304c37d47789a9a9a44537ed0092fa8d314d647a50f37993cb5d8c2235bd1b5f782bfa3a301fe8bbe255795d295ca4a6d5cc552ef3de95fdc316f5e7f13165318f63a0eaf21c06f9a20e9b316061411ca01c3952a8b1a6c2c9f91bb6165be4c0c719e3fdaed87f5743b0076cea694d278a281a777a9b9bfbf2fbc0faa3db4406f2938db0f73820878bcbacab86d3749e36f423bc0912081d3d7af607f5e01a69ec2a59c9a2150a5452c7b5c691b422dbbd41be22a933be6eeee1d69aba237dfae461313589845a672bf86195163fc132ac06b9543a028ae4b4043a9420c5f781975295959c85e068d686b9a2f518044b8c15cc240a7ac5681a65411619dd27fe04d118a8d84ee50eb71d120f36613ac21e0abd4f7b592223fda01eb294c248401d8bada195dc72f514eeb127710f7df31d57c7dbcd43d2649d3a2442552c6356ac5594dd61325f729c3648e46988cffde0292c7818a38f1009ccf10dee177edc541aa779db5bff254a285ba00051e6faa3ee5ceff34aca0a70e93eca333f297cf7a6db82d55f64ad190f60e6b5cfdb7a697dd22336a08db15ab1f1bf25d14d3430275fd4569dcfdb4bb6b6c2093c42a8270b4737a9457e595b6f21f7598b69f4936dff0334b78c2065a772544a0aefe3dd0bd722c35a0a127664aa8aa00bc6994a9daf0048bf4eed1cc3334a35db3d0d217e9d68544029f2924d5a61e84d7a015f8d5124711cf00201fcde02f4cc554ca7b04e4e91d7805670ef1ee09c9ee6ce20f6e9455723c0ad82cee10ddb2f6d0c8dcb3ab12e1c7827bafb257a0c434b17f2aef51ecd0bd3c06cef9eb6516db10a4a9ea34a452da4b129fd4cf4ac13bcae61e665d88ba6fa1742e97acec7f4f9c0c3a938e81d777ad2958f1614178466f2d1399fa093c9bb9865560bb7da6cf52e52d3141377361bdc14d8d7f33a1cff12506308809b68ad1a3a47179b6bfaa264094c0bf0dc3d55a78af429fd256c237c0bb2b6bca1cfecc8431f80a6ace3ba6b923444cee002ce79b446fc717d9bd86a9987469c91909edd408e803204e2750330a8f0a5d4441f438181f108a16fed4aebde90317b0b01daa683311df59cf8d6203f6699b40a291f1c32cc0d16795359849ef63346658aac9d1eb53f4cee78b8a8d0d294c64543d3d05e4171d3b1e8bfe996065b37de2a0e12ee9ec0c863c98f6895a7d8e20fc9c8ef2302c321aabe13c4ea5cd2409c9d0065b1d3c800ecf03bfe1ba289fac311a58be202716fa075db42e24089c716ce83350d867fb7b344bb64789a10409f732cd979c07fad166ea2e1f0751b032a87e59ae630792a8e34be2b2d3bbd0a0ad61c294f54236e8a4cb188d375e2ed88fd2ebc174ecf7fbacfce132ed7cc9f10269ba80c0e94402043d56c04c0200d5c4249f04d0257652176591077ca831d9818200e2d9826378ec0b8ea65d0a590ce32b37a1ce6a0147dc4f90456bdb1ce9c155815ee44cdc65aa82b2e2b09a730cc597f784793104456f6d93196fdd61becbbd903d663c7f5a86cd7fe5ae9b5ca10450f11cfe3d707059ae3ce0b94ec6fb88bd5e19abbaedd2c77db18705c99fcfc9ff3058caf47041c652670f4e8bb1cf8b0d82ba4ef593128df34766282f3710bce82fb56a0d9e199b03bfbf8947460b2bccd99a13a60886b8f8203af90ddb39590bdf84a80db1653e9d74e59e653fcffae747362a6dec5769d99713dfe7a49715a8b41966f8639a8f445ac22aa015b81099b0612626431bc1ceaebdf4dedb6d2ccfa38aefbf9fb91338c9f3471cfc6be55b24ab12a9405bb6b6a725cb2c5f74df4e93858276a102a8abaf1fa1d97c4e493d85d28422ceb0b431b1c5ff5366e0c8a990e57fd91dcd12645581f455b73b3d834477885e72bacff6c2e0ed74d82c621af123a021d659e7a462bddf40e2cca919169abb98d451a4fa8b206fd81d760d9ba24bc3e5cc0fa28767601f068ee6b3776a8ae152bf65451f936d596e30f1609ad4f2a380466d171d86bfff3618665d252b41bc5df35aa0a4db7993ab60d3c6c00b149017136df9722836a1a09b3fde0dab4dbce210f1ba2a2825e0652a42a29e8aa15858969299e44b3e18686806fae163b02a0d8553d7052a16c76b498b9f90dee814b6f9badd62a6eb9b6a599c1637ef8761b35ba408830c00042272da6c845e7fc7dd1313543ab5498a500ba625b6d8d3bea2e663fc0659202b2c65d7a9e2230e0bc1e797ceac605979fb9014b13631a22218e42fb73503c24c883aa707fc251feaaf175f1d20b3787db01e6deb09a25cf4502d424f7f3a790e626843b3f50c4b4ef07b0e0cae55a7d5d262792d8b5bdea3420bdbd1b2a61e3a596721525bf52875665cc3b8635181b89642663c137523e2ebd373dc654ca2cc7882178d631ad6a3d83354784dc96be995867a95695d3427cf33ece90e5a716a10e92a7afef4feafadc978aea2a81c750e25707424e6c7134786f835126f756149ac00be0870dcc43be5a3b4860f09c74b2b11417ac9c9ac8a81625675ff8192e91b81ea10559a0df92b1ed1bfdb758b32e8471786adff6a43bfe9c0c9a75eff812a32ae2facf5251f5b9515211749b422261c97d69ad987e3e8d8f2de5fc9df5cae790a2ed4bc5cea32c78f6cdaa5bf052932ab8718212dd34fe68519e0bc9b067ae38eff4e2a57779ab3dfd22cfaaceff3cb2a7b489706ed974203b076963c57514f8c5432166017b0386b732c2a7e617caf0c576e0b2ce291fd909dab9edf19a1e15f989741d37d358f98567a06ce981dbc9bac6cb3db8e5e5887be83fb6dfe3a8cb4f360dd120a5451c0938f08638d410fa6847dd7e453b66968ea04a3c39a0497a99f1dcca5ecf5197bff71ebfca4f248fc55e79b2f42bdf3e57630f803c932ff22f096e8f7abfa26477a069e66b6ae25ae96b2fc5e0964c7e1c49b0a874d871eb2fcd56097d497fe4f70a5e4351e4ced11d6e34bc5a5054565e47e8bff5d88295f575866f3ba334dab6d086d9646159fc350a0ef390dd4d7751d8f3f07ea45aeea6f994b889a4bce208496f30bb4984bbbbd52b7e381e4ee2a182beab5823e32bcda5d49dac8607f6a1287af670c7b03cf6edba77597981d03454eb1631eb4b12a1b53d1e443931208c4286167c92405c019eb0a59292665d31be1b351127e95960bdd324c9560ddcc1f7771ac4356f22b1895a7085b3463b26b531f5730809593dbef01d6c1a294eb08833ccdb4662ccd8c64324eb2edb7bdaa5b75199a0a9c92a5ff484229ee9dcf90b9c06ebc28250504fced3eada7c6e6e440fc85ca614e23e6a31e76688155b56c0409daf9f7e5fed6febda295507eea195781d1f4aec4b509ca8b402d3d199fdfb69fa1e1046185a078b3245053c538be368b7c0fdaf3b74deffbee982cf73cb0eaef952760b5dd8997bfdde06ba94d8a6594fae2617df91f0df1afa47a1a84da4f8ffce9ea930a14ec493487c7361be4b7eb45a8f807052160cc42daff0884003ea91383d06cc1948f556ba4357bdcb25554f3c60582ce79059ab37c0453c02ba6524823ee2317bf360dd5cb0e43650a7c591debee292eb0d5587e05d424ed2476fcc5b0ffba9ac32408141c91d96efeba4761efce18f65eb0c364f901ac30085f2e9fa2b102b148ef12ea4a305f7a43b0c22203c83bdd789a47ee93d7d82c6628aff944e19dfce3683115b8a6054b6c8be331cad0d8c844f8790e4bae744fd972d39c1c8c22de85f0a6c158e8c664a8f97b156af4dc66174bdd52f29d1dad77c4a029bca2b68e7f540a4c125b081f6fc13cf8639f4bf844ea5cc95e02b5fff9874736ef2887066db224a83d8a69a81aa7d84cf1a15aad5bd97fca4ca15f4471b2b2ace363bf191f7f5317180e34623caeca7b1c17f5f5559a1a89b2e6c2e5979a5969ae6d535d1121c66c9eb701c9578b9774b121f0cbf5a1230d09ea4a20252c0c1fe241188c24b2575a3d0c23250870b90829e98a86f6800ddd23ae10200fd7acab6dad28f183b88c3a5a8cdf8c9440dc8a2db216ecaccaed9fd889b7e41c22aa62781b26847b0a5983195f982d868a3fae5d7bee3c2059d06f7b4f3ef0ec87a0c8ec18a4969d5477b66652cbaab2347225ff0e46f471de282dc53f80b471bfaf5678df5040407933ea68e87177a38a897b1f87a199a5b1d8118583fd7b9279771c1feb381f21688e496f8e4136a8c387cde0d19296336d69f8da2f7f3caddfebf17077ce8149f6c16a13b190f934f4c07c6b9e113ec54a1d6cef820188279a4707f052ce73f7180d2b5f515bdd4227497550853a2c099d0e508b36a6cb7728c1210c476eae89913d4a6fab34b5f7066ef3a8204fa7a034eca2351280fb07496742dc381925e775372fc1f9e26eacb3d8846cba247abb0af3684a9634f840feece86813a528fac8bab4471da538617c212a15038336db380228c7923fcc2ee3eeceedf1588ed97a05728213b313db0b5c527fdee17999e3371b6a65735192401410c7b6694ece8c1659a5173cf29177dba3028698d7a400c01379e77c391cab0086107b1e3d34665117788a5bcacc2f6fc9513b65e5f1508b1f49c5006739a1ed2ab0ac434d07fe1a58bfa1842252af6432e3be229d1bd270819fd1c721e2b18a109ee44dd5e40fd4b18d1f7493ccc010709398cf29f9ab65921da4ac952afc7252f62c025e262490047f53d5496f2c8426495723e336bbc094ff66e0f61dae054dd656ccf97cadb7ae7f85814cf789e88211a42cb4eced3a2ff4406f402f3a877432a9874908f1911782dd5295d1d5748b1c78bd591975d20f9d5cd1556012ac1ab974df076896e00013b3f98a36cb36bb7d5e951a5b3ffe59864d881124c6295e8a1522d344fcc40dc209a6f0c83a01332d83640d5be732f045bb8adb31bf2e552114fcd7622767146971fa1c67aaa76bc493d636069cff2b4b1d54b36982f886aec1a3f683703b4e49a491c85cac4c0b995d9c21e8e7f3d8d387a94edf8cb9325288e8adc40c5f69c9b90a1d0000f98d99e2332852c97f5e8f58cdfee9279f2b191dbc7c7c301012620b185019fe2a6eababf658efc4f4a5e4d346ecd5803a7223ee6dfdf3b72ef1fcc2ff5bb110c547618df2f5e270f2fdfcde0247673083842fcadee93e597a224bab4ea6b37a49a43ee6d737471261038b86d5a145406266dc04ef80e647f36bed49ca2bf47414c973416b3d0862426e0b680860a5ebf2250c7a6bb618e1750e1f716a09013a305eef2680cdaff1eb5b1b5458fc5ad89971f5d591841f11f9602426e086bdfbe56d6380325db152b3e3c70432ee87523db491ed05f33854a8128f19793f089d6e4fcb2a66dc531c0ce12201227d2bc69964e27715ff9370588229f198386b2a954645ebb0f015b23bb41ad426926ccf8f734f945b57b066b8d857c93fb2c934fb461c77a50ba48407ed819c00b38fc9a627fd13c69415b5438d84f95d14439c99c83d7689ef9b74f289cc3eea7ca4fb4817fa31e72c6cb558c1643fea6e235bb35a323895f86aace5e7f9bf61c62778af7ac28c5818e7c6c553529f35135f711de60656a869b709f527702f056e87e56331796a7691d98e9868cfbae5a431da7185dbfee647ae00352692bf842eb883c1efd085605bc5f0b3c3ac7074b229cc89728a217173d41ed6bb8c10bb8afd94d1aa8251214d3b839cfaf7a3f7d64a85a05a233931195d1d4ef4ccb1949f8eb1b37669a4e7564fea3dbac9029266bb90d172809ca1b5e9799280345484d47d148f8c0f70930c0803c294af78ce707bec720048ebcf544e00b57ef7051d875b2688bf6730271c1d507b0e64ff5f13f079b43050f3ba9fd67891d9c0be6009a6a1c7d5a9a4cbbe7c8109a85b0d410298e96c44f9c1ffeebefa1ccc105808f2864f442b76a60bf3a4a3616e836de97a2bcf9a224a3f3fd66bc9bf56e409520e756e4ff48a9e95d61d3dfcf3ee15109db50162133125979d16bc57bfe8fe3ef04f3d2fef0ecb871bff6bf7558ef947cfc1eeafdf61b09f62970135417f98140eebc33d88dfe8f16f7391285a4a39736f0439ebe1fa12dc0e0fbf5cd9c45446a8962f2311aaac62c3fa499753f3a55f0699f3f7b2c1bb582668a3a5bcd0bd8ba335b8e5e61f2f6e173946ea8d536920b158ba8f1e8256aaf596f6b26a46e68560a87d8de219e64ee816c5ef83c32e836c556816f64da3c914a930c0ae69293b01cd5cb78eefb1de547aecb74596c89ca4b5d915444a68a83b387844ba6bee89865963de137f239aeb01cd06a3e422d5cb1a127e51fa437d1e7775c8834491de8c6fe7b4566111b1087fa0cfe5db92684d7a1804ccbf279f4db1be970e49c6889802eb3a46d31be1e45052635288c2e0072dd47391e922288d460ccf63131315eaac522076a0b116647a640a13abad446b58454a4838a0d30cd5b7efa34b840d1a1b10791bb753fe56f3cff17926a26adf76ea41977c3673d68c100949515eab17908648f0083f98b831abe0935da003aa489f56ed590c0cde5f618aa14b149f7f843382693d237c6a864356a712ed986e398cfde98976d1c102165614c6e5c1552621f06b8be9b21baeddf794e65362cf60d275854a7c91cf0e041cba37846ab1066b6683ef77c6408227dc3e916f2fb25c4625aeb99ba3191d1a554c6b74051bf7c32ce6c7c67dcaadd37872c4f5333ac3cf2dfefc4d60a2341716d55b8ce502d6e8b830a32e357d915b52bbad01485fad3854cfa16aae6c99cdd70f8ea8d73176e970574ea987ddc9111c7b05f53ae6e9deeadbe502a020aa3bbcd8f3b0aad10cc083ccca8ef1aa0b53c6621d54b4d97a15b875dbae218ea1c4b50e0b75f274768e1e2bf56633e50efb769ec5117e241044cf3ada500b0c07b3ec2b8d1de87594534a74b2bc825b3b6ed5c98ba370e2be91d5ad774e9e8b688258ccac02fe0f9328ec46d59fdf353de8c6d48961734e23e8ab41de8ff5e9fe0f587c3150d030328027c0772189f8db29898a39e1c82ad0fa33905f26c77d21898f8693e82f965a80af52c7bff85b6bc0aa63caa1568b3e2011949129de3fedec68a66038cea9c81ca6fec7855aba4243180f5343a35831cbeff33c98f51cf6aa7219d975863a0d2159e1d374f66b9a63eec18e1545904006330f1f0a813f68c492381078999c36de2cc03287e76368b68a116f268e83b5f3fa038d3ffb9e0965fbfc3e0c33eb158057218c6a8d3aeb61366418a3f396bb33b41748a4a60678dfdc7a3d26f146a6f593c6425b1b976dbdc6699d3a121cbcaa572a75f006f68290d45ba599e369401c3767bb28b5fd90e2f45f4fd14236f9690762214cd2b79bcaca2718d09874f3461b4157c821af5b2ae3c7533937b083cde6595c6f7007b85e4f75333cdcac2560f546bb9977236dbb5a42b1b9f1c434872396b72f1a8d5d06a7ed045cc9dce01a886a691ad1b40c25a4810076c2ae5b59fc318d75f5c400919ba6611f89325082569f8ec10a3cfad7e4309b1b808d399c6afc6ad4f7998155964198f04f40bdad10d56795856722d82b183326b260f82dade2c6ac58208a1da8abe80bc28c8daba552eecfb89bbb7ff84a251a7f90d6dffcd01e7b254d2772838de7cbea6405643b2de4fd7c18e9fc5074f96a885d5b6404e6f2d5d4de29ee7261332e95277b979fd105d8d01337ecf7d5cc794f561a7af39eed69ac814c8380178c30557c7428935eb231e52198548eca0203c4af26737c2217b0a553e376baf4d708b84eb9325bde923ebc7cebd40c7fffef1553fb3f31bc9d3dcbee11d80a5e801247c7b9de8e7094b5e59508551952d034b518745bfa396313b8ffd6df475cae2058f37e77a358714fc0e9000a9531668c136702e48fabc89f8e715dde093eb012c35bb80a31241288f8a6fef287d3db6986237ab0753821b9e35bd2fbc2c1bbf86dc05ca113712a9d748a89b794a6265656adc5ad031ec7a3c6b1e5535f63a095a7fd1a244ea712ae88ede375e95e471392e1ae9f04d9b90a9d3c6201c3699ba327f8bc508eabc1e7286965ea314606ce5564ad08b3d7cfd0cfb093d85bdda9da411ea58d437b21355bc1167f8bf6f6758f544ab92fa9c9b0a8573927e61e47e13d86a8694bd3c025d914501431670876b76a826370baafcca47884c4f85508f87b4a693188489ea05b3496d4d97b66ed60587d9041dc6379b11d92fe0b32301a1048616164fd04b5b19806bed4a1b448778f6d1d30f11edc3b4e252ae2942c803e9a8d57fea9ebf63c9505022c65a86e525fd0f2443fdea2ab18397f0e80595d316f6801353752f5a08e27f539394c4bdf05b20dfc7f7e23e431811e0da7fbcad436f39a1054f457adadfc45256f93bb72370bf8813453682cc3b8b543ab8835520df247fe1e9f4e700813ccf3cb7789498470d9e9185fb1c8c82a11fdf5aef3edb7b53784d5b63a3234e0c1de6ac8b6a4d2a022cfaa97a575053edd815da89d04bc02abb055ba332ccc03c831da6046c55af2350ac83a1409c5a32ca3880f81a2f1744d52a172d4ced648cba91f730adb57e3b78c9333ca60ccdb18bd2e686a29fc0e4f1d1f94a44b879e10ce6c47e611307513c628829ff06ee4af7a5dc576103274885cbab7c3b4d0483f097b2cfc3df0f2e6607d41c940dff5da3c252e59c35d211677b67408ad9e974daf12b1ed041aba4f52e5e936bb2ac1b439b742441d2b325dd420d2d61c9a314ff8d73dad3c6d317913c6f6fcca64c463267ac8a3e7ccb831a6fa28d77837f76bb24397dcb103f593cef957dd3632c2508a75433bf9f7e34fbb65a0db8ecf911fd9da5fd776c90a3c5232ccce4f1bb10fc0ec45eb9f35cb82e7299d683c28506a82c2bd4389b0be0f6204e14ecd88b5c00e6b63c42d85ee255ac817804f317b4f91152169a7df90c525c50656771cf7557412a3b2a15dc994a023c617f9e3b12f3674c71113bd4805ad52d838d39a90c2f59f3b431a62d196363c9996c45993a0ed0d4ebb62a83133a9752c0e095e3d20eb24ea0154403f2f7b1ea7e414775181787ea1f22b23cb825b8976919a695102818441d17c53d0f2a03e3ad91ffe899ae373a8a8fe9510c11adf0e8f7419c79830dcd6f98fd68907ab8e096edb9a81d93cbeae829fc231088787c2fde9b17f4ddae9a103cfbfd7554193b98794a0b2368411188d06119b3bc9b9e751de729684d25739047532d99ec58e055ee924c62a12b5ca94cb18739cdda473980204e2dfb1d48d082865f3811854b32f191baec539ff56611990d54468eec0fe4f21c8d27498e3919f9645bffde89f20bb50f9a7c594c13bf7bf4e46aef1e137bd53d0677ac1d44c295fa30e4dd5d9cbcde208c91cf2bf2001a6590cf8ae807017170017a1d356584901f145eb9d995ac78c8097aa8c4bb9f79b453a2061e572db6753efc206af93d2c42b5000bb5b45095830f6b1c00c9a985a06ea3ec7128e2d1a6490c5989b6c2325622abf60bb526e8ccea95063d18225eac7a95b9227a2b5371609ce291b90d495bb334866400cb178b63fe3279be4bccc9763b1855fc7e383c3c8d6d5372ce5f33267298d83a0de564bd83ab30cc4656ca171ad83d949c0bc963797e75dd06b20a65ce03dff428acaa5c6811b4336b910ea24f464875ed900cd3f0056ce69f88752b1532ea9483d15d45b1214408f94130b0943459e193f2a19b1fd8542b57e25f84c9115a4b5718072d4582dda98534753686edeb1266fa718802ddaa79489f95f1f591f1ef39acd8ccfac780c7386486a284cf7b8fe74d0f11dfe601468a6a9d1f9abc65fd03966f3ef473e228c312310ebfcba4cce2738f2e5a0507a4105d01995a95918c34b9e7b71a0a0090070a6c7e810a102236eece18af8ba5dd2b79deccc58f6997a39e9da09f27d8ea6e7c0480214c383fadc5c4c087e0ec88530da64502c9a2889d5747b72d882398de8722b22ecfc4e09f54ad420eae328513492ee577732796de5f6f22cce91479ce96f037780fe5c9bbc8a68b8f4228829b3b0281ef25062f565cffd488d987bdb23efac0a93bb5fddfa9d10a2f7cc856c919ffd307933af1d0e20160e1f14d40af355cb8541baa0c4e6450a32586dd9128188bacdf6cdd237f4b92e723946e12c142520a2f75223b63f869f451b75ddfe1c28e0664169d91157890f52733911b2b5d41c61bd1c137c90e3ccb0a170477d71181864a09124ab46463bff1ccc6f324f5d1bbc9586c25b494b20607ad585befeb77cd4c072f945a8d4cc2ac749ddaf6e760e3818be5e4c85befd514e31826fa178b517d5354760275090d8acbb6ac4f81562857578a8e92e3662277f957ffd86ee4a8ae8f94a3fc02b606013d166518694790f0b26bd75232bafa879c8d57b25916973c8ab4ef8de0f436698f439e4f3efdc37ca6b80bd3c0e01105242c7dfa1a2aa116e2c9ba500e1b5927aeb9ede82e7d2ef8d750b146e9c24231530615470ccce0bb81ef2b75618f6b54499ac2185195e5a8b135e11ef806f987da871a9ff0e268883f8dff17a0843ee37b82af467b8d2c607a92930f50305253bfa4968fb8412853ce613ee65fca74d20452e1a5b1e496ad36f93428792c34b1f2c56a91b8453ee2a59b85659966176c189192b14926c3a96a79daee5c88cc945bd2aec542096acbc4f16b44bd1832a790b2bd7ecae38720d529bcdbbe9fd89abafc097d097661b3f53c2848df364919887837eca995ea94d96a3ab625af5cbf8ffe53dd3f8b7e3cf1da7f32eb620be331670fb30ae5611a41ff52d2b70c7de2781289af376123b263d99305d251630e496635cf40bbe8144365bccb6773bd64f6ea65d0fdbe9795f706fced518e82dc07a1eaf2fccf5669cab12545109d8822d8424ecc75de32653a0f6ea279f9410038189eb5c945053d0ba52ad22f9b0eda98da8ca6f622903399fd8d079e3f9a4361a57541b13266cff0a878d96a07bf9a3d897b5cde7748ba96f427455ce7f6b8e0ea37c813fdbe80bde2d784d7f1875a9ef4a97fbe098a84723ef13a21f8dd2bb84796ce5d2f1ec34c29dc892694a9c517419814aa54fcf971a32a97d6f88b606c21dd1c16b8bbb21cd623ec8e16d60c719971f75ba42e27320dc3c6a72bd61feeba2aee69b033af300531c6d0c66066f850b8aa7406dde3e169ec73535efaea855bcd87cd8b8419df72c2ac0afaa6adeac7071cd5f3caeea252203cea07735f8fb4aff342c2263c6ab919b323569a0d7d892e3e99bd68c63eeb790d0452ed1cb4c2a4348bfa82b97b8cf039e96428b4dc53500da4983536a25f3ac28d193de189e935ec308c0cfa5ca6144ebce7c746f00ca63c62908cd373450663556a92d18a0e0093436457a55637b1be70fb58141715637ef633d5ba44ef189d21307953fccfed1149da20d812ce467204f82d7c1329698351244f089b37ef6b915aec3745e92919bb380fbe10c4c7d7c2b732f8cef53561a1847b7757774a5b488ad14f159d5f030f6481ce94f49646f8011fe5dfab211442e255411b4e2575998bfcd27834bfeffb6d8c14e436dcc5c12dd571adf15c18fb532cae1d82f15ac1c5243b930c52057e2b69fb221ff8c665a8912c693cb5c94eac77e2adcd3e9901f423ad78fe33e40c643582c62a407a0df48390e9716269e4e1b72eca9abdc02016464db4006daca31282b44c4c7b23671515fa7daae1554377075e35f1d74c9ed10cc2b227670e614ae3d5efaf84b0c30d7f7cbc116f366adf5ceca3686c430dba65c2ef7fd660345c9679ece85b1a45d64fee084d0c5230f8029dde69bfb4b1e00cc958f4ae6abebcddfdeafd4e8a42bf8d6e8049ca6625cdc5ccc6f24163cbcd885dc00bce0d9ad4f5467572de5fd3a16dbcaab118ad9b7cc263020d8d667589da0370a5b1e687667d737a78adb5bfcc89441b65cdf294d58856a02cf9218de26e5d2e387fdc6d7a5faa5d0c866215c76aed21c0f38d9876d04dda8058e96b1e3b3413f4a8db34e30911ac8e3c2a06f1528ae4c59854d48579c04c4965af884f0a9031c2b1a9bfe660531c1d9801161321038900642954939009c042275fcceae7fb2f7b482b24de3ebcb70c21d714518d23348da3ff25202b764b19624e14b6d3677c44bbd93dd18061c5db691fbe075f8e439b5d29080e73a1477af145cfc7816b051b039386cf157aa74d7b1cc783385d4593b3f1cedf82b3d0c9645342cb7f4e9643d75f7264623f597dcc4b1372ee6bace2afb66c2d1471d7a2aef01bd81fc7f237ed497cfaaf26a0774bfed7b3a967f6d01b3a787e290eeb12aaae66038044e1260632474ef59d2c4401fd04cb0a4afe9fdff295737e6926d2e9ca1a5302adf8cf932236aaf18dc217cf566cc53bfeff0d9d00e16ff5c6ad61962f0ba625acbbacc4b2175c112fb979242fff2102ce194f0b685e5e4d1d05a881de953a2e72edb313667fb1021587fdf3dc8a3e173f9f16c1afbdba630da1b4caa6e52ee444a40c52f526c233c85ccd82973f93ac9365a46fea31757f628b149a45bca577f6835350e282cc5e828f867bcef20c74017a784924aa061e08d95e98c1ceb75783bbb016b1fc544d370a86b3392918d338b22995b4f53d759f1e62dcae1f95b97e572c5bbd9942fb964a9592b2f6751a057872969d2b6323fc12461866cd1f01d52b9716d13d31ea3d853634da258872e3a68e3faa28477282e6666f37c5b3fa6fd0ba99ddd7ee2168e9e31e3607d77bae85d8a63e7adbe03fdf853c26db055116c8c3150c2ce7859a0cd53a129491fe8203d8af1eb49ec8715ee7d799229f8c34bcf789a59e0a73537a25dabdf1b28154ba1179f2cbf99db958fd607618198e0bfd32512ad8e004eb2de5e875a983cede1a0ec16e8ed8bff3734d19b8b8ae84f5b4b3fd8dc5cdf6a11b2b3f826ac82761edf8fbae034c72395bdc602066016d79426ac3ccb900850ae752a3f8376c28bbe54c638b139e15f7a24c238968c619115bae264040b48e490d59588dbf6d4086e9d25ed327fff99eaa185c99456854b8927fe91145d214fd3ebcfe3cc51c314b44d0cbce27cd08abd9568141ebb2158328ff7863fdb24b55fd0397aed2e5477bc959071a9b5604803f7f22078362f1f21ad3d1cda26b5c2d1a1df97dc620e574075f9387e3e0297ab365aab4f82b5ecdabb4037cbcc3d86b7cf21fc0a3cb3b214451b4a955a49403d9926f21b418714c5abdad0fd565f86dce38563caa2fc7348b8b06ebddfd43d9b551c9cef0c209fe9b45459903ca9ede0aceda0f4bab86f2537dc40acc7372a67fd542e1f8364976bee0923cc6464308cbc7201bdac128703a3ac7ca1b87acc66ec0070a180e9f3a56fed029128b5152fb3feefd1d3a3906e39132a1e5ceb948521336386fa250fda7a8f14fca4fc0e62b4d3194b52d2cac8fbbe9ceb7ceff01aaacc24926533f736855b7a318faf28faf97ddb1d159cafea4531650d2ba5d13089f7184a3f0b48ce125ba9df7d02d7161904980bf3416cc7822f1baeb88bd4995ccaca8c84987dbdcfaebd510cc7cc42acbae01aa4921dc3fccda49ae2d2add57971d656f4d71d32bea5393067131d84f66dccdab7cd2e15c39b52c2a5814213401b3fde693a99d5dd67f2d9d8bf45075727c57af0ac1aae9fb4adda658d741ff612236ff8aef9c9778e969ad644b822ebc5ce2541dd7ec328aab62ffbf00b6f8f040a7c1570ce7a0fd5d8b5eb1ced3133242516f45633443c4ba9b81ec02bb468a5cb0171df218a2cc8ff4f9c097057ae82e0a0da53ea2ac1f7bbd07e3dcbd9083fa85196fe0ce4a508ed51ce7acf8e062df9e4b0ac65f7f1704741cfae0ae1e143e115909d3863038ade695ce914eaf497395aeb1f1124e2fdc4c8be43ea8e09c01b9088e0a7265506000dad590e739dd470c961df7ae910e9c008ac2f57636b3ad1037feeac17f35656cfea3105c712fb18d39157d2a4eb46dc31ed5d40a9ae4be4a5b94c6c481b6cfb358403c3fba982e6b95b59055ef6fc54c0036ef11df37b2773f4318c80fe589f21be6e515931499a234816da7302ef1322102eeabd7f9aeaf95533e73a1dc54c29a71fc809b9d435ad4fc3cde3e48a117e724932f38d0c534cd49a3268354e4a0deaf6a75845aa18bdb7dfafdbbf812b2509bdb28846d21918865f28972d74a16fa35dc4393d0741d3134cc6a5edc6751386d2d63e9ea3ef3ec238db62ad9759772cddd09c5d05f86d39ccbc768a58d300c2789d8a6a29c9214c64de28405e8a6e7b7d527043e01e65ba331428d357ca7ac1c73bed21f06045e624aef2b2deb796568462dad76274303c1a3346330fba73dc39887a91c6e627dcd914f9131ac6017725c24d52d0129b67b4d798d0015e593b328c9e6c4ee20215b1c92a9170090c609cdf01b1ce23ceec3c51eb89fa6f4adebfe9cb8b2346af9edce48058b8ca4343a20cddb9520c0ff88f76d6c607929492fb2aa575ce57c1fef4c24cefd6c2e7559ee73fe9dd3e5ab330384b8336501d2d52100880e3b2d4755093f0639b8de2693ed71f7f9999474d2149b57c6b5296dae439b1ca398c7a8758276efadf5748af82fe9be774ec151173497f938f07bfaa8ab5373d092b6be8620daa32bf68bc1eff2f67f266bc4dc2bbdcc75d040abd87c0d2c52d8901e68042763f2f45e065f3fd642535dc80c56538cea9eafc1a6f782cccd07b9f30c916e61531c149ac7e8d31cef1080ceef0c97284fb2108eedc510d826ac8e8d4055d7c77e202b9cef23b8fd6eec02931b2014de1c52cf5bd3e1f53ad4be8004e630898a6697c6458bd832293b2aaa938e8185de0cbcc6ee99c75687c97d8c90c0c8841f2edc8a1d94f485a92bc642a0b860abcd5a510e00fe7c01dae56c3a73080d1f8ae70232478b7ad42cb36106691ad1837e11cda827628d3bba9a9de6f4b9539cb68c47404ec526c604f09181ee43112bf71b22933c1b4ed5cb64666734ce39243eb120884ce6f0abc9bd51256047b64e136603f46f15bee07905ff01a10e00b18cebc639b209bd542ec9f80c721c67b70d20f0bf9bef43fb60c38ecf8d59cc7bc57da6d46612fd5da9289d94f06567f7855c102b3e32e3c015d0a0e5303486436404982f96cdc4c13bedf26aa106c5a00d9547c984f45db01adaa7dadf1c81fdd1128e974a212fb2b9cb6fbec351ec8a4adffd7783ce75a4666a27a87e16a556cacd8480266e4d706248f57ba719cdbc078a7d64537d570f2126afc22338a24a25b6c9d3a9d44fd57ca26bc8f37c67d809ae596589e61f865176e1f09d3e6c3a4a86d431973f7a6a8c1b2749dd1f723ea88cd367b2f9be2441454c29037b53e6989a2b831bfe57e88b6c3f3a8be0939c99ed00ade94cbce2180d608fa166138d6ae85bd93b19e69a62afc31088df7c39d98115d624029cae0308527b1aa73fcb1641e81e34dfe00b641144e29c18897258695ce53aa112b39051c5bb736000c584b0590fabdfc91293d50025ecf336bc7affeaffe8eb13713dd55e8f01c58a67f4b3f642f47a23a28dd1cefa0507d263cf56fe43e9785e7440ff18f1d744276290ff9691d7a1c05e0d8f5d717c3a35b8643b76656e89bd2402ba10ed5751a1d8c0a0fc72d7ab6c1cb154ef058fa00a2940cf98043e4d35cb3e9b924e81add3a641003ae4e7b1e4a7b1612b43ceaa7a1c2500e38be17bcd87cd8b4456338bfc644c86df3016625ab5fe81d6cdcc6157a56a0e8b0feb68885e5d468da842bc3aa8de4daae5847181711338538506714195042fe4a027c9df7cb0704c327df3cee753d416c1582d1918208f380191022af4ca3bf4c3e30d2e6cd7df76961b6598bf6209f07c6258e90709453ba01d58bb5b33f805ef4dd16390e7ac88758ea355e29d986e5dbf82b4accd5f354f574ced08348fd5f150bc27429bd44ed61acf1edec5b45b2475055ac0e2faea6fa88f0d35b3838675985c2a23804bb1d9de4b20c85332588e274ef8b029a427ba915e7e43e348cef82b65b71b84ecd980c3f5ebf2488762e28fcebed912475f36f90ab8a376cffd7f2a1e71fa239537e3ce16f52c8af20859c804585b5dc74c01b5f83ab12390f3a514cfd73e6c42d1bf33e59a530f465bd2b444164df711de70572160821ca4774dbee2bf43ab4cefab826a235a4ef98d23eafe52a4cf2e9ea40793832e71b8a73e46895bc657e9f0ba2476ecb04620149914f7ba525b201ada0303ea2e86dc5936dcfdfd5b9278e54e28d8d86b16915eea7740291835c2e94510fff26bc291a65d796c247921bba66eca11a1cc0f92edc490959879c47850365673f0f981255fbeef4102bbd4bd985ff12d2cc56bd2d3e795eeae550f203891b6760bf752ad13657499940b3376ac1efd6146da6dd242945cb46d5a0b1b6ca6d6b9117c1abacd156e22c63d4d00e812b65667d3828484f055dd2dac3768e3120740ce9a8ffa7f0d3b38c0e06af945ab3c0a53ee136de03cd6dc7b1bb6f475992eb0d34e95d29f1621d91c3d50f423878cd030d2db6e30f20c8a84564da35c2c5a3fb6ce01eca5207e58dcecde1aba7ff38f66a18738ce01e2039eed2eeabfa1fdca44d3b4046551718b1614087b602fff91f70611e6a97d0ad87aba7e9e25e737d53a8a555c211291a8af8ee6e890ba5d985090463f016c484f637a66c16d9edd2556324e4b55e443b7ee4e7b9bf39853716e34e57e226ec4896e8c0d1166fb3bb1a1394b900fc0cbc030e08c921bba2bc36649a54dfcf3050887db720bafd2ababc52109204d27884f330a7138d1b3b63df10ed18482092d66cba889a2b01ea14daf7ccc54a6639a8ce598b388b840e218c8706ceef451be55dc4c9ba7efed0403f479ac230041f05b4a17ac6403fc61ae17aa43fb1ede29fb53170286675bdf5bfc4f13850ea357c0d7910e962461ebb4e8a5718bd75e80878af7c924649505be550c04926be03ad9947bc38b7a5151814fa491fb84004e2430d48195dad1dc5fff0e4f4392980b309ea95f33fb0f8890b2e9b7db93b59f202404fd3a9e10cd09b4f1695d1eb1eae33cb89764d28122b6d64e5453d0a8799bff0815999d9a99f108bb02a336661b2424eb7537099a921fd9d85e0f607d52a79be225303a5b8f40fa443d3723797bffa8ac7ba940e11f5e777f7cb01fdf8438439bdffceed419dd8cb403061e39225f2acb34eb3959860c46c0846dded9cde01e94c54d16a6e2ae98e9364e67d76f38377a4cb4aa0f1d81e8d4ff8112865df573bf61e074ee309b6d4df0ac97eb0a7d364a5fd8e6fbb1746df0083a8fe75b8538d8bdb7b67c1ad471690471d545baa677cdb81e2e984fde55a534285dd23efc6f97fb19142fe1eb5680e46e7e897018a8826138436581e1714ee4375acb31b20f57395623b18d2e3445700a896eb8ada9e4ce81b7b64b8bf1fa5aa6f64e2b3acf69e3dd5f644646204bf6b47a803c821928b5a8b81bc147c6db98cc787a642efa1eb9477d7d2990eccdfc39d4b1b3eee67d8f0061480806da723583c64143d83af44682e700ea95623b8ef239aaf673a584bbe18f263ff6d27f4871676a509b7a8aa934e6b1d249fa3da1dc4a3684614595430472f4698d400e27e7d46a580258f85e26a1d827f7a87668d76eb8635d24c0b69ce70a27fc7408013489b478aa1f0b87e3b9dbdb38bf039788abf63a4ec42573afbc19f952c331d7eb2a64959b361d5f675d417ebbd3800b8b01f0325edaaac6aa9a6cdcae7cb41f051abeca4e2ec1ffd04d6bf6cb75e3333c6ad3130e052f6f3adc2e5d4c06b49c24ca8332093bb3b7c2164eb989f34a7a73dc2a7069189fc4f66db4c6e6b4a09484867e663e66ab85d9d8db675380b914fa11017ca2b95836976d3ae44c0603a5f922d112a4babe828a6e342ecbb6328532a7481a74788c303c7595ed4d0f5fed1b27155ca46ac2233920bfe34641b710a9ea36bab079d5f3ced3aa0aee9ac36fc56e66ef5e114aba71e14a6734c61e59709a3aeb2171f0ee1e466769afad038658d27c2bdc8785be43a5d55a64cead5284f3cab3f6210ad6ecf4f659ed9138134817383f9d85c94d6eb87006dcd0651da6da70f7984ad21c41b57af9143095fc03d07739469f8f429988f58dcd6a50979bc7019dab67a4d27b18da25d4006341451e995ddb1f4c7123df421ab901d1b858ca9965ea739c1c1cd9ad8c8db40572cfa9a259a8e53c332b4611b9274fe6631e5a988d4351199dd4baff7e2df46f182c18edfa4196b4fa386e8ff6c5f0e41768ea295af066a62bedb6596baf0cf59a55bdd6b99b3b9300878040c18c7eb338a5b747b883502240aee99fe2fa98b05fe84fc0009317248d017dbfda1737b09815766d2967a77f9e7b5f5f763e52b8faf79a6fbcba6f5639ebf33e725cf4cb679f429fe23714f5eef55da0e3ca115a61317857d18d65fd1946a1ede5d3c913a81ede02715c2baeb551cb8d065c03417638d76655f3ccfc33944d9fa037ab653b1656940daa5f0ce559aa8746940617118af770419b49910e90ef3ca05ca17fc1b4645c1373e213f40f36e666fcb042de34898eb26f7ed4658f995715f4f4228e07f07bbdf9c9041b55203685b3df7e4619a6053fa30d34b41107ede9421a809d2761cb285d6a8ba36860dc327c8965f18a8b3d84f224d4e90b43eede1c4885945597b6b943486ab3eca4dcfdae700f4ace6328df0309245f1d3bb1bd687d16b3e679bb912fba4c7ed6424f7447a8e55cf7fbdb9e458719f8d6c871c926a0bfa9327a9b9a2360820d546e3ab4810982795dfd960b84660cb10ee865422e5cba805ae0b4cfff36932627b6f75313ef71916925f24ee05e49faad48429b67c1484f85006ab96e14d452be3d075ac1bd6eaa2e5722f2420c0ee292767424c558acb48e5fb7ccf09d0865252de3e4d85626117acb1acf46850a273e2c4b188b30080ad2406c9b63be92c2e63b3a363973a2a5ef0eca51708bc27667cbefaf1a897d79f0493e1a14cffe37bb7c4d85e5e1cd31895ab6988b44e0630ecdcb704a4614158fff6c3e8c8f919b4aa52290cae6cb187e86e3356b75d057b414040e5e5fee716312271a7664b47d0f0f5b196ab87094f0e086d20a227313fc5f51aa4f9e88c5dffc31346d455d5e239a2f0b45a61bff5236d4cd634370796f031ecf5b3adeac6f09fd81c3d525a08d3a2183fbcc4b0664f417a726dac6a4254858a935b6e471631b57400b9985cae0a8a32514b42648767d0d0bfe65bbca6b8cab38ef5f6a580a93e984626c0c6c6ccd582f6d6a1749d52ecbb941991ecffe43146bf5d7b45bcb37b940b401a6c7c24442085fe92987727deacfa7a86de812755a1c6bfc0f79313e0ffa9791ba349584c7b4630c2bf78b86d83f7daf4c4f1672a695aaa80a40c7b1c324582cff4f2710107870bc6c6f2afd88c0ff2cfb819c80ef850afaef01eb31ce823d4115328524ab39c7fd9f282eab1799ff73868c5e00007e63e8ae0c59448a71d3dabdd05e9e46feb92f803d8aa5cf6e6d1a91cd40df7f4836ed442694968bf74ab3a07c5bc74ef31497066b9ed0fefd66b439153abba0c9aa60bd306c8c4428589167428eb9d912e1e67cce556d694368840bc135f5b7b5a8e1d2b96ab82a1de310f75558f7e9bb5b97c04d6c32db74563a72047db97f8edff34aaa6ffbfe9b496f1ca569babf0a01805bc12d5e43b8592efb92ae259ac0e43c4fd99ad997d13b47d9431ef0a0766042f951e0fb882f6a047c71e316326ed201760039c30392c2ecdf67bc80be461e69db2795f5b3d18e0e50c44f881a7bbe9eb9572f079ce92ef6bf65b6cbd1eb1db6281dd83557d0cd2eedc263982e3cfa7b105afa7cbe2a088b64b56384abc361920497268023c8b1c5876eec39c9d035369c65c03fa51bc7dfd5e0cf8f365c0ba7eb5bcea30a1b903396485077b848db4ef65f48d6db2167b77ea04f839adc48be0adf32d2b5539064359ea076841adb90ff4e6ab5fc2144d93f47212669971852a44e43adedbfcc8877eebbd11f0c9898675e2ee6acff6f247e7ec74c4e74d1b741b567f763cd8a5b5dd5977176f9cc4ca7183e22977a29bec47db540679ad5831de93ea363b2579bf00aff77f6a5f244a3a7f39889841bdc6c5eb95c301d1424bde36462d9772db287de77f6d35ee137d3de98d41aba14731fb730f5ea6de0324e8d2a6436344f97a7a38b3fc679936c9e1b996907dcd1888e2da3a9b994a87a579962d4dd4d56150cc986ff2cafdaf2632f88a8da39a10db1767953b7e03dbddd7a1ee84d85bfad23b477c0a9c2c7cbfcf82b8c08b955f81f4bc5c4af52879f695102b2e0884ed10f9e692aba375db00063c2f6f7d1830f18fe607a8bbcc7f1bb07b756f24bef9545af962b1731e9c2af214d538e528542c091ab55021470a9b5e1fc6495edf08483de91f1b6098708e1473ae1b52c933e5104581910e17c8b32030c7010b6c3e8824dbfb11dda1ae2c86373023b52395c8c2e2b30fe42aa7ceb61b8333e85d310fc5955e8b681eea0a3938a5ac8b7675595682f4787a57a9d18c134c080f3d5a75b82777a06d212916fe91fc7a09aac8fea9b77480850e179fcd8f78d00e9ea520008fa108df8896652d2a8c2c155bf580f9fd669405ce4afce3567905aac7ae06b1bfa1cdc2b99ac864794832031b743dfbf9ddcaf287cd154cd8db92af156eb289ae13dbd7060a539a678d24b0796683220e3959c099d9920a0405a0b2fff186b2e78636e9de4df5511a875ac39f7b88db6daeafa4a77ebfb95cb9ddba49b85e6260cc328598f11d7fa6b118a9ad40008b90b01b7a6481989ae056a43a135ae5396e5f5d91b1f8941dd7f0b48059769f78c40d3c42d5b1354d4a78f0075befe254a419f95b658eb10c4497b5a7fb4fc170c12147b829d19371217bcc92b2ea9db117b0fdeeb07e433bc70f368c38bc26964c41ec72a12c05dd05a7c90f659970e906510834fa32d66082cfdcba05cf75d6763ef5a64602966312333737b212922518f2024f720dff828c5adb0a09cbab65d59b65d86b25f54dfe64c5742635a8166b0c2f0c2a79b6f8de5b0ecbb0ed704228e09d7dfa70f091232d77ba260c95c71d6ba16d59e16b5bfc665e5845fedcf625f07808ad69bfa3d70147cc0fec86f09be67677041e11a25765195f56b47dae43e02eb13defa62a9c046f453bd94b35b5a5c512306a5cd228f0c0f5550ce372d1dfbb05842dfa838fdd1d7069fbf14762c0983032b3f4716a4513fe7ef330d9584d881e95c17d65c0c0c5ffea43f2dc12c3460c216881294e143920bea8dd5553f24d64252c442ad6c783e5e6037a7c725bc898390cdc5598a803c4fc8dbb0f0ee108777b4bbff4e3a41b65bed463280cc0c08e2e624cdf947a417468719e2536ef1b0178f0c19a96254445830869ecc26e71c113a49250694d8e4d48f7bcd7a96c24d27635091d22edcfbcc2aad25b21b895d27a2740ba9afd9ae533b82f84e9919569d653989af5e97e2b592828ce552133d8e95a500df19d6cf2182c5e13b0f6fe6493609998094c51b5a25950fb3f085a9972a47f21463da83f7384544d5bb95e6ae7dd4b716a08e15c42036c6063a533cdf0fa5a162782f3a968459a4bfe775fb6cefd51a4248979fea7c86d1609f6a4951e5cb88d2ea6ce88be836cf04a8add62652f851917be2f7bb03743cc300cec573df71df87d2e97a405723e430d227b66f77a1bdcc198aceffac9a70a54bc21f0f3cb84ccd54019b8c4ba2813c0254b4fd43d967f181d7977215fd124fa4c8c260e358e12ce67ce78c836959926d32ca91bdc432415e60f948a39b9ad45d847f5e7ee5a3c9fde437f3eea2416161d0b20a642edbc5a3f3743a243a335cbb68f626fc9052e65c5478661e325e6749b55ff6da5eab46c431128bd1257d28326ad76170f8d3885986f4c8760ecb892bca163bf25fd3a7976ebeb2d1ed413e6360f53a398416fad38c366058ab992b3c1ae462c7289281fdea727c75fb960bb93fd8f671b2a780d48a9519d0f073d637770a85187e2ff97c8d13e85c68f16e0ff452bfbe56c3b8d950b7129b5660ffacffe9fc01f0a02ea2920b999f06f149f805034d55758efa2c29adb897ab6168d8f30a7537da81afdd2605aeb142bf157a3cdb18c83614b51495108b29a677860aa064a8ad562691bee0e91ca5e02b7bd9e5d1bad7e8cbe7ef20de7b72635ede10d6e031a8dc780892f52d815f2b5a3d689fcab242af8b1a0f23be92a4c3875d6714b3e1efbe7ec9730d8a4e6e7cf189bde556b005105f247535dccbe3eb2881bb8f807c80b993e5e008bde852ade81acf2d3b06490e5a2a582cada1e9102ff480eaa667387d9b1226da7798af2ed04da6e23546fc2431100acf1affa18f10e7b2862e83be36be5fd6a2b8c6918e6dcd3f5d8564c03e92c479a274d85c0164e3339f0edd61a8d46e99a896e0bf196f3a8b23a5f701ef76defa8141b438776de4c15c4ca1705d8f033d2e13458337117f315ed201155e13f849617d666ebc2b523e62014c980f5ec8a1e32d573abe6f89bea31dfce94ee2647b27a70ee3b22a8d88897227057157ed9106d371cbde1de0146fbd99d9eb2d8aee451c9f636029b8d1204685645c9aa14c158f1b565f8b72595ec7ec9ab7b11d350524e97fe9ad21090a1cc92b7129abe9269d19389e88901ea57d41aa9fd88198770a61e71a61d556e3407950bdf416d9ebc0086076f6f6bceea850cb22fa23aa9aa8168473513696639ca71164eb8f5b5283868d8248056112d7dec2aeac3323cd51e160cc0c683403cf87d251ecdc483f34aa119f77fca3a12691b9b396c9454a2ffdea612dc3c75831805609e3f6012151c2a355ebb1f88c364ac18d3a15fb76a194ab400f7e340929026b8dc46abe9b472afa01adad6247176380fdd33ba990361a7fcabaf975379122e6ed6fb41eb89b3252455377f028b7450a4b711d1412a051ecdc58a0b8263c828cf4bf391a9e26e55860df232ebaf376300dbfdfed4f1b2d7a09add684926e4aa5eac3d780ddb3764f7e4361690cab385ae0e952161b0580ed03353321cb0f2f9c20aad7e786452c6ed7b87f22c18e8fed5af8d04ccae2943c4a19b610bbb561247e6c7ca7ab278d719d556376b8999d49111567340f4731a52332417840340f6c6529b8bfe85d17ffb8b8dadf133806c961193a1b0ec29fd458ca190d64d12be342e28c946b9c6b961f987f82ce66e0c0063ccc9aaed0a8a27a3a9197bb08d6773a343e3da7a01dc762dc7e0f90bb61b2696e670512abae6321e556b00217322e9a267d6367447b60ef656fb8520a3aea0d76377985fab8322cbb14bbcb2f4b94aaa1fe4527fb77150959a982b93072c4d703aa7cef695c678bbe6f4fe0c3dc706f0a6b819d825128132c1e1bd59ef8264dfbc4800261c3d4403e61e4a19ec46f739705822e0cab1333b657a2b2c0220066ad62da6b06025c880a232921276f702a870f02dbeb9248b04092e1d281d82f9d467811f8d6cb94b817c18cffa59eae3ece3fab2484035d9879cf122bd635978a0c79cb665ed507fe698a1345bf6485d34e1f26c526620528b5ec7bbea4bd80a1da228e3fb65bf4f86cb93d607cc78ff9eb10a71bc5f250bf4087efe3ad7a072f4351aa33c2357688459c990fa8094b316819b3b3d72c4f12125e1cbd611f9507a2eb45c8f55aa8f647b84ac1b5325d09489e69ebad137a541659b55420627beb051f4065c605aa01fa0aed25e1ea790e2e53bb99835398a3f300e76de8ce1093124ace8879a587c2051497acc17764aff28b160f80fbec9970ec3c7e4b3391a849fa43e3ee37f34b1d4197ac3e9f3a0a40cba65e2f1aa376a29e8a3787ba0ddd8b007a82b17b3f35482440187e6e20b065b758545358452f15892b318345b88ee376194c4b5889ce26106df0bd9f3d4373c8b71ded3e789a1c593ee62f0d6c195c946026dd2abd51a0a2d96af6679820d9e95076cf783e22d65af1da8b7696216e36b426a3832e4ae2f4327d8fe4b4c1c5467ae93436bb52ff14b82ff9eb0277dfb879b76228346020b5c22acf9653f65109ab5b85baeb008a8f69c66fba9e680b2744e6c5a8e9e50ca3b30802d47d9a67e6f30c7ce20688772bdac9397f1c4c6ba06a0946772b06cbe67e9c52f309ddb597c03e0bb5025b51f24132baaa15d7fcef15c8e4555212dfafc8c8f60726046414e893efc32eda007784fcc79afb70c392f4fd64929fbe97b36efe4cd214b56a83cb5ce549b4ef163f9b98ef84c5b4c7f7adf436e9883dbe27b8f35d2e018cfb95bf813415559da44cf71d7082f69c2214bfb5e0857995b862b48ef3c1d7b8ec8a73072f75bf4d7aa289f3b7e80b4541933ca054ab931f45779a880c382cf79f62c86493949aa86a366ef8c80c79d65c2a91b9a9511da7858198160901d8871b0065f7d38519b3fc1d7dbcaa0666fcdb07ce8b7a6b51186ee43d078909b038bd108fc7d8e4c5db0b2a6026c4f2652f00469de9b24d67b2a109800df90610e2bfd580766f5ed5fb7e18e60b2bec17a7056a1aca3fd628f89f7a446fd3a4407fca19e4d39799ffb39ccff38e21b97265576f5d1c1f1d431bb734a7fc77978156382b51990c42551159cca338095e5a7bf39f983bbf57814c359bb0004218b9c98a79f46c34adfae45821c9d761a85bbc38eef6283f303d53418a7f2fd6e56a580b8431014271a28af993737e169c8a83fc5866c8e446dd0bdf30de591a3b9edcf46f362c9332859a62f34316f3187155cc29b2d2cccb19994b1b529115eca7292af25719b39c2405e044e2317967c0211d247bc98967ac4f5bb49fd3745da2329c127322401448161c610767e9f45edb6f0f38a4cc18461e4a20a32f579c2ea2bc0d92da0a7d1fb59eb4e3d611f9f0ba7389d35d588930c46dcea98c3580ec6833edc5f93e6bf3e9b7acc0f2f938112942cf44ac49f566ac8af49df1f0ae26a2ce42d16ac06e19ebed8a5dff770666678478f2822a9d41bc09e7a56f6025958808e623cb049277dc5a298240bff434bef0ee7112f1ba89948b1abeb6be96222741a932aa7c64c2996d3537c112af016ed7201c56ee356753377b5b0120b418ed8fa848c5835bd4e6b098993477cbaab0390c3de82ba8d78c9dabd9dd60a0a80ab0fcdb115395cae97eaceb26e9e6c768739429926b54b8aa3e31b5f66e7bd38ccd8380495882c3e9ab4cac87107f23e710b58d74825f0165796c1283afc684972428b6b2a772e64984fbc48f17f9d1e0a2788b98f2b95fecb90be7801d195f282206d3ed1d62fdc650b1090a8ad7582db1549c5e13ae8470cd29d79e7e6e3d0c2012a5565a933dd2b1520ae899f1d331f18790bebc5dac4fe5e3b6011a8b2145fde5b9a6abd1de3cc3e4ae670b6300efbfd631ea62b2998ad1a6c4287dda72ef9e385f6c2b3a0066394b13857e19f3a02ce6e332087f935f63d17ba99db6eba0fa87b992461643ca8f8ed932e27cdd7aca9f381e7dc9e1aed1e9454af169b9d433ffa141b37cfc33cd0c955384b5bd769a515b0e0e36a4378824549283ef8da1c1edd10e3b983e4006104fb85874170eb1aa10065b4c4cd59555a5a88553102a6aa9442ddf229c5e4e12a6eac107b0e9831a32351f8f0df62547799b3a4fa1be7ee3e7273ec10d2821a75fad4e6be4d1a037e6e6f9e1e0a1f08909f33c67c592d8a14e8dfbf1d4a2d453f27916e6709d9d3bb2f7f2a618f3ac8658865f9ec179205f14f451dfc8e4f9be020bce33631c47801ee64988c4dcc5855f1cb62da8583b8aae8ac0776c3c869cd9f2a0a9812a799276e033fe5d471cbbc75067eb3f6b5563371986dee7f6875618fa5150a57ef95e5c46a3ec45aab8dfc4cccd405552e47a220ce2ee93468f2049b6e403b217fa7ca05c077803ffd33a474521668a91972a711d585ccafa7dddf6554fdb0b97178c44ac3546839230a67206eb56ab6d5dcae425a793de3d85ac77cee40fcfe0f1abcef1acc5efc07d8977896afa6331ce9318d5989e20c0314fc8e5b94be874bfab0527c806d77db7f7e658b3331e3053681be79a61033628c8f77e7a3b05224c25bbab47c9a9e4d67c2f89cc6b5fb447566a77bd2a48b0315650b2d99e2b26a2444c3c2210b9bc853e5958878d683ef774d3c4980cf5ee401ee100ef6f110a66d5fc9b225cd6345a3efb0eb95111096efad03de080e61fa19a1b100699e954da01ecb47d1fed0b3094dd730250c80c4256c6f420b8415aeae18b3248d5b0b8a5ddfd9fa8ef36e1a9ad881ee29b1373ffa6963a8d583ef0ff028bb824a55c06e747db9a9f5b34de8f48e259b99220fba614dab00aa1ce07ba0a5a6846234defd184cb7aec0159d48ef81697a679bc9ff7bec76949b43ecc0bd37f05fffd7c314cc3dfd12a759d49ea4bcdfdab151770255b53b79473f4f89b2990923738e1c22d4a5ca13811f705ce79fb0b57c6d0874c922480b77beba26005c3857846dfcc2eb0a9d4066e0e82eb429076e0fa3275041a3fafa0276e1d902499f82a628c28bed7ee4753358f8dddf2043907e927e7d061ce663cbe6b447d243183a8bfc9b1137f5a7227efdbf9fa5dff7ac3d36d1c9e0ef020f352db6afb24455d61871df62141acb5dc8d8dc5545788309c14cb2354abfd486a6706ce5aaa646fecbb560fec8a74d351162d947f0f5cf079807c0c4efb0954cf1b5460f307a150ce61a8f8d2913fda8c20175f212b11ec7a714b34d469d0810c50386082f47b4b87013ed0e880111e15dd1f589d4c16a62f77a979ed81b8da76fc667a2989f8840f132cf2cd570b62fe222735f7397f9bd94d87c96a1343b27c6177f6afcc87fb18050dccdc31420c30c01c2e111b84f4b53c6e81e8f902941ecfd204a5779b4976aa67d316d9a98a3a6af143a43d6fc72f61b9eebda7d916fb17662d0b9076e175d0223b2f20de3b56958387db3cffff4d224af3234c6bb9b19cdd2e42cbb177315236c48c8eee3d134ae110f1caad7f0f2f4ae93455b569ad410f70ee6d45ac359220d1c72edc164c149c1c143a67bb9ae5d9b8726e3eadc939e72ad11a9359cdfe58cf40f65e2bb76836ea723df883bfbc61186468d98193963e927092d8ea8098312399faf97d7e01e8cb15e977ef6111bb4f29829e109500a1c87429402a397ee2a2de0525a2723dd4b72ea1ab4c5872b31661a206c5290de6988649ccf15068a96b38ec46db67762011b3969baf9b4a733eb00aa38fd03ab1f620db5cfa2a8f4ea2fbb3872ed4dbcc995eebbbaaeecd39b5b61a1165e74b7ad0a895517310e20dc05dffa37acbf910234fb3a2616e47565a66ba58265d0fe7fb1b4548e400251d55a806d492d79e0dba249b1d37c719f86267a3168b519cec7b5792038a286edf07c525b4a0081fd0d65cc6e94261e0cb9b3f1495ffcd973041e73bf6a44c1a14d2d2604d88e59b2e3e8a33dbf59d10cd844907e88f84ca3d95af6de63e34e69ab704d6fdc42dd1be3ae602c7859026e6c932551536fba107c99d3d43fe4954d576c245291da6ff07b55d442798f37dbc2072eac7ed160f03647a88589c87aa81511aba8a25531c0014fb5fad51b908561140699291663ee58af7c23b8e2a0ecf32b334e2d2b955b5ec642540b9a2bf0553a457ba4db1b5d4821e7432fad6c9ac5e066063e5e87098309b511c5edf9c1ec9330bbcf36a367b33a57006c73ff45adb1524cf6d727bb7b6cc40fb75c9e5ae55567fd524ed820f59ab2b30e4e86750387d3b7fd2caff250e7836547dc102f50760e5b70ff684c1b2a6e0db191a56aba3800e51137ae3713542fd20ee14039644a9f0a02a508407bca663e076a019ab1a86b6d91369bcc89a1d16fb50783b21b5f58151531bf99efd994b182305d0432d439603b9c91a0f90c9a457551e1676534e627a75e53b5d541b7dab4ca54aae3ad34be498664b699a5163fee877d9f188b55582a71a4debe970c489be52532e121d96a3cc5e37212931aa14a1b200b8a15bd8ccfae4829bd8f75cc53a6f28fee2ae922ad3fb26d0ff175c75e3cf50faa2f7e46d3a6cef76c8acd17cf0ff1ed82b23acbd4aab425bb4019636174013b35301091fdceea85b33d39f0b154642b56441153ba509492cf22d90d647de60e0e107f92c5eb849ee5619a0d600b0ae926ecd6e7229f50699c23bb29e07f3bb1ec76510427bdf5fcf997631e24a249ae5b06ca10f18d0481391100f72275214d142543b2b94fc410fefaa28a50dfc35d3235bf24a899a03bf62f7d9929a981cc564077d446be10c7247711ac85c300fc793eb5c4c5a08abeda84b6794f68c124e049c676777aaa0f19438240a5ba834700e7230a310edc0b2c1d80d1bea5f6bc9a1b5d984387a08a723945138d5e878024941c79c14e562ec325fc34875128fa0e62c6878b1fe48c2ff6b9c4cae3998a9b2a90470a05cac46e4e625f49e191e8b2952db1a42a14d502cb95c0157c9642e8586b7806c4484114c383679d6c499b449315777d59df353bee72e4882af260717043c0f1e396bea7b0a3d2336f50a54dd730f1849bb5f5ec6b155c475770b95aa20e1498de601955c7a90106a0e2d9debfc873bca9bc3fd7f112fdbebab7be4779363bc24cb8cf46806b54fe76dc20f95332e9298c96c378e114dfe17a3028d2b8d0f02463b7a6f438f89f24f7222e3c40cf973396815b0707d452c3d517d41eb0008e4cd8ca2f820e31074ab4a990735286092fbb911eaabe6dc5173827bba44fcc7fdf539841764f763714b27bb4cca5e9ff011bb1172607c790149983c91ff0e7dd1483e2b2c94d0fe30ca0b9c786ada9cce47127c2611bd19f99b50290df753cf746a4ff9a3cb9255133e305d3839c34b1f8f2e1435be4022f1f908a837215e477e218a0f84c7cc95557a0554e7c86ed7412a1c8c928292c09b367848abe5f18d99f85be5a2d12dd9094c823c3982d76419b36391f804043c0a33c2ecf79a734d66d8fd96f2ed0546efb40ef4a08a9d046cb479f1d49014171c9493cbf1e74c71a085d205e9461f0ac256a8a66ee2bd5fdbb060fac18b1b1f9cc4f7420f3fd88f7c5208d7793f71859fb1d450c50fa36eb4535ba14298a635d963665d1d004b38f6aefa379de022c29d95fff99cd89f85e515cb1e19405d3a936136db070faf2c8d6a70780191a858a4252291983644af901006591a5d432b552ef125b2b8ca643b1487a84f3a5ae7105944be5194dd2f20afd256c994652d4bca1680bc660bdc851a0bd4e08fddba8271bf10292ac8829bcb4eb001481ab027fb7ed6e947e65795664d310804ba35b1f450b7abf01512f8defa5f6ea32cae14eba310292604ec6b5a4e07016544b90a615afda7c397af388e3da987b15e9024ffbc1350467d835f203f1cfce8ceb626cd21e9ec160422d8fb5bb4e4bcc5c7301fc07f4d632a0c09b2a11d3f7bc5d1bdc88e1f24321f5e20f88ab9511de6d89823ed031006536eb1d01af680c334b842ec0b236c3098df75c4abd9e9a678f9b5930c34cad7f730f4782c4a0fa445d08eecf6e2cf7533bc60f76a4f060499dd51d63154a8ec496f09559ff6e3052ab16c37952103237dea27cf9ce5dd7771421b9f8de2413cee1d6fd48600773cc5417e59c44efc6d5fab6bc72952d4871de13d7b505f6563d1890e0226041ebf324ca3d020df8e40a1b8476bece460a5b7533cd968f1101c3e8ac683c9edb7209050bb7fe8e0953eaca06af946a309efc66958b82789f75b8559c4a2b08ca40eaed6ddca3424feaccb3192cf5068278a8e2bf46e4f84914aaa5e25595cd7eaa118e649e48ec16c58eba8791b32ab160eae67a10697fcf30b3eb32e4a7ecdc13fe304ead329a188f425696f77548c758617edf09772a97824fa58e175ac5081952142a83f5e373dd2279630e2510e836521d38310bc620cca4499e827f0abfe81c4b440d1f8a27ccbbc518680631a47a26dcf027bce157e6da641c0a6e0f7b39d1d30359b702d1dcb4ef2497f3a2af8c6732e6628348d00014c59dfa05c9f0679886c87fb7c04543ba0acf9a806eb67e54b27bc8d5abb5734f90e128a8c5c2aa4a189ff1680d971a6a15447dc240bedbd2c3e0759b552e99775ab996b26d4d43a08d13e9c9dd334e9dd194d1c2b42bf9f0e37fa3c058c4004ee515beefe18ad87ce9a4824f47e152bb6cba33c3393e0a1ab83160d408094b0de0716bda748a034b66fb1288d7490eab61f1f9efaa2c2cba30ae97752a60c8531a288636d9138e1915789d97973a596d77996019add7d1bb8cdd68cef57caf893ec9a34900fa01910ab14a1e66666b004edefead2921e053ab0290c48ba13fd4633bf61e2cc9491902269e38c2ca5ac5b8d009faa6ede72c3bf3dafdffea00379056b1fbd65b848815e4480cf5395e3465bf811ce528aa2fb7d9ad40ad9dc017168bf8d863918279cd3e009cbba7586100ded0088cfa2f38fd8aef9ea0a5d5b6230b76b6bc9b33e426a794f7bc639713f9e44bf8987df1468cccfbd7ffa4e575e98040dd39115eb5d3bb39f2fa16d4ca80ba30fe4b8fc1554c94d9904a295d27c2696959d4de81bac10797102228d7b294d3391fc0ad18fa09df8bda38df48a0bc9b0df0fbcb02358947bb3d9e311a248f3b9e5eaa7bfb16215b462d962f0bbf0e12e3595b1bc503fd10b9e26100b42f34bba7a0a683faa9e2332d184504e9c85dc6636121823fa641b040379080055790fe42521e59bd7e3a3168948c60a8138c487f0971d411e93eea4cb13402e98cd50bd1f6ce5b21dbb7a2b75b8ff11d84f03bc26fd03b3665e41985cbd61fb2ebfef20e7624b42bd8a27a5e48586f9fa5ca5120b624beea6c487c10a7332edb76f165491fa9becd53843a479e4dff169c8c38e8fb5a0f832ca16da7cc8abb9fe8346687a1f85c02aba476da13816d3e8bd1177e706603eefb80a9d74d3583c355f3d1e24fb42c48268c6ae4bd72098dcc34f2eae65fd0b735a08a816abe0e305bec5765f9bef552a51efa2448f3a17d6f4432da82efb372af98b1642aa46929abf84681555675ee10ab8432cc84a3a72483fe13acd48981624710a00de80703d4bc921397df48a3a7a75c93720c45f08eeed58b44c6047f4517adb02374ffe0f9de23b44b60f7993371d9d37b5498ce67febdfd02ad2e8a2567f847040b665fe8e1b23bb3895ac50ad1d4a84f78c5b17208bcbd8fa6a224a3cd68761f18962501805853f7f02a86896cd9dd2453b1c84e145c04d2e1b4d6e3d9d80023e73ee5cd27138b1d6544b081ab88dc77b07e596d453b4d57312aa4bd1e79760a53d50c7756e3b7e39ff1784f424823b98b9b24c8f45fed2b6ddec91e2853ea8c41fe54d9045135160195997bfbd03d766f377d11c6497d5a9732aba97b773aeaf063525d5618beae6be954482304254666ca80d901a1e33b7ac0cabe921e793287ceb028947479b79a33f4b030f1303553f8bb82064acdf916591e8294431f948627304141fbfa399a4f30c621a85a5a9bfa5158b5a56cd5cee6d8896bcd1b99158ea86562aa3bf80b5fec42d63894aec147d7306e8eb3131597b3f21bae6fd74c9077568f56b9eb6b4dfe9ab84bdb15e90176f84abe93f21d9f9fd9db5c1504110e98d6e01b8977df28e4581381b63b3508ded19241c31842093ae6baec63b9eb0bd4891dcf98670a099610de1819d665909cdd4ba0ad276937e4f8f84c17556437560d8f72f5a7f63d848c9845c20c767f7b44e4a0ab9d930191ab9c016e917d7161596689792dbf5d9d56aaa3f760ed487a2fb1115359b2224649ca4bf3aedc2f62eb24a89e62bd71a1ea0f4ab97fb47b6f5261077638de0909e868d1daa30d96e5f20b7404250fc556ae29c7e17b12e89ca0884b9ad66e1bc261b4b10a94b35fd3511d773c8559bafdf7265d6cb5514e83cd55fc018109d0886123d47cf0ecf88088e97ae1c62cebd8dbe45f1cf478ae70cc061bd9cd43b4e778983e6482ebab16a533a5c6bac5917a14b1d1a7e4489c949ddec4a4c35715f51674bbe31fa2427b2f0d9901e73e37b5c32e7a7d17f0817a3b7ae2dbeef3b2794fdc49d72b454a30d6a0940c53fc0cd5db487aef842dbb84abd615ca78ae92bca262bbad36d1c742a7bb86e04f50c6a195ace875028d9b2090f518af04509267878710322703b5a1691752256a405187f7c15130f04a467d1a6220a6ad2351f3d9aa9e1b71a26570f6d48e2524a968cf21701b3dca9e85699a324f01084aab596d39cc2ba643857fd9d6636d5a2b59b809f25f1dbdd4a374143bd811e5b9e9653c984164aad337ceb3a2749ac66d244e6f97dfe4fe9b69245c1716f82a4c56a9347b1f796414cdd22b13eae86059a88d0458b27e28db38c86f04c80463d86c3616fa4b41a453f6cb2f60f701154aa2485b60048243efae97dcd954007dbf5ca141ee72a8cbc99b7c0662e8d181217dfe4aa113adcf6cf01f1603fa330ce6831deadc22380cbe93561d1611ac9470c8e89efb2f517f4626a4a5b33ba896e8869547c5b6ad66f78ef9258ac96bd3d433cd9f8d5af5576dd456ec28c5fa089d7b8fbce79a70acad99b8064aabc2ce3b4ecb8d84d363158903fae4dd1820b99e2e2ea96d2030f4f0b78560acc24981e65938620a2bff0b437e398b9f914afd41e3b7c3c749d1c11f71fc19b82e3fde1befc3cb3cf1509cd13d9172d1e79de1430c9fc469bf6741cea2513be3e2e5a04f3cbbf1b453b94b36056ad72f1e1fe87790d761d7ffdee38bbe0abb61463736e1b5ad50b399d4c341edf579e9246a38d4b65b85f5baffeab045bc75fc579f0be0ddca402b35c085cc7554cce553cf249da049ac5079bb3a8df42db1ed95756280c1aebd971be9c39540eacb261345a465ca50333337581749541a8efd03af9319cbc362f56a18cd26046ab7197c5d450fe70fccff4843161522ab3a5d0fa7d4d4fa54ad72b01f37f5bde9e966a133b72a3a331e55303ccc26c31d719ddc3018146809ec555f323c58de79560bcf0647fcb14cd61e08f1dba84a681dfaa33934193bbfb6fe9fb952d211e605b57cbda71e0754dfaaf90fd2aa48e27a70c143c49a4f9b88aeff9d24a01a393d9ccf3bc395ba03cfa68ee679651ebd81850e6ecccebc79c109d540d0418d5de2b2492c7e76a59fcca46f62457bba9ca3bd8625c78cfe2b8534f2452195c9d7ec240ec96acccac48083ebdcb9c6172bae62284fc1849a56768ae9ad6b02791ba2835742fa4a97887d0ac6c05a85b3847a8b66f3ec9088f9cb6af569a84ceab502547142bb2c5f03151e4097ff13db386c2a1b1531ca276b1a4b6502b2a2247635b813ef3409b9398eb3a0204de5cd8689366bd6b3e66e78c97b0d69ec3057bee557de6440f7c71e69bb1b4073ee45add12098eaf1d3d47fc4b378474033dcf75b502340b77e4b2337983f7b7d6aaaeb816938d376b26b634fbbf2403a98ccc29ded9d60cb11dc4dfbb28bfaddb6341f9a3487f5fef487fe61764bc56185bc784badcb6b4d123500559b3df61bf9e154ad743098b641684717b7d5b8d62fb8f96e1560b682a2af5b94a91ec8f7f5a8e0ea4a17e3ac8fbbcfeafd9386d70ce6cb9577d0e3207a6413bc9548dc15706830580f623c17397e5998cee7c0960e388688014d57c705d0a3c63945f0c0a3d8e10576e89765c81bc502558fd54b730c0bc0eff47808220867659c67a55b6ab916ffae9b28d0ba3662f360c209929df36fae2a90ae5f95ed9a32004a62b1473f1c47dfa26a5d10f3a26d1c784cb9c9fc84d7272e19369c9213a0b3b9f6044d307b4f1095e18b2b593156ac3025cdd527e3b5d3defc3e95831ab7a63338591910a265156c2558c882a5eb7f9a09a3ee98f55b0b94a67847a62cf85d5e7ee192618e1aaa31846df6bb6c9748c40bc1716ee6a46f8f824deeb0ca0761880f50158a6670ebc266bc72c546526c8d60e2f8d01232348b35d6763c66153efb58b65d2e78be66f35e893e5247935ee3f25fdb9fcee3131573543db44519793591802499d0f5825746ab01fb3f112a09470e1d9bf89208e1811cfe6dc3f33c61626ab21fe9ed547f0a1ea52e7688e2c67153558aa38c617f72f57be5914619b2701c170979ef31e86f981620e2d99f2a634317ffc0d9529c08d41211abb7b0e3d5d48b736d0a02fe2662c7f4218be98b1b0608cc3fa9be39a36b1d09444da20bdae78cd375b73caebe4821199d7236610ede4490d7d2d561675b452011efebac9e2dd1a0cdd07097b45a02c817b1362f26df217e296a3fdc92fa589159fe8d1649653a5dc7878a320a36b4ec7593a7ca082cb16269aa0ff46e2f8ae189d4fa8fa491d3e76b1a20b856842af820d260c25ef3dab173ac1ba8ab066b2ccebbfc1520359e5f03c09d81c89ac623c6ea37da2837b5ea92e78ae301ea899df9bd99d587c498b973537f156ad3da42602db3a2271118823d02babf6b597c6288455b0192d7547517e42f94899f5fdec9fdc82bc9481561d640979a08645a6655990b28c9ad1765f16eed652ba9da82f19c46fb9e4a737d357648a54f5dcc23d45b53ae918e437006e552724fa827a9b31c26d307852c540524ef197fb6bdf950adca6d0c3262181b70fc62e2889c46a467a5667cad9833134b0a92b451caffdb1c7c6d2e0354719432606cda0d4c7ab6d42d3f0972ac6c3f1f4da27c397db3571dac2edfa5a08e659e77dd481486c810405012987e1e4d19a783d45b5080035ef8ae55ca5868a666e747ccfcaeaf007210ba1a0ffcd84b9f39a42df16484a8c7d490f6093243a4fa2d390b8f0322dd207f568bf8339c0cbf80eabe5f10566b0be7ae37521d682baf89cb563e55cc1232f649f0ece6058d837ede7c870c4a5681e1b678633b62495f703463c3f8bc179312da56f63878189be874945c4fe359c4960c828099cdaf3b85e2342146eb0625b92096a7b00df8fa92774148d298b6521e74575229ee0342e18bdd4bdd11f1b06fb974126df84bd10721bb1f59b4aff01f2306ea23d5a88426a9bb7aab5f3c0cd74b5852aa4cb26d2301df40e197320e0bd0502da1cd7556107fef38ac245d2eace723574e1aa7d33532ff5894517d8b546eb968499d8541a7e22c49a84ced4c77ee6afb4baddd7717d9059a33299e6552a80098c82186b6c57a8af49ed841b361837030161976b3de36246167e2e43f7288ffbeb1488d33b21bccc935d8dae13402a039389d820ef74766b72a8363d3dc31a86c1bbdf1801873f052b3a6f4757ed989bfa4e86b6a771fc25c8c8380c7a2d33bdc45deb87b3f6b226c48673024981af90d6fbe41178a79aadcbef2aec7f961a48f891f8d634381bf3209c31028d9c6ffcc12fcc8f6e769bb6ddd554ca35e60f1162f743f6014c8374756c61938e2282293e876358a289a023e796dcc047e1beedd968b175a833986d973e094c93e359bf1edc37ea985387cfdaca391983c4af89d38220b4023b7c64b73804c3ec51bf21ce7446cb39c9d2f7b39b3045cc84c331dbee2d973d7d7e056f646042c55593039163cac504408179e5e5482fc88e6d6f5f0d6235d8882e00b211b62a8c07dd7d1a73451d56f2627b5c87827a867b5f5a7b02941f6cd89f8734713e345f29f104f243973b4e6bb7f946737bd8d1c9f1f1b83c7ca800eb1c3249c930b7c89957af272c539f309c9c813e4bf77f19838f347c8a24852b562fb40cfc5f0c032692dfec2ae90e1655bd7d2fc394a99d1c8ca747a09d9380f41c9b2f920f02d4803f68cd5e54e0588a802bdf595b581d795991a4bfae0e83d85ae2bd792d5d869740f70df0107ebcfc797117c4c0aa6e694a33538cff8df8d0d7bd1373ab1ba5f8cb9cfd56481e56bdaa91667122bdb1637c434377c14761dc04b5812ff3da058e1b5639f07a94a08ae8f0b7955fedfa07a59ab8c1aa00fdade6682e69189c7eb33997a7b7a14408eecaf4da891c249fb0b5d1e297214ee5b31671491d73050c569e388da01726d9c97df92658babdd675b16a62c6f5884b3ac05d5c2c64679ceb3c07f0f8984448b18edc67f6cf1d499eada874a9f19fb840cdf95b4702c68b03f83f2695f992afa0a4ab6620dbe22e98e0aeb12d55a820979af5d4b1fc9b5c42c9584cb45ecb1312e37fe18944abc07278d0a9cc3076f3ce45860c430f65190f48fbe0f76ebae480a15f430359e16ebbad45fa9f39f09f243afd99912b13600b98440fa1cd5321164226bc57ccd011e87487d178aafccca89cadda823c19871863e6dde08b38b63b70a2457cfe0c9845455ae364ce0782cd39abad7d73045d871c53b6589d7c57dd62facc0b86be7f3ce13f23ea025398d84259d214fff21d993a63164cdbf12d4f21bfa852c8266073f1d66760607105b52238f021f5874fa2e23093a7be2dd0843d0585e1825fa1cb5da5b26e26d24655d344d51aad444a6d0801d286c023114acdcdbb44ec30b663b0b3aa05e860e178f2ee30e9cdad5b13faa6e480b4e0d6320692e879464c477f93e536065f8400da36bc7851e2eff852069c69dfffad71145aea2b5d0851861ebd275a4ca87feddc1f72abd779b2c9c1e8c27141b2c681cb99d4aed18a8bf2da488177499cee3057e1625b530ddd1760774e48735dc50ace6e0fac167e47f07f63decd0331b30230cb9007e6a526176a79e7a664565f4aedf753baf3904cd9362bd29e3642861ad4f871316db0905abfec76ef0fc18990d9d6391197f4fef55e2c7fe5eaf535a726f8de7f359492ac61bf1e63e0b30189c86e68fd2db5bd929f2326ff9ad5ee70a3c9fd360a1d1b517bb5e7efc90c0d57fd0af72604d8f8c445b4d34298b379a5227aebf1bb1e6e966274860b11a856c2ea3a4aadd3fdb0f1555245c6c3334a1c72a3a41c9748b6ab5b584db2761e1d8aac55732075ccf55961b6920fe8cc12f8097fb3bde893131caa8894f7c68f57a803203d0ede67e952bc6881c117f8b9123215ffbb32ac9c5742ddc6cc1f53dbea8808bd7318c57e6dadc1fe8fa7814493bb4a365ab9fae0fb93db999cdec4e4dcf9ba07a67104f9071187c5217dd9a903ab27e0b9ea7ac580e702293544d32d074289a3e04db021b90b3dd0e95065328650b2a57548f33d3fcd90a3623b155123dbec66ed1212d791cc51fd6e6513a1cb1dbfd065f4d4504e9343189e55a93d7a8c0a5be7fff8060127f3d57fe37b771267f91c864d1845e2fe74840e973f609187a73046f77a15c02af12ed95104cdd2b9272b1fdfe18441fc5f5ca273c44c1fd7b36884bee4f956870f3cec7d44ddf0a3044b3553aaa518dbaf9354b5e4c15c773e8a472bcc8ce62527e8bc7f204e98b01bdcf2838007ba0c51e31c82b4fe82ca4e19923fdc30e23f0c4842382ac32e936af21f61a6c1a162c1a8bdad9c530e910229cff8eea03a5251432318d615ed0eb3294a0368a6bbb0fadd5137f36f01cd7e0f0c946e0c3232cdca13b6041899c4a6b48ccb1895933dc9492d5754207510d3b900fa50505f26814876aeb6b2e8d1fd555329da50fcc30aec518789ba348191f17eefac288a5c77bf1748c7d8e90680cddda91a8069d46ede6c374a81cf5aa6b2d37f3d9a99c21828899e4ba8713a8fcde91a52e466ba486bf2e36f8dfb055394abab16f6213d10eab6ad182fb2a7cc304932d5d44e2aef99f4aaac83b0f430cf914477c49c9e2ea14bd7e94fb478f41f738e9887d98b055084db2c102d65ba5f614c9ff986061cf6b25283e59c5ab9430b24888fe0e571233eb7c6bab40f30f194daf2862aa6680d99e2790527b6b4ffc7fac8f819f6ae3314c9e1932c55ca39c8d13f5169299a97c07a586e8cc82f29b97b37911fefbde7c65b4a0b289bca91185682ecea98e597e1b5d26a6dbebd887ae7ea8f7fe895f10975c1a0c96ed5e12c21f5c8f4a99b4e6928c40c1ecb1c3d2e270bd2d587bafc6a0fbe6ff36fe662e832df9417a65563da49b1f96092f3760e24045b4b6cdd70bb403c4dd71f3c873ec6d4cb03c41501e5a1785cbe217055bc1a5797e7a6cfc1739fbb78f89b526f43673d167d0ef637c9959b6f8a103fd6c9f03185a9cf1a3a1b8bfddbfc7068266599bf2ce620d5d04258e458516798353d7bcd902eeb98799e26eb7f2ede5a265e550abd5a7b32b92cd25e7064965cce0c1adf8cc6284b39e4287cdd10815ccc441c743f3859caa36c558eed5a66498c7f816a7127d6a5f42cf859f69870fa0718ea04cbb3ee2399d3b2d73950931abda8a4eea609420811e5b2e7eb6c4c2afbd07d390d6610bb10ffe6c09f20d1e3f03880e525c067c986be787fe776fb29378ad6ad88f6aec4bd2ab170ed16fd01726243969ab34ca47808a11221daa7975dc96e8280e71ffdb2a32c4fbe01c7abcc02cb0e4079c003fae20b3d63f8d998d124ed5107d0b268941ce8c332234930a607250295450a9f781f4bb7ac40f8e547d06f3e80752256e34493f19c4a5c06acb09795c076008d159381e8e23fcd7c9b09e14dcca5b9e5dc52c0129a2ba1e36ea363319f51a312421daca8dfec7a7e06377c94353c9fab628da97bb021841d8418788e1e42ec96a79c28585f0c5c203b9e5296278ec24286df60055e4c09783bb49f0b78fc129e923776506d5e5df4ec29180170b338c1bb25dfb6e79f9f35cb2293cdd6e4d9efc462b2db33e696d883f2c1ff1247393faeedb61f4d3b45195cb190f37e5514da6bcbd43745cee162a56ed327e52c1a7bd2b45a7dbc26ce1415451fe9b6f0d8237c5226d11135bbd4b0086dcfd1edf476e073a39cb4f60c9f8d4764642d39c875f0100998f5311856e79fde177f21423c3d7f908b0ce608e76190989bd568d45d34007d156e779cbbbfa35df5fd262cde2cd0154bc6113f3d6410dad95f8f49e9fc699d5121fb37fe4afbdb05340c10d13da6840df76df59503247d219270fb68485caf66c692d2f8ff2a60f0b0ba502e6c96f1719b1d327d45291cbfdb3d384875fdeca75fb938f286912e8428f1d7cd8ec4ef1d8ea2f26788bbcff6c4e2fe4c2178bb9b856b0d9deeba795bee507b41d3c13fad24069fe32101506fced122b5f5250af3d833a96f661953fd32ad28fb72b335cd378f4a8a915ecd91c8426bacf926aed82e7c21f93532e989a7fbf236df5e67c420ed5c1e8f60199423af1543ff5d5ed3a9c56d545fa042b1e694c7e397a0075101f1a317df39433e50a92417dbb5ada0bbef7f7b051c6aaf1ccd366be7641c5c9056be3e4ed653056e10485b8a92823c6e18fbbcf0d696e6e7b6df9207144bddfa0da9efbbc6b1f7dd7dfe3a5a26acf9b291f04d4c0e165fb65979ed4dd2cd744093bd8f24e97254299d948c76c5b70a8a6a02202f0e29578212ec1f3d4039fa5b405b0321099673ef9383ff249ba7e558c6da59a17f09ae27bcbce4c44c406a88f4c5917b7c450f5674086ef1c9b8a272945ccbdbc2a0d0a61c2bc8a93ca99a16b493aee3c613b9d3225d13a7beb7211a91c267e691d4e53dea148a260b48b595d1b3b73a5e9762281557fb4b1b930ef09b31cc8103abad841f3d97a992f591f357911ccfa426eb1a496720a96ba92c6a57c58b512bda12632fb8ceee04255d63333f38ab90ea4ca70c67a19e9cbdf7a3dbd8a8d957987d5b58f41775cb64a53da2a705b1ac31ef0e87e7865f767ad440c3de1663e71c033db06e54962bd5c43e26b90e2ed2d09392eb6814f73065f774eed908f24088240f23a4cc9fe032454406a14a3aac4221a4539ee554c22c3a4b5f175b2dd93a1f95886f6b6928a022a11329d82f369b8fde089138b4c410e9b74093e7886cd5b38c7dc677b1fc99e27150674d92fd9b296f2180ed310476e75cc2973765aa61fe9935b7fd145c57d8439b015eab715172549bc96dfd146fc2b1000868aea8906ba168c586b33a3d0990d17ab2dfa7ab875131ee9a8c104e327a45741881dd83cb0381b159dbf0960a336f52f34b675f4926dba83fbad5975bcdb4488685b1aabc666ddf51f621fcb66a71a8d771d244ca4441459d91e67de22bea5d188c4287f723b4f20df1d632796041dc10ec10b37543b03959c6dd76e980532f4b89322781e1bf8f93ce5fd62b948ae4ce87180c3e8c1caca5faff3c3ccbcbf00e0611cf5c17b663a8d2d26fd689bb84fa3466cb50aa66996b3503a3cce0633f83e22a256e3cfda89e41873c8db59833b33741744f8002032f5eec0008225efd880cfbbf2e6daf8796ce36b4bc420fdac6cfca96a6e47b672c246c3b9b4d9a6e1e9d46767636833a25bf8c30d1700552b6c0b0c1d2541c569ced08a5d8c5d0b59b6adc344990e2d50ace8b0795351fde3ee8b209abe5652754bd17569c1d924453d3e9436f5e76bfd13dfe6cd2e1ae90f475c1dc20b9453eca72ad3d4af1d2f7b015a46aa20b30bbe34114be8c06d268462493c50b059002f5a267ba13b7d6ae2963ac1f8faecd3b31e0ecec32ec677da58134796969a777e1b1abf548a2f359753122abcdd0f80bb5338c77047c68bbf118de75635699d447bc4c4830256b8281cd6182193d6f52c60ba84fa2b85c70c13d178244f8f7d581cc90765b6622fcf2017c48783ffda90a0e5b549b2b5c5e42a4b944a997b5660b762026d5cc4c10afcd983798f366426c355dc494e6730f234810fa5066f29c75bbbbd2fd4264b7c1ce7426326a38a7ab1331707f5349f9a1e28ccdd87a5565549c3abcafc2d55a51e35055c356a0691e46f5f86a5b6e247969bf54a4b1a55ee9c7bb6101b2d7b24e80ede807ba730715304071c37aafad7dd531fb4fd81532390a565426cc9a04566b326d4fe71e096d96308e17382f8938f53de147d422bd91f242ab0de36713d73bca9f74f58bebadffc377899ac1cb23bbeca7ea3630f8e726cc8320500a60c3fe4580c637617ccffa20c6a75191d75b16bfa601c82771e8378f5a023f3f559fe0cd411ea4e2ab5eeaf71e8fd54804a48387095ecdb2936e58252d33c74dedcb55e4fc79a25520d5ebb8986d3e35ceb745052f0ccd2f451367f30e504163b2848d000d70b6a421db5e886896524aa7940fa7d86b5d4b1ee66dd1adfc95c5777ffaa00749fee86ac88ee16183bbfa6ce2bd4555b978bf5341675c405f9b72e0110ece7101b0eb5501379b90e38f5490bb7ad9ca89409e7cadec374e5908b870560111835e49830661421ab3f2a20943793715dbdfa38b2133f6423622ea46600aa7f7241a7911dc8fd7fa270231756387a1e00b778f28049a2563ee40b21a820f8ac74b42f18bb6349a463d45bc2ede56ef690182429a0edb1d4311a5bfc3e47f5f30225ebb33328b38fca74dd6cf0e2c756564db5219200190b0fa9d3d7e4ea1ce5907c881e92b63ce657cb311a30e134061a5d55f85c03801b90c14e3fb80d0de8de3d04e67db3fde398c5f0f55a1952bcb72b754e33ba958dec0039e531dcfdd74f4c9c4c1d5a732de534adaaf8f4cab6a828de00cb8e94b894714f71e06202f6c3c45289d987857622092249157ebff7429889c365ad989e4af6f4d7dd2f46610a827cd7943f68ca4e525d6cd287b4897c01bfd03a7d926927dbeabfbd84bab1f873488b3c109eac81229e221d9e310e49c28ff371bb57200da770488a807df66088883c43bcc124e1cf0b172d2cd8e26c1e51ce95b7cf96394384bca83161e212677e6e62253f14d6115d2c425cd62421530199344b86595bac07040867fc40bebfc1c1fd938d3c2e83ffccd63d2091f7353406d1db1698b09d700efc650e37959530ad6b0457bc3b1f9af69de048f2414cd3144c88c9f8d05f24fd9dc392f222fbcc52e5396f3879a0e91563891350596bfaebf2ba058edb2e0d5345f7625906b24fb638113b80205a4c426eab87a2042b58f153ecc5396d1e638765b417f6defc46ab8225213e57167bfd4ea8b796961373ef92ca22c2d8bb20849f5341bf543254dec307abb5101909ebe328d677696eba92df51a06ff63d3868db3df4892a5df5229b48b400fd219727987a533439e1c6dd47b2b6a0ae04bdaf244d397ab184fea8d4839f658f5b8da5293c57da93dcd178640eee4b6620669a20e75c3010d99ec17788765e5daf704f0c5a596725d120a8c3d4d7d8ee65a3b7e99f21d25fc1b8c9627ab32dd7ae49bf21f5f9fd04798165da833ac653d99cc818d7a72e5e9090f407f385d0588b3c7952e2b80e08c15a6dc6fa619fde951714ce2db40232c3d4fbf3b0e10589244e75d3ae34b7ed6eeec7e39d5abdc647390169510df37d44f7901b9d482edcaf590eb114b0bf9a8cd10b63fe7421edb7fa99d065910cf1666452099f7ff4dec11f3bce8476c65e99576495611f5bc04de9a7928a8be1aaad3c2ae34ab6be2fb7275c47832c8e0d2e3ca705ff44da6a0292248a554cc82351b9cd2caf984ffb186aad54903bd5ec335b93bc0ebeff5723724db84eb48572868a9e704bbd724fbec7b9f52f4c5cb39a0a5da5feb3ec99ca915ba4c102edb1c539f1bfc650b438fb0b3dc9995f7ba8744693061c4a9ac935b2b73324ea914ce7f2604da851e014499450d1b3efd9ce9634e7a9fd58552614c561f47769401685e8daf25884861c465a06bf21d5d74a7ee90686c1993633b4ff6b2ea4a98039cfb28ff50866d979a779b12a9ef309dc3eb14e5b4159fefd528002ce5a12a6ee434b58564b8d674b839e80fc97ad64bdc7fe9e74157cb3390099d509fa25a4a464b3d16f96dd6a286e018bd0c823dd894c8df6159a2889c3db0ea0a2b6542a263c62d675136a955018244e2057d0fa1bd0af3b9f5e89ebeb2e34115785041b2a48682f223e474f32a2d5fae612ea13f36b74465369919cd083d2b501f7c5c341978d7706711bef03796000ff79148184df722569f158fb521064cff31b41767013415acde4def85fd2eab5f9ab2c9882deed56235e6287783e04909de3eadfe5c165048e3e84b50d000839310d919e4a6f1c3df275b47f6de26fff3060177cb5241b6dc612726ddd586c5a9e1cc7cd16008eb661e0f9ef605a2d4462938b6c90d6e940448560eb7acefee10176f39b29009421857a19f5636cee30e75ec1beafcacfabaababe6dff9040ce805adb9f3b271acb69a398227250560c7dc9d960029875ce58a2b5aef70bd2a7e2d6588efc1e64f072330c4a6291633c22fddcaa5e3b06c7c97dd537b835ac6273134997c2aac68af1a0eeb51be9c39183fa4dc75fb712238666b63d6b13db5063ec2564b0407f15d0c1c685d44cc85e8dcbf67a12749225c30dbb45fa125b297f94bb262db225d8bfe36959b5fe9d6077b3d5824771c16a91b450dc6090d8e6869273cf1e99011ebd6a8f8a4572541679127bbe98e1f8a73152dbd7eeba4975ade1200f9c21660e514e4329521d79b5515d774a67bf6f20e1dd91edb42a8f880f8e23a88b5b020c454a32dafab2dbe883ac0d6e52d4d2bea8a8a08217a63c442893a9f6b9647b9b786624b8bd49ec4f25ddf99ac65cc2a3c6b9f229cc60b3a6c73aa26c70c6636ee14159a62e6c843a7f8bc0d4a51429255ef630d9e9dcc9e5008b891242e98bf6b24daa4952f299645b5884eb74c95302606913204542f4bc552bb0653084f87a22e4aca17bcf350cb71c307ea59dd548aa688ee44404662460c866ad54e20db88a6231ca372d693d3088f551f21989d0ef1dd5b59caa41d8782ba2cbfa90455fc1efce41998cf95080417c3e66f1c8e36f8bb109e5fb0a3ae4e5606c5c2873a021467978c585d3737c8e418ff86636a7ccf1fe853693b04e688fe9efc39f1540bed571b7dd8b5433fae99a6517efe167c674fd8dbde44c30e08f5d698d8587758e574b426d5b9520fa8b676583a05c167b0089d1f9f28b918e1074004815f914d2f0e380c11425e8019588959cc58b50007a87156ead8343feef20defb457b3be200335cfcbf9dce3f72349db87423ff787a46374f61811d80be33e00d59ac4cda708dbeee8301be3fe21e6e30ef42352291c35a9a8d7ed8e16dc33c008c2bd7d0b86c1b33ef86f717ec4cb4ceb74390dadb73fff1312acfddf15a602a35a3f06f808973bab824889d97344145538a0b8f69a91603afe1bf7c8c7ad5e70ea194b171fa38ea9281623ca1991ee045ffb33a37270215c4f54041741b988e298926ddc3d0494d20531eb6a3094593ce9797cda7c6cf8572ce7cb70d072051f54d3f96cff79d743107c121ad92ce087ce191de76430c6b80f9cb8b0ab12a5bc0d91dc6128f84e2572246bbff2f7ef937944694563040015c615f058538c2b193b85b591ca37eb6bcc264a004ec8d341905569ab2690d4eca79d343f2bd8342d069586ca75813746743c7fe7afa964c1c27f5bcdc389f3ef430d978b6778c5e3cc684d99ef9c0f9011ec465f52ee2d8e66b1924bcc34315d7be33ceba61ce88a0c67276889ebf066b9bacb0f8744b87f3143d438518de4c1f6905d386925527c6d5f162575e144347966c42edba5cdbe716ae4c32cf8ea442277c967297c82da05480b2862b2bdb8204c5f59dad7ceb6dc3ec94c2e18005121e587e6bc3fcccde2ce3b98b6daaf1a41fd565e6afe077cc51d200dc8bcf5775f9f8a9738981afa194fef23d2f121a8cb56c731709c78b7c3086f7c9184edfc807023c7e08ca06ba9e5a0ca206b303a1db9df0b76982bd66ffe5d116ffd7a9933584f618f26ffa1aaf98409871ba33b03a92b84756d482b927847fea131b9e4513b22eb4c23b49700607ec08c6fcb5e47a90785d87b773f68e2ca0abaf6781f38a7572f5b227072a9e67a7196ad6e98ff6b153aced0798b8a091de2964692f5197228cd12f97d1c2c4126472d68d104b5ed94d3062d7c04c387c94e09df66ae64c76835f9906fbef29211403d2edda650ba82395ee72ef4f5d586c285ea3464d3099b0c5fb812c3739558614cbe586252ff0d13130c56d00a0b6741526f6469be796d35dda99302da3fc9a4acd81a2e06b109ac5bb7593ca477101dcf56c1f1fe9540f90def436f719d7479078df40afcc7f02d3fb20708f5e0638c4a0261e1678e23ecb0678f08b91e2460ce651d45ebbfbf751e68340eaf978febdc5f78b630eccb55ce05461b2abbb3e7e3e7df7edd24d5ce21772a1e64f63f7db6ddbbcd1c4cec774e838e302522442521cf18071c6f4d83b518333b19e64aa7578bb2d3d57ae40f2d2b5cc75de0bcd1dd5e17c43b1698fc5900fa458bdef0d5020301b762f4532c302408c74378d78acce52d379828b597ef1dea857a16973aadb1be585143d464b3ea91ddb034af075d7db3f5d16bbf3c9d228d9307a9905f48c6aa3b7d47a6eaaaa23c6a9c96a167b07edfc9fd80b8bd8ad0b68f9e8c4f7c8a157f7c954d98bc9890707737def4c5cf355e6cc243f8fef05dddea1c6fb8befc21d061aef7a11ffa6f56912be0bb871d4a314fdfd4b893c72da8f7b06695d0a84840361fbdc7b343b39bcc2b6d1b81de690e218765cda44b1169cd106f1f76ac2f0853daab87d7db5be4a3b5495676bb0c9a60266a8d75675d60b77c08ae63d50996139b41ac25c5505b06a9d535dc5ea93e8080739dabb8a986d572e882ac518e327e1aeb684f779650c93afe85cc85d1ba520558d0aef7b6fa7e4cdce92ef6b1ee56627be99565b14fc503efffdcb8b46c7dfe45cc481a522bc57ff410966800ef2c8950c486ed4895f1c1843bb1e646572732df2cde2880115922621f6d52544a65a07e343532557d3c40d0f42106f216af853f82676335b91e5236f90c7e4f17b9c0b826dd14f12ee5dc10a4c7e8b59480c89e69cea9814f059c0f09b8f0af054bb9d995e46ae12c07bdea5b5fc4537dc37147abf5f619e5a5cdb7d6e50abdaaf0cfd27faf4f92047ffa56872346e570b2e56d3e611bf30422431fe68488b04eb5d6574fb81890e118023b7ed542706b75bebceaad1b3536ed1f8253c06707681fb7d7d2f4d0b4551fa34655b055ca028256fe6c346db737fd99276404c0e5a47cba7bdcaec0f30089a42e34442504d82966335e36ea1a7a43225c68990cc7d4893117b0bcb8ad014c81609c032635cee45d41ab4b4269bc4f1e2f52b3544dba902d73e0be85b2b88b1cdaeef379aad8a25970b1c0f46eb12819c5c8e875051fee6343538a149ab42cc441a59eab5230b5b52de1a88e5222fa1b1f89cf248f8202633c4b3a8e494ef43ca55ecad12e9774ca81663d4a2f0836b7cf392c1bdf8b65e2f9ccdf298d5099ad8c3e32bf75e35d2c7595ec746cbc280b40d6a042644bf3d9c90ea21fb37d3c84bdcbac3e5c62685fc6614a81349926fe614942b2600cf373075c8f1b3b68ff65a5b053ede48c2d73f18056b4f7e9c058f3c7b431f64f27fa64a7bd823084b180987dd66b5b908a907d7cf5dcb44562e122d571ce861aa76faa71726081642972dfc147a15cf6eab128b71e439bdf1fb341e591b1106d5143695fbb4e00778a5baf8ad19772919ca86d866ed38893737e7091a44dca49467004e25ea7be0e4b934b8d8330fe79a81e1cf4724f997529e560aec63c5278140b0d4be3fe15eefe7d6168e38b43b1d939cbdc3322315932ead90fe76763bccbdfecb9fcb9717ba42ee1561f995b68a29bef0a84aec01780008f7c373934670fb2ebd402f840711584d8ca7d5e579f7f06561339d0ee749520cdf6bf7e0af837554ddb2685ccbd270af1709edef1ed88a196618354cd64990d3d949f7bee180b74aa78325366c4f5770a66ee76fe91b9647ef617760b7b604795d354b5f39025e252c24eb56c3b55f4984d74a9560fbdbd9f3366099ec84f0ef85e7cf12d869f1091c8274b87fab5f6716b84e207f12eb14e164b6dfa24cfc9d92335a339e138df37320a43b7339be692d7421ea2996e45a89fae0a09208da2f051a6e0300f000215a72bdb335fb66dbb3ded5efa0f8d124fea6f956b8a42796d3ff6cfbedacf0a333f6321419eb6bf15d696580d84e74f512431c5522da8636f4fb1849e63a02c9320d193113f30e0a2deaeebff311d9b88eca517791d2abc0b4d1168b36f7868768ccca2ce8a42adc1e90ddfc71335f86f2728b3a8fb99e5f1e204931bb08772d0a04f36c66bc614a62a7b6122593779a46f7331ce9a05d5b2c1adfd3485ac1ebd14ff9bb62f5e27212b2caedaf2fc101a8718cd9b5147d6c9da498e293ee9f9b38c8a3c8496c835c41545b5e666dd7c0941563d06910e07e6639346456b805a7f56967ea565f0cb0909a9149ade3a3559b26326ab7a8b034929a4445d9f0b84fe86948dbdbd527c02fd9d5c0cc69ebddafe8dde04bceabe92ff22b3d657486292d8ac9261d945f1eb7e14304283faed7f5c85ad485c4361de637eae595a7bfe625a0ef07b50c97a085e039b922b562c053dd31a830988840ea5a7472eefacba09c70ca74c0d988b6cebcd33ad5fa4904481e26d1a3647ab0e243cf544bd274b8bea384c9afb6a558b929c8b20722ab413b925acb9f8106959d3bd0e851bb548c1254e4d0823d9d820a73404cea0c541f05b1fd240b420c434b1b6f2a9f9e059ceed00662cd30232c0adcd800845eade48c1897700a7c5d88e7649b4c24a404fd7663dcf3067cac0a747af7fad0dc4dd6e7af1e14f0d0a81154700ca0c746428fa82e3821890d088140c1992f8bbb972240682ee8bc66fcb5b9bdc653254e46bf4bb8d59941c2b564991aebdda8ba749af9c28e8e25a4ac447da5abe0abc95a355082a855f4a92f5e92b75feef4394e9feee9a012ce8abc919459514e743371334f138030ccb71fd06bc00911f64ac28f7d0c01e297b3d80650dd6be1ca56881c109c1fbca44474942f750928445574b9c4f3fcc71653e1b024431a83161160df601a1b136a0b362435e8fc2db15926c801ed4e5c6cf35d6b6d3cbf8a0481590f2e9df945d098df0786a1f51c206e209e2c1dc9d3680f338496cf310b7fed715a95f5a60a3d92df2d353d7c7a2389c5129614f0770cf313929c68e0e4d2f26779c99231a2350723e19f8ed8aac4604675a49635585c93c82335575a33781118f7ec0557b4835cfc656980d0e94facf55a2884e0f0ed8ef6dc54b667c051825f532649803d26a49e1f54d40c906f0a65c4eb49007080dd172a00d389804837432bf561babebc0f0d3de9471bf3d260a60d7e5d6d7e357dd1eb9889f01be5832528b6b34469904f1d834ba50b226dcedf0c6e13e7f63d9c24697a1c30c91e0b365f3a57a94791ab04a790298b15ae175eed1fbfac996c3f0ed28cbdc9c442a36e1a24acfa41966635f3a8640010b4e97bf36c2ec76c81c836333e52e2a068d9f3aa9456f8c90a6279c2ec7c809b39dbb36857ed79201e5b4fc97be31492439fd7c6a12ad539e1fa37ffddf3cbc21cc9b7096028c83c089b560502ef0194638d694d1cff2608df1d6386357b5ff49abcdc95927830dd3ee63a1e3ca34b94c07d3260ac03c178446d8446dd18f25fb6e083109f8a49f540051a1a68197ad260602a2b664f2c4e865b2bfeb35fc52b40d23d8bb9b8b23703ca3a08117e3ddcad17def03b48c48cb343b2204fca0f8dbdce9ee17ff816611abdc280c4454439d1577594122070cb1bd148b3e61ce831208d1a8264594bafc204e75c0c1cfadd918e9186becc94d1d282b8cb593593a58c556dcbb8a0d9be85c8f999bf9d189cd367824f7b1138b2bf1e7c000285b5e5cce858b25b39a4eb2abe216e2461a08471e6f89e5f09e448646e8de0af8751172719cd3371e43a06f64ec334c37d840784ef6cc94574049934b45c5eba4e60252a4141df423e8ff4aa7c95c01db8880d3bb781ce9bb7d9d537999c7c4359dc96c6ed6a93a012fae114de533ab0d4cfb735afb16dd2d8603c414219b056ae8378d9a7e67eda74e29f91c3025935a05883f4f3647f7ef69a1be7c46d1150a17365c2349f7f7fad5557eb4371f9fab0dbdbc1e9005186dd4ce8451618c253fc5e19742c083c5fdbd70447c95375acca14d5af4eaeebb019a904eba55d8c583a7cb51810ff340e9131eb5d881af9c1fa79dc6bcc8d7bebc3685404c8d934db134999eab272d3f64eaddaf4ce90f26eb19dcb0baa433714d96bb047e8107777523fe9f630488d3e7e25b26ba2f347329dcbce8a95ca0806e92600a131946a032969318c70e7e5f471c826be5a6d319d2c85fe62692e561dd5545afc0124e00674b58b3ab34f8e0353b211508f557fe86a3f2bd019f7dcdf2393d6aa3c34ff0599b3489fbc563a1ea2dfde4cb12f4c16d593c13653706c5083b933d3696b3b6122e2d66ff51bea5b461e9c064840baecb66b81002fd1aedaee026973bb2c22272f96cfac61392f11fe3309cc8d5c34f6c2a424290eea248f9cb6bda04ab759bc1097bf0edbb14d9753b64b26a1f5ea33702f63d5f2692ec76a4dcfb25065ee05df353c767c91e6c035e7dab4a16e68d7840d9820ddebc740edda791c3d8d29f9428b3f21b7ee9ce319413ce56408886fb949c9edba0c50a42f90a66d3f5cc998b2171d25d5749feb364e4106157cc963a7b210ce1f6fa3a45f2037206927d0777ea69cc8d12eaa3efff2d8e792fd5bb9174fbc4459aa80fa76a2db28ffed9abf1bfdf1293b1970a23c859ee6fe25f53eebe2ba383f924becfd7143f18b9618c3d4c0bbf328254756aa6733fa59dca0196bb026038f90c9e1ceb36c6c1440aac34aa79ad30ca6b34b6f24036914e8dea5a4d53f6d3bc110f526c5db2323352b6f61a30225f1b78a2aa686b3136fda3dd9009b27233d6ace6f56f02ec4d794156b914a2f283556036243c216baf3abcd67d47f94021506d4ba21b5cd368379a487a6cf8cc3fbc4a97ac1bd78e42203e41f05375997cfb8ba19b472e88560e4828eca1acbeeea0592f4ce0724b7afa9e3247eb529ad098e9bad66c37a7f8c299230877a387de044912b45301bd2d1600bc8fbaf72445edaaeadf5a564a747f75546978c29d173b21d27e37fb383dbafa2a91b7b5ed3f33a3ab50697fcf9f4abffc7c9d7514d79f2205dcbe4e2096b79b070006ef9c323e6057e1604b03290e10e050d8b0c575936403d639baa43d5ad163e54f716300d156efe598fe45f2cbaceb74609e4af727690f0d4cdf743c59225a3634af540bb129f53c2469c2b53b087d5870cfdae3c6c5ffba79094b4c2653bc1d11a3291e394f08bea0164f6b7aac30496a60748570e25c9041185ddf0ac4f8be237cfd2f3cf838f5534cb9f4d500c78b59cda004765642634a968f71a6005e4cc1864ec06821a3926ed7978124f1c2573e1f165587a2563de387c7b30ef22aad8ed4536e3d72a9a4c8ed0b4edade947eaf1afedb573ab11c5f71dd8ee06bcf4b8b402ba238e0b0bf5375be3b84f4459c6146232fb46baee370d5a76b280a644a54ba018dcd03366e7c20c1c8690141ce2baafea7b6615dad41aeae5503ee4f0b782318b06ed87d3ad47ac73027cfd4053585943765da6ba08a44be7a2a9700aea5d57776ea1fedd59881c5f3216b251da5a644c5b69019a7834c968e983a4f5f9aa549e24e37c041b55514a62d2e2a88248fcffa82887627c788a332ecb1bf899591d91e97b42aa856964c5d8db659e2dd5e95012c435fc07a1a216f863a4f1ab13e2c465a3f77e985ee700002fdc320b9cf56d58deabe5c6de962891310ef634fee767d47bd00961fae30babd9515dc4e6100cfd7df5f2688bccec6191acb7742a52a4b7fa4786efd2d1ee50c11e4e8ea65766f9c7c0828a0a0e9d79fc72f9708c2512b4c85433eefdc48cb14a4cc99c5ecee73b5750accc580c01b1983be7c1f903d5e76baf346b9dc92b4d64565ca17ce75b06109f320b86480b60b4c799f79180b2f4bbe51a34572454d15502b038c4c756bb32019a0cd5947b65cae9116652772936f1b6d3baeb88a1cac408fe9127495076050e2bd6100b7138eef016009e5f3e5e17c851d20ad4bdafbe8c194fe08ef5a1f9bde1d3e5829dbaefedbf5365859ab42121dc3802f7976f0fc7c9c06c1b69c3f856f894e5a9c01953e4dc8947f8ff6b520888af7ae3d42402453c9a3d6d8b9da886a86161f065fc866b28f240b66ddbe7201635bed48c1b74d13350b4349414e959b759d6fffcba330e7c7a4f55759577fbb68c041b680431040a6c829d8c2e19878aa9a51d9535fffbe73ac38ca7be88bcb61580dd08d4325b0642dff35f70973ffec460198a1541446a761bd32db39684a952f65cdced8fc1b86307afe510825e5f6e506e41c78081d471d7d2019e9c699dd5dd2baed3b593f76d8607e71c090ae0ee592c8278261b7273286fccdaef4caa39b3144c4acb735e4e5763e8451043e115e0edb02287ae27ffefb0300df7877a0a580aa4f9e91be8aa3c1e60fe229e97bd81395b250ee96e21ab2c2c654092ef1f55a0979f865802b01e7ee02f6f2f225bad37198c79ae17b6f71e9f6884cefb4d0b8bc336927aedfb027ee93383e10ef42eeb95bdd5f41f01b652e4cd5e323833e7be787b7a2eaf2a3b0883b268b0e8470fa12280b03051ebbb4e4400ec84602852471b21bcb9086bf552e641c56505a9f65cc88ad048cfe7b1a7c91a264ca8a01514d7105780eb0c6530f40b6810543de1e5f9731fad01015d9582b7e98b7d2bd150983c38e2b20ae87b5597ddd92f93eeedbfb265bd28c369b24501cb98b01caa80072576ecbb4b9f5a3a241a8197c025724f4169f62bed53af5dc7912d9575e8d9f3e2bb71b87e5a7ed3e63d9c687fef49cde22cd83a83bd757ebcde9ec70e076e04c31de6e0b3af7afde917374ef155e1aa650f27cedb07ee994553a0d08915392fe03e38c48c73096d90117dd6076c6a5cc2f7b652e525fc9369a71260237befe6a430aa543007119cb13ed5bbbcee4c7398a5e019b8c2fa347112a9be25fdbb9af13edfb9250b7e28046a6053b5b130a9ea6200462fb1f74880ebfc5bc8d554d29669c23afd78a33a3207db403f1495ac45518bea6c4e608cdcd9b7385e6f6590b726795b145c3c0f220ccd1ca70b127d7862b1aa008dd2d826613eaaa39040c8ceac7c9599b13d5047fa444be4aab35a3507df67c1177ce71fb63bb2f15dbe61b46d019c65298230388b250852cd53309ae28905588bebf6d103191f3f02082b29a0d3e037a919078130ebd63b704f1e73fe7c7cd7aed6c6fa1003656d50d540d1952cdba3163b42b77d61a8d8ffbf192aaa5e19531f8c232b4aae117fce77d734c520daa9c5e13a43525859017bf7ca726ba047670da2d666a47cfecbc0f7ed5b62816e4d5d92bdfa8b93bcaa1b2b026369001f41718916325d4066a270d86fe9617bfb7bf84af29ab409630b46083a4a4416bdad7266df4bafb00d361d4eece9aad968733807342dcf017cecbc274686ad2a2cfbb52b9189d9a745d3d50fa441f5df5a526ce0e1148d770ddbc6c06de888d62cefc2183455e0f410f204a20cd5ba8418048234acc2925f4a5b70cc01bd757ca095c0a1b18dc011b92167a0aa76c1adae4c31a5f2056deb9d51f4c0fd95ab6a61109fb22c52a67bcdd83087410512ac3541dcecaa90bb10a8518f10871fc7277f0320346f0b27e7f2c6000b7f5f4696b1b3460da2ee9dfc76db05557560144d23891b62c605b9cd5a50cd3ce69abaf88a147e2d192780c850c147d56abac4c878b1d547876c6fea2b871fe1507019b0407a7284a3b3c0b7c3503f035b78fbb1cb1d82d09b0ec710acf1a2e5dac6d5ca24745aaf5645a01116d4ef6b616a18bfe9e04f0a0ed5c378d874b1c4f1dcbe8450a6ca3074b61371702018869b5c305b430a5751b13657002416abf007a9f9bac1a1069bbc265b554dee3da9b4dfe4263f8169ecfb7e933e14a2484b36cb93b3e277bb7edbcb452786501358b8934b3045bd93feb40d9316b7cc9395748da1f549f2a4101a12cf744f5ee5aa13446c1373742a56177714ae6da6b83a52a62225610cffdac05ba8808825124784611d15eb2e9b672248ac3b3f6963a2b5c7054842b206a4c35911af54b03a3b9c513b1039d3113d9363aa8ca31d9d504c82244d6892369704b5f3d3b8656bb593956085888f89716b6d5cd55a61e4d25e8d78efc72c67550d9180eec723cd8ff09bf977a9a496cbde0a27667baa59cb23df6faa4a5bf6d84ef00317663865589a569d49362c288a2f2277bd188513c134af402739969c3ad02b11f4c64d4a80857967dbcaac85fa3452a655ef90c5b6906042979080bad08a648ad9dd6e0fff8ef0da7f2e2b9a7379eec4f0be7c8ce2c462aab9ff3f4d2e3bd6e1c5c890c3e7f3ce7745688044b54fa4137ed65129a70ca52919800ed7c3302d8679405ffbd32a19c4ea1e21a81cafafeefa035eabdc2e13ed1ed2c0c6808ef1a961e0e1746dff4cb8db9fbd09d55bd480ddfeefa73bcdff7fd85734cff4813fda2814045fe9c94444e440402f660a79d98d7ad152d303b11b37698718804535215d39647b1ab68689105b1c27bbe992b228a20c4086c1fa42a09b7326be062c7232c46a17f2e93129411c7d4fc49c1d3f682c7d65bb35363e789d299efd5c16068b7d549a4b0aa9c85553713d6e51b3bc6047d23759ef53e3ec60ff0fc044601b06ae5bf2fccf1f0ac0364dddbcbd8524f7ea71211a7fc78daae79923cefc4f42977b2ec6649806e5a4ba8ab96286e33e3c4c43e5031e3d2f7a075a175157023c43b2f52215dbd2079a9bcf7ae65da6792b8c5595294e5036e9ff0c54ca1ea84626c90cb56a0427d82cdffb8c3d2d6cf4495fed20c202cad46db0661866bd33a9170ac2ebeafcff15d9d4e0ed5ebcff8ec3a5b8505d4ccab61a3d06f9b04163127fe61f0667a6cb040615a41311b834b53f61d48b2332ede009d6900843cdf82274b66c18102d8b8e843aa8f441e87da11fdc3e9d4d2f52810d82902c2c63c5e1813a18ddf66ad03645dd188e7c36913b0c9f3789cd747029557137c76bce9a015cd0217d8d59b896edf2585c6cd3d3b9781f697cfa10bae460ba1290910c2f1d210307b8e78a8944e40a0faeebd327d0d4ca20ca3b05546b0bc49253f940ffde9468ad09be0250c039413f3859953fbfb2af57465ed9739ab89a18e23d2c7ea035c783391b1c4f05e9aee3e92ee9168bd9d7d79aed0d9154845ba704e718528a74b03a8cd81fe41077d1d7214194b7d41532511da7d60e6d82a35c7698ed471c56fa70d171b76f64026e5663c7e95a3d8d7270e7ba8865e9a4acef264d3f267686777af0b5140a5ae86c7cb8c5cfbb7a75aa402ee700e86736908618ddfa449c755c022d8eb6ea12807548d362a90bb718be9603f2f50ff171d9a8e1fe2ba453d0101df73425994eced3992fd30c935e9bc9f68c58743a921e2f261f5d8c5adec3cc1870900ff6b98ed9378744af73b9643498850ebe04e9114be85dd2a602b424734c4b333f14b6227cd73acdaca6e271fe6a6afd1c0b2bcc9fe406c7545d40f01e75ec831f79108663967907da745a25130453b8b5c37ed4e518b7ae9dab0fa75df1c66f3ffddd397542012b853361db4da413d406da5616655da10e6b29cd2361230c27bfedd23e058590f00fa26cb9cfc8091fa822567899e019faf0d62bd4b1ba9575c8a989e128431ce5efa404a7d993f1290f63094fbfd5b582a1d5796c41b3f0fedfbb104261955225654d84c277fdb9ca7936557859134079f99fa63f09febcdb7807d5bfe4bf0dd252bc2b77b673c173f7c4796fec4d9dd0c8dc9a2b9975abd29dfceb3d839d64f575c6ca0b9f7ed18454700c697c3ec2baa9c9596a9414161bde9e4b57519e899f077c8e57a013dbdaa267eb344db61549d234f9c084b96a475cf6ac0c78be095ae6dd3dfa9763c67ec209f06dd49f2c4d0a2dd47dc18a89ad5dc5b21f8287f9a40dbda4b60cff4c17ab08fb323562c568ef2ae4b8c6689514b367d8d8be9a969e015572d5f5afd6d88a5c6d47e81b656cdee75d7cfaa93a34a207469c1ca1c9b2bcc52b3cd4dc2c7245a956fe2df8322f4e3b9035dcbe6d7a956a9ab6ffe0acd4fe7e5b6bc738e72345de360f37cb77a21817957867966679829885a16f81f6a22e6716917ca5a86f63fc6c3a72258e3834c911c73e51f23a52d3f5dc94ff525f5687d625030a4284aa0e8427e47ec76e95de5bc377cbeb99653c99f97dc5bfa3382c603b1d70df90d1de1cd12ae2367a2edf93a5ff176cd41c5f236722e0b726f23b4c4fda09dd8173f3282aad27723d5566f9474c2c49c0d6fe99c4bea18026f32175f7bd0775aa1a5a0a9b323fc713ade7062af76f5482d419abd0e9b8384432dd9c50fc274b1e71aff4f8aa7d544f9b785c9096c650506bda5303bfaf4ceb4b6ea8b68f76bae4ce7363808bb6a3058c7d50c8c3b5d19f753fe00228eb91054b47bf78b22da370a92fdbae9345f02963710b4ce553c89e9ada6b2dff7f31e31308b51f7d598e9dc21cf7d7b21e45906120019a1911059ad986a47cad68c7cacbd1a0807e4ee5bc0d7172cf43795a13ddb5c7a9d85258f6ff201b787c6b93b453386fdc8d20382b929a4ac438a42b213d361970de5f09584873f1fa5d943a6c19553708b52a03f7685cdacd3703aa4e9d8d5d0fe649eddd0b81b9c7a66f9628dae77d686a0eae7fb590f18590660114532fd661c21d9c7bde02b2a3620a19d6645842c822f16c27f93c6862a36e383faedee398256fdde0c8b78e5db362f404ce9d2611e4b8375ae5c02cd8ba3854cb3f26f554e68bc0bc45f0535af5203e773b7c364595f9f832d436334e1ecaafb44f0def4b8ab29da30ba6479d2800dbed43235bc69f203f7c8099fc069e18c6ca868942a81dbae5ac8e1756b14b739f6da2cef9e29a7987ab1e22534fc9943b59e7670437189eb5e7c54900f3677b905eb97f0adc02bf3999c87379b661adb68fe5e0163494add3a670eedccd999bcf18e264d2227d4b58ebf44f7a45961fea91ebd20f131806bda8f178651ce05336db6ff85d70cf9a4f09aef171e4b693effe9617c8150a27b64f20f2c9fd0133b9dafa838ca8c73818f4db29acabe06d09bdc0b4672de179ef9f7fe71fe3851017346067d4cd9fa4e661936296c8389549232a29a166aa15ff40aeb2f5afe4ebd4a4fe5147109b99ba381fd22ed20dd1c04f3e8689ab9f1bfe8258995e91215d6af30d6ed1b82e00f04e36f59cc0863d3bf8c1fbe9725a4860f639cff18eec9c8b9ef781d5ded1a87218a207cef09c3e5ebdb8c32f41d6b0b39431d21da9ad43d1fcade205960e17945e7d7d3d8a7d9ef07f61e1fd1e186fb93d30e961315edaf0665d944dc4dd12e4a8495e5e403ab6d490a74d9c8b25bc4b2da0cce57fcb62056ee0ee5ef24768d4386a3aba4eec3f0eec341e9b75d7f348ff52ea24a335e06eeee8b74a269f104f9b49cab2d78b01cf52d3ed3bb08f62a2f87f061b77de60b5d7431f752efd334d62ff8d039165b38cf1053aa92f86c28ef16e47de46d5675e25406dfae4a776694e47350a456a02eb2f2f6993891d99afa5248dab7bb1c22883f9aba477112d83ed25afca655adeb006141c91911b0904dcc1f03bb9d7be69e5a572c8277b5a3f196b05532760273973de5d66dace5c75a4790d681bde59e1a809a2d3192fe57e02ca53170d72ab38e5f22bf1db66d0e7d9b27dc4062ab710684023897fa37dd4a327e3d9c7191e796ebc06622fc5e81c4acb3bc6d1a8d09d2f10d87597d7184f58b143eb625ae9e7e25389927a0c5f57159bb9404b1443e8140ff7533eac223fbd400a586fd3476eda71947042c88702caa8ef368fbc0a3e1fe5c356eedf9a1f49341bb8e45390dc0c8f07ec85bf35bc91275a84eb40b70905fb3f8dd83bba45729c5d533f314f20cf44588e95b872bf2d23c2947f65eb54c31a930e2f28ed40da1491221d4da1efd4db94d4e080ce11b96358642f5bfa2356423e3a789c08ae036389092e6abf640700ac97c0f618d0e2bed3f7683b78685fda486a4f931f0b5018deaeaadc4d0e936ee2e808d21d433c5bffeb99b4e1f1d8421f8e6094282214aeebe481ddbd82f181bbceab4513b0e8cd73f4361a377180a732c536f45aaab77244cd30a59dfa696ea0c3f0b69532ca0223222628d2fa64ff0736637d2584ce0905604717658e1bd7213cceff99fbf47261852559cb3365af3ac06ed4438421326c446531d30ac7555c2413049c4375f8d4feafb47f35a2020725d534a08bf188eb9e1f68650c9eb123544a5440fd5f2f58fb14f64a59a55344bf3f7bd5a83ebba0b3e1b9a894df0797aa46cf06c5b7075c5f307056b75e977c5087e4dcfe1f8a5fe68f659f5d34fb2920bd8d078e666580dcd91b18a4e5bccdde74e15a05c21eb6a9ed1519d1196a31ac535d6cd35e986a5aef4ac74ccbdd6beba101e201df7bd4acda726992394c9c663ddb563af1983df4f12211c91c8f27c3ecea5c1744eaa63071532723ef7090ca9ac89e481715c1c50698f9a64a5350d9771a54f22dce975339e08716fcecd386f9ecac22c7c9ab103a2649d99d16fd9bb8124d24e28eee83f2422456691364b99e64b185d2f2693b354830ee9b1c69f81e6cf55c9e0adda8b2f7e69a57d663e5cd78ef0e318052409b402605a395f01f4396f71e196fddf113d636f3a1fa4f38031664bfe5fc28cd41d421f19c29af96502b17ee37e3b2e1a8a9895370d9939a3461df41938d19e586d7ae49a55eb9df7ab707b79470c9b00448c9b5d15986162cb7500220a8d1e47b422b83987bdf43236c2bb2f4707b0886e6e651462ba14c8239898872c57f651144452ef3447e6e21d1fe2e22101e66f65a0741bc956c0d44a285a150e7794a91b4c5804e64ea8d0e1ae5bce2d642ce82dbb1494f3750602c8487a66bdd6d91f89ad082432b1e9ac7dc0cb80ea40344f0689ac860f6f0da2eea60d841f39bb2c2d45a579227dd4c9991e130e862f580f50166b13c657e8f66859c986a8be141dd0c3adefc2b67e66667f1cea017fa30bf6c8aaabcb1f1ef7b0e16ce690093866bba4e81a3e98182b11b4c80855398abc87c44ff4c4d1fab9aaf20086801f4abb9e5dbbd9a466df11bf471096b11e1d7ae8fbf0569df8d4e45c86f1d68350312f52bd94ba004b2d5c047a15790ed93c0de875a1361ec6d2c022b2d43f11a8cd829fbac06de9c72fc76a0bfa2d87c744ab2743aac2d11ac15b3158c378a9a8a00a48d7c6e021f7fe3adfd8521c036a0abf7dcfe1ea0d2915135501162b053747ab0320f637db0a65ed77feb23e0a280654662ecc33e61e9dc4d2b0c418547abcfd66af8aaf396b3da0f49fcb4af0755012e814a67630c6ae65cb999905254d46441fb963391bc8406831af27b48e44dcaf54f7597b99f20c3bd31b561337295e38ae1788d85a90ecde771e24103bef8b748e1e1e4e486e6450b3f87e6f7dca34cc8cbfa917e9aeb5ce094540896490526e2e727cfa81c5a44439ab5b4fc9caef9a8f3dde3cecc0a44d17b2959de201a0c740ba11a503bcbcfa3612f4da4ae93d469e6f1e38b3818a243ff806ba7448faac3e26afa3b6f396796e4622229f47c7a1619968e7dc18c2791a451be9dd388678c6463ac7bef9d25bf0b9220da33628b80407223137d6000027204571400ba227d2cdcdb5c26eb082952288a19a6bca49f9474dc7b737b29acd7df6d3c2dcba10b178f6b78b1b79f0276715dee7eed8643bf247c0a3177bfc4a39a84428bd02291188d86a928f67cb9e630bee5f3f70d223ce496ff3f067ba0098b548de5a2b4f38001492d0845ad298a27da22c66ba39a8508cfc0ed1f5fef2f913608e60e887e8e9aba042aee55930ae7e9edde1b66d487217b9d498241bb94a1c16b919e3f078b9574dd18a7ec2441b8cec97b63a1468e394ea9a4820f5669d1a1582299ca465b4a25c5c934cf13eeaa8bdb1b95557491a510786c921b8aece86b6018f7fd28734dfac98ccb3dd24cc15d2216bd255cf647b313e981da084388512c35a5a5d48e026f0c2f464051af1205d3561721781cf403baf4ded5be11ea772e195052656cc2b3da068aa235528debcf8e93f699d843459c66ed821faaadc9cfeb66f8d61065f9b644134d7105171aeaf57a6eb7ae076fb7b7e15011e7d81d172de73b1b2b393d61d9397411b110b3dd4ca316cb94b7dc5b1be3df636af35a7f601437b722c1f4169e911a09e79c2d964bc6cbcfbd646fd60b2bbc2714b1f1bbe8be8e1dcfe1199c80dabc5c426b14059e8c7d0766bdc130b0b00e18d5d5de9767c2faf6b832acbe969e2ca383e0d839a116b73c9fa2f6693bab6a3b7c1204f62e9e0c176ef07d92557e930ffe044992704e0d9679bdcdb3b757a046786a5210a8c2560e871fb93f07e8886030cf1ede45244f104878f42326b153446da2945a602220afe609e077cf281c1284c0496d158b24e9a525ffacecafcdd6539e499404392da6ea262261716642ef0416aa012b0ba4567d3d3e0eaf244caf882e2c5c15a365814e95a7c1166a915d7a7b2eb4a869a5665c0d2292592c1d66a53f8aa3c644c8b29b0606aee85bb67075735ff0443e9ffb9c68c9e07d1e178257799d53bdd53e219cb2cc2668bfc7bf8e5029c1050a47deceba8f415730618e17e2e42631d453647a65abd4c0b0b4cabf08989131266a9b0d0aeebed70b855e669ffde1585c9b3af12aea95b81de5a2403d61dabeb1788590ce24e802d7c780e6fa05db76f7a522672247b41a3084e31d3166debaff6dcdf2eb101b2b6c8f3f8bf1cd13fd33c820c0eedd725e16428ade6fa6b7b626b72ffce74e5037ff143a99a99d7db2e5062289f99110a47616e0d01941bc254884cbe2ec23f26cfa0f151d2ee80601f2d0cae575ce9e80e66a96112f6f4a6debfd229a1d81e209ea8d80d48457001c4d7b3092fc2ccce3387b85d939e4cc51b9bc23f6e4c833705b90857365b099fb6dffa2cdebd729255406451eb15ea8908f68d37afa31f3ad0e8b60fdfa8d2bf9261b30cfd2b59e3463053e8685c5b4bfe4204a1778a0b85fc122fb562f8795905d97c39be4a1de22b544ebc13bb62408c508a794849a88dd7c40869c830d5ec7d54eedbe478c2efa05d75ac43022aaa57e3bdf9311b3b8b99df617a79af299ddef96fd2a26b5ca9a96b809a1d3a7e09d54d9f9c189228f43a5c2916e81adb72382d3ebe066eb98459daa491782967b2677a6f539959ebc0a455c7847179ce1e3c74e92aaed605e24df5ff5b1c6f26c4412fe5bfa2378b07de9e2b3b6fc360dc860e71c5203e3d14fbba67d52783cbae255a5adadf6ca7b1466ea97ce801c9e908543ea89c22d326833c7a458bf894fc2f4daa956c2159bcd852cb5dbf68ccc3fa3b319ff36df38efdd922ce4b22f03af732016a3a9838982cc603b5903f16b48efc9ca15a2243ea48ddd70a3b68a04d34dbb99e5ac424741b46652303182a056a1f25f435b3401d490c4135ac41add339ce93b37a4221309f3b99610f1abc8193be2b0be0a2d5e5e1ed830ebd0167c3349153053ae181f9da17d0608369a36b2df5d5180a58f8d7dfbb8e718fc071625e7826b06bc6d4a0a766266f8dac20bba6a44061dc52c5beb7273c8e816f73c4d32aa3d0f5b27b086c05295165357afe86e76cb2446635ae7b3d81faf570917206504ed4be103c06f665ae039b258fa82fa643823e1eec199d1ebfd37c68e97afd823c1bc4f97b95754e177d426a192d29bb392dd37fb5983238ea375fa8e28acb08db0fe520dc4eed64ca03c7dcfca0d1c9d45be2c61f790e0c45b7604afc3374b97accb1c3a00652a214bf157fc98b17d390783fb404054ecd19b34b2fc1ca2d34ccac49213dc41558939f670c81892f1a15b2988cc02c46b1d4ca185049ab42431b88412963d40d8c73b6db150c13bf0356ff6d50143e3bba56a416af1f9f871c2373030fc5d661ed91ad6477ee52eefc3165340ac213602409a561c89a0ecadd158e52e2c0af93a85b41104e0da38813eb0a06f938dd7714fd04e09970ce3293771e734b3c5e7ee8ff59c4f2e8d06eec9966604d161c56581f41293887195ef1f0e37ceb65292ddefdccc24e38d8f6e8e1570473faa87df4e71773c871156851729be9afb519984cd516b3efaa473f804b11e036f7a6dd91410686283b516d542c83b7290bf3bc5295b63a938e6fac401ad28c767a441bd2e119979c1bfcaff173d594c110bc1f3a2cdb269737803f5417b3f088d6b5e2fbaa5f0adf224d91d5d05b3ecd50362c3b0052e71a185fb15c364cb60bd8dc4504100a68995c2a37f7869a28a2c6192e98b744dba9dd4b86fc81d9732f5a0aa0e393e0d4409b36cefe0203448e20f8a44ce1f68da7b85e163d083a9f89bf6a05f857a9b679a3c7a16c024c19ffb9655b77bbd0f28acdb0b390b8d3088b68ba7c2fcd00cb2cc54b58f0476fb29373a06edf94e500773d4a0bb3e0986af1f135e24e0714ff67c53a8e7e090afd0eee8480548a5a2f12c10e3c6c92b1432cd2b61682b76f26db37084665a52d41c3ec9b0c59a49385730bc369e54973eec0a1016a0f1faef26135bfba6f51c1964f6564b599d5409cb63e9521d2abe0a5f26b5076d0790b440d3bec968dcb56caa3d42fbe0f21f6f67cbb91fed949859adb99b7103a7ffbc24a4c4c5984f2516b69b5a636ae5e1b78ea3cf6700d12e78566bc1ae3d843f45c0fe1cb1f5519d36a46f595658610d4659810fbb4d8ae585e2382e9542a9833d4df3f431d8cd529d2f7a071aa93199ecfa3966ac84a767ef1a65c13da712b5e1ff2906983a8f91319c8ecc716b68e93f0463be88dec1abce408a174d7eec44329ab995924ad4c04baeb6920d0d04b51a788dcd86d14db12dc8c8da07a1931036947f74ee270910280410572f793c03606443a04233bc3af813773ea9f28679eba20f90e46a378c0d9ffbfd1aa4213d3a9014f078d2c2c2349b0b308c1ea5f3c05ad2e3bf36f8e1e2587a253e4799b9fc395dbab093d96e7ca6900f56537b952e7a4ae2ecf0bf0cbaadbfc85d086a7b45cc9096c12873c7f1dd042892a3d20aa7ae70752d8deda0d322cc3455ab7f89bb3b7974756d39f3c7ed04834f8aaec73ec69ed951f00c2014d398e84aa8a8ea0f6ccfcae91b7f6a6920e737eb7805b6a7d1bbb09c4f2848403f1200fc6bee3853f2cf1d6406a6024f0d2ce89717aba958452af91ea052f0afd6b80e92f4e98a4ea9da588055b2b886bba7503b2bcafdb7b7bc0ad3fb3269fd2a5a6e50e22458021f4f7285527e39bed8c74ee71a35b98a2554fd949fa791b858010fb209543a34b6255d441a18bf941ad4423110b7106c1fff15dd0646b791fc6cb59cfb218d8c88e284f4a0073b37febf7e28fe07a9bac50232bc0bb8d7bb7ec3c46a1899fa0b7cf3e16d686503e23c8b298acc65ee77cc18f37a46bf2d04ab599f4aa37b336c6c7a008108198cfe5cf34bb9090f880e17eb208a5eb16939e54bd46f7fd3e69cfb46220a19ea1ebbcbe60ae1d4a4f5aa28a325d08b628bbefb0a19c885892b38dfffc4ddb11467781737609d327ece7ed89f6dd17536f564c3eaa8089aed5c3f998d7a4cdba99ab495a939c54b06edc0ff6bbc2264e9850dd25f6c747c0122326bf829df4c37d07e1c6a3f152bff16c495dcb3a1f12757cf4f3b1696cd25f335d4286ec9cb8579bfebd3e396b5febff02f3d3e6eaf00d902bf0f2c6bb3506a0efeaf0554f3d709c3a7ffeab749115d555ea07bd3075a360812af6b3f0a73d145c2e51101f026b362729e85c6623e2f825f83b3fe156ff5c39d7ad1ca2246cb85996ebe1733f506764e3f357ad8bb674338b7ad6f274521340681c48f17a197cbd23fc563f13fb80e8265744d46f91f822e8b966a76c80a4e10164917b00fe89ddd73f7544f3c889145bf5a4c5807da0ee98642c8f8b5f255595887a04d349e71f69e2b9eeeacdb954bfb21630c0fc75d4cdfd7f8c58635529653f33bd6872bacb0d1902fc035649a34778b3bffeec4f5be06c1adb595f4e1a631807695686b4a5a3d2447abfcc52df1ed01a8d6631551739a226d36ab225b2af86d628c046b2b60f87bd4d1131eacb4e02c04bfcf4831bd5c7caeefa0b1b4eb75845d9fd29dd0c8b48b979983194cb8a55cc7cfcd51cfc3cd22b6a60fdbf03ad09c2a37474a3b418a6ffe756922575a69bf8d1838ad3fd55c78de6bd561f5d6365552e502af6ebb1eb9a4c465a425dfc7a4dcd94b6a6bc0e871ac36b23b2e1969ac28c92e750c0b9fcd58dfe58ca9134e4dfd580c40145fddb5618aaac67f14cd7e50abf5b8d4a51020e22ee5e7e39bc40958de638ed60f8e658dc942c5e4c95378899ffe26bfb21b58b7b1504521f1965f19661137b5f1d189ded4d4bbe9593ecb9d763914c0044f7cb97c6d0ddaff60dac3d35bf5e95e75fc22f16919265af7c3f531bcb0a1ead7557cf2442b0d32843456ec09fa026218840200608a8dec565f4bc897dce19cb77f9c69538e161b27547aaf15184d783969212a2af8fbe2a907e03e4f3b8fd2d432e120315ca788b3340d4bca08600d1217e33e96cff6e9b31719eee1380fce8f2b6004813cca321acb19640d3b52613f3378ef9677777a76c676dcf02ad2bb5feeb107f14f94cb0611953adff1466c9e77a19f796b162ce0d26bb9512cc1ad011d8c68e5f163b3cc72a1b61932c7f7971fa1a90b26fb9e563f3badd2319b4606af581b05e12bf7e98e048b3ddb9528fac553f9b8184e66dafc455b8b2f970ffb51495d7ecd69492db20c778c0ce7a6ae6412bf39107455ddee1e83962a9464f176a8d8b2ce7b9458c0edb6aad3b56f4e797a8b02e8eb37fa2a51aa7363d545343ea916c5197df8f029b29751646bfad5da8a973c5218e0955f77e841d201c52775d4b9777fc69a27722d05e374f29b51b8a5e8fea67276e7859b341208cd65b6027711ea242cfe70dfc2560ce96e20f32dd46d34f449eb535ae396c1100c9b94b0ceae03be2f685d51fcb0b4c57a4b606c50b7781afc25cd957b015f091ef51820190b0aaddeefeddd15acab5c2c0ae993f3bbc02144f5e29e61fba8f3830b0925fa1d17ec401e48b069cbf4236e5904383bfc6f0f1d8bf0b32c9087f9df36efa292c72bec7b2e779f12f400a69e12f0df22eb425108814df65cd2390837a67e150e2ea4031a3a32f7124b4e99d10a0c366ff1870e8ffe0bbd1b92b32727998dfb560255753d224a992e7f107b4697026238828687004d322ab474509028580d6ed1fadae0f25aa19ad6e0fb347f646719d9627f901289fd14995e5c56d1a9d4aaef75e232f56c3f49c91df4c2003bcdfcf96eab9d2f6550e6593136db65dd7dc3b832fa7ad979bbf05f571a06502264aa2ff25c339344c76166528d290ee00415f359d5d530185b7d8b26d9ca804c6600e2b15690a471d75e872926fd31fa88f3b290fde345b0807f3db12f97a87b909adcbbf2bb0ba1fd6532be9c379dd25b890b5cc2b4074571fe067ed6926cf71f8c57f938cfd60b49f83779a3afc5abe11b833e1283b8805c0d8b8742f55b60dd18bf65866dbfae3cadf2a8174ef9f156d7855628a939ef96ccc46ec690bf6d30c1a25d29c07d17923941e9e5ce5cc2ee705c8771ee6c4b3d1605f06ebf0187bd46dae551f60a162e8ad02828a1482fb5a84fa28def78bcca82a878d5a677d4c7302a11fdedfbdea4c6ff813352cbff9b09ba410b87ec61ccdd5e9006267e4f1771268a2d20d59e13e1d62dc6160b2a2bd9d970ee1278a963b9448b923c89b70cc18f4af94d48eda611a9b5b21eee5d0dc7f34240eb0446a519b3aaabef85d4c60b390d146083490c5c853e1e3253023700c19e32b2ae053e21d54c058c2f7830b686070d8042cd08571d5b68d265652c811b35f8a0aef43c1c36139366076340b696b83dbcd00015e2b3af50ef0a3468975f2ddea6fad5a0fd88f3004274afe969d4e8c45f56e7aad1ffc2210c703e002c4494fba717aa196c5f865a0fb7b7e48c63141f941ffce81ff1ec258eca55d2215c4d0fd4945afbbdba3cb915515c0e83d1914cbd0f5773c8366fa9ddcd8511cea2a743c539d3fd1e0e64bbd300540d3b50d4357cc58d97f955bb505c20d1a9fe83c59b7dee12d9fc520c426883896366d62676118c785587d2441b1ecd882cf52786251ac9083543759e178fbec801c9325c3fe5cbe16e16acc0dbda14ed36bb40c6892d004a3abb34e230fd39b6b6afeb941fd153c9f4f57d7874f39fcc54bddb34c5a3c43fb2a7c96dc1d44a4df67cee6bfb68b9ea6793c62a05eae8f86d708a52a1fd3cc24fadc1791711b117a41c87e64a1827e9d84f51254e888de862ae5484988f810fb9da0eb4b0e30eaa9c89c66eaf3125c67e4f9eb821abbcabfbe10bcee85c0f20c54e33b7c98997c533ad538d4ebf717803a4b41cf4e37faa49a7ee1de19aff180ef351d26c04191499889a2b90120b39b3f25aaeffc2a5b8d7cf426a028a917548927a6d2c20940bacd1d3ff9b172cb0908613f9ab0e701be137e75fb5484d1c9cad007a65612936e8c4b1a027a1c610b31a3deae74cbb74f107ef377d0b48af9370f1e725a7ecfcfe053bf1c084004ee8a9b378c46cb4b2b3fc79d1114f30a21628c7949299af94a8ca417c610da2b6d11ea1457582252291cb3cab236475eccda445286abe0ff2b45c8b4ae0c171eab120c33bc03730bf670ce60f1171ba950bca15d593b86718f53065bbe707f81a4392849018062a6c3947995c34c8647097084337f177f0bf547ccb54f20751d8d9efcdcc6f2b4e009d724a376c1e3f398327a2049ba2c8025a2d47e472e25e10ef52cfd0b40a1ba200950117ed1c0c4c14d7bc3e49cd33d7866a5aa4eecb6c138f8df347cc2debe1de88a1e2d09535733f33a50fff49f9504c87b3143fb3d24ca73eb850cbb294fe5bdb91273f3d135f05d8b53370265684e015d03042984b384aa637a7c246ebcb8234f11477c10907bca26ac7b769b521049532d9c35f6c5136a8586c0602827408740aed73d09adc3ee007d9778c46c99edc322961f4eca799daac7c68822ac1912fd59dab975acdab15dc4ec74d9206a33850739974af85692c9106bbd0c1ff6eb230c3f2e66ac7f5b06482f023d6ce468253ac104ded4d64cd68d4e3215751263bf6294f596b78d17bcb777f14cf7dbc2c8516499d97cf7397280ca23735dabff69a847a985347425c17da89462047b7bb2a8e8f603e18a436d3b879cd411a517609f0f21f2a0500171129bd5007cc8b19c78cdfd8063a1355baf5b8250385ee4d2b71443f975c3aef9b5b796a3898b11ee60a92b721480492de95096076f86776a73e15a6340957f09e2fa70bb04d6ff700eace17cf3678c024354c4d3f95e238b0438c980633f40534250267245e5df855fb3506cdbf1eb33f0be323cbba2d739c0f68d2c8c05df6b324ccc247a48d2607f93ea8c8447c60fb400c8345d07b988fac08579b736c8aabc5d08535de37a95676194238f1626a2be248094c2f78f058f0d0356e53b648918360030055d0a1a708cd44bea7d732e41c9169bb58d30c1f721e66a3c69159243b8ffd2571076074d4359dded04112f2012e923b195f14dbaac095b13cbb67911cc9d1916d89e8691ecd7c109ef5b53cf18f48bb225c54dedf1ff02e84f053b87c9a92bd4252142910a21feb4e3b5b0e2a6706fad60dcf00190bdf5ca3b0c089e78f73e15e9a416a9f583635d7576973fb71db7e60ed6ebd0df5398092c03af1cd99491108bb4687fe79050a5050448ffe2f156a978511df0c07d5e1b17946dddf18612088fb445451ab1bc23ec6cab9e2ac1d0a4cc38ec1138f65de5a2b8fa52d07eea8f9676997ab48a5228213022147d53e1e8e5c62b1c071f0d86d1181b1fd8c7b35074c960c04b9c6bcf4b2f07cb91ce242469e5f087a4206b83eecc44a2ddd09bd483a3c7370574d7966c3df1b46401505b1f2e68341feed0f42958df37ef4175d7ece7985b0724aa5102bd53a7c28a15b1f0217bbe6c4d13052df0bbe9e4a31af37502adbe361cad1267998377bdf9623ad743288e8f53439eba493409e0de13b2c5e6de3707c8afaf10a865dd2d302d030ea0f80b52d96f956a8e4b0a2ca37f5f3c6cac8f8c959c1202cc547656bd91b9f55a421a0393cd5860a70bf095106a1fb940ef7f7aae09581878d0d6b4545166d36fb412ef292a67bdd00095af30ccec447128dfb313d119f6b704613709055007276a1d62559a251987fa2970e97dcef4b8034cd057f7745459c63a0ac563f54b57e734c13aec6a39de30e709cfe7f4234f1a67a62e47632005dcc48b6e4f01c5b93656d2478d82ae6eff7e09a15c26db4cc57ea07721f5f1127382ba2ee50674714fdbe13eff3f570f6b98fa1f74e01ca2fd60f2381b8363163b1069ad69d079ff75ff54b383480704ce08726fcb77bdc7800b42042910e148760872372e07fbb25a4793db7e3bdc301220d065ee8b1a8c0f515c7f73322002e19ab4265c35722ef3a9bcccce84bfee47e53c73d2dc7742691e01be9714b18df5164618e28a352493476cfe2e3ca21427ab131ee6448eda6c179772c7808a015a8c40edb770742d2407e3c2f737b56a5b54115aef0f108206c31ff7371b9c4ca8518bfbc657db110148ff30f0016bf132aac5aba531dd1887daedde71b11427670e46d32bf304f0258dd91bbf939b264d5d47a6d5a1c98698150b0b26df46e76bd5152916f47469c1ae5806b528e6d58a5a64a2f03357c3353d6080b1b38184c57f0beb0c4a6f2a86a75fc859cb8e66fcfcea491be5ce16a13f2b23f67b62bf4161ee50e36de6d13740b8988b595359c3baa027bc075763c23d352a05df36a2460b073e9e913a07085967c17e4e324df6bcc27521eabb98e99589589b826ca57d998e6ea003179c91971873b9dafe3a50bc84b98369e40e84e86729ed349477358971a728b53620e9b689f9fed782fda01a26957ffbe55cbac87d74156bd50c984b61b8d37dea9f64fadbeeb5fd3d1c70410be0e994b5eb7c049606491ea8aef2c0ac2b7b17abc327986a31095a38a041752148be7f8451aace36751899bd960623826553f20668fc12ebf2e645f6d986e1436944a21d5c9fdee365de3c6084bf694b9aee7e54d51a445d92c4db0543f10044eddac4c1f3d438bd6cea21a13765194bd7fc36be06c9b4f020504827d887fef24209705428a617043a74eac20abb095d61ef4a505c95c4918f714f8b7f51448fb02ed73bd0d2a98319a40a4e4cbc1a815c178f2d57f6adab018b1ccf69e207e74c16c05716fb6b663e4c72fcafadcfe3540005384cf48cca125ba39a3cf05af6d4f24e0d9e59c112837919da0da4fcfb00bcd451333311f68c0362e9ada775c57acb2aa6a91a654523f0c70f16059176d2e0607b787bd5b8135a8fa9c59e7b520d73f2f95e690e60f2537c2ee445502122c3229c14510cb459c653c666feb4a2f0b5c49c0dd22922b30322095bce952645bb91d0b7dd64051ec629a4668fed7f19137c88b48ada6b6cd6a8a2fd9862956e4b840a57e90bda46b0867cc905235787275b3b36fe747681d429845c1bf4a8bbc9bc8c785a547a852f1c93837f25de9a5d21fe04128a82685649700ce2320ceb279b7e8afd7ec265bb47e923cf0147e5e8b5432632b337a387569806379c81b3cd40a58546e26315806b5153f141deebd3d0fc4bd9f2795056891934a2f9aac445f3ffaf4568427a148215cc1c6aff5cc399a8625682b9ff71a05f2a425f33913e9aed5efea4555f974c12b1b32de1e4120ed9075f025cf19e9b45a3c4f16dcb84f4ac0f84c195c51f960172a17ae752bf1ec352966b84f6044c310e8c8fdf088e91f4ddf5550f94cdbce6a8d07fad955177de6ea7819ea538feba9c82b20a9a46b36039fb2b2a36a8c0ee7b2704e5eca747646691bf7c13c06d1e49cf954e13379a40d6f85d785021f7ffd84363f0567621880bf004e28bf7e7e62f567256dfd48dcfb802f6558a376251f5ce3f4db4c5c3980dc54879d8924591ad1c91c921dfa47301ff2e6917c7a13d214bb198319921d84d14ab13fe35a89eaf7b5dc3fd3bef5be4f7bb8e6b0eda8346bbf29f980487a6ae8cc0e1ad2d00fad87a97b848a7456a7c9e3fc33b936a0e0bb52820742558e42cea5d0d6dcd877474a12e7a4ded52b36d36a3d368ef5595b03abdba088b27d7d6a18cab3f2501fbf90e6297ed7064dd09b80ac20d5f02e018c11b1aab97e335b7232c93141f74af707c704a33df0d41e08358fc6d3199a4eef24d15f1220cbf191c127b0ba4c17a044fc7730464b8993bd9ecc82a0bf944bb891528b7a20dff901eb30deb0822112460546dab2f5b74782fecefa27af89c0f8eb45c628b5c6ae48d8d9a7df377f3477ae977ae1679b21e02308774c12399647c0cb0bd19998921adfec4846ced50ed47b07fd6dc1b59e7bae560f697c0ae3881780e98122428f77912f84e2356059ec5b7f9deb44604dca30694997c0fb3e1b8e031a4f17612cbd6bc213a27a4a35271c9c5c05e68ce444dbe88ebafdbf064b01878f5db9c8585446d3e4e0978453781551b1b4a7cd764823a2d6c481cd8e310a01d7359111ca57c66c590fbd7ac2699a88d5b94712fc5c85022c8d45f208d034396db0dfa0f089085ea75d12ce3880b87e15bf266a4cef6f9c054616bd166b0983ac6c7ec24e83e8ddb9996a6d8e77b21b8fe17f17ba1374235190e2cd33cb15b3a5881b18a70af76ba5ddc5836f07d154b4995b56512057c3c52c9b17827c20056448d2e58cf94fb9c6077e5cfa51082feaeebb873e2c700d18266134b6fdedd1fade945fb6584a985ffdba2472c83407e8422f9a985bfaacf976713510328ad20a7268625b0f704b423d543a6bffa17df8ed77a90e2ac1f25b2172d574e92a94cd3b2178964a318599db0bbecf0cb8e8700e4450603e50ba05cea6da906be6bb211ed0c2c53ccfd95404ac4b76ca6965117d0d30dd72fc6606281c751f5a68531b391f93a82c2cc7c8905371fa533da020e1be4f2306c94092b410c3efabc2165d6660a9a0bd1c6c2f2b42828e8175fde1f1b63af192835e9ab44a6c7b426175dc6a4ece27e0c9e2071e1404afc2c2b342dfc7f05ca65a1315e99bb3cabd48251c01a81aa42557218c6e7f1ea2ad43d18e1ce1392ea4779d10eaaf5f9c409b1d2e02acee0258f2b9147919c7de8b81a5b76f3b3785176525e8550b7df27097dc1a73a42e5ae6eed69e8c648f45711ca4c6a27689ba176dbd470b86f7b4f00727b26425b5fff7124ab66c2fb7450872fae88218c0abf7532d228ad64e375e0bf3fb3276e3e4ffe722c0ed5afc31ea6347f0c37a00fb22723ae15c394bb42f41ad02507fcfa9ffca1bcc77405d0689759746f8e32e2e58ec324f55c26f35078e7fe3d0e06282267b071c0df3249168d2716a149ac6fb3c517680abac13d70e7daef7d75f110b2cb0138e71af6279407e5307bca315141909ad75df94dc9506b593742148a26cd7884220d03c5625888f765f4bd8be0f7be960634c426f6ac714b313523549cc0191449812bfb4e8e1e6216d442bd275836f0416c5462abcb56e48d713772f2687e3be3a9647528627343fc4eeaeb8ba8e01f3a6988f19db431d1632bb1c92239dc6ba10dcb6eac05f76d057c8e3fabc900ba17e1dd918e829b88ac575fb9cbd93d2a28cb3b2455820b8058fec4e0c703885ebf17b296d6e2f103d9df8f3539323cc25f27e35dea9fdb0812829ce8297f06fbede5d744a19f9e0f957433894e834cf3201556db73083dcdf0befdfac2142c69e95670db7f26eb649f4f1490278481a163f1578902147df948e0ab3821ca96e80e60b77719359335885d1dde9836d18a6cde001bde2ef8ff920d631eb939ed616878b0453478aa8abc1ce41f4ca0a3ab0b93a407a02ab80d5ee8c0beddbfbad41b1d42a0048a7f308fa598a250867c3671efd41a0ca21c931ba310d2e7a2ce199b8cc6337c863197cf714c0b7c8effc4434b5accdee649150f5c3e6d1da8aeca691ad956b3b0099d8138df34f044514bc13221f18bfd26f9da747aabdb926aaca4bb24c5f34e04395239fa0068b8ba60086920567a2c8249eeac6d7e33e9fb779500dd6adfb48ca539e5047a07562ffa4b0bae5639d9f2b34d68ad5b75423d6d3ce95f14e8b63324b5ad1218f589f157b7175222ed175fb21e5345aea7586447de2ea7278432fc28fbbc502ce7c65f49b95a6e6a045a1d13252e80b9ebdad857dfbd156d1d15fc5f4c377492e6db1a0a2a29a94c167b4bfccf79eb91edb36685632fdddb3d4d82044541d4ebd31da0bca51bf231628b97d8959e5d07f0b538d0f60c037721ec62794cf6e0856cf6d43eb5c850c89052a7a040fb468734a9fd05bc5fb92c22949de289a829032323b129e42321ac1ce90a94495f6eb6d7ee1e64673798cbb5e4a11268c7fffb43314031891f2e8bc8c839814a2c5c56c8649d66a7fefd35addee5e2273d46819b2c4c5f16bcb85dd581af3dfe148a6d3e5da6bc375be57a914a2e39eda51e230cb5e5a6dd6d0c1b9cffbb8df589f7358c29e5c346587798e1a0acb50fce9cd8d10c3f16775cbe75c66564e74792c5ffda15633f23307b0bb84a99885fb410756c5948a675b09213274f8ff7d534ead54e97178866b7f3d43a8085c3649cad9981812b63c87dd356783e670b2e1a76e9454a5f5b4b40a76e08c96190e6d9a1954aabbd5122ba4104e82b04f37e0fcc9b4dd1280dde00c07197fe91a5e8af4e795a3bff8ed5e7ae7587abc8588bd500bc12c47f23f902e779b6ec9b05812f397d2f49289942af9fa7acb0015ce618ae5ee2bf155dc99413dc37070d3e04d0774a9d5881e7c62882a1efc04d8c753205acbb7c8f39b87e179fd47a2b78db43271b7ebd6bb117162eebb7d04fe0665728f9134aaf1822cf0f68cde5f249a132964b519a1f595282b1082e6d9cacc56e504422fbcd9cf418a731f3fa8e1efc4c10fd10982e1910afd94e8a3a1d30e3f453fd6e9f5de8a9bb76fdea63e767df577295803d9bb6400614cf0b61b74f699f5ef1e440f76248aa1891542d7f306d194536ec0869ac6ff65732a484c4dbe5bc9694e0726e72338c72144526f219866937ac76d3f8d29c9366df7774838ec21415d92be2b15ca581c8670c0bad82c26bcca25dc04657e550e74c78c0fb2b69edda2b12bb62f9758193fa81460285c2cb16da496b63b59f27d9f666eee90bf9f0296685a9972b7e72d9f80bd1f9c9390b1f538fe56f9ace22676afb83f27ff4131b29ea6ecc9ab8747d59e407cf85ef362bcfa8eaf8c9927611761c54938e68454266dd20600bd9af98e35d94aee857cffbee66c4cd289e0415b3f9d41da7f3e13700dc11172190ba690b93fe69c29c16e76eb7a9d317ac56e0a6d0062e1ac6ded7cf72b349b5bab51d1456fe5c09cef71a2e30f0f065801f445b4fd3a67f94cf0e64e8973d46560bcc041cebf7c371a9216d90ea3ef52e5359974f580ff99cd673833acd157305df925ee96f03444d5117769d91eaeb271084a3a2cb26d3c4ae81e3cd4d2b3d3d253a6331474d82e4f4970a15d63d4a09b5b909691cfdc300d4b4496a5ba3a70309f87504cb80a2ec073049e32baf2bfdc79ebb59fb1ec99888017b0c4161924dfe5df710e13162067e3b8a7458a52ce1f64a517a8e1ba7292c20291f464e9359db3fff4dd66bb917c8af5073d1dc7f4fdbcbac6a713694468f524caa19157b51b9cef52e84eb40c196ba365813d2bc823d1f9dc72f1fff3ae713c960b9e6cf0cde2fa30f821e238b765b1c5ca7e26edd0567f775e1bddd751ed791c08a1e22d19b305cfbc603e6fd437a6e8883288e9f21a521f612078602f2090a5ca53c1d3d393cd15ce2b37fd6b28eec1a97bf5832cf2bc35fb08d1d3ac2e175e62d9f76b078c4f7b4f076e5c7542d964bd3f7558db48045319ab70994fe46c6cb895568471da8b7fe06960551b16f0f9ddaff6294e9858a9290e9d4d8641e9e9d97b5dcbf0155787dc233a09afbc11d01cbcefa946a93b36c396104fcfca73558baf75847c2a3334f9a982d5f88c74f3e89237994b7ed05924b5bdee59dc8eaa84956feab3d2992a0cbaa990470c131092f65347f0ba4059f25b9bb4231fe372a86c0704ad2dbcea4c4145ca74eac7e5421e3a28d5e3db5f65f361633969b65d5db28db4695629a37c50b25cb6cd3d3300038f805672bf6626bad8e0ab94dc00e789d94306cd239d30785790d484d5537f9cc04fc76a440e1f9c3c13341ff7ab831a80a2c17c69e762e7ad6e13684e772685c5671a31e222e48918b22b203a290e3f6e4cbb241261838c66c2ee9958c1a6800c52198064ab2d80f60d2a966a9beb155d24ab6f66005ef4987c91f136e7f11299600943b21c289a28957d328d80bb5e5ad86416b308f3b5c8fe3fbecb2c48d6ddb77dd4fb205be422b58b634ed95a976d673dbde4c417f0ec83a7487f69fef13454d3a80a0df0612d2ac1a41a52318f8eea8ee658cf3cdee4ac156544830a887a4cb85c8dad4ae664ff2cbb8763c58e33b0f37aca7730cdc4faa99a973d08b7f4d17700d81c94616929d5614c41d387b37ec8550f8a4dc339ecb4a0ffc11bfdd61a86caf217a9a4563c33e78674355514fd28cf9303a6a9a9eed73690d5ac36d9d3dadcf6b8796007371d64ba597c51f1af7e015751624f7e64d1f9a1aa1e92b55855be00aee5281f499e11d5561364c3ed521f5e39633336584bba967074939fe08496630253c2a9c3dbdfefe0ecea49350121809c1fc1d7a22c3579cf69c43254cd99e8e8bca7c63227bf7cd228af64abc3cf4ba58e866a14bec5885edd1212947025bb3966faf641e87ec2c6971f8e870c87fe4c2ea7f03e23ee26787b05879349906a6575919f56cc76c803db8229e667ad2dae5e8eb5bc5b38287e38f9d3e172f89174836c5681edda0d1ff31047269c6482d85ba105f8e0445985331b23292e6661f055e36320945d66d7f4bdba9f5062e1dd221d2367e33cd7a85148ec98f2bbcda76210b6b289e7a56eb794ec15f258832b9ca82a24c8b12086824ea8698424bc94e32f5c4e76c9f371e7f20a104f346fd1c78a5038300b058d8b7fe69e3d28d6866cbc4b4bcd3bae52407d2ae0e452cd6705a44fba59256fb576674eee282e971dc3b8a6f4198cbdc7a19d50d7e5f6f5beff6e07e7fa9566a598d02aea1a339befe87874294f25fb9b03663d60871518ef2ad8ec34a2491cf556f83581a6392a9daff42eacadb56041d0ec8e3d4ac41ee6e595ee584aa5259275bf361b223213a34f169cf8c8bb9f051e75ec7083af47804cc67a9d50a21575756eeff715fa99e39f23c11756b05e0ffa120a4c6cf59483d4c71799ccd241fc6ac5f4750264878221fa4ffbaa85fbd498b83712764fcf358dc74ff44cc1e73cc1bba8ee99de2ba558ca20f56f9258fa627faefff88e6e95d55d0974d1178b035a3ee9dd746bbdd11870e2561c6f7a06d9316bef16820aeb76a3a05036d97ef6cd04283b0aec8a2974c8ce03a1a5e772b486adc7265948b78917299723ab11799300feb748b90d6325fe9a67c9fd5f4a9f2104fa24e604337f6736977ae6207643116406fe253e06543669bbe1a9b92e4aa175d3874be3e7ab343597e1e19eec68ba2577eb5a9581715fe11f90f42eeff239b9d069981bb10ecd100872ce1b13ba6682ae263557d16fb0d7aa8c1fbcfd1bc1e2341517b2b99a5a7c0fce8b48e915648fa89e72c36309dc15d462c6e7cce719e86977a4916b961ea28f8b71fcb89fe20a8a81e47b8c30ef2366f5a1ff30d7fda48c955153e0c0ab17cb0532e820ef9b8f2bae02f4eb5cb5417a7828dfd261b42222a85377673f5b2ed2d021a6a3cafbe3771b04414d3deef6add7d2d8df565d845351c04001be9c5b7fdda9aa030e065db3f92a6144bd7d5b0fe24b01350090f8a0cc4988ae5591094c62d61bbf3aef6e9948bf5c15cbc83afd9d224e0fa0d1d7d5c41cfb3151f05d31d52a742d04503f0a56a63eac1825f3e3c3f78aa7a36cc8b6df6c4f3950fa7be32e07904b851e870b9d0504040e2d9712207af22a829c4e1f25810e223ca00bf2de782bf23f7511abaaba1042d61230ed5ca475bc9ed42b68ff32695b48ad6841d53a50e57c826d25a5f02bda736fd9342407e7a2b267fd06866a74ed7165e409207e4a64fe97aada2beecc63ce202f48f04b55b64240b08b08c14d3300e368382418344df27b7dda865151f2b1631dee155705d9562d6ea18551c296833cd556f46eeeb8d56e747bab01612632d76dd73a8dc97089edd807e4dff86e7b9a9c3c4cea2eb432674cee1414bbe19553cdd45338376851e5864c34424042e8b7b984c71e9d7daf250358c4e31b93ee5fd0378ddcbcc0a644c6f6d21a1822c3147a2c7837b1227d17cb1183e2ec7a3893c0567f6a310a60e6732a103f16bb0f15f63e29bc843d85c171956e7a8543065b3dbb6b97507164de2606e708541bba8c68e2f4af51de668fc095ed0134c39916762193bd986b0baae86a00bf3ace254ecaba6b5147397ce31b3bb6bc53e786df5fd4659f6c493adcf04f1be87a223fae859d6b6d359abb11af00e51338604ce028c179e5c9240b768a40be88d848f09cdd83490a3d052a9f7d44e8a16f3f802cc5354ff8cb123d9c86ed9fa53fd7e57a339cad962c5102e8a263e7a1cd2cc0866ab263f2cc904a2a30ed11236faf2f2ab63587ae5e8bd33343dbaec2baa7a4a3c83fa3cb39589da73c7137494b8edc7ad5a5f5c9d2193caf128b8726fab013f918a6b1ee80fec59c44435e268b43ee267503be79943fb325ff407a023e5b1254c3ea96479714e1403f219d9113f507710dabad7ced95f75e8612c4eb45a3f0c4f8ab1266dfd7473bf2d41adc0be5cd1250a1b3385c3ba9c4b5c34a18482aa38a755093b89cb0d0dc6d11f6471518b19819a75083d5c961ab6033daee8b90872eb8e5bfd48fd20a1b173dbf83d22d0dfcc1d9495f9b12c9354cd649ff4de3cae2d429c0b5384ad87b295e7356b79938abc2d6126a7518a3c502d6a83e41cbbbaa286095c67800dd8ebb13f92b37b699f048daee5a95188790d83f45838d5870acd2b5311c84506645cf077b9edacacecf493f6d3cd645a2d9422a89ab684e29a8a937117767b6b1e56cba5663a29d8781920b73d763f67af1e281f882b8dccbae7687cd67cfa3d1f46d7990745c285890c7653dd0501772a0021032035e7441645d9f4e2ba28801e98fa40881e35ef30b5e9caff92edbe43f057c76e52a2273d65033694c7dc796abc28060279c10e58673ef1c5095dc5ed8476c0cc7022d609a24e4f8a246f593c1c2955a9c71f754156f73a8b811d80d5584923b3be1bd1d12c54122cebf6f46543bfbf5988d86550671b95a4dd0c9cb20fea5931f942c2a1811382d9645a1a3229c87965c67f89f7764c4214ffd8fbf3e84bb6d8f6c140a78f55a100184b52e0465bc7850679a8ea2448ce52e44dc121b270350806b52b2c08938521f64f8ab702ae4c4194ba7397d9a04cd9ff89bc7181d3e76941ab8aea53e13b9162d7c99edf1c274781496dbe0ab3689fda67f2b153adde2c4dfc4c2e5e10842afc7911192d0cc6ca38f9b350950591c3368fa7eed53f71235a242a7a5c8a234f9ab9bdf769f3838af0feaa029d6372032a52e68e825946faedcb26731deddfd7af56a726a271bb81afb6e7bfd46bd08009f5e29f38cc17f1e12e93210459526b9f5d085bc92adfb0596c996109c12557842f76007b667b5a860a51d1492cd9436652ac82eed2456adf2c733ac2835eae79abf8239281c418d6b317c1837246ee60fe68f8c543fc53798840f0da787830aa223da1de0be9160960fec3b5b2271f49937c5701ad3b969a08b76e3cc80b11c71f1e9c5e2b68cbde105aa87b3eb90be31701e8e07703503ed9578eb24a70c62b36c1d8d76fb0bd0680c460db4d19c7975d948d70b5cb10a4c4ec6178a0234940d1cb85f4a17d121ef3bfeb7007cb6762a7006e51ee8188c445def6f16074ff032c9fe629ee608422d1f157f8754639af73da735c1924b8572309a0e3aa62b181407acb09accb588f9aac33fe25802a0acab433054d61d4e3ec601ce1b0736d3f0981d86db0f2d3ae6c299241b03b46bbe7b94221bc7c36f95b67cebb28e90a060f5ece1ce3d8af67bdd7242c612a736522e88a7b19459ff01fd4562b89b0080451936e42cc25fa2f836566a7b44ba00ed791a7e5d4cfd1b471ee9789cd0ad3c3bd1617385dafd5668c44d5b85661f39081cea8d87ee9bd4873166e264f1ad092fc6687e1e5f427a758b878067a2ac2a51681907c9d4868a5d5eab127909285dc07d607f809b1018e354643631283abb53e0679f7f7b3f7a88d8489d2d88899837ad24df2de3446becec605ad1544d38e3a10ecb21d530afc82f8b227a12549790a50624d61e8ca066dc88d6bd5a746518ac1db3a660ab851b8fc67b2c27d713701081cd497119515e40581b8420f3a3e9eaf6a9d79a5f03d139de498cc9662d0c586c8f9bdccc150ee56b6f5930bee61dc53cf6f36c692b58af2084a50ce749c661dfa3aea61c3a70f87d0bd6f21ab8d0d2812b9731c9cd755815ed2b9cb8dcde841d24eaff7da73d6ef6397c6614c134af67160af642bd62f435d52a8b7d937fc805fdb73f10255875968ae0a50219f5aef59a5e449c1757aa8f25a610470b32b2e16390ca356a338e421dddf3084c3a72ccb9d18d6544735d3fe28508c38b36c3c2d48eb3d39abfebf2c91f484b3dca63e65abab6d830f0d2a77f5f58b950f3b08c0815bbdac50525e69e83d1bd09a99f47fb64a5440800733f7d45f89148b0940292f1ce52688c9d3b8820a3cbb25b53a04c76185b3e1efd1bed8b2deb211db9d7a024ad91f9f07ae241b5d09df0e63f664fd96064723f3ea83c6476ce34afff4fca9f311906b213fb89867357397794d24c9c55fc34b52fa486dca727a30ed97f70dfe510ca0a52954a013c409a43a5d7b3df8813594f37502eea4581b340c2dd0a3d1a646dbffe5bb77d79f8ef566872c5f4ba62d5eaa358b7e5c444985a633a2476edd9046a727bda9229e26610f3fbe025793184a4cf4951fe5825bd2fb6b8f551085c2293c341ec071adb64bf337f269947fc9d853adf92c942dba07e2794dbf329c65acfbd090c31b304c7cf7a072f08dce50455bcd39877327f6edd121b4c8e8f95b124e0c7b46ebe6a568ec57c22183c6bb967aec9021a635914483bf5c744b13470c92a03c594a851eb8599a77bc8fd2875270f0ee737bc75ec291050a66c6bcc686620e59327213640417ffc7a45a6966f697143c1a1846a6d06e8b80dabbe8123a5422591151e91606f8810bd82b3bb17e4378133894486abb51d06732875f317fb18d2ab00f954a0169218aa8a08380c96a323c6fb9d71e687c49798fd82cea17c22b85f060f2d887fb5e29dc36958c24c9657e16c1ca7f3a77d6a0ca23b21f2c6207483004a28eb5078d28d1f81617711012b6f7524215fccfb685ad7a65b61a43336a1110e5a2dc33723850667ad5a78ad46e7cf0f2efb6cd37ab0435c83aa2b72246111c8569f5a95753ca8b96fa46dbfcb00c191e67141dd3f885104ed79e45c90e3d69ec3da5557fd86bc29f2609677b8cdb0c24c3edd1231f39a8b4132e4148cba89838e1e9b403b837effa779a77ef11eecf229d2e8722ae7da0e49ab74c15300cec1b60ba033cd42159aac8e8dcd68f9b963e8799fb216b7916ceac157f88f7c6bcc25de8808927c68abfad85d1e8d53277725f9ab0d4a2ca8af912d01a11d210c096f79e3e083788279b3fea99e9af2a9d6fa77d6505613e1dabf217fe25112dd76e38eec72a8fbd1a2fb46a14121f644d002c0af53aa8d61835742c664ee0202281dbb161d3cf0a9053015564bd88dc3f678b9e3add5cd665f669481c619fda1ef007514dd646d9bb45dd2dfdf65434debc9a7f4e5b872d2edd5364d522cea282dbb3203b65c4349dd2b13400cdf226822e9eef6419bd9a392df948ffb0de2aa8b0ed354a8aec6c0ae665b2dd8804060fe0c0ebcec60ecca48cdcfe94d3e4780cfc2095ac445316cad7076655a9aa05701b847b4cdaf1ed940e068a06e083912fdc3e48bdd35d1a6a38c3e303a010223006ce90a35c95837288bbe08793019461b24bb8b54bdc0b1ba5e17a767adc599e3af73109eefeec91d4fc224e618cfc92da18dbea47d2a61c6f27de054625743d157a636ed485314dbc2f6e3de3c806bc2780692e4b9d94dcd50bedb32ff018efab976b0d41c8c3e137190682483a6bc0d4cf5ef650b163faca5f6d71be434c4f6862621f477244b89b81952a3351e6fb9de6b1b1c68c67d859758171aebb59beb73de50094456767f9e581bec49819a92a30091bc95f179f6c3be9b9a359db7ea5bfe08f3126bb82907b8dc7a72de62b0803cf8ea47780be874470a0ee01519190493c45dce418f74f6cd05bca9dd5503099155e4e3557cdf342336685c32f245f9f6aa167335af8c0d901c684079f03ddca1d995d3d09c75d3071dad157387a84ca11d255e747dddf3e50cfc9309643627844f24550e329ee850f512fe037bae732a7a62ec2093ce789587af0d0b10bc52752bc60cdeae84e6a1162e62bd878d0e23d76b7919687900ea1f680c16c0562a05437dd2f28d5bd4fbd11fc5a8fecb4be82f0eb68b803b69f391001f8b723b100aef4c176d024de38bd18301ba8d361867c0204bed04cc5e2421d6ec13c5bb14e4b15eeef9b6052b8ac52483915d16dc5efde0d61d2a2d03c5fa052a1fa41188bd6d3a9061fc1bb78232b446be7888d1d1df40cc5700c6979c7b3ed21215ff0425a3eb11f5ae5f03da6b36af67ef1a4b140b6f534c578ca52188dc58ca69897bc734734796c03024867a348a9a51dee2f323cb2c1b952c45bf8829b90615fb0e2f5d9583e529d579643daeb9577ab233a99a7d1586d83449ef12fd08471aafcdf530db2db9c52121879c6f86aa4ed39afa4b92fe9815b1350cc5e8f7103023abb0cfd84a0209b2e91e126be3c8b5ba817df5191ecc700b7adcd9fc48da0e0c4487558ecd4aed6d55f7c610c31dbe224e36391d1dae2fec8e6c6579b31047db03fbacb9f53ba6b4ce5498bb6732977e1aa867c5176aa88e0882811ed8708dc1637f2c1069b896948a2da8a42e4ea2762bf2f4e666b6fefffbcdcae1196fd234d10beb29cd8070011d65d27b269e26a7a064b28fa52d34c1fdea8afd7a4cd52cf7a49960f789062819917c948abc21a9385e8c7877c51ed09d98489a75bd72aad6b8fc53dc6e1d4315179e9cd98a6d515a689d2943b178160ef823079d2259da1c203d94e23a2c4eaf7318840dbc954d1a85ab9f7970b87b7a23c3c9478494f740666dc64ccb2bc02206b3ad6e8fedd0aba14dfe42a26425f9cbd3541ced057bd255d4c968df1dc67bf4db97aafa67b90d2f52d5ac444ad2c9911befc1677d18e6fa57ccc1ffecdc86234d75b9f51b3c8798a77527bd9acff1b86d80c44f74ca4836f194738e66177f0d58c4fc36f81170c629268f072960e7413f86c8064144fe7f43b40c5c716028d0baa4f558e48e459b6e86d4868f397f1e00cdb212a3e97b67e7b3f8602a9765fe08183bff96c5acc3426dbc2a9945521dc731b1b865ee0010dafab14b9d3cc3c0739d828bf6d4b76f7c279c13057c26ab1771e35e8f5e6d90ba56c2add932d5ce7011033bccfb4e0dc6a54ba939d0b12fe109312768277034d4b97626fbc8991d716f6233795bbbfcf263fdf1d4ca2faf769873f8ff6a0c27f6cedbdb034daa7f83331c09575462e1bc6526f8babe378cf880afb18be4140205cab9c22d2bdbe3a95e195ecf57d9a221d29a655f33d4f61df510500a31c4326ab1171523274d3eed268552b0f76df00d9d3970dd566265961c7b600d6a1fd08a26f7fc563c89bf733133b14213b051ae94a6312f54a4a51e898336e76a027048e27a0d58a4d5b7517395081488e6b68229b8dbf9924ff69af46767403c7689fb22182adb5d4989744a8cc20e1c4c18bdbbcf848d649eb6115d03aee4a307c833a48be1caa3f8f9a090c52d7917e13042a608dbae713ae85f25aff84d38a8e93a877823c6bbe11f6c1387431ccf2f24e97eea658b60be2ed92a92321426ba371514ebfa3f943e31fa31f89f62d77a2e1259b27d81ee9b13307050d4954c40b83aefbb61f728e24b8557af390589e847934318a5a4b0f0da5b18370b2013004ec7f53290484014858e3bf5c73109fe7e3772b22e55a95117e73155a8ef33f0ffa9cecd6da58ecca173278ac95df94e197c9f7651986f6e9a9c9f2b79453a2eb4e89b7fe9660aad21c08ff2190b607ff49ae91c826ac0c561cebedbb248affdc3bd7bbcec180ec8a044820837652f7b4ebaca536db8b7cdd8ad1aeae1649582f6ae3b4e5a781473abedaa1ee4dfb6e446cc4d947513b0cae3b0b598b693ecb0f21137b642718c9cc9e843de41d5c87509e3481d2016ec1b754f45544fe34b3f2d6af98e15ed74e528fafe39eefd58eec060439428d19a738797b2471cd72d35ee5dfd1fa5431f02677eb410efe69592ba89a121d747c5158a5d6b7c5308900c5e2a22c8e361ea3c795fb512d9e983740d13ab9251112356a4751779dbed79a0025b6deb1c71dfae98b5a0c5efd976a4c5777965d709c1f043b827f1a7c3dbee2a12ed9e67a696afba30164d4d3f81344a5b9319382e7d2697c7caf51013ee4a52c9c98cfb70282337accd5fa4b2725b455f8bc1442e648878d03aa0df8aaf8f14541d427df738bb9ddd2f01c7b86733a319949b8794468bfcab41c890df89b10041c08d79b5252d366a6f817da32d16daa599c8258126fbcda7345975781d90b0142aa53fb7b869dc1302321528e1ce5d4e46fc144474af30434d211468e95122c21dd75cdbd7970e69c47946eb441298cb1771d060a862383e1df58a7c106db92444093f7de063fdabfddd5766b2ea85d27660a23d7dfc49e9bb99035caee928bf29230a2df1531c8b76f2260ac9fab9e92f18d7290e9736e49a0e009e4c4956fb01aff13bf53dfb981fe2e5806a01b7b74710f99d2855a4f310947cc8388c720b417ecfa739e684fb3bfc0bb832ef29b043ff69e48df9f076dcaf029ffe0b59a964bf7f13966a45538c0fe8f192fb694b1161508a66c19920d33d049cfeb5a26321436ba19c319a756bb5bda3b599315c4b02fa3aba76f700840db11f45314ecd5ae2aebe118083060a95ad72aee08c91e8ab20f3efc0ef6ac323712a90e35c8819e53a955d402521dcae5de7837908104229597bd5855c25af409dd49d0def7116a42ca5ef819eefaf3147e2b9009b94775c995335a491eecc82e5cec1ac31d0dd0688539fa5316f19ac895fb84588d86c2a1cc3348efa46fe3eaba79964497e1b94f5ee812e53cdd28fdb04d458026478c6dccb978875f73705aa9a5e24ad0a5e1b7ee3876d2b7b88e81d5ab169ef69fa5ea43fc75a0fc67d789c0a03cddf0dad710ad642e0ec24098d9734c75c4228e72232d202137901831915f9b9e08552176f9249178ec042f15db6ac0795bb22460a31201f4d34b7d8f1f45f5111f954572bb75b7f6bd23ad6744977e45315315e6d32de63a6597941e20b9754fc843688036864d7338361a646ac13666068f1942e8507ca4e312bc8dcbbb8f7a8c42d2d4fd571da7ff30c8dfc00db0179eec153e62b453eac785a52c3c3a766bd8532c7eb9d2324219bf884999f98e92d60f5338cba3e5a0034824f9d00f35b3ea50e0989d7ba7d460644527d6a4a0b3da692821d54c405e32723e3dc7e41ba20f480fb0fdd8ee703fe614ebbd8486dfe607d95fd21a9aad3e5322ea32f847f6ee1c041092934005e148bfdbd53bd2070be42b0c7f726f6a290c30f01f785a1dd06c4b53155747fbfe342680a4765500e21c9bdbcf31de888c5dd09323761a379729933573230ce572361519f3bc00950de12e8496e802c8034e8725a3d5c3dce1e7a90b334625c873b7e4c5bf8b949bf9ddbdde06a9a7e9f295b1a9fe566b3771aa3010c26fc792275a941c141a034ae4728930b1354c388677f05283893b9879e293a8c58d51b46fb316180280ae8e5106a0a7bb2af92eeec3fd275b409238b69dc25149adf040eb44a47756054dec7e5b759f807af6a459d37b45df191661953c4bd65e0cec546117998620f66b5a409bb3f3d4d4a9654c6b9f5c4ed270cdd3bde15e118032e66bbda367bdad455efa3fe2bc0add987b3828d58c0f2903c6dd83f9e4170ef6f72b74acf1b38a104c13e1d9824f8e1a274f2f791c7e38c3c0ec82c3605a58d0e875373861a92c01e22d928a29cd11ab185e365946fa4620259be19053ff19567a70126cc78e08cac0f659128a8c71bf8daaed07b853f930cc6dc75246ce064ea0725255e30382fd0f6ffb7189fbf4e6930163222801f5e5f946e3c62510977e3d35b81ca4fa5b381609ac0930b514eceeb404ec468d5c51f1442ae2e0da86aad920bbabafdd0dc7fd2cc73c6bcdf2492f4ab77ee9585abef85a84db706869d1573410c634801693176743684b569c56f287179089e0c46f769642e0084bc453d2a8131fed81feca53888fc617b16d1ce20b0c7a158d5169cd370275221ba22db1170d6a4bf0d06e7a63f79d8b7c4209397a53e2dd1149d1de3bc5ebcba3a92e616583773936bc11f93a376451b65ba09b278918b75759dc3a16183d15b6dda558a2094783beb55e9d59b29657f242e663de1960b1c707d11aad6b58054999edac877139589cb46dee0aed34118db9c7dc7defb2a717775585ba26fe387efb6f43f4770170ce10ba53c5d8d8966b504f14441fa41a5587898a51f6d6dbdb951f54fa233aab2f926cf5c8088d643962584ec962e0b6e1c5f78d8b9a5fadb412018cc157da59421992a348f669a8353077a28f19943794e38180786ad5085a748b7fb3bf75e9e035e512741c892456f2a9bdbaadd62f5daf040104a5ffb68db9d48158185c2fad0fc4a780251beaac0cce249c1f60644627b08bec3368a6ea8ef4b36b5c4997465ddbdcf9cfc759ccaf94699f76e4a3c71d9a65b7a8002dd5a917911fc9ac8da80df95377f3bf322799e6d7b89a35b9a5233bcb07f1020fa2b3230be5410724f76fa47f81fe910d70e434349977a08149206fe94bf3cd3e4b8b56d4ae318acb48aa7978445ffecd3d7a07bfe364f0bfb6b54a37943c24313f5866a260490b10c5e25203ae265900fc879a0a1f8aa700b94e509bb0880fbc8a90bf51af37929c1918e484db91da4df2e738faf67b3a03f3316f7835da6fd24af443c0f700ebabaacf40efa914b1d7ffcd950559d2b0305b5a6ffec1cd864ee757d30262a0c5487b6b0076234a30bb7e9ae6fb70ef7f2ce2d5ba5d9b7e6c1462a29efedd27ff0e9dfd2a4239b6f76b5e10b2d12b363fab8c1f567f9cfbe9d061e3145a69c211bd4775efae9653c6304b46ead9170748f7dee425df29d8ecd5533e92e46b85773b19df8da3ad011599515d42173169fbca6f22837f622074f5a52e30df61e42e887ab3a1e0af490ea75984587d85c9de313104aedce86f2520419ff02cbec13ac374844a088d8b766965fe6d77aa050a2eeac4586b4a65c4ba11ae0ce64afcb7e57e9ce971ebe207d360e50f2ec9963a977472d247c6e0ef493f92ef215556a840b9b24148102bd3306554f3a9966820b5392a6033474089de1fdfea9041908e888aecafd89236c8e2c2eb8e9dc32ed7b2384659cf4bcb6e4d574b585b32184fd2776bb44785dc056b9dfd37ebb58b1302fb1c20f595ac534abd0db9f12e881d442fd143cde03ea35842ffadfcc4b38dfdfff4bbe85a1209d097a5d4da1e996e988cbc42192a3f98a65a2d9be390470a5f04e7a76159ed61ae32823e2300a10276447db0492e349e2e9c4ef30488fc507079031354be88edae614d81d5f3dce75291d434110aabbce396cc5b5f020ce04c561090f0316e7f217746d368aaf90a0a1ded64f45400c1bc75904d7ee2d438f56e75c0ac0a69a20e6d6e9d1fc1955d7b10fd58eb070886b2138e0467322601e4fed72d81bbe9bd42e8799b7ffc5463bb7a77dc5e111c0d756c3350379c10acfbd899973e5c3a8ddf84e17c6cc017f220533b2a2ed72782149769a6380e830ec4579587ee6fd5f00abdd24df48631610c7420a5e4f5e533e64029ab69acfac5c0884b15b548422a9ec4732d9f998db4c4de18ba43fc4853e0e79e917a8b629538de98008a9b485364c5854ee61089920fd8932a22ab05e951dad15c612107cf63a08f6029506a34c10571c0f7f363747ac2662c3fff38cfa4e4c08f7a2bae69732ace347d8f8ffd0cfb839569c112d4b3d18e85d5766364a774bfd6867663a47d76374b4dbc19395ea3436a6f8f0c801fb81e66608a0299a2944795b4f3ad0d9460daa97e943c21ff87127c95bc8f986996a31014a20fde46bc26841f25deaf2d3aa32ec2d105ab63f4a7cd411ae36ea0aa794222a3e1a603b52617e633400fe31b7c392537d19922fea07eb65e334bd4e5aa8096a118efc098b20baeaa01741289d21b32af56d03d7a10d4f63742b32bd1b008a7c35f15196b3eff17eda9f8ef57e3d38eb317b51b26d8db6bace5b76c8c9b1504106be02339751f6d4b48f30aef6a9e6e2b44f657f0a20075eb1311cd14e50ed0597509694feaed4e3039144d9eda9749f331e5b10eb63aa6e80647f01490816da8a862976bdd13fc3d240fc064ca68011c705a19355cfb541c83905643cc5bdb0aa82055e7acf759c3f1f2f8f3e1a2916a4d94e4a8173f5b087e394a8f5ec7b5c5b763e572c8b63ec73ad1d75811de2fb9f7fda3fb1f42509a6c3dbd72ce4ef2b7f832dffef1d5e4f9dc5a4ed18fe71ff555a18736b637f32d7de6e67dccdc8ca971a2dffa3f60510eb79a702a27d4dca28a445842070e0ebbe033170a916b09a79a385e727ab5cf0b8a88ab84e6e89dbdb642a8d824bd55fae71811f404814d5d7d6546d0a120a3b7a248809c9779d719c97ff4db79737dc61d788ec8b4239a2a60bcff6b8c8f335925f628ae6fb1819978d2ee9b66be6e3190805e3bc45006f7629c47717f2061d0a7cb76cd134ed3e1ab19fba9a8bfe8147a66ddad3ff5a33a834ee18ac9a6f7ffddb262c54278667538370882b3ff91486e816cdea890c0e045d2fcd71db2bff903566dae385bae08899b5e9ba1c6d8d1e0952e6252d75eafc41ced5ff3cd1d2a248c2e05c7a46959fb5ce73bc50dbcffa433f88d2af125815eb44f3c5898f8fe9f6401e25e4a00939a7f522900e389f02068cfb72152bea84ab5ea6bbdc4f60f0346ec3c7afaf2fc1bf6d0b8f6e0c5031f0c62bb74a80b4a186a327676d597e8a9ec78b42f861cba967f4cf70fceb4863554a8b00d41e8eba0ae54be843182509e18bdebd1bb74a25a981536f652c1f9affaff784986eb52be3091e7c1d71e000a0be4e30555bff1581b6d25529e0486bba93c025364ab488166a2c545cca5a3e25e6adab2285a43b1d705ed43b0785dc0516db13c3c52e49d33b51f28667d22ff410433bf365f2b606af0c88d88dd3a20cb387b092588c2d22a0a60f6fa541c88c5ef57ebf1e2bbf5f699360a37b4a373c875981626bb860bac25327ed86ee4cdd7e910fb361f5e11a3991e8f8b96898bfe82490bb73f8c7dae93cb9298d8d39501573dd422b1282d185f768c41b966939ba01a207b86ad2e32e58b2394334df6faf4015a2f62077b68b77ae37516269be89af15972cbcba05c615474c099a6dd98d33a04c727ff5516fd61495826dd4167a695b00b25b25ecae17b82f0e97b38afbef4b813c77e0322deca83bbaa2be6be3db8289967f204e6e21c7d170151d27a5c631f0d5c6374bf6750decb3b372001cb4a0e7e7ae6e81bc00d3f770c0ceed4a010166c950d905007093f9e904ed6b3e76882c72f15565eeb97f80ac39fba9e311a78484d9cdb9d4c91c30c702fc767a9501554ecc2dcd346d276e86de283ec3416edd0ced5172613322826ba315f65d5b5157467420178623ef0f8badffb9339c979544e95ad682e000ec130a92a7bea24d8ff9e4c652423abfd3d0bc332790330e7b05eb2811d2e2d0457bca031f6dd937d0e7e91764531112f269bf45080474bd7ffef32d3605a7dce5b8e72d3e1d664c1c3fef3e0bf0d2bb4a45bc688353b2026f4d5bfd0f6ca3662b9759db8bc1f358f57bff2aeedc0a0abf2534761cc0cd6d2190ebcdd6c236088aabe855e55a037de1780bffc7ff508e5519530bbe0f62fa03d2e73aad9e0574a7107c86b4eafd942de631b58ee210611450d575e25e243e40bfa0bc91852f272742b0e3fdf6555a9a90bba3a1e9ef3214fc8c852cc51b3058540847f3b06d21d1b3e9d83cdfe558d635f55acc79db8cf9c8afd63e3d4665eb6ca729cbe48a0c16c3137b6ce03a710c3fed19a4f79ad6b0e94ada39dd214e27604dc6cb18555088d4812a23898b134c41f9594e0a69ddf2d46e51f2794357392c6a7962da966c8eec68d4e4354285b3868bd2504c34b97cafda1b091479fba7f9257f59b9484b6502915023d4930669673ce168d57825fc77ba648fb84e131cffe0770907be5b94f0a923e0e108567d249ac6335f67928f06072b8075e4f29b95d8dd2d1c1ac2f82964caf2ddfd781350f2eb860330ecf2765c10f3b7e461054c2087f65f6084521d1e3f3ed03297d0361bdfedf185e7ec3eb19bb4953974173d748a38667ee5cb6097314e8eaf8550b1819c425eed0260b2786179561d99d07bb86abc101c668b53e8cfb21ca94e4b4076850591d53a466dc80be08250a89a58654cc75b4dd7eae182a0130d743e1502beffa6c858adec31f30c9ce1870ef76d6efb779d1fdf4662f36d4af3737a72c5e515c0f6d11fc08f4e7b6945d7e274593a2d636ab745f24939fc239b97944524f45c96aa0eaaa09c00bb98e310de11bf870e31a38fab8d486d9e02461d14e5cba35b863f896858dcbd628d3ce6c84a78161b849e1923a197b2d413291f91b8154fb8386901a9c9eddb721fe1ffd76cb2a84800e71c3ffc9f5f7a98b0c5a4326b18c789d932ea9afe433452dda51597d01d883cc1a44d4361cd021699996078457f89e06d4c2acd567cd558e50f95a4aa0645d6be612f36928e012e9ae1cdde81d49c2f92787790e45ac5f2c3786d96bdbe130c4be78981b1cf3e24d5dbd0000bcb3db974bd6fb4048e760c6f0f0c7bae6b2f062d5ad3ace47802f98430e954977e883cdec6db23f9a64fab0f4849e5a2a9172df7a14426354fb6718e2d941a1cafce7a04cb32c145e3ea6713a303251bb4cbba48313806993f23f822217e1ef43bc399f1187b759fa226e26750755294076f352ef4e38f4e03840629bbd37eee9ca332de2d70fce16f6684ce340add7d77ddb5ba49cddf3e8b8c057ed545ae3b08b4f5d0056ab80237b32563b2c1f7f9e42287af59d78e8ce4e64c3396cd77019c12d40bb0a85469c6b6a2516c81a6b2d479ca25b91a7aea4770a1d649a739abadceeced23045a67b473dd16dcc1ecf1baf544c278a66adf3261f52c337b27d27ea97245b8466b0fa4d14f3f92672a91737c7e04dddc73a1a75dd7abf24f6133ad3da19b20fcb8563b4e0d7c5edfe7d71ed9ed8dd4b3c081f3856c9b4d98b9ee7b260e4d04c62a06abdbf2fc0acf1199c0bdce3ae091bd68a4e1d79002353bfb81642f0eaaa81757e08e57b3f66128fed47f87582d9127c42d18eaa121cbecf8b32bd6f1d775ce1a817871ef56f7001bbc76ce0f103af520154f0e8ae3b8d9310037979c8257334efa97d6e57994276acc008b702bb875096f026c1bb1a530f7338705cfe0c80bfd59ab78d05b3fa91f215f3410199660e2f76f7a134d3392b14b6ac04fcf0c3d6901e41fdaab689124dc080e84fcdba9cd4fe63bc8dc832a369e938293be87480c47653ec4f5df3c81f3680be1e0bd98166519b443e0cb4ede5d4618917012be06c4389e97692e8d56d265fc61a3ccc14ade5323503d3b8e5ba471597d5f6dbe8b08c7207ee6efd27c552b0497c8038f52c6e60c3cf32cd8160b3245bb985f9c7c1434928c5bc916f5e8680a5c0a43853c7bc0339c38ba4ac89dd5cc69c992fdc4d093f53159db37e1ebf2d03d86b72f31427a08d9efaabc3c06b373cba0bb4a61e141c642be5e0ae6f0c5a4b5599a30e0ba5c9bbe25c7915b58cabe8375037d2c427ed00e7985f8185ece7cd2e56fc665d95f467a09e4afef8e4e9463e0d5cf8c142ac38ee6cee29766249bca223ca4ffd615ec30ce64b24a01d35311c630ba13c91c2b5092cd2164af9f40d47def24a462d0395228029c6eaff233fdb698ec6722a48316f23f50f83d8c361cdd98951b2a93695efead5e6b24c74a3c9f0bf64dfec31ec727a98803c08b3037d9c88be37dd65e183b45b6e1544573f04e82cf819276c8dc12a7a93569f78b1cb677292d3db86fc241b1b8e9633841663a8cf0e73e9024af28b1a3b98032c4798c58adb52fc2d127a843b88c5b91952ede3282f91a8a00636d88727df2d2d2df93cb6b42f40b1b9b0217e39d293345154c4f559bd74c9fd48c9aca78ddd9b2e61d081dd8f8aa6147fcfae175902f62f2ccf0a86efdb181263c88df24b5aa2597b7ccdcb7c2f905fa4e3368ac0f8131fcfb9675385e2ddf283dff28e23efab4864b411169c395b2c1ddd6aa6b6b9c67360616e93b08cb32d947258dd99b426c7c04dd58d0526f7e4f738de97ef246a3d61f349a43fc15b4235c195500dedc0efa4b28435fd3c58bb57bc501831b4374b9e6dcc849549cf47cb6d4a41ad88ca1087b1f910a3b13f1f1c9c782aadbbff11547f4b2f5f6181dcb20675e0a34fdeca700e1907182b0c3ccdf0c12a7fb2d06d00959ebddf7e703e6fe87966e34b821217f5e80ab066dca83725dc94c3d07ecf4472afebcfe1eb5a7e58cf5befdc87aa86918b97439db08040ddc14c33f32174e2e18352b7eeeee68ecc4de74df74536832aac01e092917b899424c728586617cbe176bc59bd91c2c941d186aedf05eb2a3c192b5c93f64918deca5d414475e0f3a2ebc01f973c7a6d6a3fc4e9bf192864c63abe4b62e6b834471cf4509ccaa1a920971488131fa63d5a820b645e68312a9eb8fd77fb7585bb7cc42cab7369d91e81295a0482e2c6c4d594559c99baeaf502617ef7e617da528771c9ff7838142f94ec0bfc5f0b158b26627e42e6663c54e293ae2acbb34e5282474f14566d9663bd29c6e05d83ad9b1524eeb4ca5edab1ea9830aedc2abce8372b1e891db90ee5daa4dc2924ad134eb7609103859a22cc075f1744f6442eafe672334c5e780c8a4dbdc0687a6dc284b728b4951782a839628a4946b55ce044a5f95cd11cac46615b7c993ccdba26da25f8ececeed2b8e633b874757183f35e2bd3f2c7d8b7a884ee6e81eef6422ab39ffe985cd7b833ec07f3b1023415a613b6aaf7b279887149737abaac9315b2cc706286781d8c73033ad7583cf2d2143ad1a0cf35e0cfa914daa16c6f2b3bbfc0d423e6c8a4f28cf42c60f56d2140ef1b783320ca61634b9b3f46869ae5fe57b26abc6be93139c1c81c4b4ba2bd43cecb1e6763324b37d1be859ccb7a914924eba25ea772b2773286d9f0ca85574bcae263121688119266af2612bafa3f1b17e3e2249f7a90f17f0bcd09290c27f3a27b3ad2e04c5921d14a821704708d52504e13020469b5c5038dd236de6f7977e75695ee8fc77d9b4e0d7e41f2bc1f8c9635f6dafed6d0144f5acf4d6676214a1e048c770ce3de73ef4fe22a79b6aea2c272f89653ce952d9f09e11543b8e918c272e71c394527f4fc86eeac211a149414b152ce84a04e71795bf92db55c5d9938f88a06a3bfdd3016ec3331bd8d787fe7598dfd1fc97a91228f8c253cf79ac885544a48d39257718cb9299c5ff4d0c23f25852b08fdad75cc969c5108a1c4ebe7cc8333f3ad33d02ac3967cf27340ebe04a3807f31e61b6d76e9cc5bf8d869c27ae04b81397321667c78c843ec214d2826c4e426e4edc3dc409a257c5dafbad550b4e7cfd4f48fd0c5fceff56a893d578c0d3ef4795e2b0d07ced93ed19227dd731c8a77b18e2fe4ee626d35e65ff7b881bcf2e1b82b557f22dfe17e6dafd23c7a7667c709d7e5d2bdb5b63da70faeb4b69645e4b424e2ff3bfd79fbc8a56e0f137d61dc1671a99011a22fc4dd84aa7fdb7fb1db07d86d27b8576b1526d3d2808d82417df9cee32f4d3a61d2ae9750b4915259933488d2eaf36e3cae07b74058508e2946272bd7d89e13e78e9b5d0c8d21c8c560c4f82621332edd1f4244b58471c02051309eb4a40059cc5a13d537ad8cb4cc309836f747bfe5e059dddd2c3aacccf5692e58d6ec1e319233cd86b4c16f8b617ca0d88b58c4359b9b325c950e1ea551a0f3faa08e1fe8c9b0d48a56927d9f3477d8fbe0924cd17a4e749b827afb75f0acba7057f882a08215a55bca9456f2ae0b0bf798b04796396e5d42d3e13a428d9b22faecdf77302ea2b00de6b5440485b9bd2121dce3d97ff258b7663e6d9f6af4c4b26d61c61dc0ee6126f7ba4a888cc3df898e1f4657f43faf892a3a1663ae0beaebea5b5dab2198c3d721cecae22f93eccccf0677f3918416d39bd79b0126e77ee7480e6128a961ab426a3572960b1001dc0e959df709f8287a242076d7e14754c6f025df79f44c340e939d2e258a1f3a512d8a21353620b84c07259e75ba324609f98535b1b748a2a5c8e6aca022cabf46f7a4fd562fe75865ebb502b0746d476e4a925332ec3cc6765e6ddf2965dd515e9534549bcf10e8774f5cc339af71fd3173de3057688ea44540460db1166dae26226267c3ad2351d420224d27adb36b6a5d142e2a36802d7b1e44c5c35b27ea884c420b8826259cc77e4b0896bff26dc3b9470bdd935023e37909b8ff9e1f33bd12be79637df6dbff454d35f6cc2dedb7f3c6da4a21f3aaf42b94f9e635b2c085772aaa8ac6a317d4f22a92e0c79b05831d28930d49d2fb3994c01d81774bc180f04d68ac23cc761d0779f8770a2399b5f0b1cf28c754263e35823faa7d8ae63b9acfef9e8c6bbe3336beba37b6c356e21bc39eaf9d1af8dd3c7678f20b33d6846879e8eb4c031d3c22deee1b02931c0b1c271f58bccca872f5145d036241632977ce8cbda1dd660a98b97a43467ede3d7a94c90affdd2f4271941161fb30dd7deefe45df57d1ec003367b4b2f566b03312816b951b806e8033f7fb3825a4b7748615513629682f18ca8c6bdfb539606ce85a1b2301b5b3debc6e851cdf4ee70d36eae50fa09ce8b1e55195c215413161dc0feb1b6fa0335896b0003c79dd8202bd43f53ccc9b1490018c14984021528b26691c1245db61b08f1945200d0eb5d417b28bba36d76b16a9837378f7561d22de5db3ce5a36d9300c5543d225a0681dee71276be6ee3b3bb84a031d8aca0054b4c5c12f5d0ae8720c5cf045409adc02f7d29957d9532b740b0211f3cedba9628aedb018126c49c1881074e2b0a421909de3f87cfbc0422cd872f751bd2afaf16b74ee754bd80a7994b7f3db4ac039b4310faad7f6473fa3a33d5201ca5b4a8ea636cf3866681a6e58e981125d96af0a5294fd4420cf19c4f7d9f445518a484ebc651fa2991e3400578da7a79251d9f137e6a4b399bf7e50776bfd21681ab4f5f2d7d5b96561b7c1a7cea9d5ae563f614af1449b3e565370c38ba6fa77d28e3f404846be556e04fd585f6dcc5be000e262cbb977ac1534874a41cf4085e2852685263c68ab68200de192b8098de73f920406ffc0bc55f71222b61c226e26b00af533348c7115376a989337ebfe0ccc20c8f108211ad3d9ee71b8455c52b9a36d45df4617e5a56d399b9682040599a75de76316e52a0d0517922f7b8daeeb57bc0fa34e43c9499ae0349f0fe65e956198f4d237ff34468fb17270dd720bbbc0800f9d65cdd82370ee16358b7f1a3cb8182680449fd9637c22eca668ee5569fba58a2c5522370fffe0bb80c283667125ce84e5afc0a5689edb74da6827828aff5b62f1ac875015959ad17dc7f86ad1200de76248f59ed8db13c79c5b0186ae3c8d6339ff5eec2a005e124513c4f4aaeb32c09d32ce18a42ea2ca09f76d8786553f9af94a7af0c90e20e4b2d531dfd6246ad75ff47757ee357d3eef9d6c0e87dbf73549c0f3e8a6714746dae336520107ed92688750763101aafb9b3d182d123cde9fc5dada6ff5c829ad8ae76aaa59d2735df4906540eefcdd90459d121c5dc2c4296a4293232a10f99cb095a443b95220fe5b72743bd0ae6dc7edcbbac23ed09198caf1c5985508e8b3b21605798e3c9ef3cf652256b0f8a95b074ae95b15b31ba28e52a3fec71e94c244d2f55263fbf6687233c43b36992db3b8abfe5d5a24b4d5b60c1c6660fb4335d9a4e8dcd65b766e845652825af927fc967e9d5a9be7831a06a145b497e98c9c9f1e75ffa078551036281c0ad5b849648984cb0f54f627b4d902c8fce0e73e722b2233e72e6798bc002b0229c97edc9990209f885292d3f10b6478a88b0d8f0d61d31ead4f91acf6133e84ce87fd61b8a1131053718f13a712e4c88154a751dd20eaca0e252d0b4d3b244020a14d759be515bf616c11abe2a7ef1aeda0e62ba61e6b139cb1700fd30e9de397fd577b9fce46cc34aad8f0a3f9da5bf88038bfad34ded658e021bb75c2ac53db58ec9cb191fa1004d4cfaed73742a77724a67ca640e995f6a252b19efcfcf090a69af48797eb75124ab64a062435584847875af5cfcc0900adafcb9e09eb2c1e5359c6cfec3a59dc3f3e2ce341dc332cb6626460217fc86fe756bee87e71baea4127b2763d1d6cd317f16ba4b156ff092e73ba51f4a17c158ac6a9af1ed54c6aefcb94de61c5ab02f0245bb8ebc8d650f5226490b7ef5fb7ab227b6c915c4fb618ea0dc050d0ecf34e713c3b41086a437d34c46bdde58c9be5a3659f1a1379af8ff6cf7a1d6dda7ba389e7cadb4096824403fde889455da00533608c3ae9aff84287d4952fe089a3ab631fa69dd1b375617d2e7d356179b28822aab7eef21c151869bdcee85e3a80772bcdbd682687545a075487d6438a9a6d649e64749e48b9264fd5354e3b6789e6b79a422ccdab1240ebda2b046cbb10b134979174b36da794ac95f19854c33a72b7a387243a0f2935e5e86e0eab3deb3449584b9814c0b6d2b45965bb9d923977e94879a538229cf138484f13757cc82207a36dbbd171dae65c5405d49ecba8f68510d6fbf5cb7496f0f22599cc6e8b508eda982fc0292d302501997989125fa6b1c548db50ed32dd9d8164becd85d7726ab52b2f76c3f0918e5651019dc4885764cf36f6d28fb32e8527c9ec9cc6229095fcec15e79df1224dfbafdd824e6a2d003e54dfe90d255efcad329970a47fc7851ec4ed72f50878d486bdae7651a5ec39a670b5f7f0f46e85a6a53e45c6c284b5b54d2a9a31d19c0f6ab111411fcc5d21bb8fa94fd02d3c6a0d3a8274707959a64f7bd114e226a23552b64592af8f69cbd660874a5f5885be6ac2448c9251819068e5dff465ccd335e25e5c27ad7daa9162dd15bf9aabf33b93a5a96b166119348a4ce3d30b832c108daee685a394c1b4af742d82a597b173a854a8095dc20c4a6d9ea49a665d84f64baaba8ad349fc509e4f55a4f2a0fe44ac1580c09db277dfcd752a1310250f32f4afd6fa33053fcabcb77536362606b8647bef27e227670a2b6097fc786189446e052b52b692eb8c4161d58f7f33bfc3f0c9643e8b15415b089abc795ca59ddab766320ec64e6795d7317f18e48cde7fbd7bb2085cf45b32a2edb075f704a60e4197f9ca87be838f8a46a9b6e49f64635011144fae74d8d5aa241450ed80fc56c13611f523fd1fc9a258049a3f236932f0a848f28e0f0aa8df8f8abc42d5110b17908c1904b0d980c98f559e086604fae5f2e7817289eb45d25089a85e9c13ff2ceff92f4e69e91ccac25617ea5fd7077d533fc56e2a79398e8a4568a06a4e21711bf8d706e6a2b4bf2f6ca6d15f8b657b99922b6f4afe3d0343bfd53353c1940426f44d246766de8fc17b0f2b1777f6ccbec3674ac84229d2eb41b73daeb73cdd53cf1e46309a10d4a6b6b5b057e9441e8b2064823606b7be0a8222907b13a9888ac89e29fc4e44a2fbbf9676a3566c00d5c923c6836ba876241af28d87df247319e2dfa3a487f689f323edfb044fe88d5f3a6ee702083089faee60063b7fe58aeb74634fda14f03d4bf4a786ea608638f4eee70f9acdf0e59bba92362b9e8e75802827fc00bd20bed128a28579d38b0f256a7aca61b99f2b10998b867aaa6a6ad9a2f878a2e31d52b152b1c5bbe41586f8edf596e2e355e9a24a890bc44637d2425ec32353e66aa293f6ef50fbd77e870ae1ed151c95cf0f50c55fe1322157f197bd37d8613cb11ab14de7c758381c5a0044277e4493e523b85c76321225e0c7acb8a9ee9abe482bc48e473c9270750c5dff50b336f61aac06d65d85a61e638071dcd9cdb7bcb5e3c8dc5563568c13bd4dd79fadcdca0480dc9b901cae862619233d26786781eeb5e4fbb4c4267e165bb2b87fe832fd102f26958bbdcb922ecfa54f02653e9512879b8615a753e7c5390cae890a83a4d79a2bb67542c9e15baf7109c167bf708393506d48de043ccf1d548ff166b14cd02b97dbab09a5caf643e63c7a3af680267e2134694f9570e30b6a89deceaa6bb6e62acaa546e36da3ac085453ae9aad9000bbc3df814a401913638f47b825bc5fc2e805935e658acd6d2371dc1966400a9d4bb939bfa39f3cb35a7d8e69ec619dd8b2ad45ad36a52b4ff460b38cd1c33a3d868653ac1a75f1be9d8e713f51fa72ece29bcdb95dc628f94a84da11ba5b4ef7a63e787c3426debb493cef08dc1c43f401722f7bd87282e657795ebe9b75cbd500a150154dc3d248bd5e9759bce835f10851919b0d33cf99698c10b88ffa689ab4c660d05313ca59e78955da8baeb5f5674d09d028cfce04e885926f922a9d54b976f2e9b00445d0383057fa254b031187dd76ae3bd2f9f2d620a5158947ed2a4c6c638b925ce5e30d36039a24a3abd8eaff5dcdf03eeaf9a9d1ef3772bdd061f6232814b1a336d6e458d726c57b63dc650b6579373d864c37db378f1b1deabced6e4cb8d344ceed861bab66184f287be704c1394ca1569011d3708c5095a29107ec76a74a33325134ac419ff38f1e05454b86e2daedfa72f04407d90ecf850fe0bf3377f118331993ca63821b0668738a3f9d80d52782f440efb9be55b22c31950d546e51b4ac12363c241ecd36bdc517c8dcaaebdd1627ba9602a7755943af8eb90d36816cf8df6222f1e1163aec5b355fdcafe0f511fdedaa36829a1a110a8f5e95ce74d13bcb12fb58d9d432cd939149c8bafc31a8c409c7458531ac8d9be2f89130ec952f05167632d8beae204aab6cafe9977d0a13e5c3fe4108e18bfb7ef29b8ba6ad6bd07823056bf6d0352f26f4e20a73ed0b2e7d46216d1a8cfeecad68c902163d46f6a97487a8c54f2b2874d9c5a34611c25188c31b630eb5f37f6eddbb381c9c098939710c555620b5062127138b759f8c1009b6209d4b5aacc2518af798c9357851b9e6ad8b9fbb37a2cdc78384582e64b951790ba29457418c1fe4f22b7ed0bf7c73c18b78c5a249804525fe0d88a177b5516655c73f9091d842da6bd1473f1bb30f3b792f5b451280fa225e9aa4eca86e90da3e7be054fd5be78783ef7913ff9e6d548a06c4acdd5803636d0ffdca7fd14a397ab5695b9f940f69a37feae685b8e3d6b7ad7ab3010f9f5923329f7c5ddc5bc553f251b81b2a0c34ca0cf5f07574b54b84581d851c27f1fd7f8990a1485a01b850ddfa231ea01c2b8699e014b200282fbcc4636959a03e40f767ddf58724f57f57201d002cd4e35d07186a8fe896adcb20663f432505cfd7bacfc3f01a64760490e4e5a574e8e6d9b478a38fad55b5f09f455720e8191088b42da1cce9bed31012df3e264ada8b2cdc14c494ea0ebe7c9f8f059f0773cf9eee541c1bba7db687c30f503522c5d74fc3abd3e8f02d590d1e5cd74aa5fd25b1499eaed283e751e866cae2929b8f3ee9d6b681fc74008e150df482e6281624498e3b955fdd1d9097a32bbbc003e0ca85f97cfffa3d660ca259d9a186e0a5d5f48452ae008601ece150fe18307f80fb30c753a469da638b1d09d7c4d026aae638be10c88ab2ea51184e301ec46d2abb1aab1b7052b405b59adf45a63a9828316c36547338141b61f5d261cbc060e6a96527eb0ca10aaf01df28fa003f8e418dae9e4092b02109cf51471751a02a1ac93f28160f530e947117f545db6a496ba67376e1580459361e29762f778b4479f3c6cfd14ecaee37ab4a60248a3af2a10856c08233c23abee437a36c3348b73d1531614a6919cf80c1e3fc15e6c5703316adac412794a81df4f6fd521d1186a054fd9884abd8f7855d3d40c9f44c1cf752a936c1c983ad08545e4e99ba54ae8a7278afd9750107dd4c08a5ce55074fce992a24a4b714778c528ad9533d92251dee1786c1632c6c7606d49c1f3b602ca9358bcfd73de357177958a108d8b430cd16208e3dbddffb4c8148c325721efd83dbf55fc989b61ff5651f705ec2ce56bf222388ee7437d2de9e5905912b88a5256985fe9797f27e4715b2d89e49fe41c24d38a9f646c59dc9a1c825e2c6e9071e976b67b41f7a3bfc34784db0178958c18c5e5d3742299d45a7144f9a8bc71ba18e65f8f69af2a8bc86a82c920ec219176659d81ba4eae506dee71b7d01899048370d9c908bc20727eb987fe287208798438d4458fab24e958fdc73fb45382f755816d01d338e9643d15df2eb066a2a566e2120841b156aa14ff3518d29a79a957f3de96037d2cd2be259cfd2634091ab083b58bf0563c5da00ad97cab041eef6fb067936a771976e889d8a820af85fd8c586db65b8e192c1d5bde7d452d34d6ced30b796de54cb2a851058e0e4b82e7518824d86a5837a4c229c57f736fa8510e31a5bee2521a69483f74118659f99a7e7dc324f9da2ac8eec4357d5a4a91efd7a2a8082e0825b731bc2f12cf02f942234ac6c7135c685221f36e2845e02b02d29daf2b0fd2e968b92f7c1653331fe174f9a3bae4d2c2e132379dbb7275b938b94add8da6fb95903cd5fe4fd96c2867d2b185103893f67409e315f1a17382ff774436d6e971f01c7dcfc4f39589b902c1d53c2df21f19ff86e29fee52dc86d14fbfbb8916ba60a84d7a3aeeb1c4724216d68119538ef4e994b3e3b64ac966fb8cf8bdc639fcec209523dc3299d41f336e6a1f3a9a7bfc973b39ddea3bfebf3a894d4e2a2a401ed9bd6028e0d5859ce22d71e179e561672c59420c1634b1bed865425945f80582a379e397ced708354ca1575a133b89146cbacc477ffb90e5cad235226a0928f06ced33b925f5b676b6d2c7bdf6668a126b7930cc6e6d2efc67d37205f1bec6619a95ed0970bb25408f5c88487dbe52cfa57ab62a6f3680b858c24a38d1368a6ba4c7649f4f5933be0f8e244af9165b0411778d8feca7ba0b1d553f7c3625c71ce0d345ef400cb68d77ecdd30fede8ba70a0f648d08c022aa4bc6ff7c4408c831c9faf4ffd54b7d9bf522df85cd6080fc98b0ea156d660d4b768299f5cc04c6a2fc0801f8d013d80e68841b415e31d9a9746c243f36b5435fe8fb57054f52181335ea1642013e7e11f0189808a0aa65a48a0d086d682b9c38b185c493c62f578cbc1b52d35939b8cc70dfc35dc900831c17ec2a274b077fe6d4f68983cf8dc5a87a05909a9cea14c4ae5f783cb162789be611ec3c7d8d83606abf2895b94b82628b8f9c1e3ccbea96ce50594deabc67846cb1c2372465c9a43ee19b194b6c7547e6eb3a8c9de271014aa004f772c6f987a59010fb250ffd2e3b5f90f071fe7c963b86ca6412c110af3f7d305556e70223749bb33746d4e0869d85a561e44e58238607554ec3f6ec8b1354e3f0910b2aad1ae849880b244130b3b33879dd810de6d7209e74fb3f4a5d932d6a3a1c2b21eb6dd3115f3fdcb38440c63898e51db3cbb53e9400b0009c3cf95ef663808b018a95947d8b767c4393b4f011e252e6680ac88e42f79cee52f379b86aa20c7c0f8b656a7628c5979ee236364f7a33287df0f547a46f20576beb4407ca58fc50cee1de32d27784eab59f4e4c8e9a484d3a0c7e98def58cf88cb421a21b682732733ed4bc113796d14e2fc6d36caef288fd574e1d48f40932c1d8ab495f0cf8f2904b994edf35f5b897e9f1bbc146cd576c3774d5ad5af09cac1fd7c0ffc6b4fa2aba46594399905424e935294705207f4d18fd395629e3ad96323938a6100f4eda286874ae98a5c3fed6bcd42a3fe89e02e57ee778df46359f5d2433a0f540772720534ec2315d82b6326578603b198c4d1d784e3c8e13d84b8ba3844b0f26d0ebbdc06d7827efaeab8dcd622c0b0196bff16cb14a865fc876ef7d3b112a4c7ee308806cad45da03d0904666175610d2db35fab4f68712f935942e7ab15914962e40cf8c4c7fdfe01f5015a274f60ab80e21ce30bb70df8acda9f6caea0876173f21d9d92b8dada4dd9399c73de0a81531bdd691fbd8c1df3f9025eecdcd0cdf7d4ce5ac50b9be1586210adeb21dfcc406872fec0397bd2de38f3e889c73cf0295144cbfad0eac475db8129fc4ecafe39c5c04b5dc761438132e016f52343a9a215f4a61c5e00fbd48d87adb035cf75dba0dbd36bf987c0c93b824cfcb0bfdb9ef94d2edced550629552419654a76fd3ddf3a71949f887d8dda6d0cf17cdc9882ecace04b806ee8612a15f5b8ff05a8ad51cc53db17942f7caf3881c8321ca8973a92f2e578c7e7db5f2c60e48a9400f44fb7f2cbadb018db17057a63c26dbcbd8568255d191d64240775196d1c9a4d44d4e490e676b33ff384382bf172405466214dbf79c3f18daaff480885068632558b71c5518e3390d8fbd7e019824df0dbbde78c64d90c1c16c9898f9a8f831cddb4bb4ad4e4c56dde01f194aabf194559527270261619ba3d17cfe53c2d03eb483ed3448860947bac18c08ed6922f186947dc01f47d2e366a8fd014f89b6e700bc0430266f7922b388c22e2bb9480289faddee6641bb64e05f2d92fe12f78c966da210a6771daa39384c32209bd1046a78a30816164374347bec0e7a831b1d1fa040ba3eca57865200c6920b923562bebc7bdcded9989bee48d46d9df23b92bef6c60bc43b810d57c81c4aa69d8115ed77c9d5d488dcd567698a0c55caed936f3db3e27796ad9cd2f3ece18b604bbb5e9377487d0d8c55691633e209f9da5730638c5b17753d15036bafa7b0fe8206360e0a43dcd3bebe137017d5be5c13b995f73f4c598191146a5d1a98464fe908d7b549de67f0ac7dfe624451da2f7e6419d14cf5738676ff3a6e21a0b363f42621274bb75761f6ddc313d35c377c586f89e55c8554f961ec6275fb954705951fa863ce69e62ea90c863c36a9ae9e19bda7310964537d05ae67470adaa9ba1adc32c54e9b3648136eb3061dd547c3c69a6ca2187a233426b05ede2be9527cea289b683ed800185882c04551471be75f7533165070c45936adf2c50524982f67ac03ad3fa2fe1b18f5c6f7d26e3521026ad94b322261897ed6eb42f2c06421d7d1c882446beda27bb7b9e4cb49b48d06eb3e127b10188505b43735975320b79ef24123039ffc3dd3c12b4f7d79dc589500ce12a535e43ca7e73d80b73aceec52c2f8fd5737823df99e08743040c5bed512f920acbc5d851f8542d602c05f8902c1cd2bba12d78f98e0aaa4747cc53ce1ee04086c485c9d231144bdbb6b2f4315cf967275fdd5db8ad4713e3a72c08082369c27202d60193960ec113d8e204443415ca008ac8c90e7a0348a45fe9cbf39198c495f4f8b92fe8e3da4d523b2c875fbecb5dabe5dd393482430d88510e99f0f21414d84104704a31f15b1344910dfd92493658050cbba24fa4f6187e52c1d912e13c16d53feef80dc8fb9bcbbf0af5ef79ba88545159c42141c1a1ec82200563695e3c346a95fd7dc3bce97860e559c121414ab6ce59ad2994d8ef4872a9d2de69ddd0e75f31b93e79a035a50f128a822bc9b7ad42b3d445cd0f58cdfcd59f0c3771f43cb07cc3604a760052686c51aee4bdb258342cbcccec6af8a1456a026c209310d2f3e545762d797a2147bedf1b1d750f3454e9be6f3ac833d47848612f88f9cf5cb48d1190171075a614e9501cc39b3c10b56b76e85a6d9b2b14e2436eee2443e1bc919ed7482f0518ec41cedccefd72747c2d2889d7b288f2c85bcd23db30eddd3c7c282476e2570d2197d714de7f4fa61e86968159c9983abadebacecd0ddbb89c96e71d566d5f024c319566c2a6a744cbac97ee5820ab4552dc5da6cef2f0edb62e98ce3a96f157612cb057fbb36f53bfae3cfb6bb08f3ab13bb0b3e8e13774d750e8bbcc7e9a0f5f062a9656b3046aed0adaac80bc46fd276773e5b68fa8aff12dfff544c7f52457a17af6424aadfc088db0418f1407c9d8d0b1c67d098150ae46e52a0cfb77d849c17d23baf91d1c1210db7c233a299f3fb6786a997c197b1f4981771ea370127f251f7ee05841a731714c943189ab50fac8d2c92b3fe6e9769c938d8a73b1941c3a4c99d9f3b509eb1c54b5e437a506098d0af7fbbfd344638695ac11af640f3b982c5fabc9a3e5406acb85b9eb8c97d15528d6053b071ebf2f8478f96427c20ce0e86e9e68b8a763dc4ccb34337f9e7da6d044649f539f724f6de70b098145d825f6f827b8e81431970520177e43d40190f3d6bd10f50f8d34ce36f9b4ad98e9c5551c8f24ece8c3661e6ae7775b1f11eaa09d3d8259cd0e28d87f59b02af80a13a2266b522aeec25c0a7ac0cab3be5e0c5f0c40051ee4bba24e8fb29bd9a4e8377ddfce7d040deb35d0788bd1f88ae33a033ff251fbcab383d3f81a1968acf0c38fd9c348404292f1962738083730ae0b213d99c2d497ef8aa4234b32b3d09ba4e5a14ee47ac8f273cb89bd3b08951234ff302bc3310a58d38277f59a28a41266bcfdbca5939e0af14737688e9b22294b483f3645278d4e0dace035503aed862bcb80abe97dc286ccd30df9fe5d9d4ade679d8e0a17d125e198bc9ccc58dee44cfadbc142fa93fdd6fd48af22705d77b64ed77242658643e321ac471478e31a9653a5ac66cf2b3ec12cd9355fd03bc0441b5ccdfe20a767112f295619faeb540f6f94fc4301074700691d2e8379abf0d0d0068fd1ced5a43d564f2c779f6c314e992bd5c3bbde290e8eb414a9659581037ba949c591e733347ed97ba99520462aca6c4002e36b43110c6aebb271f2c26a84aedb56c0950b8e7b8452218f3fcda95b10f573355da44cadc3bf1480f55ad66bd8ad91dc4aca788c8904eec32447e690ae5fdf6bd9d634316f8d883ba225314253daaedeab9a4649d39f481a4b9517ab84fce37e770b89ddc6a4f59bd018cdd24eaf6de00dbf6d8258dd3da956943821c89aa29da52db294448a964793a902b19a0f127e84fadf6d4f52bdc650bd551cb07813be9e1e72c808701809065c440387a99c267a4583fdd21dface4548e455a112a09501455874827109b54fe1b3a3881ba954130b66f4781c8237833bc5f271076314367b21b048cb7263b30d0d08da2088bef6981b86629baaaa4841383d1c7d971461424810a347b94f6a7cee45bda322dfd86d9197077ad5bc01526d7b93475f14a1e2fa4f2a770d685037a0e824d10f67c8ff7147efc24c5675ed8924df35bc765033fe35469fb546e4f54488244f928bddccae4bcd23be40a294119ec2a99228858ddb4a2589a680b2e6bfac1403b96685f059e6654f97ec38dfaa3494bd24d3e7ef5eb52a06097aeb4330667e825c83de880aea0d538304fc0a2cf9f6ff7e6eaa13ae7d834b58fa40bd45632df72e336394976b5a34d6f52af67530b64417775f7c3a5b9e7395dfdbc955baa99b7b1500ad7f0e4cc1fc78e89b89cf0d33de0c602d52e70cc62d62dff7c1c68cd973c8fca0c7b5c5bf5c40862db80fbf218859d64598b3b728e04aedd0f07fa9efae5acc54ffdfbb089bd1f7e28c14730ff98db29207a52fabdd9d62e6e550160c4123ffde5ce073eeade66325d0d82720b8e8d984d1ccae485c82a48909a7f47a9422267c8f950710c87b9ac0c5f931c17798c5b8b33129719ea8f9f65356dd75f4232247956a039fad2b5343627f3c013effe9a7c716deebea1ed47da3bd81d6393d1352a88a30f76d536efa9c1348288b0fdc6529ca0fc6d7ba86ad8007fe3b1340dc37b98dbc4132e7d4fdb55c5294494ede7d14eb9db3b2c9ad81d06e559c0151508f97c9d98630e25d28ba8136edc126bfd8bc5dc1512f6632c00ad466ecd83ef275b546fa35029460b94bce9cb4c19110082300710c47491a78405ab3660d4b677b44c52d0bd9c4664d86c25be37ca4c774af344dd94a1c74fc1f6e82a6e66c7414ce72a8ddb7690cc17bdf197f35b12e1aa446e3981222a7c8bdc032287c27be0d444e88c1613a74af8458a80a8744ce2578c10c91ad082bde8e0099236b03395760500c82f6ac17df667aab89af9ad2561ef0aafd82351cfaefd7fdf83eb6a59e85ae412c3e1b5fd7756ca4f11bd858e997540932591822601b2836a9f3c3bfd44e51e1a28dc91bfc51bcd6d2a5a3c2b172f361f54af25c2a46ebe68e0435cecff4a18a6e61245fd75a546d4fa60fab6bc956b33679657d596d0fdf591b668b00d7a228f58e4596bdb1c562ed880facb1c55dfc76c5c839ec9d1ba95259eef62a3cc0d0910e84587393ef958f6841c044d555d85db78b31ece2b14094cf42508759f751dfa99c794a706fdf5584bad81057067219525fbc17f58c2ffe9745babdb557d4138342cd9856ee31f48cbd922ca1ba2a6b01fb9cda01faa21e44dd0e40046212cab2be6b35389990d6bc253eb2ce6cd57e7f6d15fb756da3f0c4e14699c01765f68d9516d900b8db7490f9aa610d864580ff2c9b76707b283d21e1310ead745cdda1cad936cf688254e573d3ab489e458a0b2fdec28710ac6752d320f5b686f6622cb26300b7e603e8e70af56b5809285b6a8a62f5b31fec59fc45090334b9a2617fc5e02aa192032cb009f60b70985d4053a2e99a79327529f5e2a39d1466b99702921afb89bf09a6ae8a7bc1d1c386fd5c34be43723855f84bfb5b113ccd14b73b05fa15f4f1f11051c8669f5cb8c0210a6fc48e3edcee059e151dcb0f202b07cc73311a47f801282e9a03c1cc1d29796714347250f5073fa75d1c2e0ba8b9d75d06812d35480cd2b4328a5f354583b2c7eb927140dbe88323cd99c5796b5b0c8668ceeaa123745474e3dd353f93fc2d35c97110620a1a0259a6da8e6e0136f00648d365237c80cb70944aae862884cb172ea971030b6f7a7bba7db67be66af7d540ee40ea24535b238aa312157a5a673b58caef54901e07795ac9f2d87bb0e974d8315682d30cce4df62c5d804a453e1506c0cd236ed183fc63baccd09b6aba73437500cccc1d01352048c78fefbf366322e4e44e40c6bae7f95576c28c8ca3d37e9a8f3c9bfe2937c206125cd8062f27febef26278f2b6872014e3f54c5e73e786ae897644ad356e8120a301b0ed04051e6e979c243a3488055c5a5ee810ecd348b5af31896dcefaaa227cc85c4198f251b7707df0370f5d92a77ea1e24337edf331340cff5ee318474a5ae35a66f2ed42e4341a7651779e282831a4e60c0f9ab4bf6a85e3aa17ba554c7ca84746f8bb04000b93fe06689d160dc511ed79db498460f458972b57cd16ff55396b5201ce50b2d2f9b4f72b8360c5326b6f0b6f48cfb19e1d66a1c16d2486c01e962b66c4b0f5f45692b8902b2d628788612a9874ffa1570dec496172724faa135ed6dead190b5c0dae76c6ac98539651f6dbdd111d5a5578c51b313b1545038acfb5324b3e8cc68b483b15188a0e4d63bf3eaa61fa1ebf7d349eaa9365de525384ac8baa3498eb5ed8ea3b991ec8d3170ff29d078ce72fa86bce5c3f95fcb4b517e82368a336fc86c89ce4b23f0cbf75491eb6ed53d17d6d2144d41b8cd0f28a1c4e4dcd3223f41aee54a45a89fb27012be6a38390ab34482474d2d0b0c5eb1e05eef8715067790d3629093b6191000fef89ef7017e1e6d78d67b1a0a53a325318033a9288ca16615cf72631b2288b7136848c61c39b121774841208f59720285bff423c96a1a8409f4e81d09f2a6e6e5a51e3126a6a8a7c90dbb9736d0b4104c9aeb987642cc74da52f6facffe55f195ada981a08da482c2654dc2975c58a68cb0f2ee76cba30c8437df81bad2feeeb798ea10716ed1db67c295c81044210c8e1ea6251e71ad08f30654fd48c86fcf75c55be2fa3e181d7ceb9d5dcebf05d4040ceab887ce894e592a92d038d803ddbc06350cb1ad88e148d2e47800fdc6fe0bfdb2fc1d1f2e813e3a4736c2bb259f3105aa93458d68ffd194b6e187fdd32514e209f1754caf3322cd55abd0ab8557d30cd03d29fdc457c9ddadfa2d6900bc96ec8772c0a8fecf5be4bf2b646ace5af8d74a88090e087c6a9f6ba00f804db01653fbdafa246d46cd7e064283bb5d12935bdffe5d9a743f8a3116e7019aab87bfb968a55f6a064a29e990b2354106348f9e858104809e23bec903a2c5e2c9a1026c29dd432c5838fbfa0f9516453c2d62ca9e5b7fe2f94d9910fed7c0eb436b22417c83de6b2ecc4eabff2b6f4d8c6cc38d33d09ab9b9483d5efe6bc7828445185b0b062544aa76c14b7a8ca073ae67ba7621a2bfae4b1a30f0fb7ed9221542cd6dc50a6c55d419dcf7f51127b189d6ed7fbaa5f8e7f58a16c1272154e14649dde6d680bda1c229f766336b324516bc293735e167ae0567478c99c6d978fb21b8e0c3d0ab652e5008910281dd5937fcc824acd2910585443b404abc69377c8a35b2c3816cf8bab207aa7f4e3321be5f0ac4df15af221977457a138ddbdd27b6254ce6f07c68137da8f756a613c6969fb712bccc58b571ab29bf8bab5994554b80d65c4e2fdee32bece55331781d052e3254349d5c691a28fdad6840afc8a1144ec5200e3f386a0b7885ce0530afbb40214ae4e2e5626b25326c39be06e9abb3ca4889c93bf24aa046a39988d3c292d44bb5d6833797749b1e57d8e1c180671e4079c12e2cd724cd34d8616b23049943f0615c88881da544776c2cb6d3a58764a6aab5c1bbffbd49ee45e3450572068bca1408b05f9f8a7cace2844da1f8d051ed0a236cf4e674ed11c5ed91beeea55954daafd6f5e7845913036482fda18047f970063d8a76cb09b754226f96c26f37c8354abcb48442d393aeaec1bf96c4f51c0e763e32245531c1005b7f452173aacb5a4afc47c74677b25f7cdcf042bb0181e746466deabe3d07ba06b349a22d3a8c8edb360fec88469c3d4260a87ace6c34027f87bde51b9bd422b9687f9cff0571a4d1bb83f515e93502293e08f25e723d2cac4c276945cceea471072c86fb4440a9be91ef0d768cb619574d33076e592cd36d23dc343ec740aad88e00a4b1477f8259ff2f1bd263e7fc809abd59014a52da90d4b0daf1e3ace041b7577649d759b97abe855e72a71d6ba0d198096edc02391bc1cda6caf3f9189c29a082b06b170de29d1b3dc4e2017a16b71f0987359c4720592244d6f2e2c6fd5539365542ad0d04bebc34a931b91a1dd328482bb954d376db71aa0766b6a544155f7a36701b5f7cb579ea32b55d545fb92d4ef12163950bd251a909f995ec618c2d9e22fe153738b9a8c5b73a25f03a9c6661d4801b0f4aa3ef4551986f0c06b853ffb5a8858c45d935bcd6a4bd19f183f1118fbf4bed7d7b4194b2c896ca00d0f0b28dff0edce9cd7f44170a9507c36422839c4c613a5d6a4901be21dace4c3b10a70d2baf740e4d0cfc638e216d666878299f05b12d429640b1dbfcfabd056eead0e70e0dc68616ec28664ab1326ef6b4536135914b3c7957461363dfd3ce94232be8cf5d8d04cdf3c19e0dd1151f5f96f6fb4edf98b2e1a9b668fdb5135dd8bce955a2dc60db8a46e9f017079f9bbe87a1bbb8cf7153cd9eaa61e54bb9bf0f4a2b958051e38844404ea00b80abaa38db28e7b683b403cb351cc0fe44cc011caab90fd96681a84e805a39e33522227ec8c29c8ba1b822bfdf9c20fc08f7437a552527a78a7bf1e62b16d88d34d87253d9301a16cb7d3296db035f74cd6d9c9231e411b06ae069beaac76228f3a6207db99ba854c3880d3a673e3044578a65a04ddb4ca3736c5de8035e98d2d85d390749c00350936927705d79b0d627e670e323fe7418dcaf65216df958afa85a9e64532dbebf177fe88d29ee434c50b95c0dc13e577f3d25e26dea7271e0b3a7faa8450d6c0df7cbf9b598c944362e84fe5b80f39c6bceb568093c91726a5e4be0b5eeb1786ccd6d606aac09dc446820a08fec05f4178055007b4142b10a60c82d1e64b86ce1abd49679908bed2741f4ca77de417ba75d47e7b75fbfcc19cfe5706ae09ffea471605b588c8e58eafa8eac3dc59c890236f0712a771075bb4b22a5dcc5d9927bca64e682ab18d78239976355747bfa9ca15a93d37e89933c938ce4be524c5e5019d01bc3003218eec68035a67dc3a0a6904e92220f141d3116a9cd064bb6bdb09c560a2c866c895e6955a7ee6332b89f7290a9b10a690cfddd1d4e35543e207808198388945310d6afbc0c6a64e2f7a7289f03a703b827e2e365adcf69ea0b91bacc34d527632940080401a5fbed647be5dfa98cc0508c502d3a4ac27c8940cdc55e289f4d782f0486d496dd9521c053ec2c67e776b7ca2508ce7fc3adf46412a1868fc75f561aaff5494ec257e7d8a95a18db66c7004a6d33a86ce477d35a8bcf9fcb50e902e11a01ee02b0eb575ad3aa3b91deca95e634acc257bbf869078c82a7eaa5c9fbd1cbb5ca1aae290e5eab53366ef0044057cbf342baa670b928860c86749e968a756ef02091df5a9d74b0ce17a4b26baa73d459c958fb0d7b57bceae6d24949db23d4db049547a52d5a6218e47eb80573cc18bccc51e392a1269e5b5163f07dc6060f4c6ae9878c4025180a6ec9f436ec4a85d13452b9deb3479a332e825157124bbcd5834e891d51c9eae8144fe44ccdd4a42863158f225d117eb6230be86235780a6186101430db8c268b37b54fd2d2046dc902cd667a4452f8babee66e1343d7b08256313d911ad92688d1cbdc98745033bdc7ffa7dce624550baa4f787a39819fc4eef3006eea5993cd4926db9f67cf27d42f806d1aa4571d5b9fff47eac747a031a41d7355e82a6f21fc8b10ea4e5459d62a178fdafc7c9ea427617f5c0780d8940fe8ab71c72e2f979ecb53d236116ab385d620cc3ed9e7fb7409a96213bda5104f17925d934172b5f30c4c71d4384b82111d0af5d5dc83087b51274eac259d9047ec6667f92dac822d343a3f1771eedc4a2a4b41bb75f5a1b074b67d6cc744a90124ff83f8f3429636b4f01a9b4627c296eec0cd6c74d27bd59f476bfbc5ea80c3a92d9ce4ea3610526856c433f5f60ff38d89fcf90c849664aa55d25bec3e0958211e20f082b2c680bd82a19bd38783f644d542dd61f421bec64eb0018c3dd9f49171bdf4dcb741c573a7ad8f637b3c33e5bb63cfe7888408d77814747374c4fc7ac2086715fe181b9d9d47e37183b45800de711c277e023937d8752d7e3ea6bf1a7d8192862a157d281cb468d443f16ad87183ef02268e624ebd24f0cd569c0fa5f72b00e2aa4071886029f24e52954eb6266d843a178d92ff197fa2880f479626654043a423b84adaa72e3442beb6363a05254a0a2675081fca96f5e2bb965586cd979f3070f9a6a7bece97876d3f1d254e7e485c3874401d32f522585a2e5b7319f2481428f18c04f997781e876937719cb26770a7855c2d28a66f341113c67d88f9927c03b7c08c0eb23c38aa38329c1d1ca5515760e6bb6190c90341d2a3537d3f9e8cf4f078bdf9ea62e09bc2a0fcf6dd96c888b7dd9d9a8874cbca3f0b6ea6fa869ffc2e7a00ac3402238ae6d5d0f430986f8626025843973df69e17593e108825ceaf422c1587fc923989a9ecd2645740f7a69e4bf99e504e82acac611fb8fa26ba332b2254ff5cbf601a92da7728c4a31434bc74de158c408d944c49539322efadecd8f8b7d23418b8b53b949f47ac08ab9b52c27575ca14f89bea0c39418cad3efeb60e67d1348216564cf7d2a352259e1e07ba6f7ac7e3bc04cbe359b454d49587c7e790938380e6327e8adae7aa9f5492c86d8865f0231c59edfe17cb7400d9fa0dd34da9df7869f0517a3eb901e7092edd868cffe56b9c043cb3ad4d9adbd3c46261b5a9ef87fcfe59c0711008ba2daa369b6a14eb11ad4f522812b17d35440115a7e3262eef16e169361737e3516ef7624e753682a86f3b3413a8fefe01443aad7523e54fd3c181367b2200e1470633cfee061790012f7c7091b7bb1db72cab491dbce31d55679d467d0a63ecf5befac9b8484951bd8493d1a5e8219a93991ec945785d315e7c53ce8eb19a6eb39ccda1ca5254df4f8533fa62ccc53b23e743ec0c24508a2d02aab35b89aabd26cefd1439955d8a1c133cf7656cccd759849ee339465f2708f5d223531e3299a49efa982c3c6693b4be67fb753fe2315a7c564135bc72a7222329e9f98ac93a0a088e96a5fe059cb6db5a67a57bb01efddb383d66bbaecd8b4152bb6d00feaf38d9bb55664938d6fad3a6aac092cf4bc914f31fbf368cbca9c111253be8440a48ea4895847195de38879090ec8b85392eb0fa0a7f4727c18625d1116593417bde996c577f55c27b52ca14d853ea76292fa4cec70f3506032adc4a271c1255e379c687f561b205eaffe2211320338b425b6661fea408cb11a166dbb4ac89c16c0e635d1be122ff7aa54ab9805b9a0bbc3605767abb224894f9289c97a7e2e526444e22d96a2b93a08f1eb14e740258154dc9e26e6662a883dbbf5f139dfa8c7e101fe91cab2747221b3bdd80adef9e7d70bbb930fe4370513c0b9b4091540afc7ee7359aa660ddce449b490e3acdc8900302eded156c1318158ab68e590a62e1cdc5ba6c35fd12130e381f3b2176ccdacdaef45c24b08b94a8df00434131568c1469b64df49a8fea4cd9ce7ad52cd1c0ead2f0d8f00e94e75db1d1e64eff4f8dc0321aafb7eaca34c77a7a77d836549586f6ec3c0fadd2e0fe9ef14462feee809c66f888afe3a275a3bc2723718b685c4832cd46db081680fe819c71ab386be5fe1b997764f52fb4d3da60d375b20849b81e987fac9e37de3661576e883f46d53743b621d6e66c0aa2feb60e8b62c48e3a293add1afecdf78b9729536ae48de409ca1cc1da2a49913acb0e18ada75def2a9e14ea630817e99d3cde9edf839fddb3bc3100f88668dfcd56943b19c9f0b7ced92e05333542fecb0bcfdf1d69b2af1eb2c43d43e3fe8caf99568fe3c91aa0be5e06a38616b5173cf70b4ace45883ceb09664d6475b3c98b921c7089788a57de0cdedb22107649d8d00fd8d13732d848a109ce61df4b935856d587b71b4b89ec1f83cdef618e52a9d8daab176cf1b811e094d57a7bcd35891cb960d8cbfbbf2937a292e27c6e84b115e11d341b7de5342e6b03bb6f94822cbd10dccb272e8b3ce73724bfd21be0ec8ef53df54a9d7fa0320c02ccdfe5f5bdba6e99115714210be888db1b6310a0d71cb4ba1f28d78b9aaec09861a0e3617bd70ba97582ed519800b88269ceb922d87d6cdea507e4062782e0e5abe909c63895a4425f2383ffd4c79db9c90ad218f6f6c1ba256219a26a6a7b4e9910110cae9ae6fefca631008d7e4feb988d0471fceb09d1c3c06f7566b585d49819d95f7771dca4126d8f46ffe8caff7721afa528353cd69f904a4468f8d5872d43c88d563b1c97d554d26b61e5d545809b953ff07f0ab60a40de17478d02e0f3cdf56170a1f879cf2975da2abc0fec1f6c1012a52ad380b4685e6ffb73267fb522d3ef352cb46531cb3073a3dd52b7ad64fb253a0821983c58ed3deb4ece731929d37f08b843b98a0b2f69f3e27ef116d7e1969f2810fd51f337fd6b0c1a6c321b757c85fe6da6dcd34805a504f1df75afd82e3ca3736e5b62081fe2041ae5664654e2be5a5d464b2fc79948a73b482ad52fdd8328a619b98658023d39e752382fd7df3b97038bf4e57aff1c836f6892755cab5b40223b432ed9c85d1aebb801e9cd90f8bb94fdff7a82bd0e229d728f1c7bc877cd377bdaf7e45b35f78cf869be53bf5c077d1e1762cb0020e7250696252a2a3c212cd10536c27a6876afba57d3f7cbacb1b49ffacb914fb3b4fd5345661f75384fd7664daf59a39b277cbcb9afc75da8f1641bf2867fd0349dc495570c6a427df59392ff6e88ce8b77ca72e313d33690f2e54fd14eefd81b283e0df799feb12484f9eee411f25f38d23710152e3dded393a962f11f59b04327bdf45b9a907df9327688273337d89308c6dc2152bfcf1457a1413420835ed727c6b72bf6313405dff917ecdf6710e46899c9ac9679f2b0d9f664f3ae010824d804853552e472c46875b04e870b43f5c0e24ba90049dade02a2010b3895ca895148b82de193c0a854d89322786d708909c2e51b00a864c84932855f6ba200f6bd2e6c087a15ce469e58247b7ccd1a577f2084c503122f0bd6bddf1ea678795ceeb53793f9fec7164cfd573e6be6bb856737ce3f6f272d4ae2e72bcca3265e9831b25bc62c55c8e67fb239f75197c42f67527408a41486ba37b60339702fe9e6a8552d4466d053c9af7eb0db2cf83a0a0b4abe4e69606a35d33f718aaa81ee0e2373d45db00613bd699f30766f007564c4388b4eb85b7ce4c6232fd431282e777e0e19346d216f872c98c0477f7413cce39446c4f4ce2ab7c3ee6ca1b7abcefd97468878131770cff97e1d1fc962daaa0fbbe033f297958893ff7f4b78fbc390539c880045c9a7d2d09fb9f0cad0cfeabb223b786405a1fed686a4a47a028a7ec384e1c14dd0cf408872f8bafddbaac80c2613fb0b25068b0422db972b1ff37c8e3b4a43b229ab5f546690d6257ff7c8d3ef0c0f12f706e27ed745dceca0c69034ef5797b932ed42aff01705d3ee2970acd8804ab701a7bd5dc673f6eee648dc8769a589ae92b1b61151844dd2a41b7e55db2e6c9da92a6a46e27da8d1e6a5ca260c6f5f9497c2448464ffa0a75da3851bb62e4bc80cd4217bcbd0effa87d57bc258d1496b29249edf8f1d424ff258a83c3e24137b795b38fa87a60ae5178c4a2edb3aedcc76b4b4dcac355e38cd842eaec6934296f525f5814b2e7160fce655ed24f60a6c28b60dc1c484af9f57fe5766962d3c5f143f9679d3853be77bd25df5cd8ac539fc3ac9c405ff8d1516501376ad90d5d42f44eaddb1d63f9b2a5413cc07bf7816a4bd43d74d78545bde32409ac658cdcc131cd8605bfb9447945db7d9fdcd3ce64cae12d1ab94a12685d524ca8016a8a142d8f07996b41f2009bcc328dad23a0b9aff2808118c7483e20713abfe18b0cf38aa735d640ef35fd4843b37773a939bc019315380d6d933287aff1237d8940b5237e6f27820fa02141bb89ea0ff88c3a4a5d71024e3309059912152f693f2fb247d4c1fe9ca2e10109a9b4856dce3d561c704b82cd8bab9c3fe7d791b1606253c0e3cb8257105ac0ddc7a197ee3ddaa946f580282ef20d175fd04cb739e83fa7e618050eeabe6411b7322bfd7628f2eb45779826747a917e580da35079b83689e78542e6d6a47d13507d52ca825f7395605fc1b9eb1d3e1c49e3df083e4bbeec69bf3dcf282934c6acb7bd5c7576c571389a3d1cc95a45d8bab0f657a32607883afcdb18c89fb3ae49ab365e12ba90e420443908c091b6ed21cd7ae81a7e08e777622f35b4b58ecd62cc029e54484846510bbb59fc2719e09a2ab80ec91ca816f55bfc9b586cf2c5c4577df45bda0ae2cdd631a208677fdf695bd67083258f2213b673fd036d92b54c7bd117a557779237f59ea8e861b8a0e0edca12cb9de6920d50d8bcc60d6a78e57e10787d68b03e8121842753b928500373be02900d87f35448506e644f680ddc9de6362d28bec9230e6693eaf3b43edc286950c4199750960b1cda11ae67eb71c7037e6104d4c91842baace240636b22b7a948498bb246e8cf509b7dfc8e13d394db32e3b8bf38749e8fe536e8949ba27c4d9f9024e47c6467ca07da926179d3d00fefe40854d62eabe082e655c4c7a33cea631fef2846b689919fb2b3c30f80d2da2e5572f32b3b7ed63fe27fb033a6639cff2b10509db4b251c2e8e656171647b9421e59041a654a2d3c5cbd0c0dada1ab05dae1dbf8ce68abded43d4c9aa8ad55097055e5538034d9ef12ed5148f44f3409cb6f6986ac0415103fd7783e283ca57720d0d96d4dffe431970504f6a74c98f137d2b0be38fdc4ba0b45110e4fc559766ac20c56188b4bce34617ffe2de249153c6ff7e0abff87bb42bde3e7574a6097776d75f864c81e942ecaadb0b83ba675e9850052de4f953418ef890c2c7f8f89d7ce8503135d30e473f958104033caaf2541fc78dfed2dbdcdd43dabf7348a9a247908fefd8e0029e662f0ee8b2a81e568e331d86b1de67e32f0ff6b410deb774ae4e17fab30f6fa9a58d01a6701d622f6d150aaa1b194ee61b7050d86bb774701887776ec2f1a09c32e8c71bbf60f5816595e4bc7917cc3b19aef0b48e2cfb2bb0f7fe383c3201609b62c185ff64d66385b20e68b7ae4540995b47e0a56ab8329708ec8e7fa156c4fc7ad8fc1d55e22c7f0993999b201c6753cb834992c01fbe6258c58ff60534d98fa5bfd97babd4bd4b91bc0e41de68e5b5c7673486107804d00add9aa1f282e250d59e6032b3cdf03bd28432f35faf03b3200d8319c8ae93a4675f08c732a88f0e5c4234d7866a42e1759ec08cd4db9e1c111c7d02e34d5e892361ea68f16912c7f18194615a6a33f0da9d834e18586da62fab75d9374a0d8434027b114bac3cd565f54d18b0150946dae6bba6c3e47c3e7772649c6f7503b19560dc332a902983e8a46a25351fb3eb931c72a824e3fb33248a426fa464aefc247c3d2243c07f8c02e74fb944b83a59972c7c783f58ab4aaa578c41674ac366fcacec83187fcb0c41763aae8ac3d9dbfe1de68b2bc94ee5119e38222a00c2eaaea9cf2b04f4b1b82a5905ab58439a0a9dfc67a51d24afef09da903a8e4cff5deed562e72cefdf452dac4f7b5692e977d89b2d6f803e0d9401a2b5a659054fd9f03cd055b8bbd3cb58264ec50ba13d7d78f49c2d752320d30c111f663b84741e9fff0a3dbdd26ea711de73db2e2888a8e5cdd82107aeb4d05d3ffcb8dbeb2e953c9299d6a45e1a3254f5ab6fd24b77834a2431dd266be519617fc70ba0c7e630ee20e9d1e48a5a2e084d5fd3d80a86a8fcf10092ad7028386f97d926b19ef3b7594a433154833fcda46a96ea0770c98bcddde251a21be0df45eccf0ef43d4962f201d936465f360c2277c341c2c63877a8d56d5f098cf8cd68e5e2c4ebd13bee548f2e4467f1281d342bd251609621a08f147f187f1d223886450785baa0c2a70943a1262fc893429b6bc658a5db782d6a949c91b6a01bf255790524948919bd152d03bbe58fc4a87cf3e4be58ffe4a646dbe8a6609427625889e9045f0e62d7c98b2e55cb25b66d160eb621393edb79e46618b8d399ac731ae833492f43d00070fd0f8b2b00a4c8191652c9bae62afc24bdf056f188ba609dd88bc81ac4a26103eaac1369a9de2607ffc41691bb3f5e4a6a1e319e96688d0bb649c76e473f9bf58b80a87f9a5cbe65a85e6cbed411a88ac657a8c2fead2b10a61c4fd12bf08645400c3b25000a4cd241d0b704dd98bb1534c92e150a3b8c0b2f664b6922557736c6e531a654015dd3e6d3046c5f387b1f81e0da7ad97f595fb7d93e90fad31c24f28396b5e0a2bb4ee0169682cb8d4969bc22c30b4d948c5d248e5fe07ae89d56f8d836342b7c832693a98180a72fdaa08d058487b82af2979f3cda7b7228d266f37c1d3405e8259b4f3e67daf27a943ed7b962363964d6d879e39055f2793a993df0db385e4b1e50805b0e54b485cf30bd9ee97eed7cdd288fac9195b8872f4dd646654394532b3b725e85d658ea68b15e243a1c46b26a2ed415d7c744aea8b039850155faa6bf785cb085a72c49c4c9c7d06e84b977a36e00cd429323aa02b9042a0569ccc1614f9a17bde64e500b9c8c227385a1c6b8225f840bd7e36e44b6eaf16c665964518d1dffa6ddf03c1c49e6da673e858ed9d1182eb05feb6ca2132ebf818ce3a86d92b4ad05bcf6400e55396863b1f7b4a488604b57e901d833d964b59786a609c331eb43ed9e986ca6486ae7323127a56eeeb585926739e998b42216607a454f9a9636eda813e07b4ca7a630b952aece0a5db908da649b1530b42d1e2fdcb569ad364e5fc4b5de04c0537292b9110bbbab21542fd95309870639d01c378a7215a157b16d8f3719f8258d38a6004c65e4589e63081507cb2978197c51f45bbc1eb84dc0c8bbab6024a422466237a38d61e7b13def6ea6d145504613a1b1fab7c35a99a1da6185814793d6a0750b2c5cd4dffff5c1a71bff625c29a8bae2c7799cd4561c89c482ea6d8ce186746ef6a6960e797209930b0080f1bf02d70b41642cfea28a0fc98fd957c3f84fe03b7065e06084b8c5e311dd9d8be86ba6a1c34157477d1a179349d6fa57a8f52b25e6cbcae4d14633e3c23e2c539137d33a43b6437c3307997ad43c3d192206a847b6260126293998789ded44999533cdd8b88f6745776a9684f6980a142ba753b5f9bbf787cf9e35a3a1e49ad4f3c07d9a5aef92e5d6d911caf0d646756b2762bc6d2b2bb225e3311f92a6dcb44b7b5a696f6c2b354e8fc6e989831993f30006f9a7c2079bf04ad8f06d4bb497ae8d0242d8740648dcb25ead0ba574b922e2088558ff8b6ee72ac34d79c9691097f89d3fce0e9bf4caab693b496f66895126e6f18246638ac3738ddaaf5f8714a356c1244542a018fc4d18be2ad1d4d7316925435fe975b323068c7f28b001a6cb129b24977d302d4e526cbfd7bf4faef0f85ccc897d178eeeff2a8113fb5cae7ae11f5b1a659d657439f537d80f811279ff6d2812b64e9b39a32442ea8471d7e6ecbcc12d60c8265fa3d1d1e834ac02773fe1c9d63a4bdd083b28a529a05c4ae8f7985b7a0b995ecc3c2e50a636dbfd30450c96f3968350e1183f2383658ed0e5592aa46f52815db1fcab59fa69798328771cf4f8e02778fa6651947beda2b972afb6a36ca9ce8609d166c71566338005ad429b0a01cf4e40a15b24df279319a35eb7afce7656d3b919bbf3c43531ddc72b69ca3fdcacd40972ca6b0fcf0c602deb24afcba14fe8575374c69b428303b2eb55df3a7e5cbc7963470a31564b54e0555a137bd17db73d55d6ac593745269bab6ec9cc88559587c1a536ed4e21e29517e6638ca9c71679d708393238129740526ecd0b6109a5d992dbbdca642c3db429547dae61a7329b721b1b25ff1af7e82093b154ac16af5ad2c403f7393d9d383bb850e3f5fb34219d46ce7564dada176ed0f3df5d607a81627125801271a03e706ce23c4b921ed4d20c92633a61081d2f3c9f45b67a2129bfea4c01d2ede0bd828fd7c083dd4c5d688b820e2dd405f27d3f75ddba776a1f9ecc902cd304b56c63dcf03019cefe8f86543e0fa19e8800613d08059954e2b1bc93946e7054faec264e0f4802c3e5da9449afef9a4336f064e46ab6b8d19b358423566cdc76e227ea668311abd723f9de11e709ec3b0a851661c2c957c4c06079a460903dc08860c0e7108b82e16d694be9fe51f335cb00b46b8044942d215bab33b9968d03e26bf03728b7c77781a4da1aa0ee402f0215bb50b95f418ced16d2e5e40dd9106b3ac253da3265d98350330635ac192d8487f5d86c7f4beb5c431d9b2ac45f20e1b3607abd627bc8e108d5465fddbea98b17492598f2a53263546f29403b704f19448bb912e2248a069ebca9ca30a086fd703c63bd7da309e747465d66c56ae146e90c561d7a0af272bbdac8efc9c342947ce090235ddeb1ee8e36bb96d4d8d0d05c544acd7fd93f40359b408a4707ecf7df8e9c7d9e5280c986d49358a88870711bd388d2ab392f240df9dbd4228f967f0272ff4e140c2e4152a26e2e74ae18dedd2f49e21483b0b3fadf8bb1972c49fdd11ab928eb58c9dbb5eb8c1633bd00057445215d6e105ae28fb281de1c4bdf66b4fd7f3b25eac3de1cef87a01ac0859c10789ca4eb4379818132b15282ba5c5a715fbc216f446e81421ca8c80b62f1fcf80f050f415df554f20f5dc76d725300e8ca5c8b3bfae261510a9e732d70266d9acd6759663ef116a2fb362bfd423deee7c82c51860dc883c7e73b681d86ace95a901d7453685f719f1c9e3562c4c81aa3a56463b3fc6b70848238c1f8c1e9a8f3c3020bb3264ead4c0f416b7959e16c594bb776d7be93b59a9d22531cd7623d9c4edb2a2e3b7e0575867f4c1e1ac1a9cfbbd0ef1f06e3c34fd783add4ae89776fa1476db8076cc67f5bda7f5a533a4568ae421bde83da29dc1021f26cead4162737b6073a959d0eed70a4510393c95f6f4e8db36cbff915f28dded18fb59ea311e07af697018e588d41c9a1b416814baac8ffb4df54620a360652aceef20f37e6b18af44c6004e9e29199923b479a4a56f595481d1d2d5b89873a4da5a6ffeb6ed6f27c6448aa604089f57289c80f4dbc7071409bb627b81a1d85dd5b5aeee0aee9c1155ab1c8753311a85ff75b07daca399a22a401b147519924bf7dbc591ff7b0793aa11475d21d6622b7712d79e11c5d1facba5d7a6b1d23399147cb2c46773471ab4d797ef982daba63941c1555176e51edd05b9e5495e423d780476d5adac6c2124d20289787da33210d39b4850234fe755e38794e061cd43089a5fc851d257946d6189cbd078a505a05699f050e4aace2589934f5dc569b650d5068e900669195d7f828a647d642a2898193f519b72f8ab538810c97caa9a41f0326c4c67d2863a90c87cd4090eed79c915eff1522e4411c4967a76ef1f0a89a92c2a566d31471c13a60be822e1fd82f97ea9f9002d71397d9d91bdff0ea3b7fed055d547c1a3185accd8c28cec7e86968f92103b1c4e300db98d5e886c200fec1574b8044ccaff850f9033efb43cb58bb188249f7c6899501ff5608fe3256aa3900317022a9e8bd8169559a6c5cdfaa99ea8bc3afef5eeb9d0c38ee5dc32ece93fdb9a7ce9cfa2bbea8b706c1eef0cd4253751e7205888fb65c92ee86fba2857d1461bc80a27febd2fed2a6a9d3af9b499c6274a7b3a3d6f24556cd7cd75df37a79ef9d6a2cf617ccb02c0d2771c3f0dba3a024abc392d03fbf0942da97b2edee0c12005c0d4b5b7361e0ce677ffae20336b80a404f40fdde60be20a01745a002314c8b3d08bab7ad42b2ecd97a1cd1df0667b7e957bc3493f42fa4542a85ee1ba212dae2bb78668f9eb6b6a05b6cf2a596576a712bb5458b477a10c034b5781203e24a71e1623bda44035626b5a17f50931b67a92c5f1e6873cbd786b0f0021ea64bbe9e7fade40732d7645abc122c2db909d44b72e7254f983a4b885c19f771791638cd950675272164644cb722169738afc034a87e417333189efcfda686168c87f5aa3789bbed194183362012ea1bf1d6cf77f088d6988747ccd9e41972ebb86aa46dad54c08378fe2842f383dd085b0b50c68d69d49e129bd6f558744595e652a237bf684ad247ef7c4a64aa0d786e2cfe99c83e56bfda493fba5da7cdad551e1d5d862d6fa9acda52334603034445fd41cdbc5b622056f0b461ad2b5ad31abb5248711b48deffdfd8fd79b2d603c5a5ac41f60270db8f78eac007351fae4f4ac20780b1fb2b77633872f6bd3f4b7e0bf10b6a719e6395614706f238b344e36681ba9526e7918b0be0c1ac11bfd601d30c67bab9cd755329ac2192e122ad35033f2a53d4ad964a4f97c5d3eb29a59d5bb4486a9575228e527432c1b9aee6a9a7d1c7d2cdb0674d80d41d227294f4e592fa5f1d547d5f75cb1603b6a3a148148766729ff4b2c04bd204431d5519bb48dc029dc5a38fd3ff16ccb1eb772b44380cf7d7662e90b981a967e6d5c8324936630cbcd37f95023dcce950335725384cec5d3eab9542bbbed5212e08970601ad99547a4b1d5b45c7c608f522d94b1f2877b085327a8b8f2fa8e853a0501e3838677437d0a3cb66a9c326abd6cda2a011124a3d5f5124387de9a43447dfe063ec1d59c77a3d7740c470258d3b19258924ec46cdc0ebe4f1e372ebde5f00664093aee3d9415fb51fe99a03d460a0b799cbf4956f3a1e97a60e6fe4788d691ad6fba99569320cc348dd4532eda2da82976f754cfaae0589f347faeb9d1e8c0deb87fc805ea348d7e372648580a63bbdb47a743dd5364056e7dda8fe6dab2468d8b93da9caeab1e1a0cb8b1989bfc1c3119d06eeb3976f990c09f38c2748f0edb2e5bc0e8f01158aceadaaa00b724592af2c7d49690366782a07266f2a47402ac79f27a66f1532fedd3ad6cfc22b5f9310b3a514f0080b55e290a2422ed48d392c018b49a104ac4d54830f4817985da92b4364fc949ba681808edab5717bce93de77b5c3d7092b1722f6e84f47c1317a9297bccdfb697289a0eb83959103b97af69e495376e88f6c74181d2d6ef6e9c736b87656a9384d12d0988f263591fdff7a8256c9ab991cffd1e266fa83397cdc3a96bd5ecb6d7f3c972e9d126b68e7c9c3ff2d94647af0a881d2ce98029911b75df3f628f8db8da4bbd74c07b00e54d616562637e58d000ac567147f21fbf9b19292665a159ad982f1bd6dc922d27973aa1cde62c19f3181d0b8452f6f45687f20c71a819199ee6bb07503ef7a90d69aa7923ccec459278bd66b97d038bf666f026f170926efdd86b8759bb1b3b4900ddf669a6691e04019ec01b4dacb6d3e1fdac14b5387e250d136064a10c8791b3b7281223445e473a12eb3f74719e72e5a8a0e9cb46de1c18cede12323c083aecd7f271cf8eda8e7049096f1cc8ee3e3f9b1206ca93169da2a81ffc6270e9fb26ed26e4488e558c809a7698b1163cc8d2484bf59181404fb3e1b7f9433c9be040d93baf8c84dee24a99972a939945b6c2316a00e17613d2719e6367d561dc7cfa94eb4c36aeb15a6cdb2e86fa2024bab378b3702c8e1b9f240bf3d0254e23df1ce18f057f71f85a5a5b4905d39d8827fb10f9ca1a08268e8279c25c106814103187002eaa09885c982748c0334c71fbebd4518ba270456a790ffca731479989e24aace54942ba141d7de22f8b03ff9710e9fce312b82562877ab68c6de221ddc02ac6e12f6798b1d8f56a293bb80af9385fa9926b8ed8e5e06e03041e94464266d7f6ef016093163f79a65bcbd30f3f5c24eafa37430e3e3c56f0871a8f8e6abdedc8ece94b80925fe36be508a136afa47c604eea1347ae39826b66cd29999744916a551b9850e83f1d9278f0252f1ddbd30f4011d00a71e2a06b3a440afb49715a95bde92d2419c5c6511ed23d6adcd2860671051c0527dede3b06a778d5c71d87b9998617602c4179bc8f9d5cc8f5589ecb5417812c2ac8de722d1a5afff4dffa3aa2f20d4a6ba42c1c3f218945bab656dbeae0492e5968aa8ba12e09f3524ba67a8602db8fdd66cd48120cddfbda15745051578f5fc50d2456fbc6b3016bec36c5a22782f411f7b4f9e1fa100538f62d39462e2320624cdf59a591b6ac3ec4f1831df7da8986dd67fcbeccc7db07f873ee5c4f97cfe2735dab58a3e59348cb1b95b640cc98c48fec3f0482a430b15417bea9f2b526f48e582d4df4ec157625c08fa8abdf400f1d81293988cd1f1e1e9af55779873f2aeb9e335b9985f20297910e1f4e42fc9be4151840c173be84214d19e2a2e02dd8b1514cd28365bd89e591ddaa06d02ef104e248e3cf19f6033722481c86c23b77495c0db932e1f508b5e9705e91f17195c83f1f4a51417fa9dcfe574a89881612528281d3cf49f5d9baf7b66a24401ad0b0e96aac1fdf23c7e14151787d7dc414fa5b6a7eaddb862d3d7c51f9ef8beeab0c62b9f3b0bfaaee78f01b6b4cf7bfb9220bfd07d1ec7982e615fcf58b1c80f2154fe100f0cd3dad6936d5f8372b9ce1591256b16da5cd07cff5e309d540b8d8f0406a44cd3de34957be798b3f7f4cc3090502bc6ce3d7b314ac3b5e07da63e939cfe13f9a97779a6bb1f22386825755fefed842c50f02d46ec8f7e99b736e78d4a9378e941784d6a404b7fcda2691a00807f8f2e83d42538653b6c1d3126a4bd494c0e625d41d5136ee123064963e8a8f9b9ab171b9508907a118666047716b2997ac7d8464199e9c866632d8dcfe8c5f7c2c00b1feda3ec492fd8d0e1d9ae8c8f107e29cd1a2de72f730cd0066344eb67970f240d86c500a7df2482c8d68e36704abc81e3b8314db565a3f73ab02c986c883d416cc2756d555f69a2fb5ed8af9e8c0418316364818cc435e7b3700b5b27bcab0f34f982163d95105204fefecb202b76c80a983174aadc20a0a2dbf52ac9aa2240f38a2400ef7d888b071b7f8cd91ffcb7778ff7ba72ef883d8d0904ad06584b697394ebd6f390a709581e3fd64e1d68f9c715b8a88f044487dff225f5a97a770bd2b830c9678eb961838d8f8663b82703d5dabc09a9e150edb8f3538d7022ee071813fb059e65366a1f14183a6d49f136a8b5a9e9a16713c21cf6981a8cf029d105c7ac6e889814c87c5e539e8877443d47d245636cbcf4bc94b3804ada0629f5be3d98cfbdccd356c2462965020ff38169809903670ea3ede49e3006399e1f6c7b44a1ca9a09de83a471d3a180dc9d2461ed3b54728550336b51dacc0f780d8f0ceb3261dee58f70240ebbbdef4e215cdcc041f7bcf21818a9bc1eb402a90725a4739b96b3d459e429d82019f1e63e0165b62c82fdb84a64f679d92604475267aec7be5871ecd1f5ce140864c5ddc8bc36aa783740430472de204080cd23f9992c9f0400d3e71287630bf8f7a923029ee4e880570faa20160c71efdd8ea0cea170540962914afad43c066251d33ca5d1357cbf7bc438f3d65747f5077f6d6d312772e83957e3844077d1bccb4c709dcd490d3755024f07bfd23e3ffd10b39d063b8e4c8de195b0c23dbf387871e6e344f7eacab3527589758692ecc1942f4a5e903ef2a29c6069e2741ab9913347ee70607435ca34e1abf53ff8c779d90b6d6f92e38e56cacbfe07dc1b95afb726e1760009a14334f85af78967d1c87e738cb3645ef5a09da83341a9592a92d9b2e66a92eb22380cd1ee6c86e4756e57fdea211e6cf6d88e53661c16006ba01b42d28279efe8b29e9432f9202728c60b6ffe7f58ba0bdb75d6685db1fb0dc26ce68f3c88f1e651c16db4ca544df4e875272676704cc64d20ac1d3171f7b708e3b07b464a2689240f0328211fda96189b053dde99c937973c364e34ffd6e6ccff7788041c2627ca0f8a28ee4dfe2d584c0b8dfff4930abc3604d07751494469822fde32931f81ee399a3f22fa50bd2c6e4cbbc63d29abf670a25a003678a81f08e46c9fb75cc909eb0a901daf1ef1d5a3da94ef376f8a5c3d339f0c4529d97d600893c96c40448057c43e80100559c3e79976864df0af034fd5fd162cd72beee3c2233716d0a017d9682b286a59a456c87df4c4bfc0dc0f6c38c8d07eb9fa937d6e6491829df6a5b3106747931741edf83fa97ac948f469da6d11211556a8e235aa6d4378b630ed2b6a1ae2cb8bbe3b840c0aa9567ce898a54fcc55f849a686a2590334a351e44473f7f15ac3ea56196a731961974fe5c9282ee0e428c61666d83d211b713f39aa9fe1d15d4a151f8f30ed073865076fbbc53d5dd0e0bbb081147090de9018699a3e6098f6f5f35021844c64af4d5f3637da1b6986214ea0d775fbebee9d362f699d88a3129baec019604831442e503d783e13270388be0ae87f898da5bef6dea3f0ec4c0ed6ee2bdfb8064e24dc80d8f8015d4ebc5da498defa56861a13b6e9afb51e260b62a362851a5ba84d2246e0c110e5842602116a623f052d64f1790e95cddde4a3b5b12bdae3d4331076fa2062080bcd9ac165c2282f5307d4e61fd452bd5e333e71c6d9bd93d88fc641ebe151295ae888085fe66279f38ada9a79a430a29bfa381f4678b36045bb136258d8fe8319f87440e4e9744b66540ef1af14214eea93a3b2d768c35dc0afd187da24917bd0f66dc0f0e667c84a607a720534c1df1f74ecad7f500f5966ffdd06c5dfdd3325ca194efb51b13667e8c48f5726ab5af261623dd7eda727563bd6447aea7f9f34112c978de48fb70ce26c7bf2a5ec524180848cf1e6ca18ac423aa12d85e6aeecac362db71c188934d2c2814cecf957d9dd9a88acf8750623388d10195821cce7c094c57b24de9e657c9630722cb38ca4d1f3f9176b81320476ba4ba536d28f7d56d6d9b0f55714286567e77000364f082233faae31f973253a72241a886a60a9475c7eb621e1747a84cba12e154be08c2b9f7225c8260ae075d948bed65a12d6f6567ec19e8f0250e5a325e8bcfed7383d9da57710ce157162b99355ef810874bafd405639076b7ae404fc70913d7206198ca1b60abf812c5e126af0a350f51de24e4444d407d1fe1c7ff0d2208ccfca215bf596436721b2e2f6d1e8e27f40e15f2057a139da450da3c62dac2042393c31c41f1d0b8ef83c5e2904c226ea57b513d1005bd270545303b380acf4afac10a325b4f7bd8fcae1ea5b50229477a348af747216464639274588c64e4711e30c568396c7b2180a5b2617be444b5cd46cd175bc4eb379b3cbb4254fd4b3f2bf9cb4c48f8707206da57ee5e182370fa17ccc68da1914f7c351d71d8fa6969c73ad8a3b17358a8352047dab36086c46bd0d4fc7ba77d01c0b97677c47262f039740b56c22b9a97fadaee054f78d0a91b8f1f7b28c7e5d4a69dbadeebbf3f1f4148500905504a3f138b00c5d75565675b7486bee3a09d5c2298f7058af763c669ca0f4b523291ef059a4c32b0dd4886c973d8e5d8ce8c67823155942d14448420c2c7e06d4992ec2e0485d9495de86d9fa0950d6561445e3c928baa2571d378fe9b1d1c6d9af01e9cee1eee82fd195dcbdef6a28d49ec74ddea3a4288694e9ca3ed8436afd5b755affe5f796b3a61b71b42da6b56b9d2b6dc87961ac5d37e864b472372c50dbcc8ff1f6b59f0f9b03e13f3544bc7fc83599e630c49071f1a68884b86f3d0dde4c8be8cfc68f4cdbddcf1e6deedd6de74180a288dccccd463f273583a80627dadcbd40ee437f89ab325f7d6b62e7ff6be1c31f6d71bb13a057841c7be8bd2453122a4f0609d7206c235b032d00e257888c88e68d6ab5dc2f4740e701291f5019c329d0e1fda532bce028dca52ce6dff4887fc64e2d7f0bfc76f5838eb1351b02b7c578407c452843bb7947c8335c080dd0d76c81fa9b20b240159aa63546ca9a464aaa26eb049a3573fde60603516a48e2be60dfe9e582d4f017887119f59a5125cf279be8e7c9c6c3365cce04e4fd78a420107cbd676c88d352e769b0c6667c418594a754e3e04f435c3c378b4ff7cca35d41af999edf8fb17703f740c88e041b03ea24179ac1103a055e8c476a0d477ba076c9ccc16bf103034edb550c47cb6eb298ac7821adf83b5e0e59f47a1b95d9580ace51009492393ed9577043f6f9fc3157aa11d092a09b33dcfad46cee0985f542af44ebcc70a542c6c4dc57e5a0dee7da518dcac766e7ba33fffae784c6d4e5b3beb465ca0e2b83fe076fddb9f363e1577d3e663addedcd39e0ae259bd3347c02a17e59c3c167831aa4eab027c593a15d751176a02d2713780bc0d844592802a3fb75e6da5734d3c6c232c0cef4b6c3c3b3708d2c6c93fe0249dbdb60f617347619d6a9a019c12ec4f7f24ed5f9d3af5b58746e788c5c8bae4c6e7c019f99dc494a25eb894c2c3c4bbd73eda715c653d7897c9031955b71e4b40b326a582d68f7f6c7c5aac72a2952471adbe5bf3e16756d359bb8ebb0ff154862939e71d0511f24c4ef2f7b186efb3c4bf963a7a968931a68f9b7d2296b76e322ab4fcef59ffb2f252d33e5a22a24803419343f4c6e27cff39f31a65c7d9a8ca419c8c7597f3b26ef155d3908ce2f60b8757e5da613db262dc6d0c003c93c9fe6c1fa36cf6bd283d2a48ab6f5d7b9030acc078aa8a6eb9df42cc57eb2633051b14079a434362758d0396b2d5df0c947514723df818d5eecaae6d8f3b5f7fa1c3c7f904f796043806dd32dfb4a799ad630308d14a5779bc6e3dcf4fa1663f9233f5b2643eff37d08b30f18560569875c6bc3e8649262d3bb9453d0e2a492a4513ce5849f945c9f15b459fb50e80cb787bb9518aa809497cb2856326052a5e0660c681e6db8421e70a9dfdca0f16d64c1f1c94a7f54a4f3255e0857c22a670f3a114601f8ce5e98f8d979b86126ae78f7c295f380d8397a8a0246d8ffe63525689a4cdf66783683018fbbc41fb86a20a407c53ac6c9d10a2d12f97b7d49835f78d7eb3f82e0ee133309d7bcaed96ee5e9d57f28ccaf483dd432d8b271ce9d67d7c661b0eb7a0fc96cca53d652f8e1050535801b3d2a193a1df3504c597a6b286dc121ac4ba1fb223deae8ccb0df496f6d420f229ae10f2f643b00ce3b57915d58793270c4f5b1fd02d6dc89ad06b977b38d84002a2d8d0827fb6ed62b80ef935d7937f817f6335452ccb9a63ca87504a4f349c30e693c4dcce166f5eb349197fb5a7b73bbe448d6886e831e25322d59057de35583328cee224e5411e47892d67024aa412b7b2565a6dd33250eb68a5ce9d3c6ba89c2c98071c53d0352129e88f04ef796f1bcae260f76a7ff745b680ea40881772a64aa5b07bf6a8f2b2b1b0d7226004ca81b02274d32ce78687f3e77f33f1f992b9930974e3665d957e875f9f9023f14c00062842ebfe62af147f804acdccf4bd413bcb1147d8972b51b9f745077e215af4201a8a86ddcd7a10636369b5366d3a4e85adbf3a5dbed32bd5a39095a06440854a7355e64d48c564d86035ead7b6ed54a935f04984bfdec0a0f4d6b191e65df1aa2d42298e7addc20f9918a9b94ade400a02213bf1774f719aa694ef0a9303cc567d61761caa924cebbb0bc98bf6a5577b2fb72850390b356409866e900b10941e8640f9007154ec8698a33014615d7624014e2d514ce9301385abf77d8c154e6b833822a50c84182fe41378e0896554eae0bfe66a5de287bf0394ceb91600dede8f30ea704718716f2b3ae21794d942f6075e04a65e2e4f936c4ba5f9a93bed38f57515846c9815b10ff60c20d68fe64d6936254454f3594fd0fb94d5faa0c6beae75a14f4c47a5f8ccbdc3c56e9525e405034d1ea90c4ff213728d3aa676058c2ce5009df7b46793c4fcc769ce1f468b5dc0459a91f601d9b8d1411447a7212fac72eba1f4e630641f9ced7fd1d5d0e1dde8ca3873381c5b30f5223fb8977c1a6b48c06bc0196b0d388abf12dc7e6a2a3684c86cac2302e3288b134809b832fdb4230caee3c8215a5dde9423bf13017b610bdd3898ca954f7e11e1b56c9f96819d034a35ee3e89c5404b0286ec16584c78e492571d75e7c4408bcaa9b502f2e3ef0684faf6940276681784248e487d7b49f15cec7d6a61189807f5f2cf66b8ef46715cb8d3bc1fe975537360ba351001fd55343c364c5b704e8aaa83f0171e4d8dc2dd660bb8382175406251be511b80286370d5211a5e023492ac98338acefd5089eacb1a235678eead4e8e64df966516f7043caa6c77d7874dc031a4b5d69bfd5069208b4c21ce8f3b768c4cb3fefc1961d0452c6f363d128d94177263432aa179f02142379160ccffbbba1100124d7d5e5c23accaef1aa416e849991305ffcad494d9deea748dba8b08a14fda2a7a1be92d9178e0a69fdd390961598a234939c39a863f19eaea97b191a45678a88c70a44db0dde67e9e55cd0bb803108ae60a19aaf1ac517b8368e307c7cae84ed41d4f5dddc73bfd62f5ba02044d15fda1d361d71e87f0599c1b4e53f17459c8a5ef53cdb4a37f1145f14ddb0bb5bedb3303b0a48edc0e74f111f52f030167207e89a9f1c8fd4c22e5f47cdceceb4b715408fc77bd12921c3f639f7ee226586a5a09685b176de8aa479918669998c67282612de26a9c0e63efc56a6740d96ff11648288a2af60086ec019b73609edc4445620da39e34ce60f5745bea29a878be5efeafc4b7c412a17aac600dd913e09aa220370578e07ea4849c5124bb8a087d10186686868c873e870b10ba1bb0a212c7d8a4f835cd1fc9eec9d778185ba0524b6a7af6a48ef82bcb91793999e7c8665f01ce452c4ba28513b3eecf241aea63c63a418e407fbda75523ebb37857b6b5daf1d94547562f083a06d2e21e05b2f7ba634ee9fee481b9905206bf78ca6efd8e8762c38a35372b902fb99a8607136bd66376aa59b91e0611955700dd95dd07802b250d8474e940cd770066a007b3c9000ef306130a824400e0813eadd5b27129019cec3d6ece5a2681291d02448a9fe7329daca1537b865a9589766e0292d99c2dcf828479b27e7abec122ac68f282f9b604039927e8d35e2b093a027709ba23f00fb37b59b4770df39891381daeddb7ca84cd023684fce4ff7d0ce231e0178e2b85f9f883cdbca1348ad6861d1135662abf6c6b7289a59ac0969e34f7ed22f302db0725405acc51a41f2a1fbec183c9d5435d2f3bbce2d0a7aa5cc097fd994c73903925967a149c0c696446d6bf84eb22b1d34de8d5c58d233765f40e57ee13a8065e140a391dc8915e7af1a2244219fe86d277eba08bebf203144777fdfad0b9c08e1c840268a859f5fc02d2690e78ab0baf68989cb4b83af6b0fb066824fb0d92707bacb8e6242a3b98ca3498e41ad00944be9af4712d06c543c86b837c40582501cf998b911ba65b3b6c084368c63555fdd71c9389cf5a5f3694e3aad3de9c5cca87042338aee5f09025b90714db5b1c6365ceeccf008c89ce14fe962e4a08d318e89e43ae36ad6d2c6042aee6b8dc0c55a37a8b596d2e0d37442f2e41e10573f80ef8202fe86640873cdee6c614839500fecc2e09dd726352aea84ad0f13ab640ebfcc5e49c11fa2fe4d67fba465d88e48195e0d8238a2c22d57aca982572c938a8dab1439cc52a7a2a99a7b42be61b557b3fb5c993c17dd11379d74c3d3ec26d311a5629694a581f1551fa7c9764befdcbc45aed6ebefebf50738e8b0a1d90d53a381d01a098f0cd4b615739aa2a536e70fa5c2414f96df3d9169b0ec0dff6bf1bccf5d32625d0c004fc24dfa09d74c718b7f3d81ea5e3d83654d8bf7d48472c36cc0debb3ffad4fffcdbe12a20aeb9449012ba98bbfeceff36e090a4696c26833f2244d2861c9b284f8298827af713eda811b6fddb0989f50579cdcf37e5b893ca7da0a8579363b92cac99cc0b9342a8d6900c712c6dc4ad94966aad5b8ef7110b942d0ed8a3ffd1b383806e86fcb9f054102040a0e9cff5109ee0544d63877c9afeeaedc7e4db6702a8333176cbd683605aaa24cbb90b4c34ede28485606a20d65a931bc4d90f1316b14a4458e4f3c0e6aa7db5220a3436703e26f0e7ac51e56c92cde51d4f3a3e585fb78a8b7e99065cb9b08590450e7619ad5465088218783f4ec1656850bdf1076c367cbddbdc6df9fd13d32e48ca7da167177aee80b9a0f13990f22d1476e4a62b43966f9bea4595849efab329abb464adb3b39c6b69fb29e9872772c77f3eb297b55aae48f3e6b7deb491b48682b2cddf182d27a089cb1b80461940d1f0a5a324f6d411134e339ee01c3fc46bc3909b220af1be4d34971e9898b01353890207037e8bf1d07ecf006f5c5a4872b6389e1d691a5ccb133a8670ea4d0d9358d5a677517dbc4dc83eb90ef02d666eccce5f25932934becf9879f5328a8aaf18b5c5a13e5742a1e41fddc401c964a1f10c5ac977b6b9f3080a6cfff9f1c141ae6fbb443aee1122b8b764561e44a0297d76d4c6d40307c92202d9e02250bc6977f3ed30daefc82e553d24645d854b6b61a20a50d8830638d3d4412b9686b8464e00fe3ce87639646edc29ea7cdd27b6edbae845f932758c7fe674b8a4b659603dd4e08f2c3fbbda539bf52f71c8924b57dccc56667fc52808f26feeb116a949944827981352f057216d8436d2408addf1c7ea943f2339244984097d5cf6d66122656dfd3b8ccdc487a9fee8bcce3c3df3734036aedbcf8b470a301d75ac5f383746691f95920097e1163f47ff2fc39e5c21f855465ef3afee48fe417ec96b2af9e87f9c713c09d7d087094cad396a420e3c67fc3c32b1505cb0f4ede9b2e6a8eb0ecab4376d8e68755ec670b3ef83a44e0f38399a0cdf01ffadc9e2a02d78dbdc023e60378533839b26dbc8f4fdef3c2ec50b38e2c958bbe718ec8e21b66e4f17b5eecd305badc2b0fb7e637304c19e505e5ce4e820eee0de9077483eadf24ccba8293453df1ab60cd7a505728e372713a8e372f799e2142c408de05cbe39997f5b34d535c78272163438c6ab1317c139a0ecfa434d20cf553fd29163e003a66d8ff3356968a829920453f041fb03db395d8f9be93e2196d2b6bfcd186ea41143e2053eba0c5abbde5381f06193e209ae898642dc32f4c93ef223ffb8cdac31e65579e1feab92fe56165bf0763e7d442d2610faf6038fa03a7e43809f3b8a23372b798b9a152f6b8bdafd3a202cb2d32ecab061854c4b4e0da968accdf815bf85337161b1e14979981d3ff7a5be29457aff4dd0dff14276a8b41d849bc6d414d97289c3a4737d74414b922f7a547ab15188ccbea0fce4072603d5a062e8c74a6cfa5f1dba93451141cc4fe3a7421b3a1800699b36bf9b8edafbe8ce91abe5a89116eac0e7256df912f323c3b6fe9754394b13e3d47cf725feabf98f84989c3f20204df67b056171eabeef22f02bc40f1c0d1fb79931094be7bc0732990bfb317fc65daf47224ee73965bb57219201cac2a70b55844a88565aeb011252bd87ea34d0c42565bb4b77471c30f396249ed5336984cef0e2f9f2204c4516d81b0da52e1cbe919a30afacf3bdda3526b57899156898832b6a358df3ded991b74b62d675e01cf2d4e905ac33b69709e4b427ca6de3f8c3407b70b9e8be08406bd73a36783b7c6ddc48b1a5e31ddf020727f9082f6be2ced406d978e7f6f92884f31277dfd600f2d8e29cd2932dfba23e63dadc4926aa982aa4f44eead2a53bc8d8df8e946666f7e20312efc2528d63e189262eb64981217cd7fb08b7317b5f1d0a02583c26a2021a6f8081ad7433724a364c3b2094a06b471e63d9672a7877b81d349859c7a8560a47bbf96224627ab362e2e26b79d182ab8d7f361fafc125265c2eedb67e7a51e3df8daf932ba170570e0e6c6aab6a06750cb31517b45293b059923547bcb4a5d461b61ec3d423d0101b750d24ae52cb64cbb5d49e87b6c723f5c40c5a62f51eda114a60cdbb8fab568d1465cebcaf1682e356b866b5f132b42c8ccbdd68d6ad36d67e5b1150283b6fb3288c0fda8b87bfc2e31dcc0bdff8025b84ffb575be7023f8b104061506b9016c929777bafdc42ffa16394a1f2669443cd9bb988011204b86fb03702e62fd114a5c1c0ac6fa8819746634d931c22a72194b7c4576fb6d854438abf9301aee9159c77b247fc36b211b716c5755c2f0806e89dedfd43bb5b72ff2fef7081d20aa2f500743d546bded75674d7b00ac70fc2ee45bf3d3210eedeed7ddf14d371d51e05a9c85152a193af50e4543a0c7dfb0f8fcdd1dcfc799a461089c546c306b6ba631567af1cf89cee965e5fda95722b69e233d93b3e1bc8aecd6b0c83ee09289a35e39849c5be2207eb9689a8accfc508fc4835b48b6bcd4a920df52c9a59326b115b9d798706a27a6f1c49def5355b6a05850dffedd66cf88c1a336dc933552d0b8a97a6749c75f6de6401556425c2526b12d8659a3ed407d89d2e5d20a2af37a8331b70b4ea4f6a1cf3069932a60bfd3c09aef87f50d8f8de22f4355978b9193a41f0905d73dd633392db9b711feca8998abf9369adbb682ecfc1681f4d4f20b75955b8d9f911d0874c38519e44b55bc979340c7152e9d91c65872b91c923797389db0966658a9d8ee41cfcc454cb2531b41b41cb20939cedd199548c3ea5c26ce4f9a1b30273f8b3925d48662969fab8742694302bb8071ca6988a5dc90e4984d8bd1aa38b202ecc8331ad00f8e81815465b942bd497f52734a85e8e69ef2c62218b6b923994973d39ed7b03ea6dd95762416c9c6b198015c4b17a8010ae8c69ceb46c0eca3a8354ad3f0860e3d37cc7b50457dbe42f0ec8e3a72a53ee73179f1bbf74ee460673559ecfaa3cf29ae3ff05b407e1915f70f6e7f51220fb5a1448da898900fc0bc6033e3b817574fa36be46a8f6df04290fe67fe79ff10bd8ef22442bb4024112dbc7bb5555bce663b02169edfa46459503e7408397c16c5f0998bf578296835f93b884efc3e7df7cf3dfbdf133abb945163942ed6b765270769f5378e43a2a1a03d2caca45d1a8e8676222688e6cfe38f88db17a2cf06bdf7dd129045f30074757d5623d910782f9958f80b81a03761ee3141c72bb858374b05a7e587aafab1274c3af4a4415f03fd7d1fc08e8473ffa4e581aa67d6848d185589327120aa8e8c272df6b93491cbf7c04c6b044c37ed27f0804603e0ce42314634461e2d1fe186458c8567b9e1dd8971273403af4608f7e96aeb7bd6654b82751e7c97e36f15c039cc0893c6d7d2f214ce5034ca03a957013a3f8d6109dc6fc2539197568796980f7b63d12bb075890f0d5c9053c7c6cf7fc7ec638741ace30b7819d7b7d19e989e54aa2d3f01437834e5236c34c2d62851e38420ff39e1dbc5e9b136e69202ef732c4fa7590aff15ab2deded352ba289f9414f5dbb9f307a6622c0ac19bbab567a2ffef4ea0459226042627f9083c50fbb4b2c98429c9ae87602305243132c3d08eb08997a436c01cd87e99aaae0f992c772a3d5c119ccea967d2c1ed2a13707bf7154e5d83607aec4cf8249cf3afa07e5f794f09b577bbb0e2150e45027065bc1c6c15fb2eddb517ac3ecf6f8868c2860d98fd865ca6262f261726b8fa055cfdcdf8bd959dda5207895d4d41ccfb685469de212583ab92d194748005bf6e06d335ff052b4738c856f5d9d949aa8a286f8825adc917d5934fd762c260ac0cd275d8c59c15462841659a9eb7d95cc54dfe0ebaeb4a3d3b11e25ad9f4c6f0c89f72f1edbf04556b9d0377b82e435904673bd77f4963fe18e7631562dea664bfc2ab381edd034f8ae0fbe52a0d369eb02f07a95718b32c1386ed52f47324a1ccdd5e8d0e84ffdef3a175644e71da17da6f7d0de0bf2d94a2dea93d0f0f200eec301dda0bfe3d92224a43bb1b06bb318b6fa546e1f9851b83f4bfb39b8be33351110f924bc6cc1e693ea453bcffc4076309c0b9093ec1918ea8413b92380442a3ffc1c57b8c929ab7c64567de62fa9ada15a0760a8b89ac7bc122dad57da352947620b96867a54e4c1b64768bf8aa6bee9b775879ad7168b774589df0ca18e60fbe09cbb4ba5eb1fb57c862d08e2cceb4c9c63933cffd0ad4eeb3d95b2656cbcc3bc1237b651fb206f3526775588719bd11927ee3d31b41a02a57693f07bb297877e1799d52f61212313ff24841e4017da6548d4d0d89de9c047fb454cc9d54378cd771f5d6e7e5655e22b18ebd15809a91d5c2e7aa2ab86b09564f2dd500a7059c67a4e331331cc2300b5fb839369d983bf35f3012844e0cc0aa098d4e1c9e3b64fa256c33ae0b3e8182f6d79665788b09f0e508f9acd9cac692c20de8d90b5a5c8d04b1f095d83ed1e7ef475a63c3bd4f09c569184aedb819d56efd8c5b3eb5b1c56f4a4e6d6faf003eb6e1c24aeeb87430ab8ff919c71195a191e822b490b6dea73697fb3ccf85eb203d1b0d09775e7c8cebb1c51117aafe596f435dc62653833bf9e74f0de76bf0c770c463d6b39a88b34d4fb9638b23d68fcdb09619a5b799ddb9fdefa35c8b596b437f0f9704e9b22aaff31e0892a689a1768d25fe169d6b9b27ee5a6229db6b73ab0bbfd6bed9c6e24c8a5ff4d73297227222fc17087a0101351c7573ed2dae4921116d49bffb7a21a262fabc4ddf056237c2ebe46814769a92abd1d4c91b5a4ff371496b479d57473168b993ad78cc46f555621e94e0bec94efd6a9e2311a71aba2437e9bfab3d01abfe88401a7f71607258caf01c4ad2f9f98f39febd98cc95599537a9cd4192fd39a114dccbddc536bac097e6192345ca4b1efb3bb273a5f3db84d858b070e331d719f4f99d318b59bb36df3312f2c30da16ba08a22a96e4d6bd6d7a6593735b3fdc65e8cc268c7d032791637206c6b0a5f55fe70665b392d6f3d98dfab5d68ba30e18a7aff7fe6e6b80a97d9665e2261200128b521f0a82dfbf8820f2fcb8d9f7b6e76ec16c86b1b858457b7d20919be0e9abf4b8fb4452c8533ca16653f16232d12718a9ec309a3dac28912794fdc664a2489dd1f218508b944113e6ea18109ad86dec06be17dc209fa3b917fddb1fc837193a469949337bf0bbd79134a4ecb3e194795a5639664810b853248913a75181a16ae911080913e57d849a7f572358522db673b4cc6813695a14e101310e54691e801f9772b122a38999423b112d655c5d74cc6c0b321659dbd337e1af8a44200b878ffa768c149555d5451067189cd5f98fad7a1a82cb8026d3ee038b75448879e0e992244c0e58ece898730ddc13695f0d55dd6eb7db16f6b7b56b6956f1f96420402c62d5771699aa4bdeea44630e53028f17c55321737aa4fe032fb7f9e94b93a73760d46b041fbae29e75581e179e6b71e169031c358614b4d5bcf97aed168c70a35bd474029576d5c84e247cca6b7944295e3de26c52cf5da4cf9fed57c114c05f8a1464e2c0a8e714bcba19962ededc9b99ed2822739994455c2ba55c8dd9385b869387e07ba0b9438a78e66511d6ab78be7aa549840ece3865538b0d6526c40dbf7c8b632c2f924aae4cf0dd9b400d62cd1b8fc41d2398bf0c7db8989f36cebfe9e30ea8ca1d1bfe55572a2c82298ef38b327ca7ab87a63ea5632cb087322d01b7be8ac9474bfc87b08c205846d66776911995e4fd8b75457dbe6ffe6883669885ed458df6c3c1f114bf71f4085b52230cf0931c6d67e8b8e32350e3447374ab4973b05664fd334dbf0dc679078ae405c6b551569e83df0157016d8d75e0bbee884372f4a13ad9f7e8e31024d5e39a3208fea2a1ba37193d39effe8aa6e53606de06f1fb34acff6c155b69232e06d486dbfd8ea91394fbff634ec68188773ad6e32f7a2c8342b465884bc00afec6340dad1b73883fa4ce609e447291b61ba7c6b80358cb7b272e759e5466fc7520533e46eea756fd3888a7bf8987629fb4504ae3d350bd5fb0490b3df878e0069a5ab8472a4256dc3cc70c5367b902715a2a8d3747b07bc30455acac703d991443db6cb019e89cca960adc3ab009b31366200787c98e390f1ec42b140b1edb657bb30cea552d05ab6004d5d56823adb6d08b790013474aaeca4a0560963cc242b984d4cd9e13b94841ba5ae947741c71f65c3b7e2b09d5d1a9dcfd5c5ce23a471915cf359ffc21f714b1fee4b443ecb0fe24d19ce59179304e322dd01c0a3309037d8438b545ebb4b89cb8a9101897b5c219c6b7c7d2d1e9b5d9094571a9298e3bd6b8eed6d1c37bdbb145852067c04b412e1d6b2425438fd182c7ad2ebf30a18ddcb6a02e1327b9bc41a4b30bddb6b5fa09943eff824e69700d2f6b0ce6686898210f7037c47d3b641a0a2a5b7f71aeedc8ba3e830012ee8f63fb6b8b7580e27e70284577034ecb68bf911a072361269ebb7b83fcbeb33ca134f0392a3019444d8720188129e8f53fb9a09d2c09d0b3b3735df6e2bbd4c97e7f1761143aee7a5eae2fdf30ac987a6e7e96babb5d72f3dbe48daea546f689176279bbb7fbcac423f89d69cda8e6950acfeea5ee72cc1d91fe77a5dc62398964877d44fdbe2a367a4b68c254d164bd396412ad5bd6edf6f324c5d6901a931a73cc5f7775d0ef8cc23ba62849a36ca4cc366da402acc31662dbf89f14793e38bd1deb3c663adc5b13acb6b30105675f358878b2310f24ac018ce099b59a02b74ea8517d6831a9f7e1685e8cf540c41189ee40223d4d84bb93f9de93bbfc234bbbe7947cb4d0ea8c29d63ef78bc1839ee4d3408eae5c04da990797f86563e38c5e9e866fd04fa3a6d2421e23a6439c2afbb08831ea55d63b91daeb2d393d4de3004a319a0b2349c1aadf21e2c6dedebcdce6c05bfe62ec2ff3ec8d26b5d38876c874cab47b1d27689b264bd99176f10df86d6f72443a6ae1d1ddba7fe53ba30ab2a692c80c8d8a1957f4390fc7c9c083b4e06d978c497503652588e98b35a58eff1a2d77bb6b35c7f9fe8591b283e32e1004a1cd1c7bce9e029d7ea22b9afb11e2333703b31b8d7f6ec1c6cd12219557a98e2e40b49e2bc5e03746dd045a710094f061b25be4438ce945c42e3ca73771fb924e93b43820e677fdc562ea33ecc962b6248e7a89979910e9ad717e8b355d5a5431065188d43cf0877530bbcf5ed1d7d0f57fdd95bd214d1b735e482f14c76a8157e2c71136d7f14a91c314265978bbf1d93e8c3009ca6eccdeb2886872bd0d8c0fd6037e7b0a10a559c66acc10be7d38d9226edb5f4d6090d29958f703661d4f7a45ea4634af69bddb4ab0c1288bfa8c27d1ddef29237d7fe326680170645520e9d18ff9e910012387db07d7ae71c4274d2fb505218be5966dc2138588a579f798a8b6a8203941e25761fdfb5f0cb8b1082cd567c2a6801d544d64b7b90094526efcd496176e9a471047f55469765e20ef5fe63bb02a9810d89fc09807cdc1bfbc2f3b468117665326b56fb5ecefa4cf28b712e5922309aa81eb4672f9eb9b4b698493575fbab10254e28e4bbe4fe30fa641ce3f97727f8b483881d2cfc131ce1165005b2536c6189bc066b705b1023c150a4df2c0fb46335f3f2dc77857adee27d842d8ff080a46600c60b980d4c1c1b115eb67c491f8cdef3dd9780a9b463d92184c4c549e362384822280794b2f33ab418d7c0ec88824257e8667d0a0bf6726811d1562740d5843f0e51137ec8c616279b1a7a5f47a07740cf86a9a85ca7d62c810d2cdf50763d30803180318b8140580af93f9aef2f47fda58c0531f9a8edfb0937069604acfba5bea2ba8d7714c1e2b2fd18025355f0c77b16680abd70678f419f47237daeb81c6d4048bbfe155be252e29891f0b87213c66add3f4878e92f0b8ee895a304a831189e98829357114392ead54b0656e557bd522035c329caac1b17ff261e5cdd0c115562825ba7abb4772e521160e69e743d4875fded59907238e9e81bf05996e271064d3c66de809d90f88a5df604780f95aecc17f24b318d275ceefc1ef15f0daf5b5fba369f73bd639769c975989346cec57e9bfee09168a5abcc8e49d8caf205b3b74d83a0c0058d305e45b063eff8d745d66da9310eb7596aaba5e119ec220c62086f353b89c556aa633381053ff929d8f18835fe803f7b0dd2e7809320f8495a30ebb0102ba0415087d8457408204e2c995bc91a6bbb70c061e1a883c9eafb50ef0ca1560e3c826575cf32c6d05864219abd84d3b60980de5a5c228c33e2981d01329eacda2a34208433b45fcd252c05f7257c388d887c8b0611851cc0858f6e343832183bd6800e3225578c214376da168030339737b3e05ce0b47bd9d6d93462e8982cdaebe426c2265027843048d7157b47817accd06c89fc08436ae9bce453fa45327fccf3bc391d215ccd001107af0781b97fe12673c6ecce076f2e295a737410c411b2249d8ab01c111921199d586364284e8a6bf72662aa9880eb4a09627019c93f1a77ec9b665aafb140bf6d0cef56ce52eab8308816498787e36a1b93b72d0eaef659ecbd409199a304fe8295772521aaf9dcefd8ba4bccd22e29d9ab7cfb477cd54ca0fd1ff0d96342b35842ba9060b9864f469e9501f12fb489a6ee0e4d147b7b633385337f86de11a56597e39aa5acc716bda03bb8badaa9478c595107e4ed1dadf25c54ff7d62e80ded63a18e75b59b88edcff84ebbaf2585401a5e8faced913080a549f86baf1f619781b77ef3da15019a78b9edc13b5204f7c5e68e45dbbb1e1c114ed291e4fbb1a178de1ec67ddc7b915d5799c26a90ffc58b30288c4c140dbbdc0a36c19e190973a9489caa74e764fa9ee7c2d5b561e23c8bc6b18bfbabe469056d497079d7c6349e76eb4e3fd2ce171d7f9d63292469ac06827d3b326f4277489d8586baaac667de1ec7d4ffd57cedf723d2db103b0bdefc3fcb12eecb141fd25dbd96d9636de64c775397e44300288aa98482fb1eec93a45d668052ce1b59eaa3f46cd5bf8ad6d2589cb1594c40f6c98f91235ac6ff015a575288cdf3606b65713809548a89d68f6ca1bb00ed8fc40df6a5739e6c120113a8d5e5d0c9dc63f4ff7a24c3893995eeda552b272f5b2596de17d4da1e7b67629723a7bedde16c103997c454d380540a649277e344d32300d1aecd0ad87bee10a46c0991534a651f3c251d694d34770c082214cefe264f57ec393a9e277ba5492df43768e1cb86ebf6bcd6bb842f2c231525e28cf8829f44418b0b04997e82a0abe36f2b177b188fb7213d17b02966a911363c7adf1e30d0851cca8ef34f3ef0a475b5d1437b27d62cb4787144c4f0a59342dede22d225339db57e5d3d25c9af9d6f7db04a11c1af0129cc6cc3ab69c4914d65bce94e690918edb3d6a487a5b19bd3afdce9a8773cedaff5728dbb3e5dfa85546f096c6f4a2ab963ce33d5a2a4b8b80e43786b3de63b86b5365d79a341875b7fcb9e9e6e40601f9ad907eceaee888abe81faa35c3920da18a6ef23531e9bcf8fbf282f58e3c3cf6a55f776693754a4f439c300be9a8aae785fd619187ead761623407ab6752cbd133f1e5e87a0b369ad4de761ad474e1255ed330eb184e93b1c742b8fe8ba12aecb4fe62b4a44dd6e385a128d8d6f671da75afdbef193d991d1ccb1026a7e8a57ba212d62d933880560759057b34bae612a74a05864be83bff24e16c7d190f969d763d6c647d33eb6a4641b9a7949827ab8aba99f36dbea2b935ac21193ed1f8219221314d8427964cc503fa420ff83278c1edc3ad319c7c61ec7f2521cd14391c7fa87ef396e275f999b72a894c8f30a8c3d0ef00b2d5a4d6a228862b7b4df63c36adeaf142e7a7bf2a7d934692dbedac7cbd66fda6e60689a9600b9370056784a1f83c29455234eba274746e40708568d6b85d649567985a2ca069e101eea66d7e605ab67cdadab0e3974c43fb9a73d7436e60a2104965dc1e69db87713843c5f95b5404819e7a49414fd632558e20dadc36424618abc5094bc0f77075333b6bc938cc1d3dfeb5b01b2adcd00beb06378bffcc75150320387e0cbff2cb7c1ce5f3992bc4980869254e6148bb91aad4561fa976a150d4f372fb5705be33b400b94040f721c866afeec75cb161a83529b287c899912d010ea091fdd35c1385dc6a9b44557be17776150f0662bec0d197206283cd02edb987d36ef9e663ae782d4e78a09f650e572ee9a87f727039303a3d23867b6fb7b8ac22e4e07ec40c7e5f373719fdd55b7732a04a6be620a5ceacef99cd5c5dd030188c292c5369517e157f09e0b88b3f62841126b6cbb636e640f6e0cf3ea2d7128721f2f7564af8ea15d34bdc97e19b2c5264cbfe2a1e6a6938e5deb7bcecc5023b6137a6fca1a2518a1a94f01893e6a735a3b47b7245a81dfaaec331c8939c95fa01f6360cb4aedc75230a0edf7b8d809c429cf1041658e9194e5e0b58f582ba7225bad0f677b91b03a6a46be49b4d4a2907f41fef0da6d0694de822c15879c79b7ce73416cdae2ef3275d263df9146e767a42b29d798cca9b3ed1dac01ce0ac0a339a89ccbe42a81fc4950e6c159dfa733aee46ee47f2237a405692c8023f276545dd8ed1e0304f31938147ccc832cfc4ce021f40fccdc922621a9d7baaf7fa59299f343c015b42109b0b4299e3e3929aca82f2986cd15cffba2432a0119944357d92cf0ea28bcccbb41ada5bc1dcdcbf7f6d691989685a30c9391e4df4cfa612922ff3e78bedc36d7b37ee31043c6837c3172e4834a4b4d12584af12502ab7e07c75dfb06cc5236dfa62ba174436b7faf6ba8bf37b8cd405c61dfa134257a06c6d0cbf1c08e2118279855778ca2d0e48a6b70ff3b64b9d83775c96f7daf1bc31a4d73b79cd9c0cda3b1d56d774a7e9a6bd9fc14ff0276ea847848cdb0b32fb02b4414c0357405aa35b9e5ab9d5647e2b8bba40acc47e324fb498b1442b55d2747a294ac5b56e00cd39f8a0a1fc8bfcda6bb023d96a9370d27d9fc60b69ebc3c47ab40f99e862c9eaf9d859698cf000ebdd93ff62c251297cf9eb8114a77b0b06ad3ad0f44454c797e850a30407de1328db930f4fd8d657bcabc8ac80aedfdb3ab100011c7f0caf6fe1aef2ba8fcce16e19ccb83de85b23ea6edbb083f2e706e0d2ca9b097fc822172c3588523e64df8dabc28f25464209c369bc2680b0c53ddf982c2715387adf89f111e3a30a7c81918dd0520817bb447c5dc0cc888c6e0a7c3c650876320690b431deffab99fb22d7f483007094ecb00480a952f77aa9bfb9f2a7b6b8127029ed2e7d6f93469ec9dd712ded4e178c878910806fb6ef862425ae41c1216aea020de360c69d13a6b7042de4dc7046782d55b06170dc232a6fbcf3f71ab63bb4f9a87df539c32d817006e9a8aa169fd163ad6480b63a07ca613a16c84fe5290d610d3a493eb0eae09386e4d4f9e2a575d1bc966b572819fe75affdd24834562592d10882b4d63599aefd3e03924174f92f124930e01bb116045072e29d8c043f59d5cd17125ff8421fdcd42a21ddb49e8e93cb2677fae9398bfb418b6d1326c32e36cbbb6565d19d49135b4bc64f4a19447647aaaf2ecf22b6b249fa221597560b62cccbf69712566b05c8b8f6f1f9d40747d9555486ed8150607993cf4e8e5002a5ef603cdde68da5412b4e1b16c580c82037d5939cc7346f4bc3e4a165876f88fa4b8bb3f6eed02a0d53d1ef306044f0b9d68a332703a9a4f5d2ab4d9e20ddc14584070735b22a9d10bea8ef858a6593a147924c4445e68df248ed8d6568f3549a31b9615e36222043b3cf6cc3816c6203d6b896c69abe855cb93321e522efc576ffee131e0d9896753a8c755e4c428f733deb8c3e69f38463c630a7d254d21af1787af7bd8026042e81cb5a877ec4f973deed084f883691bcb6bf67c2c94c4f17be787a6502e7b962ea41c6709931a587abafff30b954f7f60664f5bc5b9ef0309764ce42ba0cded814559638c9b2ad4600d1e54b100ba301dd0f5de60b886e1488eb26bff2d201f00e15389fd25874ab7d6493cc50eb474df1d1083441218c7af09312d52280b452aa330059bc069ca7b9c6bcb1b0bab2f57c72d31e5cebc285b7e83956898e29b309ca8a908ebbe51cb9fbd28d536426044ee1a8cd9ea64b03b66e1a0ab3c85abed870593ea1eace92ec1dbf2ec3c173e27c03ab007298289b97f92f2c20b46391df608a00b5fc7a9ee2beb0ff21f6fbd1fe087a76bdf4a83a8cf4c1885e19159a4e3b211b9d2326d76dd06fdefcc9f6ad428e47609e00698912b3a954c8c6d5a3b6cc541ff6bfdd0ad4fdb4253dfbd0f41692c8c20bc96fc96efb086ccdd9d651b110ce6beef02fe69a484919a17086eb67a199ca444221c157117091559cafb23a8eff7133b6446e24e2b09780544c91becb6d869f63148ff94ac1567a6e12d24087fb77152308e397a9470a2594473602062ffcc373aae4e22e99c7964f8353f7bf9e20b83e099334582086ca3a21b6827f65e7e5870c1d364528d9843d2a13a2f7d4c31e8e73347a5162d63f2e7dfaf848b6f32c578f422b23e8c43f69c591fd997fefeb93ff909a69ea19bd07116e964084ff3903012cc41a6216ee9b9fdbe40a299fa8f024b37a497cfc815cb4c88659daa26a0dab49fbbbbf9d5cc4bd1f0acf221b02c8cf41735aed3e0151ccefcf214bf05f7736f1ee546b620620e92debaeeabf87d45697554e57168fff693cea37a668f9afe44b62341ad148b6ce5de01c1751b1c30b04ae00e3a55b250b79fb6f6cb792f8ee32631e4f5ac5fcb1b88d2169065c3653974a07f5bf2353aa37f275a831330507f9ec2b1790234d85988cb354f9dacefa82d147d537eae24a1fd27c9dd714d32d9e6ef27e2bddff324f2da67854933f18c8ce1e8bc7f00d9ea9038a040ea80c95240987d6b960ad74b76524e87c2f14d84d91a13680cad0df889a1b2b29c8c851fd6f8c4373d2ae170accc57362d6b1d352d2374dbc90ccd1ddaef80a3eeaa32994514372f667836739e716f1fa0c8b804f87c2505d5f98dc898ce3293e48e79ffeb0e447838835e15e95646fa5eb2efcf7a5b1bef21e4a623981611de7ae995f61aab9ee9138c4753cafc98cc402fcc31f158f8ca7b9975c5afc2e313cf571baecaf7156af2974ffa4dc38ec6164edcb620217e35de93a0927a94e104aa9b8d39d9e0cfae89c784babf6c6fe19af53af05eed5b1c321e5150d86caa983448b640fa932a4dda68e4a882b6e53648c793c039048ed5da4efb524d8517d3a06323bcdb4aec775f120c33e459d29ac658ec759fafbd5f4e461ab5de5379e75379ce54a9a322d79020b1976eebd4bf54b671d65deb25c047cdc0d8876bd76801dfcbe198fa600b43e61d5b3bffe5b99bed250f5a3581bd8fa89cbb6bbe558875b74155730630366d7e62de1bc3cc8518b015ff1dec3870b53872ad7323681b0bc51ec6675c599057591c3e54f797c1743e84587207aa04e98ecc163dbbaf06ff10dc4585428af96b96c3ed1d3ff0d19e708a389bf8a2bbb6604c5ae58d4d5deb5a1994758e5c278fd39c16e169c36c7ae786a70ee955d3d7c13918124dc03834ee5c5ebf69a16a466729517427ad0c18606235529505c035dc60a539e1707a36d7f186d975eb5fd3abab816380fd71286ea0f214df554a60bfa0ff7996b1ece16b35672b8d7b23ad10c8f35cf0be7c014637148780878ceff05a3604c7ae33e47e7c09f1e48ce8305934d7ad8d31eea2215f1b63b00790a2ebdbeb104b028cb7a1a23b22e8c71cfffcc9cfe19cc3533f33f904f08871e6cfe409cda95c9ea9d3384d3f370cdf13d3c97283719900df2f9fba38650650009efd058cf66e9bdcbcd456982db5dfb147ede66e00a8bf6b8080c03f0c7308e06400b61c23650bd9fb8522a42562bcb0d8b237dbdbe426145e61dd37b86d0d080f0e82e41765a3d1f949140d60ed86073427d6af7ee38e82c4dfd9729087bc50f18d32be55b1d11772c5094444f6ba657065d2e3a2d57e1f3f59b3cc25fb02d87e36e2a662d3570690ed15687fb80bf835ba1d0686345d25fd9f515c8a190270c194b52262f68e94ed41210a633c428fcdfab7f29644a02ca47384af051ec086b3bca5816fa49d575842ff1a5ec3e8ee715dccdd631023fba61a0900e7290220723bc871c79825933b70e7654945ed7d04fd71ba3a988341ad5525e7c8fb372b091410e62556e84c1b22707350cf364681fccdfd87e514df168fe2086c324501e6346199bcd9ae891d30e47e1bb756dd84896e09fb332a9882e4f4b89d6a19e592140d6d7e18f48e5e64592d4e5b1e0664096beb1d3a8b1acd033efceb608fff7ad2ffa9bee75b9746c9730f61636f7aa85cedea891459dd99c60947c6425123b7e231cef32bb93d6c43ff47a31285db34764d0426de7ffd325295dc0b00a4498a97379dc6ffef22e49127be51046a24da41def43b43edcc6d1c6948ec546685d111ca52821adc51536c1d889be88396b3df0ed3fff365f4c141243353f5b3ef4b482757809a86340732977fbb9ff48815be66baaf57c314cc3805dc6766f49a340a011b798cdc847aec90edfed9cb3161d33db1ddd77b34533e7832abd187849e0eaf0b6a2aedbea2b0b64ed76b11b604be38fda8295cd6c5ba0a8c60b78fdfd4e777042c664baee18157c428ca3fa8deda88a2efbf1f27f8987f7f865ddf04163c880bedbc2a1832095049e79eff02f97c9ca1144637330612d8240381c651eb69c2af28a5fc515d1d7b29bdbf4bec5485984dbd1b341aeb93087c7244659f93cb5cd17fa2f246ef2e03d121d5b0e370fb13ef4a38fb59bf0e58263b2a6847e4b612efe4cbf4589781e9dcc9cfde800f723cd8a412780b8fda8b396760897826997be71ab8bc9eec3dc6ddcfb8b42f6cc1bd09726d6940ddeac05cad56950fe801693dbcff9ca36a18fd0fed6ed3fdcd7b9e4e04829a9f00f689e4cd40d09cb57b0058b456ad4c23834c0273e32a09b4682ff3010a413be2c2ac45acfdd1b8fee489345ae25bf6b3e2ce0019caa363e4a7a9416eb78bb4f4303ff3293e09a65febdcaac2d88e988ca655941d53c28e55d3b13268968f420365c9aea9785cb595d3c42758ee25e0a90473fe7aa24c5da4a40d9e3b699ef513eac7a831310ebc8c4d27ed8e38e2ac2d1d0b881edbe0a4977b5cca598b506e9a3bb35b9d277e9a8aa7a087165c5ecd2fd4ac04533257ab33fa3de1f30c7e660469a8521fe3009a98ded75e00fc56364248eccad9d4461dc8dc2ea7b73fe99fbd04e6dcf76acc3eab3a318188bb8bca815500ac38315ec78833e58d11f40974a55d19da5ee80ffe8cc97fc78845bb211c0e4d9a3b0ada58b812127f2d0bc0b1b8fb6730a6894f744cc7a69187794cfe0178c49b1077a35d65bde679e852ae6eb086431252a496ef3522ec9ca46c00c3b27a00a95faf92985238f0566bc8421ba9de37084a6263bab24efbfd9584266e6b3340085ac95b48d37fa8ca0dca2a0a175f6625aa543cad777bff610021d60bcbb9993ff0417d0cdb97638a468cf73def2d58a46a31b8d13e1cbf0beed946bcc3b3e5f80d7499a879d595546018a0d609f24dcdd1b5859459d1a5f6d4df7e10ddf7cb149530a3eab83d07079c299b8102fe955b73e59674a1a03af2b5e40b18b28c1b54e1ec5675c10e31de7cac1e992f4a6cd6a2623156dd4cff9e093a99713c375ac0c5d257a559f209469334948a4fee60ca7811b151ebd49a05eb7421f9051c7f7e8a22698c9b669ac50f395dad5b7791ce474de16e29ec2d557973709c94f98ff4407f3ce2c0a64b0417aed460011fb0897e6b7a6869c6c5b6940268c5c4f203b0e6b8c9ccab3515efbc515edf20e359e68e15338e960303342b65d72df337952eeb7140bc43acbc598695e1378dc039f907185881f5467ee994770e84be40d4630d6f97dd38ae12c634c01368e43f79c0352f5f64562e5d78227759170f14784719cc4b9137a9a1c9ae2fa1bdb7476ee353adfc1d9b7ff52ebbf0104f7598c51cb16692a3251fc46b088cd30b8e4feac211585d80af5e24af401ce739b602ab9aae62c0af2d9a38ab14f6e63f71abc52e98b678d1593e57c564881a5dd1c17928e09c2d019546325a17693afe9dd108b7329cfa224b18506297e7943e0c158e619e0c0f81f27dab721e780148db836f4fbcb6110a6c465ed2a137c641d75157f5f6691098994a221d1271ece4946e551b6621f6760f7c49e1a16da438d2561e365b11f966dd7a5bb54106232e447621adeb1e9f59b1d4a656b1ca1c90b20061ecc76f56ef024406cd603f1dc3a6f99a20d1fce273563157b1d6903dfa4230c51415577be3ab0054249d5ef6299ca713ac20636176e62b48c4b96741b15a5031c2effa302c939fa34a2db40a1492231a82cba922aee37a96a0de245383ba44b4a09f0e1fa9d771a509b7fbe17f12e406b24497eb676ebfe8bde3a9f1d935aff33c6985af98e7283b4001f606f6a456fe3282018e9741fad5da1105c6f36b275505d3e0315bcdd6e51e6808c79466a00522faa9cc23084da96e3271efbf82651e364566e2a423bb3f84c8aeb7cd47e678b589298ae61677313596f8ead93a9bc8233153cb45aa8b804c1e33f8578f32807826533027bb35e7b7d5769d0c7329da094ab9ce9fbadca81dc77ce2c996fe07c2451cd2dd9f3dc4ab68d69068da4b965cf44d402dfafdfe8f69a22137ae4dfa4ae51ab5b7914fc899fb0454dbbc175d73d11845621d00d5be2634f069db92b27261fbf17c0bb8e7040c4ee445b138018d6d6ba3e4b16507adff41eb1320a4cae4d2a1129a208a38d52c69540d75cff909da784cbf6ec7435de769e1171a24cac40fc4bbc97a654a1715a4b490cc0c2d22118a62e738df6e955f0ebfffa7aa52335d9c3120f2117c69a064cfb48704bba15b49c74f3c69ca762ac64bc576cfe7b3343cd15c85a2650b5fb0387ff0825697383fd2c7ba87d44884c15b717161e1304ba9641501aa01e5d982e08f6dad58cec6d498df2ddc75529d1bef16dbdd5159760371af257fd896cf67ccdf4b58cf3b50ce658b26eebd1001e0a753cd53f56f775dd2dae38ecb6e5f81a55a00983fc325280e368e8caa91ceebb0a99c9f1f8deee38923b0ca1e86c53240a06fd6d26a9fe58776d8ad4efbbb723e9ef9cff767bd0016d352f09a8dda935644cf2987c76637853a9b7d77dbbdbad8b5fe74ffdedff4696a81587fd8e2475034ac5ec993076ffa5cb022ffd72c4d07e8e3453aaec998f5fdb3aaca4f1041dec0be3099aa039479f4a62cea2369e1bd24d0c7684d1907e6ce690d26bd08afe262a39131eb39f21131f35a55c484ae1fb56d269afaf44ed6481bd27b5b23b06c4509906da401e1705ee0ecf529bfd78ba6123f5eb90fff2f1006c41aad5f191dbc2d1ccd166ef4d1528f50cb0c20eb90f5aa27d67ca9beb14141dca5dad36b4d056412c8fdf5fe00fc37b2802f5951dd43cbd63e866aa2239d6e750e12044a68b01547fdac3332645fec476315597977c777cc1fc95e40a180b3c482ce269aef41faca406f47c7239f851ff5d54a4a66e3e111ebdfcd7607dd6ea3daa73274671930c0d3aab02d82753360ad25a798f13f5d56fcb35f9a19d6513990fdded370988df29f1505575177aa817c254d6ac938dee6ccff87589c4d2dc61820650f25cc50b295b0afc7b7c2f6ed3b5c9af7b357e922245bf41c724cb271214d73620bfaa1d307c867800d932bfc97f7e0efa8b5a2170f328cb36beafc73e41895ed04285fdc1876e7d8327ee6a04ee39556287849b1d7573b27fbdd9e8c39ab8b322b173d384b259969ad6dd77b83e38c045faa04b67a2ae2b2d59bdf9c65c9859ec381615b54babd4a8d886c9a82958807d8dce2ad22ea647180989224f0a2cef32fc9074ef2e76193a99e94866811926530369ea7c95ea39420027fd22fc6a5eaf08940e0e3ca05823443007eb01c307630535be2c987476bcf007aa4c449475de4142d809a87366aa82cba6a598b731a4fc7c48970eb9ce1a98633981cb738ade47fa2591e8b1350a8ff60e267c466022c7ba167321cdd0f6891cb8b3a931429cbb67254164fb546a23902de834f60a8a9fbcaa86ff8fdfc53b2f2c74f416fe43e1691e33f712cbd68c28eb7a268b3d3d05988129562f950f63f77ea5f78e2e3f270ca5b6b98c40bf1dbe9ca1d4a70bbcca6f5fabf9b3833d09c5e4bcf106e1d5a1e9df328bb188d64b463f973bcbf1139e2e470919940aba1d30a3e2d0927b47b96713ce4750f01dd5e03a1db19edf81c2f645d5604dbf3992101bb415e9b55f4808c7d39b98cf46c288fc69d00f7d74305537df15225fcf92b54aa53d49d311962637262c0d9f303f3d54f8814e23719ed1a2de48794e738a29715a3930ab3fbc68260b585acd6956e04e43303f1771ea1036027430a9ec3e2edefbdb6b69025e94991c00978030777ef21a4dc417d86c71949a672a53eed4d331c66ed4b015fa10595391bf105e29ea9f5624d7f6036a2f16fd2e2f3e410e8bffe6e25ffe6a85e2bdc2bb9c655896c8477bd01a44c7063f2ba2526a321242c8dd51c606ff8cc183fb55c003b7a284f67ad019369ecee192f52a49a0573dc6eee09239d815f886b07011ccc33dc9b9cae12d6cd4cf673604d3cff9234a0a81e49bc41fa8e4b483f5b87795cb051cdf74e7fca2a5793cd077af31300602df6f78a25ac41f85fe6c6dffac5160c12a2c81c3580c08b3b123235453979e5ba11a21ea1b6afd9db49a4b68efb2be9524d67eac02955fea6c4691ddeff2938579b1f5c068f91fd29900e760070b9589d762a417528fdf6e7dec383e667cb94ff433305195ee950fe3d22e3e26a4f9f6bf3b927caf2b9e1d7c2887a07cf3587cb2d702b4e39b7313c6898fb6a4d3af93ac5ad26aa2f13e811b65663334a028c0547dc3968e459878d10976f69d9580c570b7a12ceb76194b43275209915ba5e4f02116ee9df0a46e84e1f1200b76dd61744fcc74c438b8af410192a73383654baa8868a6cd4c1f4293da2e8f202f45144a7233941be2d70da5d423adbef13f36d1508297181283d4dd6930ae3646bc6bf843d904fd891bf936ccca56b849951cf267b6d7f2d295b5494f1d586ad369c03f72bd620ab18f2dbc2aadc60297cab5ff356d076b13f683e37b5b128e99313e837f94184de094f7170378cbf321c83396a74f493bd594cb4499be4ee161171ab4759eccf0c7ca41c067ae90fa3a476e7c32e6592ad3c795364cd477381468d800eb88d9916536af65b78643372802146af693409079605a8bf211992b10e7ff36c4440a2e7646ffbf618cac455f0be1fe58ea51a8517ec924537768fdbd4c1d02eeffe5a5b6d7590acf1ebbfa9af09e08257be176f1b5f30e826ea949be69b6096a304fec49352ad3f0801766fcfe42c48ae8b9cb1b539a8954a80220b01f62630f5340db8b79e2eba0635242e842b3b58e81e5c3f44f91c3521a3d7165fabe7c0da537ca18e7552e022b63816265dbab0c5cf86af72160e44d962dc60c83c1077b8c4baebf57da9782148e01f487f66f21cf14eae2e48b59c5ec424c355dbb762461a1460c918deffaa9f65dcb379a0ebd86cf07669e6a8c0eb5f1bd5acf8cae4ae936e667f623b4d429ce817d7f3d89074df14b657b2ba03592436fca7af49e4c85654ad8330fbe1f7191818af9295ae78c31c879e0f2a511cc0bf8f90539727be764234c7df0c70fa09b34eb2203abf90c997547e1ee3e6444e3d2242ecb04d5794e2078ff97642c7f7edcddc867daefdffec99e2b7535cf19a9e1e745c661206eaf3fe02bb9e0def9d121905998a99c5341ebc1a3d2090d59f9666f3b1bd7f1e56ebd90836e74592fd121390e99670817b586b572e4ac53633872ed83dc37f44fd3d07d90cf67347b8f343acb53fa9de41e29a99c1660eea6e2a952c76f3aea8c20f4fd3721e0d9a6fb3deb2d5e84c991f0a29cedeed00b01bff10e789b7f4bd123e96bd3939b6a88b1407ea4b871231c51b48656536822f05c06a6367a4433d79f863adde84896edabc42d326fb5777a1e6db873ab0380b367ae9493b536e5cc920cdc7f6092df8c5fc29cbd54f9b12eb40b5dfce592fecd93643158da4db0eadd1502fad45077f6d92ab2d978da4839c765601fecedb9009e5deeff92c1978bb32f8b4327349e63ae1ab4de45a8b1ecd94a4d476ca66e5ea87805d8496b63757c34a72914301e5d1697e4996131a0edc228747e2fa2317eeb5f1989a787d748ec3f54de08f031a37c505abc3d78f64217e086e2aace31a368a39a01f3cf850e402c3b3fa49352703952e6455a59f92866f231c4fb5b8a9bd5ee4dba7e5c2e4e234fbdbde3bc5aebaaf009089f06a602f2bb01083e69a0cbf1947e82b0877bc8dbd0989012b49ec4e85a937c5730604a69e56b0629e52e7a2b00dbfe3a1c1f91987b6a790985421c972eab6e984e50d8ae211e4a9743ba2035420a442b0666aa62072cb385a597a4a742fd1bf524728448b8ee6af3df92ed1fc479c480783a2f9b65c6b3be90fcd88f7e56c70541ab27ee034020e2c9978380b67801c0cc3348bbfb7d6abfb4dade63dd90b640c46fe5ed56bda02857cfd466b38a5e99f44597b8edaedfe9e41e7688a21e4f1f4f9fa7adf843f011380fa657032faf89fbbe247011d307ba15103d3cc810ad877647af078ee021ca4395cb174df4cbc0b95524828d88b3d363a2bb69de5df91e1fbf2eb290004fa1fd778a8930da500a52a551bab7364763eb2c0bc822d7f9e540a51ca9cb9fff602738ba56a5ef481b21abfc31b628198b384456e942b810fab0b1695b5700dfac7a972ac1f452972f2e0cd1823741faaa44a1cd2a6c8e220c67a768dd3091afa148816b3d80f91a7fb08737f5c3c0684a41f318ac268d8ca9f627e8256f7cc304d2088c5b2103e415a8283e387e01900567ae5cc75f59bc50684d00c51801f14a3f22ffde633692a05b3e83b4c30da7d45bae19292d9d324a270bb47085df4e19c6a16d27175d4a6a095c5b2e50c20b495d536970ed739728cbf04f0076a1eaf4fb1c82626177a5c73802f53970707c3b3837fc13ebc5c21361cc1d2137563af4b93e4b6d52376fac553f28b10c7853c6b3011c5a094f45a55be11a7e4a51b0ec67658c70b6dd52d2c0d4133dc3ad86be7e612a3e20cf5566f750bdfb7ac16b8e1da4cf52dd8eec27d104844d031bdbc18db042b9213ec7dc4b99ff5ae7cab41e40926bbccb56f02effd13796bb91e6ec73b86ffe38e33a934dfccb96eefa5c9a90d778715f9491649c4845ff75691ffd9dfbb9268986e0b2b34309491a094d06f007e16ba7c614fd6ff7b9bbce87da2aedc3b42ae9b90c82d573dd93d57e4beda6cfac21f4e780592d5a627769168451281720a9adeef8dfeddd94a6dca093e6eb269b8f2e76c9852c7342661e240f9550d63dac76ee1aad648db6a36cbe2fc5b945a8cd19384df7324e5030bd355f528de7c8c209d81b0f3ae664c413735dc6e72ecbf1f513fe91aeb1a432e0726221cc202108df53376e55f5f1c75ab62cfa151e0ca7f6970bcf46728fd7484d7cf9eb2d4b604a7476823f02fd12b6b53f5105bc1c5ea33014361967ca63d4ffefc298b138ba38830a43634fe4b2b2d04ae6435c7fb468ac4b6f186aee48ff403cd3e8628d2a2d0d3e9f15fd5d4293663cf5b3cd04cdb004cd807f9c08904d53a1340a82447eb3a60ed02d5720c054cf29cf36bcb37578d488f5c5855e0cd3e767b8da75723b2990250df96f13e0b8bbb6ff779f375396215134f9e35d2ab2edae6b5ffc86ca19c3ae8704841bc83e8dbb8883c65125db91df4004bf4ff23bda0613c43623f4513dd04cfe9420b86276bf6ae020ec9d13bd89263a98cf8cc0e2e6ba4dbee4dcf63505c6365a6086517c8f5cf1e1aae42327be2aa6f5ece5574f7ca4c87ad4e175420bb66e2a9fdfb5f158f0219c90d5b7ff38d21515f7b25b888f297fcb0b0fcf32f351cae6b7ba663d01d475279f03221696a1e5e146ed72d749eed9fb7f5965e45f7117053b8dbc86d090cac540c66e24c13fe6ffa71fa10a88e3956a9363c8b91db46f5ad574d72d5a1b480de9d608fb8f0cbd767f3ed570c39c31c0459e732e784567e981f167008fa1f20618abb3c87254100b9160e45bb3b5276dbc3db91ff3249d0d79c2c958aa9e00e3d021da9e52f5d9f8c52f57a9ce9fb604b067978e6b95652e253fe176922e499d15be295f528e87b569b5139fbb277f1fbb50b72467a177f3a3ed6b7db8ee57598f0024874cee272dd00e202bb6524038a27382020e1b4e72a03c65fb5747c16b9482a74fdb01be089702b903d462910a120469c5c6b32672384400a6fdc2e659662efd2a621af4be354846009616bc925b0d4974ece937ea2d0dd344fe55361b10808ce973a173a2006bb14b8e31bea2cb4f3dc7270f8be63a9cf6eec3a8e28fa540d3ce2814c7ffe0768ab10e35fe20f72221b280b31ad2d67f792b67c0cbf3b6a4abf406d4b926151ef10396cf000961be450c48aef3369f7807ac4753e91492ab56b7cd64759284d4dd07fb83b7209c9aaf205e602e1e5dc97bc39ac84387ecdcb4b549da9c9af83181df9e613ea3ed9783d98265a2eb01ccc19c9f119008089b1a9af07a2fe06f1a73d720ee9737f6c2eefa2d7144b195190f888b51b12892b06e76aad614a24b4281d4b878142fe7148b47effa52e0b64d573f0fdacd0737dd0cf905be42057d54becc67d69012dce0c6454662a5e7c72b25af2ef7618c41fc1d999bbaabbd3b3331c7a405d80d04b1b7d548a7c9425b83688a36966976667a93a956a8bf16621fab0c7382bf22058a47e2cde9ae38ee52fdec586f774399bf85c16b1c10ddeca561442d8402619c6b9c8ff935a1a75f48857bba9b8c028c3697d2a0b55b9e5c636fe01a1b204141ed097f7ff18bf8414837a4edc78f27ca069be32ae30fe118846d07c604b3e5bee7e6507eff08276623aa60ca28b7ccd71f6f254b8119ba9f5f9343465a0dd4f75ccf845873031b1004b63c5f046ea3d2de931ce0f8c3ee2906c3d00a73fbaf1a031b89fe74d8d9c2128a4a3d8ccea74b2a24da2f16145faca429a4a07475e7028a99f8a3b5566591ba96b6cefb2b0978d40533d2b5867f96d28695b53414218300d75da8ae58e406f36c98a3df7631269a9e6469231d0a5d10bb252ca97755a14be8a7af0cc7e0dd4712b009a64a52e324f50d3199aafd3c1c8a97e9e78116f120ae650415032956326747aa6ebaf2b3b4d112250cfab5812bfc047776748c517feeecd04671b9a636f0c4bb102641784842b5aeabd724261d223f6ac9e43192eca73b43aad0ca42506958b807dc52214433888c8c2032d5eeb2603d915c0d5ab60cb3617cb9064c8f35ffbeef5030b1b41a1d7777055fc779398df57474454a2bd99a7a802f28e186e80cdec759ef830bd5ff82845ada095b69ca945746c4ff811ddc47ffa897dd06eeecd9e14639ff6ccd5b5aade984a06515f78736991e54f6d094bc6fc78b235a9498cdc4bbfa34fd72688086b62066103295dde8e4bdc7e2e69927010412822f39a2c35d3c2cdc490e5b6a6991eeb56c69b8645d777153b6743fbdc14cde34b0f9754d3c0069c27701c8d36af0028b181a119100c2e073c7c9b45cedd1d96192361bc71318f760056bb2c9519bae0e8ef32b6e0f58be7762815a84395164a5fae5cf57ad0773c9396fa73c99c3505e0d15d7be3741dcb2fe6d6741d203db4b2c595a37daf419586e134a641b0ae3e98b79806ef8c47bebcc44e2b44cb38cb837e9b02987b48d7aacc0349d0874a1dd982e1c492f4f32434965dfd1fba040f1c41633e4b75ed17c9cf0cd5f07abda4d16e219df9a76b33eb8be41cd337d28dd312a66cb82a9cca9663054afda7f17f6360b7740cfd07b622c3953885348d16b09986edb77011ad390e83f449ce356114ffa6908014d3b8c8db37b332090951111c88a3ecdb572b94abaf650aa73c29704377e3205629f4f7509c7df8aba83f174129d6ce4660552c339f9bb278b9418ab643152fea544356c57cd87b117792ddda40b50277782a9e4fd812bd75ea3fe247dc4b912bc8f137f5e008ef8f7c0212e9d4950a8a7f4d29531908b4fe60706d2389c0b2cd44e64c614d04bb9e2fca36c780fafad4d189c729f78b6c2c4089e8a0a64c8b3483bfb8d2a08e88c078a49055652090508678a1465d0c814d683744fd7593cc94a3a331dd5a7e71ae9f24df8be39e4d180251fba2aebbefd20e3c41ed3abe3d515af7c522cb22b1769a96383e9fcb6b22d49a2f34c03b54e6e43d4e10cd1cb41d77b360e6158c035abe5e7c6ede65691bbcec5729e14643e7e43023397cc807d8c5800216500e42795c565c96a52a5e0548dfae3ba2f0d38d853071d5b22bd1eaa4f222706570fd664f60efca95669a09379eac0ded103d8fde8fc740e1300a9af9aa7f89495be51ec126a0b3a02b1b19b6ab926ed23479e30340dbc846d87f783f300371f2efc7cf5c183ead3ce80d15e7112d803ae0165c8d8d6ffc9b430f02a4ab4d52a5265d743d3f82edfc61d69ef6927a80ed7b3b607f408bfa55dc92ad1a61755cc5e4e03a5c5a8f7bbee42f570b605a9d26ce958c7e4f0a04a98afee20cdf1eebfee05d9315be307e70dc53fcaa8b78b09631549969b46ad355fa0365f38a514a83fa8b493823c8a2a34b5a8fd22b54bda325f1d96ff6e39e17f1c2973abef71028481abc0c43ed676cabe699a1018db42e40af042f33bbc35c0ac0d724c15f2f6b037973bb8e1b12b69cbaee953287cba13798190c60dbecfffd44e8b4965727aa508142f33d8cc03c91ffb02e2dfb4cf4aae1bccd3fc67434cc9e61ef2f0f9f6dd7bcfea74297c7bf8dba5d876d1a62657dd6ab405460a48e0dead5c0586f36120a594fc6102733cce2dfaca4819c29783a9b22c1b1278a15bfa2a9fe8066ecd9ba3a383c94d5719740f927ce4acff1da7d0897adc7d2d951dde5dae31b7b0e83685940b4b59036d387cdd9865f29cdd01eac186ad7a75924b3c03ca89b5c89314731aeed3b91801f7f769db28ac05f79c92d1fb254e1a36459ee446f0761f41c96038e23e0478bbc7a9555af8cef64b6ea1f1d7a14524a172e03c7861bc58a0a6bcb72d170a0a904451cd23ed95fbda1c183b5e23937cd78b72fa810e785f54a953f977437c2126d64256ab59376fb9f1b57c58257620f79bdc9202413edc9ee9f0ba91f965a271a90877ef2767ee3f504beef25b65909094c26118c54a914071e3d29df647c1ef686e9a446689deadb6da56c7c3e1bbf04659c0b6374dd49622d25e86a670384383efc77e18bead04988f502e946fc033541f4dbb44122e582954937bc1099fed4876b943e49f5adfb00886069445775d93d336e93d9f462df141b8208b47b821910094997a1d5d3c234edaa7e9a39f76afca2cbdc557ff33c32800098538e81f84edc0108e37f5ab487ed1dcea4a87a61b2be8f4eb36c85b9fa02b4bd8dff6388e10a9885832e1db6c87cec37e75a88684cd2c0d698f9045e02728d22416c136bb95a241117db1d9eee82d2e3659e8ad56606b4712cda7db328bf2912a70ba4bb857d65be6ac99722263518d4dbc19283cb588f28e8a09bd00f183188982daaca29149957d9ff4307d6e3f263266a5096d9352716b8bd3086ee9e1127ac8a1be11c635660d13fd8c69fffbd54ce785f5908c3414786dd0a8d9755fce0aa02dcc9a1967193e0c3c199750d4e231b64720987eeac8c94dc9d04411e4f3299cbcd0a9ec98a01a51e7d4a72f406c0afdd26a7d4dcfe2d4919ab4a67169002</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码提示：圆周率的平方跟的自然对数的前六位</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
